
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-polydata-strips.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-load_create-polydata-strips.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-polydata-strips.py:


.. _strips_example:

Triangle Strips
~~~~~~~~~~~~~~~

This example shows how to build a simple :class:`pyvista.PolyData` using
triangle strips.

Triangle strips are a more efficient way of storing the connectivity of
adjacent triangles.

.. GENERATED FROM PYTHON SOURCE LINES 14-32

.. code-block:: default

    import numpy as np

    import pyvista as pv

    # Create an array of points
    points = np.array(
        [
            [1.0, 0.0, 0.0],
            [0.0, 0.0, 0.0],
            [1.0, 1.0, 0.0],
            [0.0, 1.0, 0.0],
            [1.0, 2.0, 0.0],
            [0.0, 2.0, 0.0],
            [1.0, 3.0, 0.0],
            [0.0, 3.0, 0.0],
        ]
    )








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Build the connectivity of the strips
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The first element is the number of points in the strip next three elements is the
initial triangle the rest of the points is where the strip extends to.

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: default

    strips = np.array([8, 0, 1, 2, 3, 4, 5, 6, 7])


    # build the mesh
    mesh = pv.PolyData(points, strips=strips)
    mesh







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1</td></tr>
    <tr><td>N Points</td><td>8</td></tr>
    <tr><td>N Strips</td><td>1</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 3.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-51

Plot the triangle strips
~~~~~~~~~~~~~~~~~~~~~~~~
Plot the ``PolyData`` and include the point labels using
:func:`add_point_labels() <pyvista.Plotter.add_point_labels>` so we can see how
the PolyData is constructed using triangle strips.

.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(mesh, show_edges=True)
    pl.add_point_labels(mesh.points, range(mesh.n_points))
    pl.camera_position = 'yx'
    pl.camera.zoom(1.2)
    pl.show()





.. image-sg:: /examples/00-load/images/sphx_glr_create-polydata-strips_001.png
   :alt: create polydata strips
   :srcset: /examples/00-load/images/sphx_glr_create-polydata-strips_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-65

Convert strips to triangles
~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can convert strips to triangle faces using :func:`triangulate
<pyvista.DataSetFilters.triangulate>`.

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default


    trimesh = mesh.triangulate()
    trimesh






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>6</td></tr>
    <tr><td>N Points</td><td>8</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 3.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-80

We can use this new :class:`pyvista.PolyData` to see how VTK represents
triangle strips as individual faces.

See how the faces array is much larger (~3x more) even for this basic example
even despite representing the same data.

.. note::
   The faces array from VTK always contains padding (the number of points in
   the face) for each face in the face array. This is the initial ``3`` in
   the following face array.

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: default


    faces = trimesh.faces.reshape(-1, 4)
    faces






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[3, 0, 1, 2],
           [3, 2, 1, 3],
           [3, 2, 3, 4],
           [3, 4, 3, 5],
           [3, 4, 5, 6],
           [3, 6, 5, 7]])



.. GENERATED FROM PYTHON SOURCE LINES 86-91

Convert triangles to strips
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Convert faces from a :class:`pyvista.PolyData` to strips using :func:`strip()
<pyvista.PolyDataFilters.strip>`. Here, for demonstration purposes we convert the
triangulated mesh back to a stripped mesh.

.. GENERATED FROM PYTHON SOURCE LINES 91-96

.. code-block:: default


    restripped = trimesh.strip()
    restripped







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1</td></tr>
    <tr><td>N Points</td><td>8</td></tr>
    <tr><td>N Strips</td><td>1</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 3.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 97-99

The output from the ``strip`` filter is, as expected, identical to the
original ``mesh``.

.. GENERATED FROM PYTHON SOURCE LINES 99-100

.. code-block:: default

    restripped == mesh




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.440 seconds)


.. _sphx_glr_download_examples_00-load_create-polydata-strips.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: create-polydata-strips.py <create-polydata-strips.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: create-polydata-strips.ipynb <create-polydata-strips.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
