
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-uniform-grid.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-load_create-uniform-grid.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-uniform-grid.py:


Creating a Uniform Grid
~~~~~~~~~~~~~~~~~~~~~~~

Create a simple uniform grid from a 3D NumPy array of values.

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: default


    import pyvista as pv
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 13-17

Take a 3D NumPy array of data values that holds some spatial data where each
axis corresponds to the XYZ cartesian axes. This example will create a
:class:`pyvista.UniformGrid` object that will hold the spatial reference for
a 3D grid which a 3D NumPy array of values can be plotted against.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

Create the 3D NumPy array of spatially referenced data.
This is spatially referenced such that the grid is 20 by 5 by 10
(nx by ny by nz)

.. GENERATED FROM PYTHON SOURCE LINES 22-43

.. code-block:: default

    values = np.linspace(0, 10, 1000).reshape((20, 5, 10))
    values.shape

    # Create the spatial reference
    grid = pv.UniformGrid()

    # Set the grid dimensions: shape + 1 because we want to inject our values on
    #   the CELL data
    grid.dimensions = np.array(values.shape) + 1

    # Edit the spatial reference
    grid.origin = (100, 33, 55.6)  # The bottom left corner of the data set
    grid.spacing = (1, 5, 2)  # These are the cell sizes along each axis

    # Add the data values to the cell data
    grid.cell_data["values"] = values.flatten(order="F")  # Flatten the array!

    # Now plot the grid!
    grid.plot(show_edges=True)





.. image-sg:: /examples/00-load/images/sphx_glr_create-uniform-grid_001.png
   :alt: create uniform grid
   :srcset: /examples/00-load/images/sphx_glr_create-uniform-grid_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-47

Don't like cell data? You could also add the NumPy array to the point data of
a :class:`pyvista.UniformGrid`. Take note of the subtle difference when
setting the grid dimensions upon initialization.

.. GENERATED FROM PYTHON SOURCE LINES 47-70

.. code-block:: default


    # Create the 3D NumPy array of spatially referenced data
    # This is spatially referenced such that the grid is 20 by 5 by 10
    #   (nx by ny by nz)
    values = np.linspace(0, 10, 1000).reshape((20, 5, 10))
    values.shape

    # Create the spatial reference
    grid = pv.UniformGrid()

    # Set the grid dimensions: shape because we want to inject our values on the
    #   POINT data
    grid.dimensions = values.shape

    # Edit the spatial reference
    grid.origin = (100, 33, 55.6)  # The bottom left corner of the data set
    grid.spacing = (1, 5, 2)  # These are the cell sizes along each axis

    # Add the data values to the cell data
    grid.point_data["values"] = values.flatten(order="F")  # Flatten the array!

    # Now plot the grid!
    grid.plot(show_edges=True)



.. image-sg:: /examples/00-load/images/sphx_glr_create-uniform-grid_002.png
   :alt: create uniform grid
   :srcset: /examples/00-load/images/sphx_glr_create-uniform-grid_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.056 seconds)


.. _sphx_glr_download_examples_00-load_create-uniform-grid.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: create-uniform-grid.py <create-uniform-grid.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: create-uniform-grid.ipynb <create-uniform-grid.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
