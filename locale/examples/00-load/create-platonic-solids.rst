
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-platonic-solids.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-load_create-platonic-solids.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-platonic-solids.py:


.. _platonic_example:

Platonic Solids
~~~~~~~~~~~~~~~

PyVista wraps the ``vtk.vtkPlatonicSolidSource`` filter as
:func:`pyvista.PlatonicSolid`.

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: default

    import numpy as np

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 16-28

We can either use the generic :func:`PlatonicSolid() <pyvista.PlatonicSolid>`
and specify the different kinds of solids to generate, or we can use the thin
wrappers:

    * :func:`pyvista.Tetrahedron`
    * :func:`pyvista.Octahedron`
    * :func:`pyvista.Dodecahedron`
    * :func:`pyvista.Icosahedron`
    * :func:`pyvista.Cube` (implemented via a different filter)

Let's generate all the Platonic solids, along with the :func:`teapotahedron
<pyvista.examples.downloads.download_teapot>`.

.. GENERATED FROM PYTHON SOURCE LINES 28-57

.. code-block:: default


    kinds = [
        'tetrahedron',
        'cube',
        'octahedron',
        'dodecahedron',
        'icosahedron',
    ]
    centers = [
        ( 0, 1, 0),
        ( 0, 0, 0),
        ( 0, 2, 0),
        (-1, 0, 0),
        (-1, 2, 0),
    ]

    solids = [
        pv.PlatonicSolid(kind, radius=0.4, center=center)
        for kind, center in zip(kinds, centers)
    ]

    # download and align teapotahedron
    teapot = examples.download_teapot()
    teapot.rotate_x(90)
    teapot.rotate_z(-45)
    teapot.scale(0.16)
    teapot.points += np.array([-1, 1, 0]) - teapot.center
    solids.append(teapot)








.. GENERATED FROM PYTHON SOURCE LINES 58-65

Now let's plot them all.

.. note::
   VTK has known issues when rendering shadows on certain window
   sizes.  Be prepared to experiment with the ``window_size``
   parameter.  An initial window size of ``(1000, 1000)`` seems to
   work well, which can be manually resized without issue.

.. GENERATED FROM PYTHON SOURCE LINES 65-78

.. code-block:: default



    p = pv.Plotter(window_size=[1000, 1000])
    for ind, solid in enumerate(solids):
        # only use smooth shading for the teapot
        smooth_shading = ind == len(solids) - 1
        p.add_mesh(solid, color='silver', smooth_shading=smooth_shading,
                   specular=1.0, specular_power=10)
    p.view_vector((5.0, 2, 3))
    p.add_floor('-z', lighting=True, color='tan', pad=1.0)
    p.enable_shadows()
    p.show()




.. image-sg:: /examples/00-load/images/sphx_glr_create-platonic-solids_001.png
   :alt: create platonic solids
   :srcset: /examples/00-load/images/sphx_glr_create-platonic-solids_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-81

The Platonic solids come with cell scalars that index each face of the
solids.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.458 seconds)


.. _sphx_glr_download_examples_00-load_create-platonic-solids.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: create-platonic-solids.py <create-platonic-solids.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: create-platonic-solids.ipynb <create-platonic-solids.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
