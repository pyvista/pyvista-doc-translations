
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-pointset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-load_create-pointset.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-pointset.py:


.. _create_pointset_example:

Create a PointSet
~~~~~~~~~~~~~~~~~

A :class:`pyvista.PointSet` is a concrete class representing a set of points
that specifies the interface for datasets that explicitly use "point" arrays to
represent geometry. This class is useful for improving the performance of
filters on point clouds.

This example shows the performance improvement when clipping using the
:func:`pyvista.DataSet.clip` filter on a :class:`pyvista.PointSet`.

.. GENERATED FROM PYTHON SOURCE LINES 16-28

.. code-block:: default

    import time

    import pyvista as pv
    from pyvista import examples

    lidar = examples.download_lidar()

    tstart = time.time()
    clipped = lidar.clip(origin=(0, 0, 1.76e3), normal=(0, 0, 1))
    t_elapsed = time.time() - tstart
    print(f"Time to clip with a PolyData {t_elapsed:.2f} seconds.")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time to clip with a PolyData 4.20 seconds.




.. GENERATED FROM PYTHON SOURCE LINES 29-30

Plot the clipped polydata

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    clipped.plot(show_scalar_bar=False)




.. image-sg:: /examples/00-load/images/sphx_glr_create-pointset_001.png
   :alt: create pointset
   :srcset: /examples/00-load/images/sphx_glr_create-pointset_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 33-35

Show the performance improvement when using a PointSet.
This is only available with VTK >= 9.1.0.

.. GENERATED FROM PYTHON SOURCE LINES 35-45

.. code-block:: default


    # pset = lidar.cast_to_pointset(deep=False)

    if pv.vtk_version_info >= (9, 1):
        lidar_pset = lidar.cast_to_pointset()
        tstart = time.time()
        clipped_pset = lidar_pset.clip(origin=(0, 0, 1.76e3), normal=(0, 0, 1))
        t_elapsed = time.time() - tstart
        print(f"Time to clip with a PointSet {t_elapsed:.2f} seconds.")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time to clip with a PointSet 0.16 seconds.




.. GENERATED FROM PYTHON SOURCE LINES 46-51

Plot the same dataset.

.. note::
   PyVista must still create an intermediate PolyData to be able to plot, so
   there is no performance improvement when using a :class:`pyvista.PointSet`

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default


    if pv.vtk_version_info >= (9, 1):
        clipped_pset.plot(show_scalar_bar=False)



.. image-sg:: /examples/00-load/images/sphx_glr_create-pointset_002.png
   :alt: create pointset
   :srcset: /examples/00-load/images/sphx_glr_create-pointset_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.565 seconds)


.. _sphx_glr_download_examples_00-load_create-pointset.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: create-pointset.py <create-pointset.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: create-pointset.ipynb <create-pointset.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
