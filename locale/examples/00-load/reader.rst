
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/reader.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-load_reader.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_reader.py:


.. _reader_example:

Load data using a Reader
~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 9-12

To have more control over reading data files, use a class based reader.
This class allows for more fine-grained control over reading datasets from
files.  See :func:`pyvista.get_reader` for a list of file types supported.

.. GENERATED FROM PYTHON SOURCE LINES 12-21

.. code-block:: default



    from tempfile import NamedTemporaryFile

    import numpy as np

    import pyvista
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 22-24

An XML PolyData file in ``.vtp`` format is created.  It will be saved in a
temporary file for this example.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default


    temp_file = NamedTemporaryFile('w', suffix=".vtp")
    temp_file.name





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '/tmp/tmpt_ngme6v.vtp'



.. GENERATED FROM PYTHON SOURCE LINES 29-31

:class:`pyvista.Sphere` already includes ``Normals`` point data.  Additionally
``height`` point data and ``id`` cell data is added.

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: default

    mesh = pyvista.Sphere()
    mesh['height'] = mesh.points[:, 1]
    mesh['id'] = np.arange(mesh.n_cells)
    mesh.save(temp_file.name)








.. GENERATED FROM PYTHON SOURCE LINES 37-39

:func:`pyvista.read` function reads all the data in the file. This provides
a quick and easy one-liner to read data from files.

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: default


    new_mesh = pyvista.read(temp_file.name)
    print(f"All arrays: {mesh.array_names}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    All arrays: ['height', 'Normals', 'id']




.. GENERATED FROM PYTHON SOURCE LINES 44-46

Using :func:`pyvista.get_reader` enables more fine-grained control of reading data
files. Reading in a ``.vtp``` file uses the :class:`pyvista.XMLPolyDataReader`.

.. GENERATED FROM PYTHON SOURCE LINES 46-51

.. code-block:: default


    reader = pyvista.get_reader(temp_file.name)
    reader
    # Alternative method: reader = pyvista.XMLPolyDataReader(temp_file.name)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    XMLPolyDataReader('/tmp/tmpt_ngme6v.vtp')



.. GENERATED FROM PYTHON SOURCE LINES 52-55

Some reader classes, including this one, offer the ability to inspect the
data file before loading all the data. For example, we can access the number
and names of point and cell arrays.

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: default


    print(f"Number of point arrays: {reader.number_point_arrays}")
    print(f"Available point data:   {reader.point_array_names}")
    print(f"Number of cell arrays:  {reader.number_cell_arrays}")
    print(f"Available cell data:    {reader.cell_array_names}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Number of point arrays: 2
    Available point data:   ['Normals', 'height']
    Number of cell arrays:  1
    Available cell data:    ['id']




.. GENERATED FROM PYTHON SOURCE LINES 62-66

We can select which data to read by selectively disabling or enabling
specific arrays or all arrays.  Here we disable all the cell arrays and
the ``Normals`` point array to leave only the ``height`` point array.  The data
is finally read into a pyvista object that only has the ``height`` point array.

.. GENERATED FROM PYTHON SOURCE LINES 66-74

.. code-block:: default


    reader.disable_all_cell_arrays()
    reader.disable_point_array('Normals')
    print(f"Point array status: {reader.all_point_arrays_status}")
    print(f"Cell array status:  {reader.all_cell_arrays_status}")
    reader_mesh = reader.read()
    print(f"Read arrays:        {reader_mesh.array_names}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Point array status: {'Normals': False, 'height': True}
    Cell array status:  {'id': False}
    Read arrays:        ['height']




.. GENERATED FROM PYTHON SOURCE LINES 75-76

We can reuse the reader object to choose different variables if needed.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default


    reader.enable_all_cell_arrays()
    reader_mesh_2 = reader.read()
    print(f"New read arrays: {reader_mesh_2.array_names}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    New read arrays: ['height', 'id']




.. GENERATED FROM PYTHON SOURCE LINES 82-86

Some Readers support setting different time points or iterations. In both
cases, this is done using the time point functionality. The NACA
dataset has two such points with density.  This dataset is in EnSight format,
which uses the :class:`pyvista.EnSightReader` class.

.. GENERATED FROM PYTHON SOURCE LINES 86-94

.. code-block:: default


    filename = examples.download_naca(load=False)
    reader = pyvista.get_reader(filename)
    time_values = reader.time_values
    print(reader)
    print(f"Available time points: {time_values}")
    print(f"Available point arrays: {reader.point_array_names}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    EnSightReader('/home/runner/.local/share/pyvista/examples/naca.bin.case')
    Available time points: [1.0, 3.0]
    Available point arrays: ['DENS']




.. GENERATED FROM PYTHON SOURCE LINES 95-100

First both time points are read in, and then the difference in density is
calculated and saved on the second mesh.  The read method of
:class:`pyvista.EnSightReader` returns a :class:`pyvista.MultiBlock` instance.
In this dataset, there are 3 blocks and the new scalar must be applied on each
block.

.. GENERATED FROM PYTHON SOURCE LINES 100-109

.. code-block:: default


    reader.set_active_time_value(time_values[0])
    mesh_0 = reader.read()
    reader.set_active_time_value(time_values[1])
    mesh_1 = reader.read()

    for block_0, block_1 in zip(mesh_0, mesh_1):
        block_1['DENS_DIFF'] = block_1['DENS'] - block_0['DENS']








.. GENERATED FROM PYTHON SOURCE LINES 110-112

The value of `DENS` is plotted on the left column for both time points, and
the difference on the right.

.. GENERATED FROM PYTHON SOURCE LINES 112-133

.. code-block:: default


    plotter = pyvista.Plotter(shape='2|1')

    plotter.subplot(0)
    plotter.add_mesh(mesh_0, scalars='DENS', show_scalar_bar=False)
    plotter.add_text(f"{time_values[0]}")

    plotter.subplot(1)
    plotter.add_mesh(mesh_1, scalars='DENS', show_scalar_bar=False)
    plotter.add_text(f"{time_values[1]}")

    # pyvista currently cannot plot the same mesh twice with different scalars
    plotter.subplot(2)
    plotter.add_mesh(mesh_1.copy(), scalars='DENS_DIFF', show_scalar_bar=False)
    plotter.add_text("DENS Difference")

    plotter.link_views()
    plotter.camera_position = ((0.5, 0, 8), (0.5, 0, 0), (0, 1, 0))

    plotter.show()




.. image-sg:: /examples/00-load/images/sphx_glr_reader_001.png
   :alt: reader
   :srcset: /examples/00-load/images/sphx_glr_reader_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-138

Reading time points or iterations can also be utilized to make a movie.
Compare to :ref:`gif_movie_example`, but here a set of files are read in
through a ParaView Data format file. This file format and reader also return a
:class:`pyvista.MultiBlock` mesh.

.. GENERATED FROM PYTHON SOURCE LINES 138-143

.. code-block:: default


    filename = examples.download_wavy(load=False)
    reader = pyvista.get_reader(filename)
    print(reader)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    PVDReader('/home/runner/.local/share/pyvista/examples/wavy/wavy.pvd')




.. GENERATED FROM PYTHON SOURCE LINES 144-147

For each time point, plot the mesh colored by the height.
Put iteration value in top left


.. GENERATED FROM PYTHON SOURCE LINES 147-161

.. code-block:: default


    plotter = pyvista.Plotter(notebook=False, off_screen=True)
    # Open a gif
    plotter.open_gif("wave_pvd.gif")

    for time_value in reader.time_values:
        reader.set_active_time_value(time_value)
        mesh = reader.read()[0]  # This dataset only has 1 block
        plotter.add_mesh(mesh, scalars='z', show_scalar_bar=False, lighting=False)
        plotter.add_text(f"Time: {time_value:.0f}", color="black")
        plotter.write_frame()
        plotter.clear()

    plotter.close()



.. image-sg:: /examples/00-load/images/sphx_glr_reader_002.png
   :alt: reader
   :srcset: /examples/00-load/images/sphx_glr_reader_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.451 seconds)


.. _sphx_glr_download_examples_00-load_reader.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: reader.py <reader.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: reader.ipynb <reader.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
