
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-poly.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-load_create-poly.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-poly.py:


.. _ref_create_poly:

Create PolyData
~~~~~~~~~~~~~~~

Creating a :class:`pyvista.PolyData` (surface mesh) from vertices and faces.

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: default


    import numpy as np

    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 16-20

A PolyData object can be created quickly from numpy arrays.  The vertex array
contains the locations of the points in the mesh and the face array contains
the number of points of each face and the indices of the vertices which
comprise that face.

.. GENERATED FROM PYTHON SOURCE LINES 20-45

.. code-block:: default


    # mesh points
    vertices = np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0.5, 0.5, -1]])

    # mesh faces
    faces = np.hstack(
        [
            [4, 0, 1, 2, 3],  # square
            [3, 0, 1, 4],  # triangle
            [3, 1, 2, 4],  # triangle
        ]
    )

    surf = pv.PolyData(vertices, faces)

    # plot each face with a different color
    surf.plot(
        scalars=np.arange(3),
        cpos=[-1, 1, 0.5],
        show_scalar_bar=False,
        show_edges=True,
        line_width=5,
    )





.. image-sg:: /examples/00-load/images/sphx_glr_create-poly_001.png
   :alt: create poly
   :srcset: /examples/00-load/images/sphx_glr_create-poly_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 46-53

Polygonal PolyData
~~~~~~~~~~~~~~~~~~
Create a three face polygonal mesh directly from points and faces.

.. note::
   It is generally more efficient to use a numpy array rather than stacking
   lists for large meshes.

.. GENERATED FROM PYTHON SOURCE LINES 53-81

.. code-block:: default


    points = np.array(
        [
            [0.0480, 0.0349, 0.9982],
            [0.0305, 0.0411, 0.9987],
            [0.0207, 0.0329, 0.9992],
            [0.0218, 0.0158, 0.9996],
            [0.0377, 0.0095, 0.9992],
            [0.0485, 0.0163, 0.9987],
            [0.0572, 0.0603, 0.9965],
            [0.0390, 0.0666, 0.9970],
            [0.0289, 0.0576, 0.9979],
            [0.0582, 0.0423, 0.9974],
            [0.0661, 0.0859, 0.9941],
            [0.0476, 0.0922, 0.9946],
            [0.0372, 0.0827, 0.9959],
            [0.0674, 0.0683, 0.9954],
        ],
    )


    face_a = [6, 0, 1, 2, 3, 4, 5]
    face_b = [6, 6, 7, 8, 1, 0, 9]
    face_c = [6, 10, 11, 12, 7, 6, 13]
    faces = np.concatenate((face_a, face_b, face_c))

    mesh = pv.PolyData(points, faces)
    mesh.plot(show_edges=True, line_width=5)



.. image-sg:: /examples/00-load/images/sphx_glr_create-poly_002.png
   :alt: create poly
   :srcset: /examples/00-load/images/sphx_glr_create-poly_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.279 seconds)


.. _sphx_glr_download_examples_00-load_create-poly.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: create-poly.py <create-poly.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: create-poly.ipynb <create-poly.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
