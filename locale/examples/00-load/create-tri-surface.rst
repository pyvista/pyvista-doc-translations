
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-tri-surface.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-load_create-tri-surface.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-tri-surface.py:


.. _triangulated_surface:

Create Triangulated Surface
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a surface from a set of points through a Delaunay triangulation.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    import numpy as np

    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 16-20

Simple Triangulations
+++++++++++++++++++++

First, create some points for the surface.

.. GENERATED FROM PYTHON SOURCE LINES 20-33

.. code-block:: default


    # Define a simple Gaussian surface
    n = 20
    x = np.linspace(-200, 200, num=n) + np.random.default_rng().uniform(-5, 5, size=n)
    y = np.linspace(-200, 200, num=n) + np.random.default_rng().uniform(-5, 5, size=n)
    xx, yy = np.meshgrid(x, y)
    A, b = 100, 100
    zz = A * np.exp(-0.5 * ((xx / b) ** 2.0 + (yy / b) ** 2.0))

    # Get the points as a 2D NumPy array (N by 3)
    points = np.c_[xx.reshape(-1), yy.reshape(-1), zz.reshape(-1)]
    points[0:5, :]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[-195.5526436 , -197.45221692,    2.10382994],
           [-175.52290569, -197.45221692,    3.05074788],
           [-157.17475875, -197.45221692,    4.13962849],
           [-140.42703946, -197.45221692,    5.31117779],
           [-118.54173213, -197.45221692,    7.05117433]])



.. GENERATED FROM PYTHON SOURCE LINES 34-36

Now use those points to create a point cloud PyVista data object. This will
be encompassed in a :class:`pyvista.PolyData` object.

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default


    # simply pass the numpy points to the PolyData constructor
    cloud = pv.PolyData(points)
    cloud.plot(point_size=15)








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/00-load/images/sphx_glr_create-tri-surface_001.png
        :alt: create tri surface
        :srcset: /examples/00-load/images/sphx_glr_create-tri-surface_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/00-load/images/sphx_glr_create-tri-surface_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 42-44

Now that we have a PyVista data structure of the points, we can perform a
triangulation to turn those boring discrete points into a connected surface.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default


    surf = cloud.delaunay_2d()
    surf.plot(show_edges=True)









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/00-load/images/sphx_glr_create-tri-surface_002.png
        :alt: create tri surface
        :srcset: /examples/00-load/images/sphx_glr_create-tri-surface_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/00-load/images/sphx_glr_create-tri-surface_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 50-53

Masked Triangulations
+++++++++++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 53-64

.. code-block:: default


    x = np.arange(10, dtype=float)
    xx, yy, zz = np.meshgrid(x, x, [0])
    points = np.column_stack((xx.ravel(order="F"), yy.ravel(order="F"), zz.ravel(order="F")))
    # Perturb the points
    points[:, 0] += np.random.default_rng().random(len(points)) * 0.3
    points[:, 1] += np.random.default_rng().random(len(points)) * 0.3
    # Create the point cloud mesh to triangulate from the coordinates
    cloud = pv.PolyData(points)
    cloud






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table style='width: 100%;'>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>100</td></tr>
    <tr><td>N Points</td><td>100</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>6.585e-02, 9.272e+00</td></tr>
    <tr><td>Y Bounds</td><td>7.016e-03, 9.295e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-66

Run the triangulation on these points

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: default

    surf = cloud.delaunay_2d()
    surf.plot(cpos="xy", show_edges=True)









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/00-load/images/sphx_glr_create-tri-surface_003.png
        :alt: create tri surface
        :srcset: /examples/00-load/images/sphx_glr_create-tri-surface_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/00-load/images/sphx_glr_create-tri-surface_003.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 71-73

Note that some of the outer edges are unconstrained and the triangulation
added unwanted triangles. We can mitigate that with the ``alpha`` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: default

    surf = cloud.delaunay_2d(alpha=1.0)
    surf.plot(cpos="xy", show_edges=True)









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/00-load/images/sphx_glr_create-tri-surface_004.png
        :alt: create tri surface
        :srcset: /examples/00-load/images/sphx_glr_create-tri-surface_004.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/00-load/images/sphx_glr_create-tri-surface_004.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 78-80

We could also add a polygon to ignore during the triangulation via the
``edge_source`` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 80-97

.. code-block:: default


    # Define a polygonal hole with a clockwise polygon
    ids = [22, 23, 24, 25, 35, 45, 44, 43, 42, 32]

    # Create a polydata to store the boundary
    polygon = pv.PolyData()
    # Make sure it has the same points as the mesh being triangulated
    polygon.points = points
    # But only has faces in regions to ignore
    polygon.faces = np.insert(ids, 0, len(ids))

    surf = cloud.delaunay_2d(alpha=1.0, edge_source=polygon)

    p = pv.Plotter()
    p.add_mesh(surf, show_edges=True)
    p.add_mesh(polygon, color="red", opacity=0.5)
    p.show(cpos="xy")







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/00-load/images/sphx_glr_create-tri-surface_005.png
        :alt: create tri surface
        :srcset: /examples/00-load/images/sphx_glr_create-tri-surface_005.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/00-load/images/sphx_glr_create-tri-surface_005.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.127 seconds)


.. _sphx_glr_download_examples_00-load_create-tri-surface.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: create-tri-surface.py <create-tri-surface.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: create-tri-surface.ipynb <create-tri-surface.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
