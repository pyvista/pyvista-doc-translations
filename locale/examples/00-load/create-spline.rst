
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-load/create-spline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-load_create-spline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-load_create-spline.py:


.. _ref_create_spline:

Creating a Spline
~~~~~~~~~~~~~~~~~

Create a spline/polyline from a numpy array of XYZ vertices

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2
    import pyvista as pv
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 16-17

Create a dataset to plot

.. GENERATED FROM PYTHON SOURCE LINES 17-30

.. code-block:: default


    def make_points():
        """Helper to make XYZ points"""
        theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)
        z = np.linspace(-2, 2, 100)
        r = z**2 + 1
        x = r * np.sin(theta)
        y = r * np.cos(theta)
        return np.column_stack((x, y, z))

    points = make_points()
    points[0:5, :]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[ 2.44929360e-15,  5.00000000e+00, -2.00000000e+00],
           [ 1.21556036e+00,  4.68488752e+00, -1.95959596e+00],
           [ 2.27700402e+00,  4.09249671e+00, -1.91919192e+00],
           [ 3.12595020e+00,  3.27840221e+00, -1.87878788e+00],
           [ 3.72150434e+00,  2.30906573e+00, -1.83838384e+00]])



.. GENERATED FROM PYTHON SOURCE LINES 31-34

Now let's make a function that can create line cells on a
:class:`pyvista.PolyData` mesh given that the points are in order for the
segments they make.

.. GENERATED FROM PYTHON SOURCE LINES 34-49

.. code-block:: default


    def lines_from_points(points):
        """Given an array of points, make a line set"""
        poly = pv.PolyData()
        poly.points = points
        cells = np.full((len(points)-1, 3), 2, dtype=np.int_)
        cells[:, 1] = np.arange(0, len(points)-1, dtype=np.int_)
        cells[:, 2] = np.arange(1, len(points), dtype=np.int_)
        poly.lines = cells
        return poly


    line = lines_from_points(points)
    line






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>99</td></tr>
    <tr><td>N Points</td><td>100</td></tr>
    <tr><td>X Bounds</td><td>-4.084e+00, 4.084e+00</td></tr>
    <tr><td>Y Bounds</td><td>-3.281e+00, 5.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: default

    line["scalars"] = np.arange(line.n_points)
    tube = line.tube(radius=0.1)
    tube.plot(smooth_shading=True)





.. image:: /examples/00-load/images/sphx_glr_create-spline_001.png
    :alt: create spline
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(14.087887028287454, 14.946060132268393, 14.087887028287454),
     (4.440892098500626e-16, 0.8581731039809382, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 56-58

That tube has sharp edges at each line segment. This can be mitigated by
creating a single PolyLine cell for all of the points

.. GENERATED FROM PYTHON SOURCE LINES 58-73

.. code-block:: default


    def polyline_from_points(points):
        poly = pv.PolyData()
        poly.points = points
        the_cell = np.arange(0, len(points), dtype=np.int_)
        the_cell = np.insert(the_cell, 0, len(points))
        poly.lines = the_cell
        return poly

    polyline = polyline_from_points(points)
    polyline["scalars"] = np.arange(polyline.n_points)
    tube = polyline.tube(radius=0.1)
    tube.plot(smooth_shading=True)





.. image:: /examples/00-load/images/sphx_glr_create-spline_002.png
    :alt: create spline
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(14.086813345437829, 14.944844858005826, 14.086377144241794),
     (0.00031734610427580634, 0.8583488586722716, -0.0001188550917605724),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 74-75

You could also interpolate those points onto a parametric spline

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: default


    # Create spline with 1000 interpolation points
    spline = pv.Spline(points, 1000)








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Plot spline as a tube

.. GENERATED FROM PYTHON SOURCE LINES 81-87

.. code-block:: default


    # add scalars to spline and plot it
    spline["scalars"] = np.arange(spline.n_points)
    tube = spline.tube(radius=0.1)
    tube.plot(smooth_shading=True)




.. image:: /examples/00-load/images/sphx_glr_create-spline_003.png
    :alt: create spline
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(14.115423714961896, 14.971821105327496, 14.114901935901532),
     (0.0003743171691894531, 0.85677170753479, -0.0001474618911743164),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 88-89

The spline can also be plotted as a plain line

.. GENERATED FROM PYTHON SOURCE LINES 89-97

.. code-block:: default


    # generate same spline with 400 interpolation points
    spline = pv.Spline(points, 400)

    # plot without scalars
    spline.plot(line_width=4, color="k")





.. image:: /examples/00-load/images/sphx_glr_create-spline_004.png
    :alt: create spline
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(13.745872971968165, 14.603470084623805, 13.745872971968165),
     (0.0, 0.8575971126556396, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 98-103

Ribbons
+++++++

Ayy of the lines from the examples above can be used to create ribbons.
Take a look at the :func:`pyvista.PolyDataFilters.ribbon` filter.

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: default


    ribbon = spline.compute_arc_length().ribbon(width=0.75, scalars='arc_length')
    ribbon.plot(color=True)



.. image:: /examples/00-load/images/sphx_glr_create-spline_005.png
    :alt: create spline
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(16.68578476672845, 17.41423101192193, 17.248056957776118),
     (0.07060718536376953, 0.799053430557251, 0.632879376411438),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.080 seconds)


.. _sphx_glr_download_examples_00-load_create-spline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: create-spline.py <create-spline.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: create-spline.ipynb <create-spline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
