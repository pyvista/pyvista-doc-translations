
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/volume.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_volume.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_volume.py:


.. _volume_rendering_example:

Volume Rendering
~~~~~~~~~~~~~~~~

Volume render uniform mesh types like :class:`pyvista.ImageData` or 3D
NumPy arrays.

This also explores how to extract a volume of interest (VOI) from a
:class:`pyvista.ImageData` using the
:func:`pyvista.ImageDataFilters.extract_subset` filter.

.. GENERATED FROM PYTHON SOURCE LINES 14-22

.. code-block:: default


    import pyvista as pv
    from pyvista import examples

    # Download a volumetric dataset
    vol = examples.download_knee_full()
    vol






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>ImageData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>10225800</td></tr>
    <tr><td>N Points</td><td>10368384</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.497e+02</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 1.786e+02</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 2.000e+02</td></tr>
    <tr><td>Dimensions</td><td>208, 248, 201</td></tr>
    <tr><td>Spacing</td><td>7.230e-01, 7.230e-01, 1.000e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>SLCImage</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.740e+02</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 24-27

Simple Volume Render
++++++++++++++++++++


.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: default


    # A nice camera position
    cpos = [(-381.74, -46.02, 216.54), (74.8305, 89.2905, 100.0), (0.23, 0.072, 0.97)]

    vol.plot(volume=True, cmap="bone", cpos=cpos)





.. image-sg:: /examples/02-plot/images/sphx_glr_volume_001.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 35-40

Opacity Mappings
++++++++++++++++

Or use the :func:`pyvista.Plotter.add_volume` method like below.
Note that here we use a non-default opacity mapping to a sigmoid:

.. GENERATED FROM PYTHON SOURCE LINES 40-46

.. code-block:: default


    pl = pv.Plotter()
    pl.add_volume(vol, cmap="bone", opacity="sigmoid")
    pl.camera_position = cpos
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_volume_002.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-48

You can also use a custom opacity mapping

.. GENERATED FROM PYTHON SOURCE LINES 48-55

.. code-block:: default

    opacity = [0, 0, 0, 0.1, 0.3, 0.6, 1]

    pl = pv.Plotter()
    pl.add_volume(vol, cmap="viridis", opacity=opacity)
    pl.camera_position = cpos
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_volume_003.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-58

We can also use a shading technique when volume rendering with the ``shade``
option

.. GENERATED FROM PYTHON SOURCE LINES 58-68

.. code-block:: default

    pl = pv.Plotter(shape=(1, 2))
    pl.add_volume(vol, cmap="viridis", opacity=opacity, shade=False)
    pl.add_text("No shading")
    pl.camera_position = cpos
    pl.subplot(0, 1)
    pl.add_volume(vol, cmap="viridis", opacity=opacity, shade=True)
    pl.add_text("Shading")
    pl.link_views()
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_volume_004.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-73

Cool Volume Examples
++++++++++++++++++++

Here are a few more cool volume rendering examples.

.. GENERATED FROM PYTHON SOURCE LINES 76-78

Head Dataset
""""""""""""

.. GENERATED FROM PYTHON SOURCE LINES 78-88

.. code-block:: default


    head = examples.download_head()

    pl = pv.Plotter()
    pl.add_volume(head, cmap="cool", opacity="sigmoid_6", show_scalar_bar=False)
    pl.camera_position = [(-228.0, -418.0, -158.0), (94.0, 122.0, 82.0), (-0.2, -0.3, 0.9)]
    pl.camera.zoom(1.5)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_volume_005.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 89-96

Bolt-Nut MultiBlock Dataset
"""""""""""""""""""""""""""
.. note::
   See how we set interpolation to ``'linear'`` here to smooth out scalars of
   each individual cell to make a more appealing plot. Two actor are returned
   by ``add_volume`` because ``bolt_nut`` is a :class:`pyvista.MultiBlock`
   dataset.

.. GENERATED FROM PYTHON SOURCE LINES 96-107

.. code-block:: default


    bolt_nut = examples.download_bolt_nut()

    pl = pv.Plotter()
    actors = pl.add_volume(bolt_nut, cmap="coolwarm", opacity="sigmoid_5", show_scalar_bar=False)
    actors[0].prop.interpolation_type = 'linear'
    actors[1].prop.interpolation_type = 'linear'
    pl.camera_position = [(127.4, -68.3, 88.2), (30.3, 54.3, 26.0), (-0.25, 0.28, 0.93)]
    cpos = pl.show(return_cpos=True)





.. image-sg:: /examples/02-plot/images/sphx_glr_volume_006.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 108-110

Frog Dataset
""""""""""""

.. GENERATED FROM PYTHON SOURCE LINES 110-120

.. code-block:: default


    frog = examples.download_frog()

    pl = pv.Plotter()
    pl.add_volume(frog, cmap="viridis", opacity="sigmoid_6", show_scalar_bar=False)
    pl.camera_position = [(929.0, 1067.0, -278.9), (249.5, 234.5, 101.25), (-0.2048, -0.2632, -0.9427)]
    pl.camera.zoom(1.5)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_volume_007.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-128

Extracting a VOI
++++++++++++++++

Use the :func:`pyvista.ImageDataFilters.extract_subset` filter to extract
a volume of interest/subset volume to volume render. This is ideal when
dealing with particularly large volumes and you want to volume render only
a specific region.

.. GENERATED FROM PYTHON SOURCE LINES 128-133

.. code-block:: default


    # Load a particularly large volume
    large_vol = examples.download_damavand_volcano()
    large_vol






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>ImageData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>11003760</td></tr>
    <tr><td>N Points</td><td>11156040</td></tr>
    <tr><td>X Bounds</td><td>4.130e+05, 6.920e+05</td></tr>
    <tr><td>Y Bounds</td><td>3.864e+06, 4.096e+06</td></tr>
    <tr><td>Z Bounds</td><td>-5.479e+04, 5.302e+03</td></tr>
    <tr><td>Dimensions</td><td>280, 233, 171</td></tr>
    <tr><td>Spacing</td><td>1.000e+03, 1.000e+03, 3.535e+02</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>data</b></td><td>Points</td><td>float32</td><td>1</td><td>9.782e-15</td><td>1.000e+02</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 134-148

.. code-block:: default

    opacity = [0, 0.75, 0, 0.75, 1.0]
    clim = [0, 100]

    pl = pv.Plotter()
    pl.add_volume(
        large_vol,
        cmap="magma",
        clim=clim,
        opacity=opacity,
        opacity_unit_distance=6000,
    )
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_volume_008.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 149-155

Woah, that's a big volume. We probably don't want to volume render the
whole thing. So let's extract a region of interest under the volcano.

The region we will extract will be between nodes 175 and 200 on the x-axis,
between nodes 105 and 132 on the y-axis, and between nodes 98 and 170 on
the z-axis.

.. GENERATED FROM PYTHON SOURCE LINES 155-163

.. code-block:: default


    voi = large_vol.extract_subset([175, 200, 105, 132, 98, 170])

    pl = pv.Plotter()
    pl.add_mesh(large_vol.outline(), color="k")
    pl.add_mesh(voi, cmap="magma")
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_volume_009.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-165

Ah, much better. Let's now volume render that region of interest.

.. GENERATED FROM PYTHON SOURCE LINES 165-174

.. code-block:: default


    pl = pv.Plotter()
    pl.add_volume(voi, cmap="magma", clim=clim, opacity=opacity, opacity_unit_distance=2000)
    pl.camera_position = [
        (531554.5542909054, 3944331.800171338, 26563.04809259223),
        (599088.1433822059, 3982089.287834022, -11965.14728669936),
        (0.3738545892415734, 0.244312810377319, 0.8947312427698892),
    ]
    pl.show()



.. image-sg:: /examples/02-plot/images/sphx_glr_volume_010.png
   :alt: volume
   :srcset: /examples/02-plot/images/sphx_glr_volume_010.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.832 seconds)


.. _sphx_glr_download_examples_02-plot_volume.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: volume.py <volume.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: volume.ipynb <volume.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
