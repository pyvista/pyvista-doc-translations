
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/ssao.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_ssao.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_ssao.py:


.. _ssao_example:

Surface Space Ambient Occlusion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Demonstrate the usage of surface space ambient occlusion.

Surface space ambient occlusion (SSAO) can approximate shadows more
efficiently than ray-tracing and produce similar results. Use this when you wish
to plot the occlusion effect that nearby meshes have on each other by blocking
nearby light sources.

See `Kitware: Screen-Space Ambient Occlusion
<https://www.kitware.com/ssao/>`_ for more details

.. GENERATED FROM PYTHON SOURCE LINES 18-26

.. code-block:: default


    # First, let's create several cubes nearby each other

    import pyvista as pv
    from pyvista import examples

    grid = pv.ImageData(dimensions=(5, 5, 5)).explode(0.2)








.. GENERATED FROM PYTHON SOURCE LINES 28-32

Plot with defaults
~~~~~~~~~~~~~~~~~~
Let's plot this without SSAO. Note how the lighting is identical for each
cube.

.. GENERATED FROM PYTHON SOURCE LINES 32-38

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(grid)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_ssao_001.png
   :alt: ssao
   :srcset: /examples/02-plot/images/sphx_glr_ssao_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 39-46

Plot with SSAO
~~~~~~~~~~~~~~
Now plot this with SSAO. Note how adjacent cubes affect the lighting of each
other to make it look less artificial.

With a low ``kernel_size``, the image will be rendered quickly at the expense
of quality.

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(grid)
    pl.enable_ssao(kernel_size=32)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_ssao_002.png
   :alt: ssao
   :srcset: /examples/02-plot/images/sphx_glr_ssao_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-59

Improve the SSAO rendering
~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we've increased the ``kernel_size`` to improve the quality of the SSAO
and also enabled SSAA anti-aliasing to smooth out any of the artifacts
created from SSAO.

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(grid)
    pl.enable_ssao(kernel_size=128)
    pl.enable_anti_aliasing('ssaa')
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_ssao_003.png
   :alt: ssao
   :srcset: /examples/02-plot/images/sphx_glr_ssao_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-72

Plot a CAD model without SSAO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here's another example without SSAO. This is a CAD model of a Raspberry PI
case.

.. GENERATED FROM PYTHON SOURCE LINES 72-82

.. code-block:: default


    mesh = examples.download_cad_model_case()

    pl = pv.Plotter()
    pl.add_mesh(mesh, smooth_shading=True, split_sharp_edges=True)
    pl.enable_anti_aliasing('ssaa')
    pl.camera.zoom(1.7)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_ssao_004.png
   :alt: ssao
   :srcset: /examples/02-plot/images/sphx_glr_ssao_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-90

Plot with SSAO
~~~~~~~~~~~~~~
Here's the same CAD model with SSAO. Note how we had to increase both
``radius`` and ``bias`` due to the relative scene size.

Note that the occlusion still seems quite small. In the next example we will
increase the ``radius`` to increase the effect of the occlusion.

.. GENERATED FROM PYTHON SOURCE LINES 90-99

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(mesh, smooth_shading=True, split_sharp_edges=True)
    pl.enable_ssao(radius=2, bias=0.5)
    pl.enable_anti_aliasing('ssaa')
    pl.camera.zoom(1.7)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_ssao_005.png
   :alt: ssao
   :srcset: /examples/02-plot/images/sphx_glr_ssao_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-104

Increase the Radius
~~~~~~~~~~~~~~~~~~~
Here we've increased the ``radius`` to the point where the case occlusion now
seems realistic without it becoming overwhelming.

.. GENERATED FROM PYTHON SOURCE LINES 104-111

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(mesh, smooth_shading=True, split_sharp_edges=True)
    pl.enable_ssao(radius=15, bias=0.5)
    pl.enable_anti_aliasing('ssaa')
    pl.camera.zoom(1.7)
    pl.show()



.. image-sg:: /examples/02-plot/images/sphx_glr_ssao_006.png
   :alt: ssao
   :srcset: /examples/02-plot/images/sphx_glr_ssao_006.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  43.957 seconds)


.. _sphx_glr_download_examples_02-plot_ssao.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ssao.py <ssao.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ssao.ipynb <ssao.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
