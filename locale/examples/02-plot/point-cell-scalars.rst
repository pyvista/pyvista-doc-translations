
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/point-cell-scalars.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_point-cell-scalars.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_point-cell-scalars.py:


.. _point_cell_scalars_example:

Point Cell Scalars
~~~~~~~~~~~~~~~~~~

This example demonstrates how to add point scalars for each individual cell to
a dataset.

.. GENERATED FROM PYTHON SOURCE LINES 12-16

.. code-block:: default

    import numpy as np

    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-19

load the first 4 cells from the example UnstructuredGrid. Note how the number
of points is less than 32 since all the points are joined in the center.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default

    grid = examples.load_hexbeam().extract_cells(range(4))
    grid







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table style='width: 100%;'>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>4</td></tr>
    <tr><td>N Points</td><td>18</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 5.000e-01</td></tr>
    <tr><td>N Arrays</td><td>5</td></tr>
    </table>

    </td><td>
    <table style='width: 100%;'>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>sample_point_scalars</td><td>Points</td><td>int64</td><td>1</td><td>1.000e+00</td><td>2.860e+02</td></tr>
    <tr><td>VTKorigID</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>
    <tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>
    <tr><td><b>sample_cell_scalars</b></td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>4.000e+00</td></tr>
    <tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 24-28

Plot Point Scalars
~~~~~~~~~~~~~~~~~~
At this point it's possible to assign only point or cell scalars to this
dataset. First, let's just plot some simple point scalars.

.. GENERATED FROM PYTHON SOURCE LINES 28-33

.. code-block:: default


    grid.point_data['Point Data'] = range(grid.n_points)
    grid.plot(scalars='Point Data')









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_point-cell-scalars_001.png
        :alt: point cell scalars
        :srcset: /examples/02-plot/images/sphx_glr_point-cell-scalars_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_point-cell-scalars_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 34-38

Plot Cell Scalars
~~~~~~~~~~~~~~~~~
Next, let's plot cell scalars. We're simply assigning based on the cell
index.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    grid.cell_data['Cell Data'] = range(grid.n_cells)
    grid.plot(scalars='Cell Data')









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_point-cell-scalars_002.png
        :alt: point cell scalars
        :srcset: /examples/02-plot/images/sphx_glr_point-cell-scalars_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_point-cell-scalars_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 43-53

Splitting the Cells
~~~~~~~~~~~~~~~~~~~
If you wanted to assign data to each point of each cell and plot that, it's
simply not possible since these hexahedral cells all share the same
points. To split up individual cells, separate them using
:func:`pyvista.DataSetFilters.separate_cells`.

With this filter the resulting :class:`pyvista.UnstructuredGrid` now contains
32 points, or 8 for each cell. They are now fully separated with no shared
points.

.. GENERATED FROM PYTHON SOURCE LINES 53-58

.. code-block:: default


    split_cells = grid.separate_cells()
    split_cells







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table style='width: 100%;'>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>4</td></tr>
    <tr><td>N Points</td><td>32</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 5.000e-01</td></tr>
    <tr><td>N Arrays</td><td>7</td></tr>
    </table>

    </td><td>
    <table style='width: 100%;'>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>sample_point_scalars</td><td>Points</td><td>int64</td><td>1</td><td>1.000e+00</td><td>2.860e+02</td></tr>
    <tr><td>VTKorigID</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>
    <tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>
    <tr><td>Point Data</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>1.700e+01</td></tr>
    <tr><td>sample_cell_scalars</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>4.000e+00</td></tr>
    <tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>
    <tr><td><b>Cell Data</b></td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-70

Plot Point Cell Data
~~~~~~~~~~~~~~~~~~~~
Now we can plot values for each point for each cell. This will still be
assigned to the point data.

Here we use :func:`numpy.hstack` for clarity, but as long as the length of
the data matches the number of points, you'll be able to use this approach.

See how the plotted values appear continuous within a cell and discontinuous
between cells. This matches how stresses and strains are calculated from
finite element solutions.

.. GENERATED FROM PYTHON SOURCE LINES 70-80

.. code-block:: default


    split_cells.point_data['Point Cell Data'] = np.hstack(
        (
            np.linspace(0, 8, 8),  # cell 0
            np.linspace(0, 12, 8),  # cell 1
            np.linspace(0, 16, 8),  # cell 2
            np.linspace(0, 20, 8),  # cell 3
        )
    )
    split_cells.plot(scalars='Point Cell Data')







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_point-cell-scalars_003.png
        :alt: point cell scalars
        :srcset: /examples/02-plot/images/sphx_glr_point-cell-scalars_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_point-cell-scalars_003.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.849 seconds)


.. _sphx_glr_download_examples_02-plot_point-cell-scalars.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: point-cell-scalars.py <point-cell-scalars.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: point-cell-scalars.ipynb <point-cell-scalars.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
