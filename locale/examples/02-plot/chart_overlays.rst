
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/chart_overlays.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-plot_chart_overlays.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_chart_overlays.py:


.. _chart_overlays_example:

Chart Overlays
~~~~~~~~~~~~~~

This example shows how you can combine multiple charts as overlays in
the same renderer. For an overview of the different chart types you
can use, please refer to :ref:`chart_basics_example`. Interaction with
a chart can be enabled by right clicking on top of it. Note that this
will disable interaction with the 3D scene. To stop interacting with
the chart, perform another right click. This will either enable
interaction with another chart (if clicked on top of it) or re-enable
interaction with the 3D scene.

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Data to display

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: default

    t = np.linspace(0, 5, 50)
    h = np.sin(t)
    v = np.cos(t)








.. GENERATED FROM PYTHON SOURCE LINES 30-32

Define a Matplotlib figure.
Use a tight layout to keep axis labels visible on smaller figures.

.. GENERATED FROM PYTHON SOURCE LINES 32-39

.. code-block:: default


    f, ax = plt.subplots(tight_layout=True)
    h_line = ax.plot(t[:1], h[:1])[0]
    ax.set_ylim([-1, 1])
    ax.set_xlabel('Time (s)')
    _ = ax.set_ylabel('Height (m)')








.. GENERATED FROM PYTHON SOURCE LINES 41-43

Define plotter, add the created matplotlib figure as the first (left) chart
to the scene, and define a second (right) chart.

.. GENERATED FROM PYTHON SOURCE LINES 43-80

.. code-block:: default


    p = pv.Plotter()
    h_chart = pv.ChartMPL(f, size=(0.46, 0.25), loc=(0.02, 0.06))
    h_chart.background_color = (1.0, 1.0, 1.0, 0.4)
    p.add_chart(h_chart)
    v_chart = pv.Chart2D(
        size=(0.46, 0.25), loc=(0.52, 0.06), x_label="Time (s)", y_label="Velocity (m/s)"
    )
    v_line = v_chart.line(t[:1], v[:1])
    v_chart.y_range = (-1, 1)
    v_chart.background_color = (1.0, 1.0, 1.0, 0.4)
    p.add_chart(v_chart)
    p.add_mesh(pv.Sphere(1), name="sphere", render=False)
    p.show(auto_close=False, interactive=True, interactive_update=True)


    # Method and slider to update all visuals based on the time selection
    def update_time(time):
        k = np.count_nonzero(t < time)
        h_line.set_xdata(t[: k + 1])
        h_line.set_ydata(h[: k + 1])
        v_line.update(t[: k + 1], v[: k + 1])
        p.add_mesh(pv.Sphere(1, center=(0, 0, h[k])), name="sphere", render=False)
        p.update()


    time_slider = p.add_slider_widget(
        update_time, [np.min(t), np.max(t)], 0, "Time", (0.25, 0.9), (0.75, 0.9), event_type='always'
    )

    # Start incrementing time automatically
    for i in range(1, 50):
        ax.set_xlim([0, t[i]])
        time_slider.GetSliderRepresentation().SetValue(t[i])
        update_time(t[i])

    p.show()  # Keep plotter open to let user play with time slider



.. image-sg:: /examples/02-plot/images/sphx_glr_chart_overlays_001.png
   :alt: chart overlays
   :srcset: /examples/02-plot/images/sphx_glr_chart_overlays_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.301 seconds)


.. _sphx_glr_download_examples_02-plot_chart_overlays.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: chart_overlays.py <chart_overlays.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: chart_overlays.ipynb <chart_overlays.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
