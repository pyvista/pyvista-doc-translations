
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/points-gaussian-scale.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_points-gaussian-scale.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_points-gaussian-scale.py:

.. _plot_spheres_example:

Scaled Gaussian Points
----------------------
This example demonstrates how to plot spheres using the ``'points_gaussian'``
style and scale them by a dynamic radius.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default


    import numpy as np

    import pyvista as pv









.. GENERATED FROM PYTHON SOURCE LINES 20-22

First, generate the sphere positions and radii randomly on the edge of a
torus.

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: default


    N_SPHERES = 10_000
    theta = np.random.default_rng().uniform(0, 2 * np.pi, N_SPHERES)
    phi = np.random.default_rng().uniform(0, 2 * np.pi, N_SPHERES)
    torus_radius = 1
    tube_radius = 0.3
    radius = torus_radius + tube_radius * np.cos(phi)
    rad = np.random.default_rng().random(N_SPHERES) * 0.01

    pos = np.zeros((N_SPHERES, 3))
    pos[:, 0] = radius * np.cos(theta)
    pos[:, 1] = radius * np.sin(theta)
    pos[:, 2] = tube_radius * np.sin(phi)









.. GENERATED FROM PYTHON SOURCE LINES 38-40

Next, create a PolyData object and add the sphere positions and radii as
data arrays.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: default


    pdata = pv.PolyData(pos)
    pdata['radius'] = rad









.. GENERATED FROM PYTHON SOURCE LINES 46-48

Finally, plot the spheres using the ``points_gaussian`` style and scale them
by radius.

.. GENERATED FROM PYTHON SOURCE LINES 48-62

.. code-block:: default


    pl = pv.Plotter()
    actor = pl.add_mesh(
        pdata,
        style='points_gaussian',
        emissive=False,
        render_points_as_spheres=True,
        show_scalar_bar=False,
    )
    actor.mapper.scale_array = 'radius'
    pl.camera.zoom(1.5)
    pl.show()






.. image-sg:: /examples/02-plot/images/sphx_glr_points-gaussian-scale_001.png
   :alt: points gaussian scale
   :srcset: /examples/02-plot/images/sphx_glr_points-gaussian-scale_001.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 63-64

Show the same plot with ``emissive=True``.

.. GENERATED FROM PYTHON SOURCE LINES 64-77

.. code-block:: default


    pl = pv.Plotter()
    pl.background_color = 'k'
    actor = pl.add_mesh(
        pdata,
        style='points_gaussian',
        emissive=True,
        render_points_as_spheres=True,
        show_scalar_bar=False,
    )
    actor.mapper.scale_array = 'radius'
    pl.camera.zoom(1.5)
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_points-gaussian-scale_002.png
   :alt: points gaussian scale
   :srcset: /examples/02-plot/images/sphx_glr_points-gaussian-scale_002.png
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.566 seconds)


.. _sphx_glr_download_examples_02-plot_points-gaussian-scale.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: points-gaussian-scale.py <points-gaussian-scale.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: points-gaussian-scale.ipynb <points-gaussian-scale.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
