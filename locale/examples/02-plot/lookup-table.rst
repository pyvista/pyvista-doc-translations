
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/lookup-table.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-plot_lookup-table.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_lookup-table.py:


.. _lookup_table_example:

Lookup Tables
~~~~~~~~~~~~~
Demonstrate the usage of a lookup table within PyVista

The :class:`pyvista.LookupTable` can be used to have fine-tuned control over
the mapping between a :class:`pyvista.DataSet`'s scalars and RGBA colors.

.. GENERATED FROM PYTHON SOURCE LINES 12-21

.. code-block:: default


    import pyvista as pv
    from pyvista import examples

    # download an example dataset
    bracket = examples.download_fea_bracket().cell_data_to_point_data()
    bracket







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>56786</td></tr>
    <tr><td>N Points</td><td>102578</td></tr>
    <tr><td>X Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 3.250e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>Equivalent (von-Mises) Stress (psi)</b></td><td>Points</td><td>float32</td><td>1</td><td>1.437e-02</td><td>2.327e+01</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 22-28

Default Color Map - Lookup Table
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First, let's plot using the default color map, "viridis". Internally, PyVista
will automatically create a lookup table to map the scalars (stored here
within `point_data`) to RGBA colors. This is shown here as a nested attribute
to the :class:`pyvista.DataSetMapper` and it has a helpful ``repr`` method:

.. GENERATED FROM PYTHON SOURCE LINES 28-34

.. code-block:: default


    pl = pv.Plotter()
    actor = pl.add_mesh(bracket)
    actor.mapper.lookup_table





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_001.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    LookupTable (0x7f8fb355d520)
      Table Range:                (0.014368999749422073, 23.26799964904785)
      N Values:                   256
      Above Range Color:          None
      Below Range Color:          None
      NAN Color:                  Color(name='darkgray', hex='#a9a9a9ff')
      Log Scale:                  False
      Color Map:                  "viridis"



.. GENERATED FROM PYTHON SOURCE LINES 35-39

Plot the Lookup Table
~~~~~~~~~~~~~~~~~~~~~
You can also plot lookup table to see the mapping between the scalar values
(here, between 0 and 23.3) and RGBA colors.

.. GENERATED FROM PYTHON SOURCE LINES 39-45

.. code-block:: default


    pl = pv.Plotter()
    actor = pl.add_mesh(bracket)
    actor.mapper.lookup_table.plot()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_002.png
          :alt: lookup table
          :srcset: /examples/02-plot/images/sphx_glr_lookup-table_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_003.png
          :alt: lookup table
          :srcset: /examples/02-plot/images/sphx_glr_lookup-table_003.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 46-49

Plot the DataSet
~~~~~~~~~~~~~~~~
Let's plot the dataset using the automatically generated lookup table.

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(bracket)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_004.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-60

Create a Custom Lookup Table using a Matplotlib Color Map
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we create a lookup table with a narrow table range (same as ``clim``)
and color values above and below the range.

.. GENERATED FROM PYTHON SOURCE LINES 60-68

.. code-block:: default


    lut = pv.LookupTable(cmap='magma')
    lut.scalar_range = (5, 15)
    lut.below_range_color = pv.Color('grey', opacity=0.5)
    lut.above_range_color = 'r'
    lut.plot()





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_005.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-72

Plot the bracket with the custom colormap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can set assign the lookup table when using ``add_mesh`` with ``cmap=``.

.. GENERATED FROM PYTHON SOURCE LINES 72-79

.. code-block:: default



    pl = pv.Plotter()
    actor = pl.add_mesh(bracket, cmap=lut, lighting=False)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_006.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-85

Create a Custom Lookup Table using VTK's Methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you want to create a completely unique color map, you can use attributes
like :attr:`pyvista.LookupTable.hue_range` and
:attr:`pyvista.LookupTable.value_range` to create your own lookup table.

.. GENERATED FROM PYTHON SOURCE LINES 85-95

.. code-block:: default


    lut = pv.LookupTable()
    lut.value_range = (0.35, 1)  # dark grey to white
    lut.hue_range = (0.35, 0.7)  # green to cyna
    lut.saturation_range = (0.75, 0.5)  # reduce saturation near the upper end
    lut.alpha_range = (0.0, 0.9)  #
    lut.scalar_range = (2, 18)
    lut.plot()





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_007.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 96-100

Plot the bracket with the custom colormap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Assign this custom color map to the plotter and disable lighting to improve
the plot.

.. GENERATED FROM PYTHON SOURCE LINES 100-106

.. code-block:: default


    pl = pv.Plotter()
    actor = pl.add_mesh(bracket, cmap=lut, lighting=False)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_008.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-114

Custom colormap with widgets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we plot the scalars and dynamically change the lookup table through
widgets. We create several overlapping single slider widgets to simulate a
double ended slider widget.

This example just controls the alpha channel.

.. GENERATED FROM PYTHON SOURCE LINES 114-156

.. code-block:: default



    pl = pv.Plotter()
    actor = pl.add_mesh(bracket, cmap=lut, lighting=False)
    pl.add_text('Alpha Range Demo')


    def set_min_alpha(min_value):
        max_value = lut.alpha_range[1]
        if min_value > max_value:
            # force the movement of the maximum value
            max_value = min_value
            pl.slider_widgets[1].GetRepresentation().SetValue(max_value)
        lut.alpha_range = (min_value, max_value)


    def set_max_alpha(max_value):
        min_value = lut.alpha_range[0]
        if max_value < min_value:
            # force the movement of the minimum value
            min_value = max_value
            pl.slider_widgets[0].GetRepresentation().SetValue(min_value)

        lut.alpha_range = (min_value, max_value)


    # create two overlapping slider bars by hiding the tube of the second
    pl.add_slider_widget(
        set_min_alpha,
        (0, 1),
        value=lut.alpha_range[0],
        event_type='always',
        title='Alpha Range',
        tube_width=0.003,
    )
    pl.add_slider_widget(
        set_max_alpha, (0, 1), value=lut.alpha_range[1], event_type='always', tube_width=0.0
    )

    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_009.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 157-161

Control Several Lookup Table Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Demonstrate the use of several slider bar widgets with lookup table
callbacks.

.. GENERATED FROM PYTHON SOURCE LINES 161-235

.. code-block:: default


    # Create a new lookup table with oranges
    lut = pv.LookupTable()
    lut.value_range = (0.3, 0.75)
    lut.hue_range = (0.0, 0.095)
    lut.saturation_range = (0.0, 0.67)
    lut.alpha_range = (0.0, 1.0)
    lut.scalar_range = (2, 18)

    scalars_rng = (bracket.active_scalars.min(), bracket.active_scalars.max())


    def make_double_slider(attr, idx):
        """Create a double slider for a given lookup table attribute."""

        def set_min(min_value):
            max_value = getattr(lut, attr)[1]
            if min_value > max_value:
                # force the movement of the maximum value
                max_value = min_value
                pl.slider_widgets[idx * 2 + 1].GetRepresentation().SetValue(max_value)
            setattr(lut, attr, (min_value, max_value))

            if attr == 'scalar_range':
                actor.mapper.scalar_range = getattr(lut, attr)

        def set_max(max_value):
            min_value = getattr(lut, attr)[0]
            if max_value < min_value:
                # force the movement of the minimum value
                min_value = max_value
                pl.slider_widgets[idx * 2].GetRepresentation().SetValue(min_value)
            setattr(lut, attr, (min_value, max_value))

            if attr == 'scalar_range':
                actor.mapper.scalar_range = getattr(lut, attr)

        if attr == 'scalar_range':
            rng = scalars_rng
        else:
            rng = (0, 1)

        # create two overlapping slider bars by hiding the tube of the second
        pl.add_slider_widget(
            set_min,
            rng,
            value=getattr(lut, attr)[0],
            event_type='always',
            title=' '.join(attr.split('_')).capitalize(),
            tube_width=0.003,
            pointa=(0.6, 0.9 - 0.165 * idx),
            pointb=(0.9, 0.9 - 0.165 * idx),
        )
        pl.add_slider_widget(
            set_max,
            rng,
            value=getattr(lut, attr)[1],
            event_type='always',
            tube_width=0.0,
            pointa=(0.6, 0.9 - 0.165 * idx),
            pointb=(0.9, 0.9 - 0.165 * idx),
        )


    pl = pv.Plotter()
    actor = pl.add_mesh(bracket, cmap=lut, lighting=False)
    make_double_slider('alpha_range', 0)
    make_double_slider('hue_range', 1)
    make_double_slider('value_range', 2)
    make_double_slider('saturation_range', 3)
    make_double_slider('scalar_range', 4)

    pl.camera_position = [(9.021, 5.477, 7.780), (-0.679, 1.349, 0.874), (-0.498, -0.228, 0.836)]
    cpos = pl.show(return_cpos=True)



.. image-sg:: /examples/02-plot/images/sphx_glr_lookup-table_010.png
   :alt: lookup table
   :srcset: /examples/02-plot/images/sphx_glr_lookup-table_010.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.440 seconds)


.. _sphx_glr_download_examples_02-plot_lookup-table.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lookup-table.py <lookup-table.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lookup-table.ipynb <lookup-table.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
