
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/cmap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-plot_cmap.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_cmap.py:


.. _colormap_example:

Colormap Choices
~~~~~~~~~~~~~~~~

Use a Matplotlib, Colorcet, cmocean, or custom colormap when plotting scalar
values.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default


    from pyvista import examples
    import pyvista as pv
    import matplotlib.pyplot as plt
    from matplotlib.colors import ListedColormap
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 18-29

Any colormap built for ``matplotlib``, ``colorcet``, or ``cmocean`` is fully
compatible with PyVista. Colormaps are typically specified by passing the
string name of the colormap to the plotting routine via the ``cmap``
argument.

See `Matplotlib's complete list of available colormaps`_,
`Colorcet's complete list`_, and `cmocean's complete list`_.

.. _Matplotlib's complete list of available colormaps: https://matplotlib.org/tutorials/colors/colormaps.html
.. _Colorcet's complete list: https://colorcet.holoviz.org/user_guide/index.html
.. _cmocean's complete list: https://matplotlib.org/cmocean/

.. GENERATED FROM PYTHON SOURCE LINES 31-36

Custom Made Colormaps
+++++++++++++++++++++

To get started using a custom colormap, download some data with scalar values to
plot.

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default


    mesh = examples.download_st_helens().warp_by_scalar()
    # Add scalar array with range (0, 100) that correlates with elevation
    mesh['values'] = pv.plotting.normalize(mesh['Elevation']) * 100








.. GENERATED FROM PYTHON SOURCE LINES 42-44

Build a custom colormap - here we make a colormap with 5 discrete colors
and we specify the ranges where those colors fall:

.. GENERATED FROM PYTHON SOURCE LINES 44-63

.. code-block:: default


    # Define the colors we want to use
    blue = np.array([12/256, 238/256, 246/256, 1])
    black = np.array([11/256, 11/256, 11/256, 1])
    grey = np.array([189/256, 189/256, 189/256, 1])
    yellow = np.array([255/256, 247/256, 0/256, 1])
    red = np.array([1, 0, 0, 1])

    mapping = np.linspace(mesh['values'].min(), mesh['values'].max(), 256)
    newcolors = np.empty((256, 4))
    newcolors[mapping >= 80] = red
    newcolors[mapping < 80] = grey
    newcolors[mapping < 55] = yellow
    newcolors[mapping < 30] = blue
    newcolors[mapping < 1] = black

    # Make the colormap from the listed colors
    my_colormap = ListedColormap(newcolors)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Simply pass the colormap to the plotting routine!

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: default

    mesh.plot(scalars='values', cmap=my_colormap)




.. image-sg:: /examples/02-plot/images/sphx_glr_cmap_001.png
   :alt: cmap
   :srcset: /examples/02-plot/images/sphx_glr_cmap_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-70

Or you could make a simple colormap... any Matplotlib colormap can be passed
to PyVista!

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    boring_cmap = plt.cm.get_cmap("viridis", 5)
    mesh.plot(scalars='values', cmap=boring_cmap)




.. image-sg:: /examples/02-plot/images/sphx_glr_cmap_002.png
   :alt: cmap
   :srcset: /examples/02-plot/images/sphx_glr_cmap_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-76

You can also pass a list of color strings to the color map.  This
approach divides up the colormap into 5 equal parts.

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: default

    mesh.plot(scalars=mesh['values'], cmap=['black', 'blue', 'yellow', 'grey', 'red'])




.. image-sg:: /examples/02-plot/images/sphx_glr_cmap_003.png
   :alt: cmap
   :srcset: /examples/02-plot/images/sphx_glr_cmap_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-82

If you still wish to have control of the separation of values, you
can do this by creating a scalar array and passing that to the
plotter along with the the colormap

.. GENERATED FROM PYTHON SOURCE LINES 82-91

.. code-block:: default

    scalars = np.empty(mesh.n_points)
    scalars[mesh['values'] >= 80] = 4  # red
    scalars[mesh['values'] < 80] = 3  # grey
    scalars[mesh['values'] < 55] = 2  # yellow
    scalars[mesh['values'] < 30] = 1  # blue
    scalars[mesh['values'] < 1] = 0  # black

    mesh.plot(scalars=scalars, cmap=['black', 'blue', 'yellow', 'grey', 'red'])




.. image-sg:: /examples/02-plot/images/sphx_glr_cmap_004.png
   :alt: cmap
   :srcset: /examples/02-plot/images/sphx_glr_cmap_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-106

Matplotlib vs. Colorcet
+++++++++++++++++++++++

Let's compare Colorcet's perceptually uniform "fire" colormap to Matplotlib's
"hot" colormap much like the example on the `first page of Colorcet's docs`_.

.. _first page of Colorcet's docs: https://colorcet.holoviz.org/index.html

The "hot" version washes out detail at the high end, as if the image is
overexposed, while "fire" makes detail visible throughout the data range.

Please note that in order to use Colorcet's colormaps including "fire", you
must have Colorcet installed in your Python environment:
``pip install colorcet``

.. GENERATED FROM PYTHON SOURCE LINES 106-125

.. code-block:: default


    p = pv.Plotter(shape=(2, 2), border=False)
    p.subplot(0, 0)
    p.add_mesh(mesh, scalars='Elevation', cmap="fire",
               lighting=True, scalar_bar_args={'title': "Colorcet Fire"})

    p.subplot(0, 1)
    p.add_mesh(mesh, scalars='Elevation', cmap="fire",
               lighting=False, scalar_bar_args={'title': "Colorcet Fire (No Lighting)"})

    p.subplot(1, 0)
    p.add_mesh(mesh, scalars='Elevation', cmap="hot",
               lighting=True, scalar_bar_args={'title': "Matplotlib Hot"})

    p.subplot(1, 1)
    p.add_mesh(mesh, scalars='Elevation', cmap="hot",
               lighting=False, scalar_bar_args={'title': "Matplotlib Hot (No Lighting)"})

    p.show()



.. image-sg:: /examples/02-plot/images/sphx_glr_cmap_005.png
   :alt: cmap
   :srcset: /examples/02-plot/images/sphx_glr_cmap_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.869 seconds)


.. _sphx_glr_download_examples_02-plot_cmap.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cmap.py <cmap.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cmap.ipynb <cmap.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
