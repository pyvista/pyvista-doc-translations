
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/color_cycler.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_color_cycler.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_color_cycler.py:


.. _color_cycler_example:

Color Cycling
~~~~~~~~~~~~~

Cycle through colors when sequentially adding meshes to a plotter.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

Many plotting libraries like Matplotlib cycle through a predefined list of
colors to colorize the data being added to the graphic. PyVista supports
this in much the same way as Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. code-block:: default


    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 18-20

Turn on color cycling in PyVista's theme and set it to use the default
cycler.

.. GENERATED FROM PYTHON SOURCE LINES 20-22

.. code-block:: default

    pv.global_theme.color_cycler = 'default'








.. GENERATED FROM PYTHON SOURCE LINES 23-24

List the available colors in the cycler

.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: default

    pv.global_theme.color_cycler






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><th>'color'</th><tr><td>'#1f77b4'</td></tr><tr><td>'#ff7f0e'</td></tr><tr><td>'#2ca02c'</td></tr><tr><td>'#d62728'</td></tr><tr><td>'#9467bd'</td></tr><tr><td>'#8c564b'</td></tr><tr><td>'#e377c2'</td></tr><tr><td>'#7f7f7f'</td></tr><tr><td>'#bcbd22'</td></tr><tr><td>'#17becf'</td></tr></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Create a plotter and add data to the scene. You'll notice that each
``add_mesh`` call iterates over the colors in ``pv.global_theme.color_cycler``

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: default

    pl = pv.Plotter()
    pl.add_mesh(pv.Cone(center=(0, 0, 0)))
    pl.add_mesh(pv.Cube(center=(1, 0, 0)))
    pl.add_mesh(pv.Sphere(center=(1, 1, 0)))
    pl.add_mesh(pv.Cylinder(center=(0, 1, 0)))
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_color_cycler_001.png
   :alt: color cycler
   :srcset: /examples/02-plot/images/sphx_glr_color_cycler_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-38

Reset the theme to not use a cycler and instead set on individual plotters.

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    pv.global_theme.color_cycler = None








.. GENERATED FROM PYTHON SOURCE LINES 41-44

If you do not want to set a global color cycler but instead just want to
use a cycler for a single plotter, you can set this on with
:func:`set_color_cycler() <pyvista.Plotter.set_color_cycler>`.

.. GENERATED FROM PYTHON SOURCE LINES 44-55

.. code-block:: default

    pl = pv.Plotter()

    # Set to iterate over Red, Green, and Blue
    pl.set_color_cycler(['red', 'green', 'blue'])

    pl.add_mesh(pv.Cone(center=(0, 0, 0)))  # red
    pl.add_mesh(pv.Cube(center=(1, 0, 0)))  # green
    pl.add_mesh(pv.Sphere(center=(1, 1, 0)))  # blue
    pl.add_mesh(pv.Cylinder(center=(0, 1, 0)))  # red again
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_color_cycler_002.png
   :alt: color cycler
   :srcset: /examples/02-plot/images/sphx_glr_color_cycler_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-59

Further, you can control this on a per-renderer basis by calling
:func:`set_color_cycler() <pyvista.Renderer.set_color_cycler>` on the active
``renderer``.

.. GENERATED FROM PYTHON SOURCE LINES 59-80

.. code-block:: default

    pl = pv.Plotter(shape=(1, 2))

    pl.subplot(0, 0)
    pl.renderer.set_color_cycler('default')
    pl.add_mesh(pv.Cone(center=(0, 0, 0)))
    pl.add_mesh(pv.Cube(center=(1, 0, 0)))
    pl.add_mesh(pv.Sphere(center=(1, 1, 0)))
    pl.add_mesh(pv.Cylinder(center=(0, 1, 0)))

    pl.subplot(0, 1)
    pl.renderer.set_color_cycler(['magenta', 'seagreen', 'aqua', 'orange'])
    pl.add_mesh(pv.Cone(center=(0, 0, 0)))
    pl.add_mesh(pv.Cube(center=(1, 0, 0)))
    pl.add_mesh(pv.Sphere(center=(1, 1, 0)))
    pl.add_mesh(pv.Cylinder(center=(0, 1, 0)))

    pl.link_views()
    pl.view_isometric()
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_color_cycler_003.png
   :alt: color cycler
   :srcset: /examples/02-plot/images/sphx_glr_color_cycler_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-86

You can also change the colors of actors after they are added to the scene.

ProTip: you could place the for-loop below in an event callback for a key
event to cycle through the colors on-demand. Or better yet, have your cycler
randomly select colors.

.. GENERATED FROM PYTHON SOURCE LINES 86-101

.. code-block:: default

    from cycler import cycler

    pl = pv.Plotter()
    pl.add_mesh(pv.Cone(center=(0, 0, 0)))
    pl.add_mesh(pv.Cube(center=(1, 0, 0)))
    pl.add_mesh(pv.Sphere(center=(1, 1, 0)))
    pl.add_mesh(pv.Cylinder(center=(0, 1, 0)))

    colors = cycler('color', ['lightcoral', 'seagreen', 'aqua', 'firebrick'])()

    for actor in pl.renderer.actors.values():
        if isinstance(actor, pv.Actor):
            actor.prop.color = next(colors)['color']

    pl.show()



.. image-sg:: /examples/02-plot/images/sphx_glr_color_cycler_004.png
   :alt: color cycler
   :srcset: /examples/02-plot/images/sphx_glr_color_cycler_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.094 seconds)


.. _sphx_glr_download_examples_02-plot_color_cycler.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: color_cycler.py <color_cycler.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: color_cycler.ipynb <color_cycler.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
