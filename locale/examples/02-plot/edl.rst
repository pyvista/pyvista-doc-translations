
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/edl.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_edl.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_edl.py:


.. _edl:

Eye Dome Lighting
~~~~~~~~~~~~~~~~~

Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique
designed to improve depth perception in scientific visualization images.
To learn more, please see `this blog post`_.

.. _this blog post: https://blog.kitware.com/eye-dome-lighting-a-non-photorealistic-shading-technique/

.. GENERATED FROM PYTHON SOURCE LINES 15-20

.. code-block:: default


    import pyvista as pv
    from pyvista import examples









.. GENERATED FROM PYTHON SOURCE LINES 26-32

Statue
+++++++++++

Eye-Dome Lighting can dramatically improve depth perception when plotting
incredibly sophisticated meshes like the creative commons Queen Nefertiti
statue:

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default


    nefertiti = examples.download_nefertiti()
    nefertiti.plot(eye_dome_lighting=True, cpos=[-1, -1, 0.2], color=True)





.. image-sg:: /examples/02-plot/images/sphx_glr_edl_001.png
   :alt: edl
   :srcset: /examples/02-plot/images/sphx_glr_edl_001.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 37-38

Here we will compare a EDL shading side by side with normal shading

.. GENERATED FROM PYTHON SOURCE LINES 38-56

.. code-block:: default


    p = pv.Plotter(shape=(1, 2), border=False)

    # With eye-dome lighting
    p.subplot(0, 0)
    p.add_mesh(nefertiti, color=True)
    p.enable_eye_dome_lighting()
    p.add_text("Eye-Dome Lighting", font_size=24)
    p.camera_position = [-1, -1, 0.2]

    # No eye-dome lighting
    p.subplot(0, 1)
    p.add_mesh(nefertiti, color=True)
    p.add_text("No Eye-Dome Lighting", font_size=24)
    p.camera_position = [-1, -1, 0.2]

    p.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_edl_002.png
   :alt: edl
   :srcset: /examples/02-plot/images/sphx_glr_edl_002.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 57-62

Point Cloud
+++++++++++

When plotting a simple point cloud, it can be difficult to perceive depth.
Take this Lidar point cloud for example:

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: default


    point_cloud = examples.download_lidar()









.. GENERATED FROM PYTHON SOURCE LINES 67-68

And now plot this point cloud as-is:

.. GENERATED FROM PYTHON SOURCE LINES 68-75

.. code-block:: default


    # Plot a typical point cloud with no EDL
    p = pv.Plotter()
    p.add_mesh(point_cloud, color='lightblue', point_size=5)
    p.show()






.. image-sg:: /examples/02-plot/images/sphx_glr_edl_003.png
   :alt: edl
   :srcset: /examples/02-plot/images/sphx_glr_edl_003.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 76-78

We can improve the depth mapping by enabling eye dome lighting on the
renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`.

.. GENERATED FROM PYTHON SOURCE LINES 78-86

.. code-block:: default


    # Plot with EDL
    p = pv.Plotter()
    p.add_mesh(point_cloud, color='lightblue', point_size=5)
    p.enable_eye_dome_lighting()
    p.show()






.. image-sg:: /examples/02-plot/images/sphx_glr_edl_004.png
   :alt: edl
   :srcset: /examples/02-plot/images/sphx_glr_edl_004.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 87-88

The eye dome lighting mode can also handle plotting scalar arrays:

.. GENERATED FROM PYTHON SOURCE LINES 88-94

.. code-block:: default


    # Plot with EDL and scalar data
    p = pv.Plotter()
    p.add_mesh(point_cloud, scalars="Elevation", point_size=5)
    p.enable_eye_dome_lighting()
    p.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_edl_005.png
   :alt: edl
   :srcset: /examples/02-plot/images/sphx_glr_edl_005.png
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 12.415 seconds)


.. _sphx_glr_download_examples_02-plot_edl.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: edl.py <edl.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: edl.ipynb <edl.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
