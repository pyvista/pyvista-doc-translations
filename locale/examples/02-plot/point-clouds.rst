
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/point-clouds.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-plot_point-clouds.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_point-clouds.py:


.. _plotting_point_clouds:

Plotting Point Clouds
~~~~~~~~~~~~~~~~~~~~~
This example shows you how to plot point clouds using PyVista using both the
``'point'`` and ``'point_gaussian'`` styles.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    import numpy as np

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-20

Compare the Plotting methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First, let's create a sample point cloud using :func:`numpy.random.random`.

.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default



    rng = np.random.default_rng()
    points = rng.random((1000, 3))
    points





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[0.42987789, 0.10005863, 0.61361435],
           [0.52409174, 0.20136765, 0.60053579],
           [0.62525163, 0.4448157 , 0.11865426],
           ...,
           [0.91485977, 0.34540947, 0.84565723],
           [0.34150954, 0.08325467, 0.37342024],
           [0.62589935, 0.1031916 , 0.14678903]])



.. GENERATED FROM PYTHON SOURCE LINES 27-31

Basic Plot
~~~~~~~~~~
We can simply plot this point cloud using the convenience :func:`pyvista.plot`
function.

.. GENERATED FROM PYTHON SOURCE LINES 31-35

.. code-block:: default


    pv.plot(points)





.. image-sg:: /examples/02-plot/images/sphx_glr_point-clouds_001.png
   :alt: point clouds
   :srcset: /examples/02-plot/images/sphx_glr_point-clouds_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 36-42

Plot with Scalars
~~~~~~~~~~~~~~~~~
That's quite boring, so let's spice things up by adding color. We can either
use a single scalar to plot the points. For example, the z coordinates.

For fun, let's also render the points as spheres.

.. GENERATED FROM PYTHON SOURCE LINES 42-51

.. code-block:: default

    pv.plot(
        points,
        scalars=points[:, 2],
        render_points_as_spheres=True,
        point_size=20,
        show_scalar_bar=False,
    )





.. image-sg:: /examples/02-plot/images/sphx_glr_point-clouds_002.png
   :alt: point clouds
   :srcset: /examples/02-plot/images/sphx_glr_point-clouds_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-57

Plot with RGBA
~~~~~~~~~~~~~~
Alternatively, we can color the point cloud using an RGBA array. This has
been normalized from (0, 1), but we could have also used a ``numpy.uint8``
array from 0-255.

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default

    rgba = points - points.min(axis=0)
    rgba /= rgba.max(axis=0)
    pv.plot(points, scalars=rgba, render_points_as_spheres=True, point_size=20, cpos='xy', rgba=True)




.. image-sg:: /examples/02-plot/images/sphx_glr_point-clouds_003.png
   :alt: point clouds
   :srcset: /examples/02-plot/images/sphx_glr_point-clouds_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-70

Point Cloud Plot Styles
~~~~~~~~~~~~~~~~~~~~~~~
PyVista supports the ``'point_gaussian'`` style, which renders points as
individual soft sprites. You have the option of displaying these as tight
"spheres" using ``render_points_as_spheres=True`` (default), or disabling it
to create softer points at the expense of render performance.

Here's the basic plot again, but with the style as ``'points_gaussian'``:

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    pv.plot(points, style='points_gaussian', opacity=0.5, point_size=15)





.. image-sg:: /examples/02-plot/images/sphx_glr_point-clouds_004.png
   :alt: point clouds
   :srcset: /examples/02-plot/images/sphx_glr_point-clouds_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-79

Here's a plotter with four combinations of the options side-by-side so you
can see for yourself the different options available when plotting these
points. PyVista tries to achieve sensible defaults, but should you find these
insufficient for your needs, feel free to play around with the various options
and find something that works for you.

.. GENERATED FROM PYTHON SOURCE LINES 79-143

.. code-block:: default


    pl = pv.Plotter(shape=(2, 2))

    # Standard points
    actor = pl.add_points(
        points,
        style='points',
        emissive=False,
        scalars=rgba,
        rgba=True,
        point_size=10,
        ambient=0.7,
    )
    pl.add_text('"points" not as spheres')

    # Gaussian points
    pl.subplot(0, 1)
    actor = pl.add_points(
        points,
        render_points_as_spheres=False,
        style='points_gaussian',
        emissive=False,
        scalars=rgba,
        rgba=True,
        opacity=0.99,
        point_size=10,
        ambient=1.0,
    )
    pl.add_text('"points_gaussian" not as spheres\nemissive=False')

    # Gaussian points with emissive=True
    pl.subplot(1, 0)
    actor = pl.add_points(
        points,
        render_points_as_spheres=False,
        style='points_gaussian',
        emissive=True,
        scalars=rgba,
        rgba=True,
        # opacity=0.999999,  # does not work and _must_ be 1.0
        point_size=10,
    )
    pl.add_text('"points_gaussian" not as spheres\nemissive=True')

    # Gaussian points with emissive=True
    pl.subplot(1, 1)
    actor = pl.add_points(
        points,
        style='points_gaussian',
        render_points_as_spheres=True,
        scalars=rgba,
        rgba=True,
        point_size=10,
    )
    pl.add_text('"points_gaussian" as spheres')

    pl.background_color = 'k'
    pl.link_views()
    # pl.reset_camera()
    pl.camera_position = 'xy'
    pl.camera.zoom(1.2)
    pl.show()





.. image-sg:: /examples/02-plot/images/sphx_glr_point-clouds_005.png
   :alt: point clouds
   :srcset: /examples/02-plot/images/sphx_glr_point-clouds_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 144-148

Orbit a Point Cloud
~~~~~~~~~~~~~~~~~~~
Generate a plot orbiting around a point cloud. Color based on the distance
from the center of the cloud.

.. GENERATED FROM PYTHON SOURCE LINES 148-168

.. code-block:: default


    cloud = examples.download_cloud_dark_matter()
    scalars = np.linalg.norm(cloud.points - cloud.center, axis=1)

    pl = pv.Plotter(off_screen=True)
    pl.add_mesh(
        cloud,
        style='points_gaussian',
        color='#fff7c2',
        scalars=scalars,
        opacity=0.25,
        point_size=4.0,
        show_scalar_bar=False,
    )
    pl.background_color = 'k'
    pl.show(auto_close=False)
    path = pl.generate_orbital_path(n_points=36, shift=cloud.length, factor=3.0)
    pl.open_gif("orbit_cloud.gif")
    pl.orbit_on_path(path, write_frames=True)
    pl.close()



.. image-sg:: /examples/02-plot/images/sphx_glr_point-clouds_006.png
   :alt: point clouds
   :srcset: /examples/02-plot/images/sphx_glr_point-clouds_006.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.200 seconds)


.. _sphx_glr_download_examples_02-plot_point-clouds.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: point-clouds.py <point-clouds.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: point-clouds.ipynb <point-clouds.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
