
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-plot/shading.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02-plot_shading.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-plot_shading.py:


.. _shading_example:

Types of Shading
~~~~~~~~~~~~~~~~

Comparison of default, flat shading vs. smooth shading.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

.. code-block:: default

    import pyvista
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 14-18

PyVista supports two types of shading: flat and smooth shading that uses
VTK's Phong shading algorithm.

This is a plot with the default flat shading.

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: default

    mesh = examples.load_nut()
    mesh.plot()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_shading_001.png
        :alt: shading
        :srcset: /examples/02-plot/images/sphx_glr_shading_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_shading_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 23-24

Here's the same sphere with smooth shading.

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default

    mesh.plot(smooth_shading=True)









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_shading_002.png
        :alt: shading
        :srcset: /examples/02-plot/images/sphx_glr_shading_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_shading_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 28-36

Note how smooth shading makes edges that should be sharp look odd,
it's because the points of these normals are averaged between two
faces that have a sharp angle between them.  You can avoid this by
enabling ``split_sharp_edges``.

.. note::
   You can configure the splitting angle with the optional
   ``feature_angle`` keyword argument.

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default

    mesh.plot(smooth_shading=True, split_sharp_edges=True)









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_shading_003.png
        :alt: shading
        :srcset: /examples/02-plot/images/sphx_glr_shading_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_shading_003.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 40-42

We can even plot the edges that will be split using
:func:`extract_feature_edges <pyvista.DataSetFilters.extract_feature_edges>`.

.. GENERATED FROM PYTHON SOURCE LINES 42-56

.. code-block:: default


    # extract the feature edges exceeding 30 degrees
    edges = mesh.extract_feature_edges(
        boundary_edges=False, non_manifold_edges=False, feature_angle=30, manifold_edges=False
    )

    # plot both the edges and the smoothed mesh
    pl = pyvista.Plotter()
    pl.enable_anti_aliasing()
    pl.add_mesh(mesh, smooth_shading=True, split_sharp_edges=True)
    pl.add_mesh(edges, color='k', line_width=5)
    pl.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02-plot/images/sphx_glr_shading_004.png
        :alt: shading
        :srcset: /examples/02-plot/images/sphx_glr_shading_004.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/02-plot/images/sphx_glr_shading_004.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 57-59

The ``split_sharp_edges`` keyword argument is compatible with
physically based rendering as well.

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: default


    # plot both the edges and the smoothed mesh


    pl = pyvista.Plotter()
    pl.enable_anti_aliasing()
    pl.add_mesh(mesh, color='w', split_sharp_edges=True, pbr=True, metallic=1.0, roughness=0.5)
    pl.show()




.. image-sg:: /examples/02-plot/images/sphx_glr_shading_005.png
   :alt: shading
   :srcset: /examples/02-plot/images/sphx_glr_shading_005.png
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.508 seconds)


.. _sphx_glr_download_examples_02-plot_shading.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: shading.py <shading.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: shading.ipynb <shading.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
