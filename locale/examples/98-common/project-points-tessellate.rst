
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/98-common/project-points-tessellate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_98-common_project-points-tessellate.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_98-common_project-points-tessellate.py:


Project points to a plane and Tessellate
----------------------------------------

Using pyvista and numpy, generate a 3D point cloud, project it to a plane, and
tessellate it.

This demonstrates how to use
:class:`pyvista.UnstructuredGridFilters.delaunay_2d` and a simple numpy
function that projects points to a plane.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default

    import numpy as np

    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 18-21

Project Points
~~~~~~~~~~~~~~
Create a point cloud and project it to a plane.

.. GENERATED FROM PYTHON SOURCE LINES 21-47

.. code-block:: default


    num_points = 100
    point_cloud = np.random.default_rng().random((num_points, 3))

    # Define a plane
    origin = [0, 0, 0]
    normal = [0, 0, 1]
    plane = pv.Plane(center=origin, direction=normal)


    def project_points_to_plane(points, plane_origin, plane_normal):
        """Project points to a plane."""
        vec = points - plane_origin
        dist = np.dot(vec, plane_normal)
        return points - np.outer(dist, plane_normal)


    projected_points = project_points_to_plane(point_cloud, origin, normal)

    # Create a polydata object with projected points
    polydata = pv.PolyData(projected_points)

    # Mesh using delaunay_2d and pyvista
    mesh = polydata.delaunay_2d()









.. GENERATED FROM PYTHON SOURCE LINES 48-50

Visualize the Result
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 50-69

.. code-block:: default


    # Create a plane for visualization
    plane_vis = pv.Plane(
        center=origin, direction=normal, i_size=2, j_size=2, i_resolution=10, j_resolution=10
    )

    # plot it
    pl = pv.Plotter()
    pl.add_mesh(mesh, show_edges=True, color='white', opacity=0.5, label='Tessellated mesh')
    pl.add_mesh(
        pv.PolyData(point_cloud),
        color='red',
        render_points_as_spheres=True,
        point_size=10,
        label='Points to project',
    )
    pl.add_mesh(plane_vis, color='blue', opacity=0.1, label='Projection Plane')
    pl.add_legend()
    pl.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/98-common/images/sphx_glr_project-points-tessellate_001.png
        :alt: project points tessellate
        :srcset: /examples/98-common/images/sphx_glr_project-points-tessellate_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/98-common/images/sphx_glr_project-points-tessellate_001.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.325 seconds)


.. _sphx_glr_download_examples_98-common_project-points-tessellate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: project-points-tessellate.py <project-points-tessellate.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: project-points-tessellate.ipynb <project-points-tessellate.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
