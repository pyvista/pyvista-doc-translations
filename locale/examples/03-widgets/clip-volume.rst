
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/03-widgets/clip-volume.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_03-widgets_clip-volume.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-widgets_clip-volume.py:


.. _clip_volume_widget_example:

Clip Volume Widget
------------------
If you have a structured dataset like a :class:`pyvista.ImageData` or
:class:`pyvista.RectilinearGrid`, you can clip it using the
:func:`pyvista.Plotter.add_volume_clip_plane` widget to better see the internal
structure of the dataset.

.. image:: ../../images/gifs/volume-clip-plane-widget.gif

.. GENERATED FROM PYTHON SOURCE LINES 14-16

.. code-block:: default










.. GENERATED FROM PYTHON SOURCE LINES 21-26

Create the Dataset
~~~~~~~~~~~~~~~~~~
Create a dense :class:`pyvista.ImageData` with dimensions ``(200, 200,
200)`` and set the active scalars to distance from the :attr:`center
<pyvista.DataSet.center>` of the grid.

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: default


    import numpy as np

    import pyvista as pv

    grid = pv.ImageData(dimensions=(200, 200, 200))
    grid['scalars'] = np.linalg.norm(grid.center - grid.points, axis=1)
    grid







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table style='width: 100%;'>
    <tr><th>ImageData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>7880599</td></tr>
    <tr><td>N Points</td><td>8000000</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.990e+02</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 1.990e+02</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 1.990e+02</td></tr>
    <tr><td>Dimensions</td><td>200, 200, 200</td></tr>
    <tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table style='width: 100%;'>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>scalars</b></td><td>Points</td><td>float64</td><td>1</td><td>8.660e-01</td><td>1.723e+02</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Generate the Opacity Array
~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a banded opacity array such that our dataset shows "rings" at certain
values. Have this increase such that higher values (values farther away from
the center) are more opaque.

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default


    opacity = np.zeros(100)
    opacity[::10] = np.geomspace(0.01, 0.75, 10)









.. GENERATED FROM PYTHON SOURCE LINES 48-54

Plot a Single Clip Plane Dataset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Plot the volume with a single clip plane.

Reverse the opacity array such that portions closer to the center are more
opaque.

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default


    pl = pv.Plotter()
    pl.add_volume_clip_plane(grid, normal='-x', opacity=opacity[::-1], cmap='magma')
    pl.show()






.. image-sg:: /examples/03-widgets/images/sphx_glr_clip-volume_001.png
   :alt: clip volume
   :srcset: /examples/03-widgets/images/sphx_glr_clip-volume_001.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 61-68

Plot Multiple Clip Planes
~~~~~~~~~~~~~~~~~~~~~~~~~
Plot the dataset using the :func:`pyvista.Plotter.add_volume_clip_plane` with
the output from :func:`pyvista.Plotter.add_volume` Enable constant
interaction by setting the ``interaction_event`` to ``'always'``.

Disable the arrows to make the plot a bit clearer and flip the opacity array.

.. GENERATED FROM PYTHON SOURCE LINES 68-85

.. code-block:: default


    pl = pv.Plotter()
    vol = pl.add_volume(grid, opacity=opacity)
    vol.prop.interpolation_type = 'linear'
    pl.add_volume_clip_plane(
        vol,
        normal='-x',
        interaction_event='always',
        normal_rotation=False,
    )
    pl.add_volume_clip_plane(
        vol,
        normal='-y',
        interaction_event='always',
        normal_rotation=False,
    )
    pl.show()




.. image-sg:: /examples/03-widgets/images/sphx_glr_clip-volume_002.png
   :alt: clip volume
   :srcset: /examples/03-widgets/images/sphx_glr_clip-volume_002.png
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.356 seconds)


.. _sphx_glr_download_examples_03-widgets_clip-volume.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: clip-volume.py <clip-volume.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: clip-volume.ipynb <clip-volume.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
