
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/03-widgets/plane-widget.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-widgets_plane-widget.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-widgets_plane-widget.py:


.. _plane_widget_example:

Plane Widget
~~~~~~~~~~~~

The plane widget can be enabled and disabled by the
:func:`pyvista.WidgetHelper.add_plane_widget` and
:func:`pyvista.WidgetHelper.clear_plane_widgets` methods respectively.
As with all widgets, you must provide a custom callback method to utilize that
plane. Considering that planes are most commonly used for clipping and slicing
meshes, we have included two helper methods for doing those tasks!

Let's use a plane to clip a mesh:

.. GENERATED FROM PYTHON SOURCE LINES 16-26

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2
    import pyvista as pv
    from pyvista import examples

    vol = examples.download_brain()

    p = pv.Plotter()
    p.add_mesh_clip_plane(vol)
    p.show()




.. image-sg:: /examples/03-widgets/images/sphx_glr_plane-widget_001.png
   :alt: plane widget
   :srcset: /examples/03-widgets/images/sphx_glr_plane-widget_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 27-28

After interacting with the scene, the clipped mesh is available as:

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    p.plane_clipped_meshes





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [UnstructuredGrid (0x7f3a8b05fa60)
      N Cells:	3538080
      N Points:	3613484
      X Bounds:	9.000e+01, 1.800e+02
      Y Bounds:	0.000e+00, 2.160e+02
      Z Bounds:	0.000e+00, 1.800e+02
      N Arrays:	1
    ]



.. GENERATED FROM PYTHON SOURCE LINES 31-34

And here is a screen capture of a user interacting with this

.. image:: ../../images/gifs/plane-clip.gif

.. GENERATED FROM PYTHON SOURCE LINES 36-37

Or you could slice a mesh using the plane widget:

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh_slice(vol)
    p.show()



.. image-sg:: /examples/03-widgets/images/sphx_glr_plane-widget_002.png
   :alt: plane widget
   :srcset: /examples/03-widgets/images/sphx_glr_plane-widget_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 42-43

After interacting with the scene, the slice is available as:

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    p.plane_sliced_meshes





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [PolyData (0x7f3a9a57ab80)
      N Cells:	38880
      N Points:	39277
      X Bounds:	9.000e+01, 9.000e+01
      Y Bounds:	0.000e+00, 2.160e+02
      Z Bounds:	0.000e+00, 1.800e+02
      N Arrays:	1
    ]



.. GENERATED FROM PYTHON SOURCE LINES 46-49

And here is a screen capture of a user interacting with this

.. image:: ../../images/gifs/plane-slice.gif

.. GENERATED FROM PYTHON SOURCE LINES 51-55

Or you could leverage the plane widget for some custom task like glyphing a
vector field along that plane. Note that we have to pass a ``name`` when
calling ``add_mesh`` to ensure that there is only one set of glyphs plotted
at a time.

.. GENERATED FROM PYTHON SOURCE LINES 55-74

.. code-block:: default


    import pyvista as pv
    from pyvista import examples

    mesh = examples.download_carotid()

    p = pv.Plotter()
    p.add_mesh(mesh.contour(8).extract_largest(), opacity=0.5)

    def my_plane_func(normal, origin):
        slc = mesh.slice(normal=normal, origin=origin)
        arrows = slc.glyph(orient='vectors', scale="scalars", factor=0.01)
        p.add_mesh(arrows, name='arrows')

    p.add_plane_widget(my_plane_func)
    p.show_grid()
    p.add_axes()
    p.show()




.. image-sg:: /examples/03-widgets/images/sphx_glr_plane-widget_003.png
   :alt: plane widget
   :srcset: /examples/03-widgets/images/sphx_glr_plane-widget_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-78

And here is a screen capture of a user interacting with this

.. image:: ../../images/gifs/plane-glyph.gif

.. GENERATED FROM PYTHON SOURCE LINES 81-85

Further, a user can disable the arrow vector by setting the
``normal_rotation`` argument to ``False``. For example, here we
programmatically set the normal vector on which we want to translate the
plane and we disable the arrow to prevent its rotation.

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh_slice(vol, normal=(1,1,1), normal_rotation=False)
    p.show()




.. image-sg:: /examples/03-widgets/images/sphx_glr_plane-widget_004.png
   :alt: plane widget
   :srcset: /examples/03-widgets/images/sphx_glr_plane-widget_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-93

The vector is also forcibly disabled anytime the ``assign_to_axis`` argument
is set.

.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh_slice(vol, assign_to_axis='z')
    p.show()



.. image-sg:: /examples/03-widgets/images/sphx_glr_plane-widget_005.png
   :alt: plane widget
   :srcset: /examples/03-widgets/images/sphx_glr_plane-widget_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.190 seconds)


.. _sphx_glr_download_examples_03-widgets_plane-widget.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plane-widget.py <plane-widget.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plane-widget.ipynb <plane-widget.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
