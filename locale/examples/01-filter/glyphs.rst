
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/glyphs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_glyphs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_glyphs.py:


.. _glyph_example:

Plotting Glyphs (Vectors or PolyData)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use vectors in a dataset to plot and orient glyphs/geometric objects.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default


    import numpy as np

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-18

Glyphying can be done via the :func:`pyvista.DataSetFilters.glyph` filter

.. GENERATED FROM PYTHON SOURCE LINES 18-40

.. code-block:: default


    mesh = examples.download_carotid().threshold(145, scalars="scalars")
    mask = mesh['scalars'] < 210
    mesh['scalars'][mask] = 0  # null out smaller vectors

    # Make a geometric object to use as the glyph
    geom = pv.Arrow()  # This could be any dataset

    # Perform the glyph
    glyphs = mesh.glyph(orient="vectors", scale="scalars", factor=0.003, geom=geom)

    # plot using the plotting class
    pl = pv.Plotter()
    pl.add_mesh(glyphs, show_scalar_bar=False, lighting=False, cmap='coolwarm')
    pl.camera_position = [
        (146.53, 91.28, 21.70),
        (125.00, 94.45, 19.81),
        (-0.086, 0.007, 0.996),
    ]  # view only part of the vector field
    cpos = pl.show(return_cpos=True)





.. image-sg:: /examples/01-filter/images/sphx_glr_glyphs_001.png
   :alt: glyphs
   :srcset: /examples/01-filter/images/sphx_glr_glyphs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-43

Another approach is to load the vectors directly to the mesh object and then
access the :attr:`pyvista.DataSet.arrows` property.

.. GENERATED FROM PYTHON SOURCE LINES 43-62

.. code-block:: default


    sphere = pv.Sphere(radius=3.14)

    # make cool swirly pattern
    vectors = np.vstack(
        (
            np.sin(sphere.points[:, 0]),
            np.cos(sphere.points[:, 1]),
            np.cos(sphere.points[:, 2]),
        )
    ).T

    # add and scale
    sphere["vectors"] = vectors * 0.3
    sphere.set_active_vectors("vectors")

    # plot just the arrows
    sphere.arrows.plot()




.. image-sg:: /examples/01-filter/images/sphx_glr_glyphs_002.png
   :alt: glyphs
   :srcset: /examples/01-filter/images/sphx_glr_glyphs_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-64

Plot the arrows and the sphere.

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh(sphere.arrows, lighting=False, scalar_bar_args={'title': "Vector Magnitude"})
    p.add_mesh(sphere, color="grey", ambient=0.6, opacity=0.5, show_edges=False)
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_glyphs_003.png
   :alt: glyphs
   :srcset: /examples/01-filter/images/sphx_glr_glyphs_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-79

Subset of Glyphs
++++++++++++++++

Sometimes you might not want glyphs for every node in the input dataset. In
this case, you can choose to build glyphs for a subset of the input dataset
by using a merging tolerance. Here we specify a merging tolerance of five
percent which equates to five percent of the bounding box's length.

.. GENERATED FROM PYTHON SOURCE LINES 79-90

.. code-block:: default


    # Example dataset with normals
    mesh = examples.load_random_hills()

    # create a subset of arrows using the glyph filter
    arrows = mesh.glyph(scale="Normals", orient="Normals", tolerance=0.05)

    p = pv.Plotter()
    p.add_mesh(arrows, color="black")
    p.add_mesh(mesh, scalars="Elevation", cmap="terrain", smooth_shading=True)
    p.show()



.. image-sg:: /examples/01-filter/images/sphx_glr_glyphs_004.png
   :alt: glyphs
   :srcset: /examples/01-filter/images/sphx_glr_glyphs_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.501 seconds)


.. _sphx_glr_download_examples_01-filter_glyphs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: glyphs.py <glyphs.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: glyphs.ipynb <glyphs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
