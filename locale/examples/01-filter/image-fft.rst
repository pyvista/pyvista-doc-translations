
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/image-fft.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_image-fft.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_image-fft.py:


.. _image_fft_example:

Fast Fourier Transform
~~~~~~~~~~~~~~~~~~~~~~

This example shows how to apply a Fast Fourier Transform (FFT) to a
:class:`pyvista.UniformGrid` using :func:`pyvista.UniformGridFilters.fft`
filter.

Here, we demonstrate FFT usage by denoising an image, effectively removing any
"high frequency" content by performing a `low pass filter
<https://en.wikipedia.org/wiki/Low-pass_filter>`_.

This example was inspired by `Image denoising by FFT
<https://scipy-lectures.org/intro/scipy/auto_examples/solutions/plot_fft_image_denoise.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default


    import numpy as np

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Load the example Moon landing image and plot it.

.. GENERATED FROM PYTHON SOURCE LINES 27-39

.. code-block:: default


    image = examples.download_moonlanding_image()
    print(image.point_data)

    # Create a theme that we can reuse when plotting the image
    grey_theme = pv.themes.DocumentTheme()
    grey_theme.cmap = 'gray'
    grey_theme.show_scalar_bar = False
    grey_theme.axes.show = False
    image.plot(theme=grey_theme, cpos='xy', text='Unprocessed Moon Landing Image')





.. image-sg:: /examples/01-filter/images/sphx_glr_image-fft_001.png
   :alt: image fft
   :srcset: /examples/01-filter/images/sphx_glr_image-fft_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    pyvista DataSetAttributes
    Association     : POINT
    Active Scalars  : PNGImage
    Active Vectors  : None
    Active Texture  : None
    Active Normals  : None
    Contains arrays :
        PNGImage                uint8      (298620,)            SCALARS




.. GENERATED FROM PYTHON SOURCE LINES 40-47

Apply FFT to the image
~~~~~~~~~~~~~~~~~~~~~~
FFT will be applied to the active scalars, ``'PNGImage'``, the default
scalars name when loading a PNG image.

The output from the filter is a complex array stored by the same name unless
specified using ``output_scalars_name``.

.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: default


    fft_image = image.fft()
    fft_image.point_data






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    pyvista DataSetAttributes
    Association     : POINT
    Active Scalars  : PNGImage
    Active Vectors  : None
    Active Texture  : None
    Active Normals  : None
    Contains arrays :
        PNGImage                complex128 (298620,)            SCALARS



.. GENERATED FROM PYTHON SOURCE LINES 53-60

Plot the FFT of the image
~~~~~~~~~~~~~~~~~~~~~~~~~
Plot the absolute value of the FFT of the image.

Note that we are effectively viewing the "frequency" of the data in this
image, where the four corners contain the low frequency content of the image,
and the middle is the high frequency content of the image.

.. GENERATED FROM PYTHON SOURCE LINES 60-71

.. code-block:: default


    fft_image.plot(
        scalars=np.abs(fft_image.point_data['PNGImage']),
        cpos="xy",
        theme=grey_theme,
        log_scale=True,
        text='Moon Landing Image FFT',
        copy_mesh=True,  # don't overwrite scalars when plotting
    )





.. image-sg:: /examples/01-filter/images/sphx_glr_image-fft_002.png
   :alt: image fft
   :srcset: /examples/01-filter/images/sphx_glr_image-fft_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-84

Remove the noise from the ``fft_image``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Effectively, we want to remove high frequency (noisy) data from our image.
First, let's reshape by the size of the image.

Next, perform a low pass filter by removing the middle 80% of the content of
the image. Note that the high frequency content is in the middle of the array.

.. note::
   It is easier and more efficient to use the existing
   :func:`pyvista.UniformGridFilters.low_pass` filter. This section is here
   for demonstration purposes.

.. GENERATED FROM PYTHON SOURCE LINES 84-103

.. code-block:: default


    ratio_to_keep = 0.10

    # modify the fft_image data
    width, height, _ = fft_image.dimensions
    data = fft_image['PNGImage'].reshape(height, width)  # note: axes flipped
    data[int(height * ratio_to_keep) : -int(height * ratio_to_keep)] = 0
    data[:, int(width * ratio_to_keep) : -int(width * ratio_to_keep)] = 0

    fft_image.plot(
        scalars=np.abs(data),
        cpos="xy",
        theme=grey_theme,
        log_scale=True,
        text='Moon Landing Image FFT with Noise Removed',
        copy_mesh=True,  # don't overwrite scalars when plotting
    )





.. image-sg:: /examples/01-filter/images/sphx_glr_image-fft_003.png
   :alt: image fft
   :srcset: /examples/01-filter/images/sphx_glr_image-fft_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-107

Convert to the spatial domain using reverse FFT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finally, convert the image data back to the "spatial" domain and plot it.

.. GENERATED FROM PYTHON SOURCE LINES 107-112

.. code-block:: default



    rfft = fft_image.rfft()
    rfft['PNGImage'] = np.real(rfft['PNGImage'])
    rfft.plot(cpos="xy", theme=grey_theme, text='Processed Moon Landing Image')



.. image-sg:: /examples/01-filter/images/sphx_glr_image-fft_004.png
   :alt: image fft
   :srcset: /examples/01-filter/images/sphx_glr_image-fft_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.586 seconds)


.. _sphx_glr_download_examples_01-filter_image-fft.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: image-fft.py <image-fft.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: image-fft.ipynb <image-fft.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
