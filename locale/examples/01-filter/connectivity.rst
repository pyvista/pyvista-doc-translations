
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/connectivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01-filter_connectivity.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_connectivity.py:


.. _connectivity_example:

Connectivity
~~~~~~~~~~~~

This example highlights some applications of the :func:`~pyvista.DataSetFilters.connectivity`
filter.

.. GENERATED FROM PYTHON SOURCE LINES 13-19

Remove Noisy Isosurfaces
~~~~~~~~~~~~~~~~~~~~~~~~

Use connectivity to remove noisy isosurfaces.

This section is similar to `this VTK example <https://kitware.github.io/vtk-examples/site/Python/VisualizationAlgorithms/PineRootConnectivity/>`__.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default


    import numpy as np

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 27-28

Load a dataset with noisy isosurfaces.

.. GENERATED FROM PYTHON SOURCE LINES 28-37

.. code-block:: default

    pine_roots = examples.download_pine_roots()

    # Plot the raw data
    cpos = [(40.6018, -280.533, 47.0172), (40.6018, 37.2813, 50.1953), (0.0, 0.0, 1.0)]
    p = pv.Plotter()
    p.add_mesh(pine_roots, color='#965434')
    p.add_mesh(pine_roots.outline())
    p.show(cpos=cpos)








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_connectivity_001.png
        :alt: connectivity
        :srcset: /examples/01-filter/images/sphx_glr_connectivity_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_connectivity_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 38-42

The plotted mesh is very noisy. We can extract the largest connected
isosurface using the ``'largest'`` ``extraction_mode`` of  the
:func:`~pyvista.DataSetFilters.connectivity` filter. Equivalently,
:func:`~pyvista.DataSetFilters.extract_largest` may also be used.

.. GENERATED FROM PYTHON SOURCE LINES 42-54

.. code-block:: default


    # Grab the largest connected volume present
    largest = pine_roots.connectivity('largest')
    # or: largest = mesh.extract_largest()

    p = pv.Plotter()
    p.add_mesh(largest, color='#965434')
    p.add_mesh(pine_roots.outline())
    p.camera_position = cpos
    p.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_connectivity_002.png
        :alt: connectivity
        :srcset: /examples/01-filter/images/sphx_glr_connectivity_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_connectivity_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 55-62

Extract Small Regions
~~~~~~~~~~~~~~~~~~~~~

Use connectivity to extract the smaller 'noisy' regions that were
removed in the remove noisy isosurfaces example above.

First, get a list of all region ids.

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    all_regions = pine_roots.connectivity('all')
    region_ids = np.unique(all_regions['RegionId'])








.. GENERATED FROM PYTHON SOURCE LINES 66-70

Since the region IDs are sorted in descending order (by cell count),
we can extract all regions *except* for the largest one using the
``'specified'`` ``extraction_mode`` of the :func:`~pyvista.DataSetFilters.connectivity`
filter.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    noise_region_ids = region_ids[1::]  # All region ids except '0'
    noise = pine_roots.connectivity('specified', noise_region_ids)








.. GENERATED FROM PYTHON SOURCE LINES 74-75

Plot the noisy regions. For context, also plot the largest region.

.. GENERATED FROM PYTHON SOURCE LINES 75-83

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(noise, cmap='glasbey', categories=True)
    p.add_mesh(largest, color='lightgray', opacity=0.1)
    p.add_mesh(pine_roots.outline())
    p.camera_position = cpos
    p.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_connectivity_003.png
        :alt: connectivity
        :srcset: /examples/01-filter/images/sphx_glr_connectivity_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_connectivity_003.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 84-92

Label Disconnected Regions
~~~~~~~~~~~~~~~~~~~~~~~~~~

Use connectivity to label all disconnected regions.

This section is similar to `this VTK example <https://examples.vtk.org/site/Cxx/PolyData/ColorDisconnectedRegionsDemo/>`__.

First, load a dataset with disconnected regions.

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: default

    mesh = examples.download_foot_bones()








.. GENERATED FROM PYTHON SOURCE LINES 95-96

Extract all regions.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default

    conn = mesh.connectivity('all')








.. GENERATED FROM PYTHON SOURCE LINES 99-100

Plot the labeled regions.

.. GENERATED FROM PYTHON SOURCE LINES 100-116

.. code-block:: default


    # Format scalar bar text for integer values.
    scalar_bar_args = dict(
        fmt='%.f',
    )

    cpos = [(10.5, 12.2, 18.3), (0.0, 0.0, 0.0), (0.0, 1.0, 0.0)]

    conn.plot(
        categories=True,
        cmap='glasbey',
        scalar_bar_args=scalar_bar_args,
        cpos=cpos,
    )









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_connectivity_004.png
        :alt: connectivity
        :srcset: /examples/01-filter/images/sphx_glr_connectivity_004.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_connectivity_004.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 117-125

Extract Regions From Seed Points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use connectivity to extract regions of interest using scalar data and
seed points.

First, create a dataset with salient features. Here, we create hills
and use curvature to define its peaks and valleys.

.. GENERATED FROM PYTHON SOURCE LINES 125-128

.. code-block:: default

    mesh = pv.ParametricRandomHills()
    mesh["Curvature"] = mesh.curvature()








.. GENERATED FROM PYTHON SOURCE LINES 129-133

Visualize the peaks and valleys.
Peaks have large positive curvature (i.e. are convex).
Valleys have large negative curvature (i.e. are concave).
Flat regions have curvature close to zero.

.. GENERATED FROM PYTHON SOURCE LINES 133-140

.. code-block:: default

    mesh.plot(
        clim=[-0.5, 0.5],
        cmap='bwr',
        below_color='blue',
        above_color='red',
    )








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_connectivity_005.png
        :alt: connectivity
        :srcset: /examples/01-filter/images/sphx_glr_connectivity_005.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_connectivity_005.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 141-145

Extract a region of interest using the
``'point_seed'`` ``extraction_mode`` of the :func:`~pyvista.DataSetFilters.connectivity`
filter. Let's extract the steepest peak using a seed point where the
curvature is maximized.

.. GENERATED FROM PYTHON SOURCE LINES 145-155

.. code-block:: default


    # Get seed point
    peak_point_id = np.argmax(mesh['Curvature'])

    # Define a scalar range of the region to extract
    data_min, data_max = mesh.get_data_range()
    peak_range = [0.2, data_max]  # Peak if curvature > 0.2

    peak_mesh = mesh.connectivity('point_seed', peak_point_id, scalar_range=peak_range)








.. GENERATED FROM PYTHON SOURCE LINES 156-159

Let's also extract the closest valley to the steepest peak using the
``'closest'`` ``extraction_mode`` of the :func:`~pyvista.DataSetFilters.connectivity`
filter.

.. GENERATED FROM PYTHON SOURCE LINES 159-163

.. code-block:: default

    valley_range = [data_min, -0.2]  # Valley if curvature < -0.2
    peak_point = mesh.points[peak_point_id]
    valley_mesh = mesh.connectivity('closest', peak_point, scalar_range=valley_range)








.. GENERATED FROM PYTHON SOURCE LINES 164-165

Plot extracted regions.

.. GENERATED FROM PYTHON SOURCE LINES 165-171

.. code-block:: default

    p = pv.Plotter()
    _ = p.add_mesh(mesh, style='wireframe', color='lightgray')
    _ = p.add_mesh(peak_mesh, color='red', label='Steepest Peak')
    _ = p.add_mesh(valley_mesh, color='blue', label='Closest Valley')
    _ = p.add_legend()
    p.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_connectivity_006.png
        :alt: connectivity
        :srcset: /examples/01-filter/images/sphx_glr_connectivity_006.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_connectivity_006.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.768 seconds)


.. _sphx_glr_download_examples_01-filter_connectivity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: connectivity.py <connectivity.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: connectivity.ipynb <connectivity.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
