
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/sampling_functions_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_sampling_functions_3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_sampling_functions_3d.py:


Sample Function: Perlin Noise in 3D
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we use :func:`pyvista.core.imaging.sample_function` to sample
Perlin noise over a region to generate random terrain.

Video games like Minecraft use Perlin noise to create terrain.  Here,
we create a voxelized mesh similar to a Minecraft "cave".

.. GENERATED FROM PYTHON SOURCE LINES 11-14

.. code-block:: default


    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 15-24

Generate Perlin Noise over a 3D StructuredGrid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feel free to change the values of ``freq`` to change the shape of
the "caves".  For example, lowering the frequency will make the
caves larger and more expansive, while a higher frequency in any
direction will make the caves appear more "vein-like" and less open.

Change the threshold to reduce or increase the percent of the
terrain that is open or closed

.. GENERATED FROM PYTHON SOURCE LINES 24-31

.. code-block:: default


    freq = (1, 1, 1)
    noise = pv.perlin_noise(1, freq, (0, 0, 0))
    grid = pv.sample_function(noise, [0, 3.0, -0, 1.0, 0, 1.0], dim=(120, 40, 40))
    out = grid.threshold(0.02)
    out






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>109863</td></tr>
    <tr><td>N Points</td><td>121638</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 3.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>scalars</b></td><td>Points</td><td>float64</td><td>1</td><td>-6.143e-02</td><td>9.082e-01</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 32-33

color limits without blue

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: default

    mn, mx = [out['scalars'].min(), out['scalars'].max()]
    clim = (mn, mx * 1.8)

    out.plot(
        cmap='gist_earth_r',
        background='white',
        show_scalar_bar=False,
        lighting=True,
        clim=clim,
        show_edges=False,
    )



.. image-sg:: /examples/01-filter/images/sphx_glr_sampling_functions_3d_001.png
   :alt: sampling functions 3d
   :srcset: /examples/01-filter/images/sphx_glr_sampling_functions_3d_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.677 seconds)


.. _sphx_glr_download_examples_01-filter_sampling_functions_3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: sampling_functions_3d.py <sampling_functions_3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: sampling_functions_3d.ipynb <sampling_functions_3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
