
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/compute-normals.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_compute-normals.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_compute-normals.py:


.. _surface_normal_example:

Computing Surface Normals
~~~~~~~~~~~~~~~~~~~~~~~~~


Compute normals on a surface.

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2
    from pyvista import examples
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 16-19

Computing the normals of a surface is quite easy using
:class:`pyvista.PolyData`'s :func:`pyvista.PolyDataFilters.compute_normals`
method.

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    mesh = examples.download_topo_global()
    mesh.plot(cmap="gist_earth", show_scalar_bar=False)




.. image-sg:: /examples/01-filter/images/sphx_glr_compute-normals_001.png
   :alt: compute normals
   :srcset: /examples/01-filter/images/sphx_glr_compute-normals_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 24-30

Now we have a surface dataset of the globe loaded - unfortunately, the
dataset shows the globe with a uniform radius which hides topographic relief.
Using :func:`pyvista.PolyData.compute_normals`, we can compute the normal
vectors on the globe at all points in the dataset, then use the values given
in the dataset to warp the surface in the normals direction to create some
exaggerated topographic relief.

.. GENERATED FROM PYTHON SOURCE LINES 30-41

.. code-block:: default


    # Compute the normals in-place and use them to warp the globe
    mesh.compute_normals(inplace=True)  # this activates the normals as well

    # Now use those normals to warp the surface
    warp = mesh.warp_by_scalar(factor=0.5e-5)

    # And let's see it!
    warp.plot(cmap="gist_earth", show_scalar_bar=False)





.. image-sg:: /examples/01-filter/images/sphx_glr_compute-normals_002.png
   :alt: compute normals
   :srcset: /examples/01-filter/images/sphx_glr_compute-normals_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 42-45

We could also use face/cell normals to extract all the faces of a mesh
facing a general direction. In the following snippet, we take a mesh, compute
the normals along its cell faces, and extract the faces that face upward.

.. GENERATED FROM PYTHON SOURCE LINES 45-61

.. code-block:: default


    mesh = examples.download_nefertiti()
    # Compute normals
    mesh.compute_normals(cell_normals=True, point_normals=False, inplace=True)

    # Get list of cell IDs that meet condition
    ids = np.arange(mesh.n_cells)[mesh['Normals'][:,2] > 0.0]

    # Extract those cells
    top = mesh.extract_cells(ids)

    cpos = [(-834.3184529757553, -918.4677714398535, 236.5468795300025),
     (11.03829376004883, -13.642289291587957, -35.91218884207208),
     (0.19212361465657216, 0.11401076390090074, 0.9747256344254143)]

    top.plot(cpos=cpos, color=True)



.. image-sg:: /examples/01-filter/images/sphx_glr_compute-normals_003.png
   :alt: compute normals
   :srcset: /examples/01-filter/images/sphx_glr_compute-normals_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.304 seconds)


.. _sphx_glr_download_examples_01-filter_compute-normals.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute-normals.py <compute-normals.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute-normals.ipynb <compute-normals.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
