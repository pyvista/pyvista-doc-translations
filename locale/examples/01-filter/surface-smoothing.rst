
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/surface-smoothing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01-filter_surface-smoothing.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_surface-smoothing.py:


.. _surface_smoothing_example:

Surface Smoothing
~~~~~~~~~~~~~~~~~

Smoothing rough edges of a surface mesh

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: default


    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 15-21

Suppose you extract a volumetric subset of a dataset that has roughly defined
edges. Perhaps you'd like a smooth representation of that model region. This
can be achieved by extracting the bounding surface of the volume and applying
a :func:`pyvista.PolyDataFilters.smooth` filter.

The below code snippet loads a sample roughly edged volumetric dataset:

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    # Vector to view rough edges
    cpos = [-2, 5, 3]

    # Load dataset
    data = examples.load_uniform()
    # Extract a rugged volume
    vol = data.threshold_percent(30, invert=1)
    vol.plot(show_edges=True, cpos=cpos, show_scalar_bar=False)




.. image-sg:: /examples/01-filter/images/sphx_glr_surface-smoothing_001.png
   :alt: surface smoothing
   :srcset: /examples/01-filter/images/sphx_glr_surface-smoothing_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 32-35

Extract the outer surface of the volume using the
:func:`pyvista.DataSetFilters.extract_geometry` filter and then apply the
smoothing filter:

.. GENERATED FROM PYTHON SOURCE LINES 35-43

.. code-block:: default


    # Get the out surface as PolyData
    surf = vol.extract_geometry()
    # Smooth the surface
    smooth = surf.smooth()
    smooth.plot(show_edges=True, cpos=cpos, show_scalar_bar=False)





.. image-sg:: /examples/01-filter/images/sphx_glr_surface-smoothing_002.png
   :alt: surface smoothing
   :srcset: /examples/01-filter/images/sphx_glr_surface-smoothing_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-46

Not smooth enough? Try increasing the number of iterations for the Laplacian
smoothing algorithm:

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: default


    # Smooth the surface even more
    smooth = surf.smooth(n_iter=100)
    smooth.plot(show_edges=True, cpos=cpos, show_scalar_bar=False)





.. image-sg:: /examples/01-filter/images/sphx_glr_surface-smoothing_003.png
   :alt: surface smoothing
   :srcset: /examples/01-filter/images/sphx_glr_surface-smoothing_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-56

Still not smooth enough? Increase the number of iterations for the Laplacian
smoothing algorithm to a crazy high value. Note how this causes the mesh to
"shrink":

.. GENERATED FROM PYTHON SOURCE LINES 56-70

.. code-block:: default


    # Smooth the surface EVEN MORE
    smooth = surf.smooth(n_iter=1000)

    # extract the edges of the original unsmoothed mesh
    orig_edges = surf.extract_feature_edges()

    pl = pv.Plotter()
    pl.add_mesh(smooth, show_edges=True, show_scalar_bar=False)
    pl.camera_position = cpos
    pl.add_mesh(orig_edges, show_scalar_bar=False, color='k', line_width=2)
    pl.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_surface-smoothing_004.png
   :alt: surface smoothing
   :srcset: /examples/01-filter/images/sphx_glr_surface-smoothing_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-79

Taubin Smoothing
~~~~~~~~~~~~~~~~
You can reduce the amount of surface shrinkage by using Taubin smoothing
rather than the default laplacian smoothing implemented in :func:`smooth()
<pyvista.PolyDataFilters.smooth>`. In this example, you can see how Taubin
smoothing maintains the volume relative to the original mesh.

Also, note that the number of iterations can be reduced to get the same approximate amount of smoothing. This is because Taubin smoothing is more efficient.

.. GENERATED FROM PYTHON SOURCE LINES 79-92

.. code-block:: default


    smooth_w_taubin = surf.smooth_taubin(n_iter=50, pass_band=0.05)

    pl = pv.Plotter()
    pl.add_mesh(smooth_w_taubin, show_edges=True, show_scalar_bar=False)
    pl.camera_position = cpos
    pl.add_mesh(orig_edges, show_scalar_bar=False, color='k', line_width=2)
    pl.show()

    # output the volumes of the original and smoothed meshes
    print(f'Original surface volume:   {surf.volume:.1f}')
    print(f'Laplacian smoothed volume: {smooth.volume:.1f}')
    print(f'Taubin smoothed volume:    {smooth_w_taubin.volume:.1f}')



.. image-sg:: /examples/01-filter/images/sphx_glr_surface-smoothing_005.png
   :alt: surface smoothing
   :srcset: /examples/01-filter/images/sphx_glr_surface-smoothing_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Original surface volume:   597.0
    Laplacian smoothed volume: 402.1
    Taubin smoothed volume:    589.8





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.248 seconds)


.. _sphx_glr_download_examples_01-filter_surface-smoothing.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: surface-smoothing.py <surface-smoothing.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: surface-smoothing.ipynb <surface-smoothing.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
