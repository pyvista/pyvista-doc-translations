
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/subdivide.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_subdivide.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_subdivide.py:


.. _subdivide_example:

Subdivide Cells
~~~~~~~~~~~~~~~

Increase the number of triangles in a single, connected triangular mesh.

The :func:`pyvista.PolyDataFilters.subdivide` filter utilizes three different
subdivision algorithms to subdivide a mesh's cells: `butterfly`, `loop`,
or `linear`.

.. GENERATED FROM PYTHON SOURCE LINES 13-16

.. code-block:: default

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-20

First, let's load a **triangulated** mesh to subdivide. We can use the
:func:`pyvista.DataSetFilters.triangulate` filter to ensure the mesh we are
using is purely triangles.

.. GENERATED FROM PYTHON SOURCE LINES 20-28

.. code-block:: default

    mesh = examples.download_bunny_coarse().triangulate()

    cpos = [
        (-0.02788175062966399, 0.19293295656233056, 0.4334449972621349),
        (-0.053260899930287015, 0.08881197167521734, -9.016948161029588e-05),
        (-0.10170607813337212, 0.9686438023715356, -0.22668272496584665),
    ]








.. GENERATED FROM PYTHON SOURCE LINES 29-32

Now, lets do a few subdivisions with the mesh and compare the results.
Below is a helper function to make a comparison plot of thee different
subdivisions.

.. GENERATED FROM PYTHON SOURCE LINES 32-59

.. code-block:: default



    def plot_subdivisions(mesh, a, b):
        display_args = dict(show_edges=True, color=True)
        p = pv.Plotter(shape=(3, 3))

        for i in range(3):
            p.subplot(i, 0)
            p.add_mesh(mesh, **display_args)
            p.add_text("Original Mesh")

        def row_plot(row, subfilter):
            subs = [a, b]
            for i in range(2):
                p.subplot(row, i + 1)
                p.add_mesh(mesh.subdivide(subs[i], subfilter=subfilter), **display_args)
                p.add_text(f"{subfilter} subdivision of {subs[i]}")

        row_plot(0, "linear")
        row_plot(1, "butterfly")
        row_plot(2, "loop")

        p.link_views()
        p.view_isometric()
        return p









.. GENERATED FROM PYTHON SOURCE LINES 60-61

Run the subdivisions for 1 and 3 levels.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: default


    plotter = plot_subdivisions(mesh, 1, 3)
    plotter.camera_position = cpos
    plotter.show()



.. image-sg:: /examples/01-filter/images/sphx_glr_subdivide_001.png
   :alt: subdivide
   :srcset: /examples/01-filter/images/sphx_glr_subdivide_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.068 seconds)


.. _sphx_glr_download_examples_01-filter_subdivide.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: subdivide.py <subdivide.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: subdivide.ipynb <subdivide.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
