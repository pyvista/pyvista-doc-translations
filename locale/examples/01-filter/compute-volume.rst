
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/compute-volume.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_compute-volume.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_compute-volume.py:


.. _volumetric_example:

Volumetric Analysis
~~~~~~~~~~~~~~~~~~~


Calculate mass properties such as the volume or area of datasets

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 4
    import numpy as np

    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-22

Computing mass properties such as the volume or area of datasets in PyVista
is quite easy using the :func:`pyvista.DataSetFilters.compute_cell_sizes`
filter and the :attr:`pyvista.DataSet.volume` property on all PyVista meshes.

Let's get started with a simple gridded mesh:

.. GENERATED FROM PYTHON SOURCE LINES 22-27

.. code-block:: default


    # Load a simple example mesh
    dataset = examples.load_uniform()
    dataset.set_active_scalars("Spatial Cell Data")








.. GENERATED FROM PYTHON SOURCE LINES 28-31

We can then calculate the volume of every cell in the array using the
``.compute_cell_sizes`` filter which will add arrays to the cell data of the
mesh core the volume and area by default.

.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: default


    # Compute volumes and areas
    sized = dataset.compute_cell_sizes()

    # Grab volumes for all cells in the mesh
    cell_volumes = sized.cell_data["Volume"]








.. GENERATED FROM PYTHON SOURCE LINES 39-41

We can also compute the total volume of the mesh using the ``.volume``
property:

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default


    # Compute the total volume of the mesh
    volume = dataset.volume








.. GENERATED FROM PYTHON SOURCE LINES 46-48

Okay awesome! But what if we have have a dataset that we threshold with two
volumetric bodies left over in one dataset? Take this for example:

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default



    threshed = dataset.threshold_percent([0.15, 0.50], invert=True)
    threshed.plot(show_grid=True, cpos=[-2, 5, 3])




.. image-sg:: /examples/01-filter/images/sphx_glr_compute-volume_001.png
   :alt: compute volume
   :srcset: /examples/01-filter/images/sphx_glr_compute-volume_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-57

We could then assign a classification array for the two bodies, compute the
cell sizes, then extract the volumes of each body. Note that there is a
simpler implementation of this below in :ref:`split_vol_ref`.

.. GENERATED FROM PYTHON SOURCE LINES 57-77

.. code-block:: default


    # Create a classifying array to ID each body
    rng = dataset.get_data_range()
    cval = ((rng[1] - rng[0]) * 0.20) + rng[0]
    classifier = threshed.cell_data["Spatial Cell Data"] > cval

    # Compute cell volumes
    sizes = threshed.compute_cell_sizes()
    volumes = sizes.cell_data["Volume"]

    # Split volumes based on classifier and get volumes!
    idx = np.argwhere(classifier)
    hvol = np.sum(volumes[idx])
    idx = np.argwhere(~classifier)
    lvol = np.sum(volumes[idx])

    print(f"Low grade volume: {lvol}")
    print(f"High grade volume: {hvol}")
    print(f"Original volume: {dataset.volume}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Low grade volume: 518.0
    High grade volume: 35.0
    Original volume: 729.0




.. GENERATED FROM PYTHON SOURCE LINES 78-81

Or better yet, you could simply extract the largest volume from your
thresholded dataset by passing ``largest=True`` to the ``connectivity``
filter or by using ``extract_largest`` filter (both are equivalent).

.. GENERATED FROM PYTHON SOURCE LINES 81-93

.. code-block:: default


    # Grab the largest connected volume present
    largest = threshed.connectivity(largest=True)
    # or: largest = threshed.extract_largest()

    # Get volume as numeric value
    large_volume = largest.volume

    # Display it!
    largest.plot(show_grid=True, cpos=[-2, 5, 3])





.. image-sg:: /examples/01-filter/images/sphx_glr_compute-volume_002.png
   :alt: compute volume
   :srcset: /examples/01-filter/images/sphx_glr_compute-volume_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-107

-----

.. _split_vol_ref:

Splitting Volumes
+++++++++++++++++

What if instead, we wanted to split all the different connected bodies /
volumes in a dataset like the one above? We could use the
:func:`pyvista.DataSetFilters.split_bodies` filter to extract all the
different connected volumes in a dataset into blocks in a
:class:`pyvista.MultiBlock` dataset. For example, lets split the thresholded
volume in the example above:

.. GENERATED FROM PYTHON SOURCE LINES 107-118

.. code-block:: default


    # Load a simple example mesh
    dataset = examples.load_uniform()
    dataset.set_active_scalars("Spatial Cell Data")
    threshed = dataset.threshold_percent([0.15, 0.50], invert=True)

    bodies = threshed.split_bodies()

    for i, body in enumerate(bodies):
        print(f"Body {i} volume: {body.volume:.3f}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Body 0 volume: 518.000
    Body 1 volume: 35.000




.. GENERATED FROM PYTHON SOURCE LINES 119-124

.. code-block:: default



    bodies.plot(show_grid=True, multi_colors=True, cpos=[-2, 5, 3])





.. image-sg:: /examples/01-filter/images/sphx_glr_compute-volume_003.png
   :alt: compute volume
   :srcset: /examples/01-filter/images/sphx_glr_compute-volume_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 125-135

-----

A Real Dataset
++++++++++++++

Here is a realistic training dataset of fluvial channels in the subsurface.
This will threshold the channels from the dataset then separate each
significantly large body and compute the volumes for each!

Load up the data and threshold the channels:

.. GENERATED FROM PYTHON SOURCE LINES 135-139

.. code-block:: default


    data = examples.load_channels()
    channels = data.threshold([0.9, 1.1])








.. GENERATED FROM PYTHON SOURCE LINES 140-141

Now extract all the different bodies and compute their volumes:

.. GENERATED FROM PYTHON SOURCE LINES 141-153

.. code-block:: default


    bodies = channels.split_bodies()
    # Now remove all bodies with a small volume
    for key in bodies.keys():
        b = bodies[key]
        vol = b.volume
        if vol < 1000.0:
            del bodies[key]
            continue
        # Now lets add a volume array to all blocks
        b.cell_data["TOTAL VOLUME"] = np.full(b.n_cells, vol)








.. GENERATED FROM PYTHON SOURCE LINES 154-155

Print out the volumes for each body:

.. GENERATED FROM PYTHON SOURCE LINES 155-159

.. code-block:: default


    for i, body in enumerate(bodies):
        print(f"Body {i:02d} volume: {body.volume:.3f}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Body 00 volume: 66761.000
    Body 01 volume: 16120.000
    Body 02 volume: 1150.000
    Body 03 volume: 5166.000
    Body 04 volume: 2085.000
    Body 05 volume: 12490.000
    Body 06 volume: 152667.000
    Body 07 volume: 32520.000
    Body 08 volume: 18238.000
    Body 09 volume: 152638.000
    Body 10 volume: 1889.000
    Body 11 volume: 31866.000
    Body 12 volume: 9861.000
    Body 13 volume: 108024.000
    Body 14 volume: 1548.000
    Body 15 volume: 27857.000
    Body 16 volume: 1443.000
    Body 17 volume: 8239.000
    Body 18 volume: 12550.000
    Body 19 volume: 18269.000
    Body 20 volume: 2270.000




.. GENERATED FROM PYTHON SOURCE LINES 160-161

And visualize all the different volumes:

.. GENERATED FROM PYTHON SOURCE LINES 161-163

.. code-block:: default


    bodies.plot(scalars="TOTAL VOLUME", cmap="viridis", show_grid=True)



.. image-sg:: /examples/01-filter/images/sphx_glr_compute-volume_004.png
   :alt: compute volume
   :srcset: /examples/01-filter/images/sphx_glr_compute-volume_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.171 seconds)


.. _sphx_glr_download_examples_01-filter_compute-volume.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute-volume.py <compute-volume.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute-volume.ipynb <compute-volume.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
