
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/using-filters.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_using-filters.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_using-filters.py:


.. _common_filter_example:

Using Common Filters
~~~~~~~~~~~~~~~~~~~~

Using common filters like thresholding and clipping.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 15-30

PyVista wrapped data objects have a suite of common filters ready for immediate
use directly on the object. These filters include the following
(see :ref:`filters_ref` for a complete list):

* ``slice``: creates a single slice through the input dataset on a user defined plane
* ``slice_orthogonal``: creates a ``MultiBlock`` dataset of three orthogonal slices
* ``slice_along_axis``: creates a ``MultiBlock`` dataset of many slices along a specified axis
* ``threshold``: Thresholds a dataset by a single value or range of values
* ``threshold_percent``: Threshold by percentages of the scalar range
* ``clip``: Clips the dataset by a user defined plane
* ``outline_corners``: Outlines the corners of the data extent
* ``extract_geometry``: Extract surface geometry

To use these filters, call the method of your choice directly on your data
object:

.. GENERATED FROM PYTHON SOURCE LINES 30-39

.. code-block:: default


    dataset = examples.load_uniform()
    dataset.set_active_scalars("Spatial Point Data")

    # Apply a threshold over a data range
    threshed = dataset.threshold([100, 500])

    outline = dataset.outline()








.. GENERATED FROM PYTHON SOURCE LINES 40-48

And now there is a thresholded version of the input dataset in the new
``threshed`` object. To learn more about what keyword arguments are available to
alter how filters are executed, print the docstring for any filter attached to
PyVista objects with either ``help(dataset.threshold)`` or using ``shift+tab``
in an IPython environment.

We can now plot this filtered dataset along side an outline of the original
dataset

.. GENERATED FROM PYTHON SOURCE LINES 48-56

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh(outline, color="k")
    p.add_mesh(threshed)
    p.camera_position = [-2, 5, 3]
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_using-filters_001.png
   :alt: using filters
   :srcset: /examples/01-filter/images/sphx_glr_using-filters_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 57-58

What about other filters? Let's collect a few filter results and compare them:

.. GENERATED FROM PYTHON SOURCE LINES 58-87

.. code-block:: default


    contours = dataset.contour()
    slices = dataset.slice_orthogonal()
    glyphs = dataset.glyph(factor=1e-3, geom=pv.Sphere())

    p = pv.Plotter(shape=(2, 2))
    # Show the threshold
    p.add_mesh(outline, color="k")
    p.add_mesh(threshed, show_scalar_bar=False)
    p.camera_position = [-2, 5, 3]
    # Show the contour
    p.subplot(0, 1)
    p.add_mesh(outline, color="k")
    p.add_mesh(contours, show_scalar_bar=False)
    p.camera_position = [-2, 5, 3]
    # Show the slices
    p.subplot(1, 0)
    p.add_mesh(outline, color="k")
    p.add_mesh(slices, show_scalar_bar=False)
    p.camera_position = [-2, 5, 3]
    # Show the glyphs
    p.subplot(1, 1)
    p.add_mesh(outline, color="k")
    p.add_mesh(glyphs, show_scalar_bar=False)
    p.camera_position = [-2, 5, 3]

    p.link_views()
    p.show()




.. image-sg:: /examples/01-filter/images/sphx_glr_using-filters_002.png
   :alt: using filters
   :srcset: /examples/01-filter/images/sphx_glr_using-filters_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-100

Filter Pipeline
+++++++++++++++

In VTK, filters are often used in a pipeline where each algorithm passes its
output to the next filtering algorithm. In PyVista, we can mimic the
filtering pipeline through a chain; attaching each filter to the last filter.
In the following example, several filters are chained together:

1. First, and empty ``threshold`` filter to clean out any ``NaN`` values.
2. Use an ``elevation`` filter to generate scalar values corresponding to height.
3. Use the ``clip`` filter to cut the dataset in half.
4. Create three slices along each axial plane using the ``slice_orthogonal`` filter.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default


    # Apply a filtering chain
    result = dataset.threshold().elevation().clip(normal="z").slice_orthogonal()








.. GENERATED FROM PYTHON SOURCE LINES 105-107

And to view this filtered data, simply call the ``plot`` method
(``result.plot()``) or create a rendering scene:

.. GENERATED FROM PYTHON SOURCE LINES 107-113

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh(outline, color="k")
    p.add_mesh(result, scalars="Elevation")
    p.view_isometric()
    p.show()



.. image-sg:: /examples/01-filter/images/sphx_glr_using-filters_003.png
   :alt: using filters
   :srcset: /examples/01-filter/images/sphx_glr_using-filters_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.297 seconds)


.. _sphx_glr_download_examples_01-filter_using-filters.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: using-filters.py <using-filters.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: using-filters.ipynb <using-filters.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
