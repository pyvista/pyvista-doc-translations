
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/clipping-with-surface.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_clipping-with-surface.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_clipping-with-surface.py:


.. _clip_with_surface_example:

Clipping with a Surface
~~~~~~~~~~~~~~~~~~~~~~~

Clip any PyVista dataset by a :class:`pyvista.PolyData` surface mesh using
the :func:`pyvista.DataSetFilters.clip_surface` filter.

Note that we first demonstrate how the clipping is performed by computing an
implicit distance and thresholding the mesh. This thresholding is one approach
to clip by a surface, and preserve the original geometry of the given mesh,
but many folks leverage the ``clip_surface`` filter to triangulate/tessellate
the mesh geometries along the clip.

.. GENERATED FROM PYTHON SOURCE LINES 16-22

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 4
    import pyvista as pv
    from pyvista import examples
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 23-40

.. code-block:: default

    surface = pv.Cone(direction=(0,0,-1), height=3.0, radius=1,
                      resolution=50, capping=False)

    # Make a gridded dataset
    n = 51
    xx = yy = zz = 1 - np.linspace(0, n, n) * 2 / (n-1)
    dataset = pv.RectilinearGrid(xx, yy, zz)

    # Preview the problem
    p = pv.Plotter()
    p.add_mesh(surface, color='w', label='Surface')
    p.add_mesh(dataset, color='gold', show_edges=True,
               opacity=0.75, label='To Clip')
    p.add_legend()
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_clipping-with-surface_001.png
   :alt: clipping with surface
   :srcset: /examples/01-filter/images/sphx_glr_clipping-with-surface_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-46

Take a look at the implicit function used to perform the surface clipping by
using the :func:`pyvista.DataSetFilters.compute_implicit_distance` filter.
The clipping operation field is performed where the ``implicit_distance``
field is zero and the ``invert`` flag controls which sides of zero to
preserve.

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    dataset.compute_implicit_distance(surface, inplace=True)

    inner = dataset.threshold(0.0, scalars="implicit_distance", invert=True)
    outer = dataset.threshold(0.0, scalars="implicit_distance", invert=False)

    p = pv.Plotter()
    p.add_mesh(surface, color='w', label='Surface', opacity=0.75)
    p.add_mesh(inner, scalars="implicit_distance", show_edges=True,
               opacity=0.75, label='Inner region', clim=[-1,1], cmap="bwr")
    p.add_legend()
    p.enable_depth_peeling()
    p.show()




.. image-sg:: /examples/01-filter/images/sphx_glr_clipping-with-surface_002.png
   :alt: clipping with surface
   :srcset: /examples/01-filter/images/sphx_glr_clipping-with-surface_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(surface, color='w', label='Surface', opacity=0.75)
    p.add_mesh(outer, scalars="implicit_distance", show_edges=True,
               opacity=0.75, label='Outer region', clim=[-1,1], cmap="bwr")
    p.add_legend()
    p.enable_depth_peeling()
    p.show()






.. image-sg:: /examples/01-filter/images/sphx_glr_clipping-with-surface_003.png
   :alt: clipping with surface
   :srcset: /examples/01-filter/images/sphx_glr_clipping-with-surface_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-74

Clip the rectilinear grid dataset using the :class:`pyvista.PolyData`
surface mesh via the :func:`pyvista.DataSetFilters.clip_surface` filter.
This will triangulate/tessellate the mesh geometries along the clip.

.. GENERATED FROM PYTHON SOURCE LINES 74-85

.. code-block:: default

    clipped = dataset.clip_surface(surface, invert=False)

    # Visualize the results
    p = pv.Plotter()
    p.add_mesh(surface, color='w', opacity=0.75, label='Surface')
    p.add_mesh(clipped, color='gold', show_edges=True, label="clipped", opacity=0.75)
    p.add_legend()
    p.enable_depth_peeling()
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_clipping-with-surface_004.png
   :alt: clipping with surface
   :srcset: /examples/01-filter/images/sphx_glr_clipping-with-surface_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 86-89

Here is another example of clipping a mesh by a surface. This time, we'll
generate a :class:`pyvista.UniformGrid` around a topography surface and then
clip that grid using the surface to create a closed 3D model of the surface

.. GENERATED FROM PYTHON SOURCE LINES 89-99

.. code-block:: default

    surface = examples.load_random_hills()

    # Create a grid around that surface
    grid = pv.create_grid(surface)

    # Clip the grid using the surface
    model = grid.clip_surface(surface)

    # Compute height and display it
    model.elevation().plot()



.. image-sg:: /examples/01-filter/images/sphx_glr_clipping-with-surface_005.png
   :alt: clipping with surface
   :srcset: /examples/01-filter/images/sphx_glr_clipping-with-surface_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.970 seconds)


.. _sphx_glr_download_examples_01-filter_clipping-with-surface.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: clipping-with-surface.py <clipping-with-surface.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: clipping-with-surface.ipynb <clipping-with-surface.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
