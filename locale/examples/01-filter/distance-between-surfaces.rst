
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/distance-between-surfaces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_distance-between-surfaces.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_distance-between-surfaces.py:


Distance Between Two Surfaces
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Compute the average thickness between two surfaces.

For example, you might have two surfaces that represent the boundaries of
lithological layers in a subsurface geological model and you want to know the
average thickness of a unit between those boundaries.

We can compute the thickness between the two surfaces using a few different
methods. First, we will demo a method where we compute the normals of the
bottom surface, and then project a ray to the top surface to compute the
distance along the surface normals. Second, we will use a KDTree to compute
the distance from every point in the bottom mesh to it's closest point in
the top mesh.

.. GENERATED FROM PYTHON SOURCE LINES 18-37

.. code-block:: default

    import numpy as np

    import pyvista as pv


    # A helper to make a random surface
    def hill(seed):
        mesh = pv.ParametricRandomHills(randomseed=seed, u_res=50, v_res=50,
                                        hillamplitude=0.5)
        mesh.rotate_y(-10) # give the surfaces some tilt

        return mesh

    h0 = hill(1).elevation()
    h1 = hill(10)
    # Shift one surface
    h1.points[:,-1] += 5
    h1 = h1.elevation()








.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: default


    p = pv.Plotter()
    p.add_mesh(h0, smooth_shading=True)
    p.add_mesh(h1, smooth_shading=True)
    p.show_grid()
    p.show()




.. image-sg:: /examples/01-filter/images/sphx_glr_distance-between-surfaces_001.png
   :alt: distance between surfaces
   :srcset: /examples/01-filter/images/sphx_glr_distance-between-surfaces_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 46-50

Ray Tracing Distance
++++++++++++++++++++

Compute normals of lower surface

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    h0n = h0.compute_normals(point_normals=True, cell_normals=False,
                             auto_orient_normals=True)








.. GENERATED FROM PYTHON SOURCE LINES 54-56

Travel along normals to the other surface and compute the thickness on each
vector.

.. GENERATED FROM PYTHON SOURCE LINES 56-72

.. code-block:: default


    h0n["distances"] = np.empty(h0.n_points)
    for i in range(h0n.n_points):
        p = h0n.points[i]
        vec = h0n["Normals"][i] * h0n.length
        p0 = p - vec
        p1 = p + vec
        ip, ic = h1.ray_trace(p0, p1, first_point=True)
        dist = np.sqrt(np.sum((ip - p)**2))
        h0n["distances"][i] = dist

    # Replace zeros with nans
    mask = h0n["distances"] == 0
    h0n["distances"][mask] = np.nan
    np.nanmean(h0n["distances"])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    5.144072866943829



.. GENERATED FROM PYTHON SOURCE LINES 73-79

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(h0n, scalars="distances", smooth_shading=True)
    p.add_mesh(h1, color=True, opacity=0.75, smooth_shading=True)
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_distance-between-surfaces_002.png
   :alt: distance between surfaces
   :srcset: /examples/01-filter/images/sphx_glr_distance-between-surfaces_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-87

Nearest Neighbor Distance
+++++++++++++++++++++++++

You could also use a KDTree to compare the distance between each point of the
upper surface and the nearest neighbor of the lower surface.
This won't be the exact surface to surface distance, but it will be
noticeably faster than a ray trace, especially for large surfaces.

.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: default

    from scipy.spatial import KDTree

    tree = KDTree(h1.points)
    d, idx = tree.query(h0.points )
    h0["distances"] = d
    np.mean(d)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    4.843639430073732



.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(h0, scalars="distances", smooth_shading=True)
    p.add_mesh(h1, color=True, opacity=0.75, smooth_shading=True)
    p.show()



.. image-sg:: /examples/01-filter/images/sphx_glr_distance-between-surfaces_003.png
   :alt: distance between surfaces
   :srcset: /examples/01-filter/images/sphx_glr_distance-between-surfaces_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.662 seconds)


.. _sphx_glr_download_examples_01-filter_distance-between-surfaces.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: distance-between-surfaces.py <distance-between-surfaces.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: distance-between-surfaces.ipynb <distance-between-surfaces.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
