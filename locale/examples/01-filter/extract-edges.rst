
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/extract-edges.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_extract-edges.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_extract-edges.py:


.. _extract_edges_example:

Extract Edges
~~~~~~~~~~~~~

Extract edges from a surface.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: default


    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 15-27

From vtk documentation, the edges of a mesh are one of the following:

1. boundary (used by one polygon) or a line cell
2. non-manifold (used by three or more polygons)
3. feature edges (edges used by two triangles and whose dihedral angle > feature_angle)
4. manifold edges (edges used by exactly two polygons).

The :func:`extract_feature_edges() <pyvista.PolyDataFilters.extract_feature_edges>`
filter will extract those edges given a feature angle and return a dataset
with lines that represent the edges of the original mesh.

To demonstrate, we will first extract the edges around a sample CAD model:

.. GENERATED FROM PYTHON SOURCE LINES 27-40

.. code-block:: default


    # Download the example CAD model and extract all feature edges above 45 degrees
    mesh = examples.download_cad_model()
    edges = mesh.extract_feature_edges(45)

    # Render the edge lines on top of the original mesh.  Zoom in to provide a better figure.
    p = pv.Plotter()
    p.add_mesh(mesh, color=True)
    p.add_mesh(edges, color="red", line_width=5)
    p.camera.zoom(1.5)
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_extract-edges_001.png
   :alt: extract edges
   :srcset: /examples/01-filter/images/sphx_glr_extract-edges_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-43

We can do this analysis for any :class:`pyvista.PolyData` object. Let's try
the cow mesh example:

.. GENERATED FROM PYTHON SOURCE LINES 43-54

.. code-block:: default


    mesh = examples.download_cow()
    edges = mesh.extract_feature_edges(20)

    p = pv.Plotter()
    p.add_mesh(mesh, color=True)
    p.add_mesh(edges, color="red", line_width=5)
    p.camera_position = [(9.5, 3.0, 5.5), (2.5, 1, 0), (0, 1, 0)]
    p.show()





.. image-sg:: /examples/01-filter/images/sphx_glr_extract-edges_002.png
   :alt: extract edges
   :srcset: /examples/01-filter/images/sphx_glr_extract-edges_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 55-58

We can leverage the :any:`pyvista.PolyData.n_open_edges` property and
:func:`pyvista.PolyDataFilters.extract_feature_edges` filter to count and extract the
open edges on a :class:`pyvista.PolyData` mesh.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    # Download a sample surface mesh with visible open edges
    mesh = examples.download_bunny()
    mesh






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>69451</td></tr>
    <tr><td>N Points</td><td>35947</td></tr>
    <tr><td>X Bounds</td><td>-9.469e-02, 6.101e-02</td></tr>
    <tr><td>Y Bounds</td><td>3.299e-02, 1.873e-01</td></tr>
    <tr><td>Z Bounds</td><td>-6.187e-02, 5.880e-02</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-65

We can get a count of the open edges with:

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    mesh.n_open_edges






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    223



.. GENERATED FROM PYTHON SOURCE LINES 69-71

And we can extract those edges with the ``boundary_edges`` option of
:func:`pyvista.PolyDataFilters.extract_feature_edges`:

.. GENERATED FROM PYTHON SOURCE LINES 71-78

.. code-block:: default

    edges = mesh.extract_feature_edges(boundary_edges=True, feature_edges=False, manifold_edges=False)

    p = pv.Plotter()
    p.add_mesh(mesh, color=True)
    p.add_mesh(edges, color="red", line_width=5)
    p.camera_position = [(-0.2, -0.13, 0.12), (-0.015, 0.10, -0.0), (0.28, 0.26, 0.9)]
    p.show()



.. image-sg:: /examples/01-filter/images/sphx_glr_extract-edges_003.png
   :alt: extract edges
   :srcset: /examples/01-filter/images/sphx_glr_extract-edges_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.395 seconds)


.. _sphx_glr_download_examples_01-filter_extract-edges.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: extract-edges.py <extract-edges.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: extract-edges.ipynb <extract-edges.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
