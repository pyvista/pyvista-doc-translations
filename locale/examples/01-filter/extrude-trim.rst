
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/extrude-trim.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01-filter_extrude-trim.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_extrude-trim.py:


.. _extrude_trim_example:

Extrude Trim
~~~~~~~~~~~~
Extrude a :class:`pyvista.PolyData` with a :func:`pyvista.Plane` using
:func:`extrude_trim() <pyvista.PolyDataFilters.extrude_trim>`.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: default


    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 14-16

Generate an Extruded Surface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 16-31

.. code-block:: default


    # Create surface and plane
    mesh = pv.ParametricRandomHills(random_seed=2)
    plane = pv.Plane(
        center=(mesh.center[0], mesh.center[1], -5),
        direction=(0, 0, -1),
        i_size=30,
        j_size=30,
    )

    # Perform the extrude trim
    extruded_hills = mesh.extrude_trim((0, 0, -1.0), plane)
    extruded_hills







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table style='width: 100%;'>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>39600</td></tr>
    <tr><td>N Points</td><td>20000</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>-1.000e+01, 1.000e+01</td></tr>
    <tr><td>Y Bounds</td><td>-2.309e-14, 2.000e+01</td></tr>
    <tr><td>Z Bounds</td><td>-5.000e+00, 7.725e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 32-35

Plot the Extruded Surface
~~~~~~~~~~~~~~~~~~~~~~~~~
Plot the resulting :class:`pyvista.PolyData`.

.. GENERATED FROM PYTHON SOURCE LINES 35-52

.. code-block:: default



    pl = pv.Plotter(shape=(1, 2))
    pl.add_mesh(mesh)
    pl.add_text('Original Mesh')

    pl.subplot(0, 1)
    pl.add_mesh(plane, style='wireframe', color='black')
    pl.add_mesh(extruded_hills)
    pl.add_text('Extruded Mesh')

    pl.link_views()
    pl.camera_position = 'iso'
    pl.camera.zoom(1.5)
    pl.show()






.. image-sg:: /examples/01-filter/images/sphx_glr_extrude-trim_001.png
   :alt: extrude trim
   :srcset: /examples/01-filter/images/sphx_glr_extrude-trim_001.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 57-62

Extruding All Edges
~~~~~~~~~~~~~~~~~~~
The previous example used the default ``extrusion='boundary_edges'``, which
only generates faces on the boundary. When using ``extrusion='all_edges'``,
interior edges are also created.

.. GENERATED FROM PYTHON SOURCE LINES 62-79

.. code-block:: default


    # Create a triangle.
    disc = pv.Disc(c_res=3, r_res=4, inner=0)
    plane = pv.Plane(
        center=(disc.center[0], disc.center[1], -1),
        direction=(0, 0, -1),
        i_size=1,
        j_size=1,
    )

    # extrude with and without the all_edges option
    extruded_disc = disc.extrude_trim((0, 0, -1.0), plane)
    extruded_disc_all = disc.extrude_trim((0, 0, -1.0), plane, extrusion='all_edges')
    print(f'Extrusion has {extruded_disc.n_faces_strict} faces with default boundary_edges')
    print(f'Extrusion has {extruded_disc_all.n_faces_strict} faces with all_edges')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Extrusion has 30 faces with default boundary_edges
    Extrusion has 72 faces with all_edges




.. GENERATED FROM PYTHON SOURCE LINES 80-83

Plot
~~~~
Show the additional interior faces by plotting with ``style='wireframe'``.

.. GENERATED FROM PYTHON SOURCE LINES 83-98

.. code-block:: default


    pl = pv.Plotter(shape=(1, 2))
    pl.add_mesh(extruded_disc, style='wireframe', line_width=5)
    pl.add_text('Extrude with boundary_edges')

    pl.subplot(0, 1)
    pl.add_mesh(extruded_disc_all, style='wireframe', line_width=5)
    pl.add_text('Extrude with all_edges')

    pl.link_views()
    pl.camera_position = 'iso'
    pl.camera.zoom(1.3)
    pl.show()






.. image-sg:: /examples/01-filter/images/sphx_glr_extrude-trim_002.png
   :alt: extrude trim
   :srcset: /examples/01-filter/images/sphx_glr_extrude-trim_002.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 103-107

Extrude a Line
~~~~~~~~~~~~~~
You can also extrude lines. Observe that the output from extruded lines is
still a :class:`pyvista.PolyData`.

.. GENERATED FROM PYTHON SOURCE LINES 107-114

.. code-block:: default


    plane = pv.Plane(center=(0, 0, 1), i_size=2, j_size=0.2, direction=[1, 1, 1], j_resolution=1)
    line = pv.Line()
    extruded_line = line.extrude_trim((0, 0, 1), plane)
    extruded_line







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table style='width: 100%;'>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1</td></tr>
    <tr><td>N Points</td><td>4</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>-5.000e-01, 5.000e-01</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 1.500e+00</td></tr>
    <tr><td>N Arrays</td><td>2</td></tr>
    </table>

    </td><td>
    <table style='width: 100%;'>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>
    <tr><td><b>Distance</b></td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 115-118

Plot the Extruded Line
~~~~~~~~~~~~~~~~~~~~~~
Note how the scalars are copied to the extruded line.

.. GENERATED FROM PYTHON SOURCE LINES 118-124

.. code-block:: default


    pl = pv.Plotter()
    pl.add_mesh(line, style='wireframe', line_width=20, show_scalar_bar=False, color='r')
    pl.add_mesh(plane, style='wireframe', color='black', show_scalar_bar=False)
    pl.add_mesh(extruded_line, show_scalar_bar=False, lighting=False)
    pl.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_extrude-trim_003.png
        :alt: extrude trim
        :srcset: /examples/01-filter/images/sphx_glr_extrude-trim_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_extrude-trim_003.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.196 seconds)


.. _sphx_glr_download_examples_01-filter_extrude-trim.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: extrude-trim.py <extrude-trim.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: extrude-trim.ipynb <extrude-trim.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
