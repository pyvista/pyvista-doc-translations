
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/streamlines_2D.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_streamlines_2D.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_streamlines_2D.py:


.. _2d_streamlines_example:

2D Streamlines
~~~~~~~~~~~~~~

Integrate a vector field to generate streamlines on a 2D surface.

.. GENERATED FROM PYTHON SOURCE LINES 9-10

.. code-block:: default









.. GENERATED FROM PYTHON SOURCE LINES 12-13

This example generates streamlines of flow around a cylinder in cross flow.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default


    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 18-20

The data is multiblock with the fluid data as the first block.
The data lies in the `xy` plane, i.e. `z=0`, with no `z` velocity.

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default


    mesh = examples.download_cylinder_crossflow()
    fluid_mesh = mesh[0]
    print(fluid_mesh)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UnstructuredGrid (0x7f528f1eb040)
      N Cells:      14594
      N Points:     14831
      X Bounds:     0.000e+00, 1.500e+01
      Y Bounds:     -3.750e+00, 3.750e+00
      Z Bounds:     0.000e+00, 0.000e+00
      N Arrays:     3





.. GENERATED FROM PYTHON SOURCE LINES 26-33

The default behavior of the :func:`streamlines()
<pyvista.DataSetFilters.streamlines>` filter is to use a 3D sphere source as
the seed points.  This often will not generate any seed points on the 2D
plane of interest.  Instead, a single streamline can be generated using the
``start_position`` argument. The ``surface_streamlines=True`` argument is
also needed if the dataset has nonzero normal velocity component.  This is
not the case in this dataset.

.. GENERATED FROM PYTHON SOURCE LINES 33-50

.. code-block:: default


    one_streamline = fluid_mesh.streamlines(
        start_position=(0.0, 0.4, 0.0),
        max_time=100.0,
        compute_vorticity=False,  # vorticity already exists in dataset
    )

    clim = [0, 20]
    camera_position = [(7, 0, 20.0), (7, 0.0, 0.0), (0.0, 1.0, 0.0)]

    p = pv.Plotter()
    for i in range(1, len(mesh)):
        p.add_mesh(mesh[i], color='k')
    p.add_mesh(one_streamline.tube(radius=0.05), scalars="vorticity_mag", clim=clim)
    p.view_xy()
    p.show(cpos=camera_position)




.. image-sg:: /examples/01-filter/images/sphx_glr_streamlines_2D_001.png
   :alt: streamlines 2D
   :srcset: /examples/01-filter/images/sphx_glr_streamlines_2D_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 51-53

To generate multiple streamlines, a line source can be used with the ``pointa``
and ``pointb`` parameters.

.. GENERATED FROM PYTHON SOURCE LINES 53-69

.. code-block:: default


    line_streamlines = fluid_mesh.streamlines(
        pointa=(0, -5, 0),
        pointb=(0, 5, 0),
        n_points=25,
        max_time=100.0,
        compute_vorticity=False,  # vorticity already exists in dataset
    )

    p = pv.Plotter()
    for i in range(1, len(mesh)):
        p.add_mesh(mesh[i], color='k')
    p.add_mesh(line_streamlines.tube(radius=0.05), scalars="vorticity_mag", clim=clim)
    p.view_xy()
    p.show(cpos=camera_position)




.. image-sg:: /examples/01-filter/images/sphx_glr_streamlines_2D_002.png
   :alt: streamlines 2D
   :srcset: /examples/01-filter/images/sphx_glr_streamlines_2D_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-78

The behavior immediately downstream of the cylinder is still not apparent
using streamlines at the inlet.

Another method is to use :func:`streamlines_evenly_spaced_2D()
<pyvista.DataSetFilters.streamlines_evenly_spaced_2D>`.
This filter only works with 2D data that lies on the xy plane. This method
can quickly run of memory, so particular attention must be paid to the input
parameters.  The defaults are in cell length units.

.. GENERATED FROM PYTHON SOURCE LINES 78-93

.. code-block:: default


    line_streamlines = fluid_mesh.streamlines_evenly_spaced_2D(
        start_position=(4, 0.1, 0.0),
        separating_distance=3,
        separating_distance_ratio=0.2,
        compute_vorticity=False,  # vorticity already exists in dataset
    )

    p = pv.Plotter()
    for i in range(1, len(mesh)):
        p.add_mesh(mesh[i], color='k')
    p.add_mesh(line_streamlines.tube(radius=0.02), scalars="vorticity_mag", clim=clim)
    p.view_xy()
    p.show(cpos=camera_position)




.. image-sg:: /examples/01-filter/images/sphx_glr_streamlines_2D_003.png
   :alt: streamlines 2D
   :srcset: /examples/01-filter/images/sphx_glr_streamlines_2D_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-97

The streamlines are only approximately evenly spaced and capture the
vortex pair downstream of the cylinder with appropriate choice of
``start_position``.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.859 seconds)


.. _sphx_glr_download_examples_01-filter_streamlines_2D.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: streamlines_2D.py <streamlines_2D.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: streamlines_2D.ipynb <streamlines_2D.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
