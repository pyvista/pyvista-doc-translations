
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/integrate-data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01-filter_integrate-data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_integrate-data.py:


.. _integrate_example:

Integrate Data
~~~~~~~~~~~~~~

Integrate data over a surface using the
:func:`pyvista.DataSetFilters.integrate_data` filter.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

.. code-block:: default

    import pyvista
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 15-20

This example calculates the total flow rate and average velocity inside a
blood vessel.  The boundary object is only used for plotting the shape of
the dataset geometry.  The inlet surface is generated by slicing the domain.
Fluid flowing into the domain is in the negative z-direction, so
a new array, ``normal_velocity``, is created.

.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default


    dataset = examples.download_blood_vessels()
    boundary = dataset.decimate_boundary().extract_all_edges()
    inlet_surface = dataset.slice('z', origin=(0, 0, 182))
    inlet_surface["normal_velocity"] = -1 * inlet_surface["velocity"][:, 2]








.. GENERATED FROM PYTHON SOURCE LINES 27-28

The velocity in the inlet is shown.

.. GENERATED FROM PYTHON SOURCE LINES 28-42

.. code-block:: default


    plotter = pyvista.Plotter()
    plotter.add_mesh(boundary, color="grey", opacity=0.25)
    plotter.add_mesh(
        inlet_surface,
        scalars="normal_velocity",
        component=2,
        scalar_bar_args=dict(vertical=True, title_font_size=16),
        lighting=False,
    )
    plotter.add_axes()
    plotter.camera_position = [(10, 9.5, -43), (87.0, 73.5, 123.0), (-0.5, -0.7, 0.5)]
    plotter.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/01-filter/images/sphx_glr_integrate-data_001.png
        :alt: integrate data
        :srcset: /examples/01-filter/images/sphx_glr_integrate-data_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-doc-translations/pyvista-doc-translations/pyvista/doc/source/examples/01-filter/images/sphx_glr_integrate-data_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 43-46

The total flow rate is calculated using the
:func:`pyvista.DataSetFilters.integrate_data` filter.  Note that the data
is a :class:`pyvista.UnstructuredGrid` object with only 1 point and 1 cell.

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    integrated_data = inlet_surface.integrate_data()
    integrated_data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table style='width: 100%;'>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1</td></tr>
    <tr><td>N Points</td><td>1</td></tr>
    <tr><td>X Bounds</td><td>8.095e+01, 8.095e+01</td></tr>
    <tr><td>Y Bounds</td><td>6.007e+01, 6.007e+01</td></tr>
    <tr><td>Z Bounds</td><td>1.820e+02, 1.820e+02</td></tr>
    <tr><td>N Arrays</td><td>7</td></tr>
    </table>

    </td><td>
    <table style='width: 100%;'>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>node_value</td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>0.000e+00</td></tr>
    <tr><td>simerr_type</td><td>Points</td><td>float64</td><td>1</td><td>1.672e+02</td><td>1.672e+02</td></tr>
    <tr><td>density</td><td>Cells</td><td>float64</td><td>1</td><td>1.369e+02</td><td>1.369e+02</td></tr>
    <tr><td>normal_velocity</td><td>Cells</td><td>float64</td><td>1</td><td>2.580e+01</td><td>2.580e+01</td></tr>
    <tr><td>shearstress</td><td>Cells</td><td>float64</td><td>1</td><td>9.470e-01</td><td>9.470e-01</td></tr>
    <tr><td>velocity</td><td>Cells</td><td>float64</td><td>3</td><td>-2.580e+01</td><td>1.285e+00</td></tr>
    <tr><td>Area</td><td>Cells</td><td>float64</td><td>1</td><td>2.650e+02</td><td>2.650e+02</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-51

Each array in ``integrated_data`` stores the integrated data.

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    integrated_data["normal_velocity"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    pyvista_ndarray([25.79937191])



.. GENERATED FROM PYTHON SOURCE LINES 54-55

An additional ``Area`` or ``Volume`` array is added.

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: default

    print(f"Original arrays: {inlet_surface.array_names}")
    new_arrays = [name for name in integrated_data.array_names if name not in inlet_surface.array_names]
    print(f"New arrays      : {new_arrays}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Original arrays: ['normal_velocity', 'node_value', 'simerr_type', 'density', 'velocity', 'shearstress']
    New arrays      : ['Area']




.. GENERATED FROM PYTHON SOURCE LINES 60-61

Display the total flow rate, area of inlet surface, and average velocity.

.. GENERATED FROM PYTHON SOURCE LINES 61-69

.. code-block:: default

    total_flow_rate = integrated_data["normal_velocity"][0]
    area = integrated_data["Area"][0]
    average_velocity = total_flow_rate / area
    print(f"Total flow rate : {total_flow_rate:.1f}")
    print(f"Area            : {area:.0f}")
    print(f"Average velocity: {average_velocity:.3f}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total flow rate : 25.8
    Area            : 265
    Average velocity: 0.097




.. GENERATED FROM PYTHON SOURCE LINES 70-80

Volume Integration
~~~~~~~~~~~~~~~~~~
You can also integrate over a volume. Here, we effectively sum the cell and
point data across the entire volume. You can use this to compute mean values
by dividing by the volume of the dataset.

Note that the calculated volume is the same as :attr:`pyvista.DataSet.volume`.

Also note that the center of the dataset is the "point" of the integrated
volume.

.. GENERATED FROM PYTHON SOURCE LINES 80-91

.. code-block:: default


    integrated_volume = dataset.integrate_data()
    center = integrated_volume.points[0]
    volume = integrated_volume['Volume'][0]
    mean_density = integrated_volume['density'][0] / volume
    mean_velocity = integrated_volume['velocity'][0] / volume

    print(f"Center          : {center}")
    print(f"Volume          : {volume:.0f}")
    print(f"Mean density    : {mean_density:.4f}")
    print(f"Mean velocity   : {mean_velocity}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Center          : [ 90.54132  78.15124 116.79401]
    Volume          : 39353
    Mean density    : 0.3361
    Mean velocity   : [-0.00754452  0.012869   -0.11734917]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.629 seconds)


.. _sphx_glr_download_examples_01-filter_integrate-data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: integrate-data.py <integrate-data.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: integrate-data.ipynb <integrate-data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
