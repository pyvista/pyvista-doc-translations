
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/04-lights/actors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_04-lights_actors.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_04-lights_actors.py:


Light Actors
~~~~~~~~~~~~

Positional lights in PyVista have customizable beam shapes, see the
:ref:`ref_light_beam_shape_example` example. Spotlights are special in
the sense that they are unidirectional lights with a finite position,
so they can be visualized using a cone.

This is exactly the purpose of a ``vtk.vtkLightActor``, the
functionality of which can be enabled for spotlights:

.. GENERATED FROM PYTHON SOURCE LINES 13-41

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 1
    import numpy as np
    import pyvista as pv
    from pyvista import examples

    cow = examples.download_cow()
    cow.rotate_x(90)
    plotter = pv.Plotter(lighting='none', window_size=(1000, 1000))
    plotter.add_mesh(cow, color='white')
    floor = pv.Plane(center=(*cow.center[:2], cow.bounds[-2]),
                     i_size=30, j_size=25)
    plotter.add_mesh(floor, color='green')

    UFO = pv.Light(position=(0, 0, 10), focal_point=(0, 0, 0), color='white')
    UFO.positional = True
    UFO.cone_angle = 40
    UFO.exponent = 10
    UFO.intensity = 3
    UFO.show_actor()
    plotter.add_light(UFO)

    # enable shadows to better demonstrate lighting
    plotter.enable_shadows()

    plotter.camera_position = [(28, 30, 22), (0.77, 0, -0.44), (0, 0, 1)]
    plotter.show()





.. image:: /examples/04-lights/images/sphx_glr_actors_001.png
    :alt: actors
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(28.0, 30.0, 22.0),
     (0.77, 0.0, -0.44),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 42-44

Light actors can be very useful when designing complex scenes where
spotlights are involved in lighting.

.. GENERATED FROM PYTHON SOURCE LINES 44-66

.. code-block:: default


    plotter = pv.Plotter(lighting='none')
    plane = pv.Plane(i_size=4, j_size=4)
    plotter.add_mesh(plane, color='white')

    rot120 = np.array([[-0.5, -np.sqrt(3)/2, 0], [np.sqrt(3)/2, -0.5, 0], [0, 0, 1]])

    position = (-1.5, -1.5, 3)
    focus = (-0.5, -0.5, 0)
    colors = ['red', 'lime', 'blue']
    for color in colors:
        position = rot120 @ position
        focus = rot120 @ focus
        light = pv.Light(position=position, focal_point=focus, color=color)
        light.positional = True
        light.cone_angle = 15
        light.show_actor()
        plotter.add_light(light)

    plotter.show()





.. image:: /examples/04-lights/images/sphx_glr_actors_002.png
    :alt: actors
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(7.2347026140134645, 7.2347026140134645, 8.71018352812937),
     (0.02451908588409424, 0.02451908588409424, 1.5),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 67-73

One thing to watch out for is that the light actors are represented such that
their cone has a fixed height. This implies that for very large cone angles
we typically end up with enormous light actors, in which case setting a manual
camera position before rendering is usually a good idea. Increasing the first
example's cone angle and omitting the manual camera positioning exemplifies
the problem:

.. GENERATED FROM PYTHON SOURCE LINES 73-89

.. code-block:: default


    plotter = pv.Plotter(lighting='none')
    plotter.add_mesh(cow, color='white')
    floor = pv.Plane(center=(*cow.center[:2], cow.bounds[-2]),
                     i_size=30, j_size=25)
    plotter.add_mesh(floor, color='green')

    UFO = pv.Light(position=(0, 0, 10), focal_point=(0, 0, 0), color='white')
    UFO.positional = True
    UFO.cone_angle = 89
    UFO.exponent = 10
    UFO.intensity = 3
    UFO.show_actor()
    plotter.add_light(UFO)

    plotter.show()



.. image:: /examples/04-lights/images/sphx_glr_actors_003.png
    :alt: actors
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(181.37157603517724, 181.37157603517724, 184.55305799261285),
     (0.0, 0.0, 3.181481957435608),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.203 seconds)


.. _sphx_glr_download_examples_04-lights_actors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: actors.py <actors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: actors.ipynb <actors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
