
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/04-lights/plotter_builtins.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_04-lights_plotter_builtins.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_04-lights_plotter_builtins.py:


.. _plotter_lighting_example:

Plotter Lighting Systems
~~~~~~~~~~~~~~~~~~~~~~~~

The :class:`pyvista.Plotter` class comes with three options for the default
lighting system:

  * a light kit consisting of a headlight and four camera lights,
  * an illumination system containing three lights arranged around the camera,
  * no lighting.

With meshes that don't have depth information encoded in their color the
importance of an appropriate lighting setup becomes paramount for accurate
visualization.

Light kit
=========

The default ``lighting='light kit'`` option recreates a lighting setup that
corresponds to a ``vtk.vtkLightKit``. We can check what type of lights this
lighting comprises:

.. GENERATED FROM PYTHON SOURCE LINES 25-39

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 3
    import pyvista as pv
    from pyvista import examples

    # default: light kit
    plotter = pv.Plotter()
    light_types = [light.light_type for light in plotter.renderer.lights]

    # Remove from plotters so output is not produced in docs
    pv.plotting._ALL_PLOTTERS.clear()

    light_types






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [<LightType.HEADLIGHT: 1>, <LightType.CAMERA_LIGHT: 2>, <LightType.CAMERA_LIGHT: 2>, <LightType.CAMERA_LIGHT: 2>, <LightType.CAMERA_LIGHT: 2>]



.. GENERATED FROM PYTHON SOURCE LINES 40-41

Add a white terrain to the scene:

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default


    mesh = examples.download_st_helens().warp_by_scalar()
    plotter = pv.Plotter()
    plotter.add_mesh(mesh, color='white')
    plotter.show()





.. image-sg:: /examples/04-lights/images/sphx_glr_plotter_builtins_001.png
   :alt: plotter builtins
   :srcset: /examples/04-lights/images/sphx_glr_plotter_builtins_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 49-56

Three-lights illumination
=========================

Switching to three-lights illumination gives a different character to the
figure, in this case showing less contrast when viewing the mountain from
the top, but having more contrast with views closer to the side. This becomes
especially clear when exploring the figures interactively.

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default


    plotter = pv.Plotter(lighting='three lights')
    plotter.add_mesh(mesh, color='white')
    plotter.show()




.. image-sg:: /examples/04-lights/images/sphx_glr_plotter_builtins_002.png
   :alt: plotter builtins
   :srcset: /examples/04-lights/images/sphx_glr_plotter_builtins_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-63

Again we can check what kind of lights this setting uses:

.. GENERATED FROM PYTHON SOURCE LINES 63-73

.. code-block:: default


    plotter = pv.Plotter(lighting='three lights')
    light_types = [light.light_type for light in plotter.renderer.lights]

    # Remove from plotters so output is not produced in docs
    pv.plotting._ALL_PLOTTERS.clear()

    light_types






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [<LightType.CAMERA_LIGHT: 2>, <LightType.CAMERA_LIGHT: 2>, <LightType.CAMERA_LIGHT: 2>]



.. GENERATED FROM PYTHON SOURCE LINES 74-81

Custom lighting
===============

We can introduce our own lighting from scratch by disabling any
lighting on plotter initialization. Adding a single scene light to a
scene will often result in ominous visuals due to objects having
larger regions in shadow.

.. GENERATED FROM PYTHON SOURCE LINES 81-90

.. code-block:: default


    plotter = pv.Plotter(lighting='none', window_size=(1000, 1000))
    plotter.add_mesh(mesh, color='white', smooth_shading=True)
    light = pv.Light()
    light.set_direction_angle(30, -20)
    plotter.add_light(light)
    plotter.show()





.. image-sg:: /examples/04-lights/images/sphx_glr_plotter_builtins_003.png
   :alt: plotter builtins
   :srcset: /examples/04-lights/images/sphx_glr_plotter_builtins_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-97

Custom lighting with shadows
============================

Here, we ``enable_shadows`` to enhance the effect that the lighting
angle has.  It has a subtle, but realistic effect.  Notice the sharp
shadows due to the mountaintop.

.. GENERATED FROM PYTHON SOURCE LINES 97-105

.. code-block:: default


    plotter = pv.Plotter(lighting='none', window_size=(1000, 1000))
    plotter.add_mesh(mesh, color='white', smooth_shading=True)
    light = pv.Light()
    light.set_direction_angle(20, -20)
    plotter.add_light(light)
    plotter.enable_shadows()
    plotter.show()



.. image-sg:: /examples/04-lights/images/sphx_glr_plotter_builtins_004.png
   :alt: plotter builtins
   :srcset: /examples/04-lights/images/sphx_glr_plotter_builtins_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.824 seconds)


.. _sphx_glr_download_examples_04-lights_plotter_builtins.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plotter_builtins.py <plotter_builtins.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plotter_builtins.ipynb <plotter_builtins.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
