
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/99-advanced/openfoam-example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_99-advanced_openfoam-example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_99-advanced_openfoam-example.py:


.. _openfoam_example:

Plot OpenFOAM data
~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: default


    import pyvista
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 13-21

This example uses data from a lid-driven cavity flow.  It is recommended to
use :class:`pyvista.OpenFOAMReader` for reading OpenFOAM files for more
control over reading data.  The OpenFOAMReader in pyvista must be recreated
each time a new mesh is read in, otherwise the same mesh is always returned.

This example will only run correctly in versions of vtk>=9.1.0.  The names
of the patch arrays and resulting keys in the read mesh will be different
in prior versions.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: default


    filename = examples.download_cavity(load=False)
    reader = pyvista.OpenFOAMReader(filename)








.. GENERATED FROM PYTHON SOURCE LINES 26-28

OpenFOAM datasets include multiple sub-datasets including the internal mesh
and patches, typically boundaries.  This can be inspected before reading the data.

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    print(f"All patch names: {reader.patch_array_names}")
    print(f"All patch status: {reader.all_patch_arrays_status}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    All patch names: ['internalMesh', 'patch/movingWall', 'patch/fixedWalls', 'patch/frontAndBack']
    All patch status: {'internalMesh': True, 'patch/movingWall': True, 'patch/fixedWalls': True, 'patch/frontAndBack': True}




.. GENERATED FROM PYTHON SOURCE LINES 33-35

This data is represented as a :class:`pyvista.MultiBlock` object.
The internal mesh will be located in the top-level MultiBlock mesh.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    mesh = reader.read()
    print(f"Mesh patches: {mesh.keys()}")
    internal_mesh = mesh["internalMesh"]  # or internal_mesh = mesh[0]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Mesh patches: ['internalMesh', 'boundary']




.. GENERATED FROM PYTHON SOURCE LINES 41-42

In this case the internal mesh is a :class:`pyvista.UnstructuredGrid`.

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default


    print(internal_mesh)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UnstructuredGrid (0x7f5296c1d580)
      N Cells:      400
      N Points:     882
      X Bounds:     0.000e+00, 1.000e-01
      Y Bounds:     0.000e+00, 1.000e-01
      Z Bounds:     0.000e+00, 1.000e-02
      N Arrays:     4





.. GENERATED FROM PYTHON SOURCE LINES 46-48

Additional Patch meshes are nested inside another MultiBlock mesh.  The name
of the sub-level MultiBlock mesh depends on the vtk version.

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: default


    boundaries = mesh["boundary"]
    print(boundaries)
    print(f"Boundaries patches: {boundaries.keys()}")
    print(boundaries["movingWall"])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MultiBlock (0x7f528f1ebca0)
      N Blocks:     3
      X Bounds:     0.000, 0.100
      Y Bounds:     0.000, 0.100
      Z Bounds:     0.000, 0.010

    Boundaries patches: ['movingWall', 'fixedWalls', 'frontAndBack']
    PolyData (0x7f528f1ebe20)
      N Cells:      20
      N Points:     42
      X Bounds:     0.000e+00, 1.000e-01
      Y Bounds:     1.000e-01, 1.000e-01
      Z Bounds:     0.000e+00, 1.000e-02
      N Arrays:     4





.. GENERATED FROM PYTHON SOURCE LINES 55-57

The default in OpenFOAMReader is to translate the existing cell data to point
data.  Therefore, the cell data arrays are duplicated in point data.

.. GENERATED FROM PYTHON SOURCE LINES 57-63

.. code-block:: default


    print("Cell Data:")
    print(internal_mesh.cell_data)
    print("\nPoint Data:")
    print(internal_mesh.point_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cell Data:
    pyvista DataSetAttributes
    Association     : CELL
    Active Scalars  : p
    Active Vectors  : U
    Active Texture  : None
    Active Normals  : None
    Contains arrays :
        U                       float32  (400, 3)             VECTORS
        p                       float32  (400,)               SCALARS

    Point Data:
    pyvista DataSetAttributes
    Association     : POINT
    Active Scalars  : p
    Active Vectors  : U
    Active Texture  : None
    Active Normals  : None
    Contains arrays :
        U                       float32  (882, 3)             VECTORS
        p                       float32  (882,)               SCALARS




.. GENERATED FROM PYTHON SOURCE LINES 64-65

This behavior can be turned off if only cell data is required.

.. GENERATED FROM PYTHON SOURCE LINES 65-74

.. code-block:: default


    reader = pyvista.OpenFOAMReader(filename)
    reader.cell_to_point_creation = False
    internal_mesh = reader.read()["internalMesh"]
    print("Cell Data:")
    print(internal_mesh.cell_data)
    print("\nPoint Data:")
    print(internal_mesh.point_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cell Data:
    pyvista DataSetAttributes
    Association     : CELL
    Active Scalars  : p
    Active Vectors  : U
    Active Texture  : None
    Active Normals  : None
    Contains arrays :
        U                       float32  (400, 3)             VECTORS
        p                       float32  (400,)               SCALARS

    Point Data:
    pyvista DataSetAttributes
    Association     : POINT
    Active Scalars  : None
    Active Vectors  : None
    Active Texture  : None
    Active Normals  : None
    Contains arrays : None




.. GENERATED FROM PYTHON SOURCE LINES 75-76

Now we will read in all the data at the last time point.

.. GENERATED FROM PYTHON SOURCE LINES 76-84

.. code-block:: default


    reader = pyvista.OpenFOAMReader(filename)
    print(f"Available Time Values: {reader.time_values}")
    reader.set_active_time_value(2.5)
    mesh = reader.read()
    internal_mesh = mesh["internalMesh"]
    boundaries = mesh["boundary"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Available Time Values: [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]




.. GENERATED FROM PYTHON SOURCE LINES 85-91

This OpenFOAM simulation is in 3D with
only 1 cell in the z-direction.  First, the solution is sliced in the center
of the z-direction.
:func:`pyvista.DataSetFilters.streamlines_evenly_spaced_2D` requires the data
to lie in the z=0 plane.  So, after the domain sliced, it is translated to
``z=0``.

.. GENERATED FROM PYTHON SOURCE LINES 91-105

.. code-block:: default



    def slice_z_center(mesh):
        """Slice mesh through center in z normal direction, move to z=0."""
        slice_mesh = mesh.slice(normal='z')
        slice_mesh.translate((0, 0, -slice_mesh.center[-1]), inplace=True)
        return slice_mesh


    slice_internal_mesh = slice_z_center(internal_mesh)
    slice_boundaries = pyvista.MultiBlock(
        {key: slice_z_center(boundaries[key]) for key in boundaries.keys()}
    )








.. GENERATED FROM PYTHON SOURCE LINES 106-107

Streamlines are generated using the point data "U".

.. GENERATED FROM PYTHON SOURCE LINES 107-115

.. code-block:: default


    streamlines = slice_internal_mesh.streamlines_evenly_spaced_2D(
        vectors='U',
        start_position=(0.05, 0.05, 0),
        separating_distance=1,
        separating_distance_ratio=0.1,
    )








.. GENERATED FROM PYTHON SOURCE LINES 116-118

Plot streamlines colored by velocity magnitude.  Additionally, the moving
and fixed wall boundaries are plotted.

.. GENERATED FROM PYTHON SOURCE LINES 118-126

.. code-block:: default


    plotter = pyvista.Plotter()
    plotter.add_mesh(slice_boundaries["movingWall"], color='red', line_width=3)
    plotter.add_mesh(slice_boundaries["fixedWalls"], color='black', line_width=3)
    plotter.add_mesh(streamlines.tube(radius=0.0005), scalars="U")
    plotter.view_xy()
    plotter.enable_parallel_projection()
    plotter.show()



.. image-sg:: /examples/99-advanced/images/sphx_glr_openfoam-example_001.png
   :alt: openfoam example
   :srcset: /examples/99-advanced/images/sphx_glr_openfoam-example_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.989 seconds)


.. _sphx_glr_download_examples_99-advanced_openfoam-example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: openfoam-example.py <openfoam-example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: openfoam-example.ipynb <openfoam-example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
