
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/99-advanced/openfoam-tubes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_99-advanced_openfoam-tubes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_99-advanced_openfoam-tubes.py:

.. _openfoam_tubes_example:

Plot CFD Data
-------------
Plot a CFD example from OpenFoam hosted on the public SimScale examples at
`SimScale Project Library <https://www.simscale.com/projects/>`_.

This example dataset was read using the :class:`pyvista.POpenFOAMReader`. See
:ref:`openfoam_example` for a full example using this reader.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default


    import numpy as np

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Download and load the example dataset.

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default


    mesh = examples.download_openfoam_tubes()
    mesh







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>400712</td></tr>
    <tr><td>N Points</td><td>163390</td></tr>
    <tr><td>X Bounds</td><td>-1.280e-01, 1.280e-01</td></tr>
    <tr><td>Y Bounds</td><td>-2.800e-02, 2.800e-02</td></tr>
    <tr><td>Z Bounds</td><td>-1.400e-02, 2.490e-01</td></tr>
    <tr><td>N Arrays</td><td>10</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>U</td><td>Points</td><td>float32</td><td>3</td><td>-2.120e+02</td><td>1.041e+02</td></tr>
    <tr><td>k</td><td>Points</td><td>float32</td><td>1</td><td>3.750e-03</td><td>2.727e+02</td></tr>
    <tr><td>nut</td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>8.829e-03</td></tr>
    <tr><td>omega</td><td>Points</td><td>float32</td><td>1</td><td>3.375e+00</td><td>5.301e+05</td></tr>
    <tr><td><b>p</b></td><td>Points</td><td>float32</td><td>1</td><td>-9.766e+03</td><td>3.735e+04</td></tr>
    <tr><td>U</td><td>Cells</td><td>float32</td><td>3</td><td>-2.144e+02</td><td>1.065e+02</td></tr>
    <tr><td>k</td><td>Cells</td><td>float32</td><td>1</td><td>3.750e-03</td><td>3.691e+02</td></tr>
    <tr><td>nut</td><td>Cells</td><td>float32</td><td>1</td><td>1.276e-07</td><td>9.229e-03</td></tr>
    <tr><td>omega</td><td>Cells</td><td>float32</td><td>1</td><td>3.375e+00</td><td>5.343e+05</td></tr>
    <tr><td><b>p</b></td><td>Cells</td><td>float32</td><td>1</td><td>-1.188e+04</td><td>3.764e+04</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 26-29

Plot Cross Section
~~~~~~~~~~~~~~~~~~
Plot the outline of the dataset along with a cross section of the flow velocity.

.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: default


    # generate a slice in the XZ plane
    y_slice = mesh.slice('y')

    pl = pv.Plotter()
    pl.add_mesh(y_slice, scalars='U', lighting=False, scalar_bar_args={'title': 'Flow Velocity'})
    pl.add_mesh(mesh, color='w', opacity=0.25)
    pl.enable_anti_aliasing()
    pl.show()





.. image-sg:: /examples/99-advanced/images/sphx_glr_openfoam-tubes_001.png
   :alt: openfoam tubes
   :srcset: /examples/99-advanced/images/sphx_glr_openfoam-tubes_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-44

Plot Steamlines - Flow Velocity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generate streamlines using :func:`streamlines() <pyvista.DataSetFilters.streamlines>`.

.. GENERATED FROM PYTHON SOURCE LINES 44-71

.. code-block:: default


    lines, src = mesh.streamlines(
        vectors='U',
        source_center=(0, 0, 0),
        source_radius=0.025,
        return_source=True,
        max_time=0.5,
        integration_direction='backward',
        n_points=40,
    )

    pl = pv.Plotter()
    pl.add_mesh(
        lines,
        render_lines_as_tubes=True,
        line_width=3,
        lighting=False,
        scalar_bar_args={'title': 'Flow Velocity'},
        scalars='U',
        rng=(0, 212),
    )
    pl.add_mesh(mesh, color='w', opacity=0.25)
    pl.enable_anti_aliasing()
    pl.camera_position = 'xz'
    pl.show()





.. image-sg:: /examples/99-advanced/images/sphx_glr_openfoam-tubes_002.png
   :alt: openfoam tubes
   :srcset: /examples/99-advanced/images/sphx_glr_openfoam-tubes_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-82

Volumetric Plot - Visualize Turbulent Kinematic Viscosity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The turbulent kinematic viscosity of a fluid is a derived quantity used in
turbulence modeling to describe the effect of turbulent motion on the
momentum transport within the fluid.

For this example, we will first interpolate the results from the
:class:`pyvista.UnstructuredGrid` onto a :class:`pyvista.UniformGrid` using
:func:`interpolate() <pyvista.DataSetFilters.interpolate>`. This is so we can
visualize it using :func:`add_volume() <pyvista.Plotter.add_volume>`

.. GENERATED FROM PYTHON SOURCE LINES 82-105

.. code-block:: default


    bounds = np.array(mesh.bounds) * 1.2
    origin = (bounds[0], bounds[2], bounds[4])
    spacing = (0.003, 0.003, 0.003)
    dimensions = (
        int((bounds[1] - bounds[0]) // spacing[0] + 2),
        int((bounds[3] - bounds[2]) // spacing[1] + 2),
        int((bounds[5] - bounds[4]) // spacing[2] + 2),
    )
    grid = pv.UniformGrid(dimensions=dimensions, spacing=spacing, origin=origin)
    grid = grid.interpolate(mesh, radius=0.005)

    pl = pv.Plotter()
    vol = pl.add_volume(
        grid,
        scalars='nut',
        opacity='linear',
        scalar_bar_args={'title': 'Turbulent Kinematic Viscosity'},
    )
    vol.prop.interpolation_type = 'linear'
    pl.add_mesh(mesh, color='w', opacity=0.1)
    pl.camera_position = 'xz'
    pl.show()



.. image-sg:: /examples/99-advanced/images/sphx_glr_openfoam-tubes_003.png
   :alt: openfoam tubes
   :srcset: /examples/99-advanced/images/sphx_glr_openfoam-tubes_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.961 seconds)


.. _sphx_glr_download_examples_99-advanced_openfoam-tubes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: openfoam-tubes.py <openfoam-tubes.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: openfoam-tubes.ipynb <openfoam-tubes.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
