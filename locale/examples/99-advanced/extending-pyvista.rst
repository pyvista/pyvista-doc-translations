
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/99-advanced/extending-pyvista.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_99-advanced_extending-pyvista.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_99-advanced_extending-pyvista.py:


.. _extending_pyvista_example:

Extending PyVista
~~~~~~~~~~~~~~~~~

A :class:`pyvista.DataSet`, such as :class:`pyvista.PolyData`, can be extended
by users.  For example, if the user wants to keep track of the location of the
maximum point in the (1, 0, 1) direction on the mesh.

There are two methods by which users can handle subclassing.  One is directly managing
the types objects.  This may require checking types during filter
operations.

The second is automatic managing of types.  Users can control whether user defined
classes are nearly always used for particular types of DataSets.

.. note::
    This is for advanced usage only.  Automatic managing of types
    will not work in all situations, in particular when a builtin dataset is directly 
    instantiated.  See examples below.

.. GENERATED FROM PYTHON SOURCE LINES 24-31

.. code-block:: default


    import pyvista
    import numpy as np
    import vtk

    pyvista.set_plot_theme("document")








.. GENERATED FROM PYTHON SOURCE LINES 32-35

A user defined subclass of :class:`pyvista.PolyData`, ``FooData`` is defined.
It includes a property to keep track of the point on the mesh that is
furthest along in the (1, 0, 1) direction.

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: default


    class FooData(pyvista.PolyData):
        @property
        def max_point(self):
            """Returns index of point that is furthest along (1, 0, 1) direction."""
            return np.argmax(np.dot(self.points, (1.0, 0.0, 1.0)))








.. GENERATED FROM PYTHON SOURCE LINES 43-51

Directly Managing Types
+++++++++++++++++++++++

Now a ``foo_sphere`` object is created of type ``FooData``.
The index of the point and location of the point of interest can be obtained
directly. The sphere has a radius of 0.5, so the maximum extent in the
direction (1, 0, 1) is :math:`0.5\sqrt{0.5}\approx0.354`


.. GENERATED FROM PYTHON SOURCE LINES 51-58

.. code-block:: default


    foo_sphere = FooData(pyvista.Sphere(theta_resolution=100, phi_resolution=100))
    print("Original foo sphere:")
    print(f"Type: {type(foo_sphere)}")
    print(f"Maximum point index: {foo_sphere.max_point}")
    print(f"Location of maximum point: {foo_sphere.points[foo_sphere.max_point, :]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Original foo sphere:
    Type: <class '__main__.FooData'>
    Maximum point index: 4975
    Location of maximum point: [ 3.5634708e-01 -1.1460996e-16  3.5073745e-01]




.. GENERATED FROM PYTHON SOURCE LINES 59-61

Using an inplace operation like :func:`pyvista.DataSet.rotate_y` does not
affect the type of the object.

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default


    foo_sphere.rotate_y(90)
    print("\nRotated foo sphere:")
    print(f"Type: {type(foo_sphere)}")
    print(f"Maximum point index: {foo_sphere.max_point}")
    print(f"Location of maximum point: {foo_sphere.points[foo_sphere.max_point, :]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Rotated foo sphere:
    Type: <class '__main__.FooData'>
    Maximum point index: 75
    Location of maximum point: [0.35073745 0.         0.35634708]




.. GENERATED FROM PYTHON SOURCE LINES 69-73

However, filter operations can return different ``DataSet`` types including
ones that differ from the original type.  In this case, the
:func:`decimate <pyvista.PolyDataFilters.decimate>` method returns a 
:class:`pyvista.PolyData` object.

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: default


    print("\nDecimated foo sphere:")
    decimated_foo_sphere = foo_sphere.decimate(0.5)
    print(f"Type: {type(decimated_foo_sphere)}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Decimated foo sphere:
    Type: <class 'pyvista.core.pointset.PolyData'>




.. GENERATED FROM PYTHON SOURCE LINES 79-80

It is now required to explicitly wrap the object into ``FooData``.

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: default


    decimated_foo_sphere = FooData(foo_sphere.decimate(0.5))
    print(f"Type: {type(decimated_foo_sphere)}")
    print(f"Maximum point index: {decimated_foo_sphere.max_point}")
    print(f"Location of maximum point: {foo_sphere.points[foo_sphere.max_point, :]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Type: <class '__main__.FooData'>
    Maximum point index: 94
    Location of maximum point: [0.35073745 0.         0.35634708]




.. GENERATED FROM PYTHON SOURCE LINES 87-97

Automatically Managing Types
++++++++++++++++++++++++++++

The default :class:`pyvista.DataSet` type can be set using ``pyvista._wrappers``.
In general, it is best to use this method when it is expected to primarily 
use the user defined class.  

In this example, all objects that would have been created as
:class:`pyvista.PolyData` would now be created as a ``FooData`` object. Note,
that the key is the underlying vtk object.

.. GENERATED FROM PYTHON SOURCE LINES 97-100

.. code-block:: default


    pyvista._wrappers['vtkPolyData'] = FooData








.. GENERATED FROM PYTHON SOURCE LINES 101-103

It is no longer necessary to specifically wrap :class:`pyvista.PolyData`
objects to obtain a ``FooData`` object.

.. GENERATED FROM PYTHON SOURCE LINES 103-110

.. code-block:: default


    foo_sphere = pyvista.Sphere(theta_resolution=100, phi_resolution=100)
    print("Original foo sphere:")
    print(f"Type: {type(foo_sphere)}")
    print(f"Maximum point index: {foo_sphere.max_point}")
    print(f"Location of maximum point: {foo_sphere.points[foo_sphere.max_point, :]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Original foo sphere:
    Type: <class '__main__.FooData'>
    Maximum point index: 4975
    Location of maximum point: [ 3.5634708e-01 -1.1460996e-16  3.5073745e-01]




.. GENERATED FROM PYTHON SOURCE LINES 111-113

Using an inplace operation like :func:`rotate_y <pyvista.DataSet.rotate_y>` does not
affect the type of the object.

.. GENERATED FROM PYTHON SOURCE LINES 113-120

.. code-block:: default


    foo_sphere.rotate_y(90)
    print("\nRotated foo sphere:")
    print(f"Type: {type(foo_sphere)}")
    print(f"Maximum point index: {foo_sphere.max_point}")
    print(f"Location of maximum point: {foo_sphere.points[foo_sphere.max_point, :]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Rotated foo sphere:
    Type: <class '__main__.FooData'>
    Maximum point index: 75
    Location of maximum point: [0.35073745 0.         0.35634708]




.. GENERATED FROM PYTHON SOURCE LINES 121-123

Filter operations that return :class:`pyvista.PolyData` now return 
``FooData``

.. GENERATED FROM PYTHON SOURCE LINES 123-130

.. code-block:: default


    print("\nDecimated foo sphere:")
    decimated_foo_sphere = foo_sphere.decimate(0.5)
    print(f"Type: {type(decimated_foo_sphere)}")
    print(f"Maximum point index: {decimated_foo_sphere.max_point}")
    print(f"Location of maximum point: {foo_sphere.points[foo_sphere.max_point, :]}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Decimated foo sphere:
    Type: <class '__main__.FooData'>
    Maximum point index: 94
    Location of maximum point: [0.35073745 0.         0.35634708]




.. GENERATED FROM PYTHON SOURCE LINES 131-134

Users can still create a native :class:`pyvista.PolyData` object, but
using this method may incur unintended consequences.  In this case,
it is recommended to use the directly managing types method.

.. GENERATED FROM PYTHON SOURCE LINES 134-143

.. code-block:: default


    poly_object = pyvista.PolyData(vtk.vtkPolyData())
    print(f"Type: {type(poly_object)}")
    # catch error
    try:
        poly_object.rotate_y(90)
    except TypeError:
        print("This operation fails")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Type: <class 'pyvista.core.pointset.PolyData'>
    This operation fails




.. GENERATED FROM PYTHON SOURCE LINES 144-146

Usage of ``pyvista._wrappers`` may require resetting the default value
to avoid leaking the setting into cases where it is unused.

.. GENERATED FROM PYTHON SOURCE LINES 146-149

.. code-block:: default


    pyvista._wrappers['vtkPolyData'] = pyvista.PolyData








.. GENERATED FROM PYTHON SOURCE LINES 150-152

For instances where a localized usage is preferred, a tear-down method is
recommended.  One example is a ``try...finally`` block.

.. GENERATED FROM PYTHON SOURCE LINES 152-158

.. code-block:: default


    try:
        pyvista._wrappers['vtkPolyData'] = FooData
        # some operation that sometimes raises an error
    finally:
        pyvista._wrappers['vtkPolyData'] = pyvista.PolyData








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.162 seconds)


.. _sphx_glr_download_examples_99-advanced_extending-pyvista.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: extending-pyvista.py <extending-pyvista.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: extending-pyvista.ipynb <extending-pyvista.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
