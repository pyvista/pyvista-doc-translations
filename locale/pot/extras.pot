# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2021, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.33.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-07 00:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../pyvista/doc/extras/building_vtk.rst:4
msgid "Building VTK"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:5
msgid "Kitware provides Python wheels for VTK at `PyPI VTK <https://pypi.org/project/vtk/>`_, but there are situations where you may need to build VTK from source (e.g. new release of Python, EGL rendering, additional features, etc).  As ``pyvista`` does not provide ``vtk``, you will have to build it manually."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:11
msgid "Should you need a prebuilt wheel, a variety of prebuilt wheels (including ones with EGL) can be found at `pyvista Release 0.31.0 <https://github.com/pyvista/pyvista/releases/tag/0.31.0>`_.  This includes wheels for Raspberry Pi (64-bit OS), Python 3.9 Linux, and EGL support (``arch64`` and ``x86_64``)."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:19
msgid "Wheels on Linux and Mac OS"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:20
msgid "Building VTK from source on Linux and MacOS is fairly easy.  Using the default build settings, build a Python wheel of VTK using ``ninja`` using the following script.  This script uses system python3, but you can use any modern Python version.  For some additional useful options, see the `conda-forge recipe <https://github.com/conda-forge/vtk-feedstock/blob/master/recipe/build.sh>`__. Most of the ones below are designed to reduce the build time and resulting wheel size."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:69
msgid "Off-Screen Plotting GPU Support"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:70
msgid "VTK supports rendering with EGL, enabling rapid off-screen rendering using GPU hardware acceleration without installing a virtual framebuffer.  The default VTK wheels are not built with this feature, but you can build VTK for off-screen plotting using GPU support by modifying the above ``cmake`` command with:"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:86
msgid "This disables any plotting using the X server, so be prepared to use this module only on a headless display where you either intend to save static images or stream the render window to another computer with a display (e.g using ``pyvista.set_jupyter_backend('ipyvtklink')`` and jupyterlab). In other words, this wheel will make VTK unusable outside of an off-screen environment, so only plan on installing it on a headless system without an X server."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:96
msgid "Building ManyLinux Wheels"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:97
msgid "The above directions are great for building a local build of VTK, but these wheels are difficult to share outside your local install given issues with ABI compatibility due to the version of Linux they were built on.  You can work around this by building your wheels using a `manylinux <https://github.com/pypa/manylinux>`_ docker image."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:163
msgid "This script can be called with:"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:173
msgid "To build the EGL version of the wheel, follow the directions in the previous section.  Add ``mesa-libEGL-devel`` to the installation dependencies."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:179
msgid "Building Python VTK Wheel on Raspberry Pi (64-bit)"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:180
msgid "While it's possible to build on 32-bit Raspberry Pi (ARMv7), there are several issues that crop up when building wheels for the 32-bit version (see `manylinux issue 84 <https://github.com/pypa/manylinux/issues/84>`_).  Should you attempt to build on 32-bit, try building the wheel using `dockcross <https://github.com/dockcross/dockcross>`_ as you may run into memory limitations otherwise (especially with only 1 GB RAM)."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:188
msgid "Building the ``aarch64`` manylinux wheel can be done via docker with the ``quay.io/pypa/manylinux2014_aarch64`` image.  Run the following:"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:199
msgid "Where ``build_wheels.sh`` is:"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:262
msgid "Be sure to either enable or disable ``DVTK_OPENGL_HAS_EGL`` depending on if you want ``EGL`` enabled for your wheel."
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:267
msgid "Building VTK on Windows"
msgstr ""

#: ../../pyvista/doc/extras/building_vtk.rst:268
msgid "Please reference the directions at `Building VTK with Windows <https://vtk.org/Wiki/VTK/Configure_and_Build#On_Windows_5>`_.  This is generally a non-trivial process and is not for the faint-hearted."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:4
msgid "Contributing"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:6
msgid "We absolutely welcome contributions and we hope that this guide will facilitate an understanding of the PyVista code repository. It is important to note that the PyVista software package is maintained on a volunteer basis and thus we need to foster a community that can support user questions and develop new features to make this software a useful tool for all users."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:13
msgid "This page is dedicated to outline where you should start with your question, concern, feature request, or desire to contribute."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:17
msgid "Cloning the Source Repository"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:19
msgid "You can clone the source repository from ``https://github.com/pyvista/pyvista`` and install the latest version by running:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:31
msgid "Questions"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:33
msgid "For general questions about the project, its applications, or about software usage, please create a discussion in `pyvista/discussions <https://github.com/pyvista/pyvista/discussions>`__ where the community can collectively address your questions. You are also welcome to join us on `Slack <http://slack.pyvista.org>`__ or send one of the developers an email. The project support team can be reached at info@pyvista.org"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:41
msgid "For more technical questions, you are welcome to create an issue on the `issues page <https://github.com/pyvista/pyvista/issues>`__ which we will address promptly. Through posting on the issues page, your question can be addressed by community members with the needed expertise and the information gained will remain available on the issues page for other users."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:49
msgid "Reporting Bugs"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:51
msgid "If you stumble across any bugs, crashes, or concerning quirks while using code distributed here, please report it on the `issues page <https://github.com/pyvista/pyvista/issues>`__ with an appropriate label so we can promptly address it. When reporting an issue, please be overly descriptive so that we may reproduce it. Whenever possible, please provide tracebacks, screenshots, and sample files to help us address the issue."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:60
msgid "Feature Requests"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:62
msgid "We encourage users to submit ideas for improvements to PyVista code base! Please create an issue on the `issues page <https://github.com/pyvista/pyvista/issues>`__ with a *Feature Request* label to suggest an improvement. Please use a descriptive title and provide ample background information to help the community implement that functionality. For example, if you would like a reader for a specific file format, please provide a link to documentation of that file format and possibly provide some sample files with screenshots to work with. We will use the issue thread as a place to discuss and provide feedback."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:74
msgid "Contributing New Code"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:76
msgid "If you have an idea for how to improve PyVista, please first create an issue as a feature request which we can use as a discussion thread to work through how to implement the contribution."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:80
msgid "Once you are ready to start coding and develop for PyVista, please see the `Development Practices <#development-practices>`__ section for more details."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:85
msgid "Licensing"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:87
msgid "All contributed code will be licensed under The MIT License found in the repository. If you did not write the code yourself, it is your responsibility to ensure that the existing license is compatible and included in the contributed files or you can obtain permission from the original author to relicense the code."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:96
msgid "Development Practices"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:98
msgid "This section provides a guide to how we conduct development in the PyVista repository. Please follow the practices outlined here when contributing directly to this repository."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:103
msgid "Guidelines"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:105
msgid "Through direct access to the Visualization Toolkit (VTK) via direct array access and intuitive Python properties, we hope to make the entire VTK library easily accessible to researchers of all disciplines. To further PyVista towards being the de facto Python interface to VTK, we need your help to make it even better!"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:111
msgid "If you want to add one or two interesting analysis algorithms as filters, implement a new plotting routine, or just fix 1-2 typos - your efforts are welcome!"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:115
msgid "There are three general coding paradigms that we believe in:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:117
msgid "**Make it intuitive**. PyVista's goal is to create an intuitive and easy to use interface back to the VTK library. Any new features should have intuitive naming conventions and explicit keyword arguments for users to make the bulk of the library accessible to novice users."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:123
msgid "**Document everything!** At the least, include a docstring for any method or class added. Do not describe what you are doing but why you are doing it and provide simple use cases for the new features."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:127
msgid "**Keep it tested**. We aim for a high test coverage. See testing for more details."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:130
msgid "There are two important copyright guidelines:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:132
msgid "Please do not include any data sets for which a license is not available or commercial use is prohibited. Those can undermine the license of the whole projects."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:136
msgid "Do not use code snippets for which a license is not available (e.g. from stackoverflow) or commercial use is prohibited. Those can undermine the license of the whole projects."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:140
msgid "Please also take a look at our `Code of Conduct <https://github.com/pyvista/pyvista/blob/main/CODE_OF_CONDUCT.md>`__"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:144
msgid "Contributing to pyvista through GitHub"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:146
msgid "To submit new code to pyvista, first fork the `pyvista GitHub Repo <https://github.com/pyvista/pyvista>`__ and then clone the forked repository to your computer. Then, create a new branch based on the `Branch Naming Conventions Section <#branch-naming-conventions>`__ in your local repository."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:152
msgid "Next, add your new feature and commit it locally. Be sure to commit often as it is often helpful to revert to past commits, especially if your change is complex. Also, be sure to test often. See the `Testing Section <#testing>`__ below for automating testing."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:157
msgid "When you are ready to submit your code, create a pull request by following the steps in the `Creating a New Pull Request section <#creating-a-new-pull-request>`__."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:162
msgid "Coding Style"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:164
msgid "We adhere to `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`__ wherever possible, except that line widths are permitted to go beyond 79 characters to a max of 90 to 100 characters."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:168
msgid "Outside of PEP 8, when coding please consider `PEP 20 -- The Zen of Python <https://www.python.org/dev/peps/pep-0020/>`__. When in doubt:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:176
msgid "Branch Naming Conventions"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:178
msgid "To streamline development, we have the following requirements for naming branches. These requirements help the core developers know what kind of changes any given branch is introducing before looking at the code."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:182
msgid "``fix/``: any bug fixes, patches, or experimental changes that are minor"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:184
msgid "``feat/``: any changes that introduce a new feature or significant addition"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:186
msgid "``junk/``: for any experimental changes that can be deleted if gone stale"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:188
msgid "``maint/``: for general maintenance of the repository or CI routines"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:189
msgid "``doc/``: for any changes only pertaining to documentation"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:190
msgid "``no-ci/``: for low impact activity that should NOT trigger the CI routines"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:192
msgid "``testing/``: improvements or changes to testing"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:193
msgid "``release/``: releases (see below)"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:196
msgid "Testing"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:198
msgid "After making changes, please test changes locally before creating a pull request. The following tests will be executed after any commit or pull request, so we ask that you perform the following sequence locally to track down any new issues from your changes."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:203
msgid "To run our comprehensive suite of unit tests, install all the dependencies listed in ``requirements_test.txt``, ``requirements_docs.txt``, ``requirements_style.txt``:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:213
msgid "Then, if you have everything installed, you can run the various test suites."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:216
msgid "Run the primary test suite and generate coverage report:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:222
msgid "Run all code examples in the docstrings:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:228
msgid "Run documentation testing by running"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:234
msgid "If you are running windows and ``make`` is unavailable, then run:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:242
msgid "And finally, test the documentation examples:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:251
msgid "The finished documentation can be found in the ``doc/_build/html`` directory."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:255
msgid "Notes Regarding Image Regression Testing"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:257
msgid "Since ``pyvista`` is primarily a plotting module, it's imperative we actually check the images that we generate in some sort of regression testing.  In practice, this ends up being quite a bit of work because:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:261
msgid "OpenGL software vs. hardware rending causes slightly different images to be rendered."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:263
msgid "We want our CI (which uses a virtual frame buffer) to match our desktop images (uses hardware acceleration)."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:265
msgid "Different OSes render different images."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:267
msgid "As each platform and environment renders different slightly images relative to Linux (which these images were built from), so running these tests across all OSes isn't optimal.  We could generate different images for each OS, but it's overkill in my opinion; we need to know if something fundamental changed with our plotting without actually looking at the plots (like the docs at dev.pyvista.com)"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:274
msgid "Based on these points, image regression testing only occurs on Linux CI, and multi-sampling is disabled as that seems to be one of the biggest difference between software and hardware based rendering."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:278
msgid "Image cache is stored here as ./image_cache"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:280
msgid "Image resolution is kept low at 400x400 as we don't want to pollute git with large images.  Small variations between versions and environments are to be expected, so error < ``IMAGE_REGRESSION_ERROR`` is allowable (and will be logged as a warning) while values over that amount will trigger an error."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:286
msgid "There are two mechanisms within ``pytest`` to control image regression testing, ``--reset_image_cache`` and ``--ignore_image_cache``.  For example:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:294
msgid "Running ``--reset_image_cache`` creates a new image for each test in ``tests/plotting/test_plotting.py`` and is not recommended except for testing or for potentially a major or minor release.  You can use ``--ignore_image_cache`` if you're running on Linux and want to temporarily ignore regression testing.  Realize that regression testing will still occur on our CI testing."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:301
msgid "If you need to add a new test to ``tests/plotting/test_plotting.py`` and wish to include image regression testing, be sure to add ``verify_cache_image`` to ``show``.  For example:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:313
msgid "This ensures that immediately before the plotter is closed, the current render window will be verified against the image in CI.  If no image exists, be sure to add the resulting image with ``git add tests/plotting/image_cache/*``."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:320
msgid "Creating a New Pull Request"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:322
msgid "Once you have tested your branch locally, create a pull request on `pyvista GitHub <https://github.com/pyvista/pyvista>`__ while merging to main. This will automatically run continuous integration (CI) testing and verify your changes will work across several platforms."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:327
msgid "To ensure someone else reviews your code, at least one other member of the pyvista contributors group must review and verify your code meets our community's standards. Once approved, if you have write permission you may merge the branch. If you don't have write permission, the reviewer or someone else with write permission will merge the branch and delete the PR branch."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:334
msgid "Since it may be necessary to merge your branch with the current release branch (see below), please do not delete your branch if it is a ``fix/`` branch."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:339
msgid "Branching Model"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:341
msgid "This project has a branching model that enables rapid development of features without sacrificing stability, and closely follows the `Trunk Based Development <https://trunkbaseddevelopment.com/>`__ approach."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:345
msgid "The main features of our branching model are:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:347
msgid "The ``main`` branch is the main development branch. All features, patches, and other branches should be merged here. While all PRs should pass all applicable CI checks, this branch may be functionally unstable as changes might have introduced unintended side-effects or bugs that were not caught through unit testing."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:352
msgid "There will be one or many ``release/`` branches based on minor releases (for example ``release/0.24``) which contain a stable version of the code base that is also reflected on PyPI/. Hotfixes from ``fix/`` branches should be merged both to main and to these branches. When necessary to create a new patch release these release branches will have their ``__version__.py`` updated and be tagged with a patched semantic version (e.g. ``0.24.1``). This triggers CI to push to PyPI, and allow us to rapidly push hotfixes for past versions of ``pyvista`` without having to worry about untested features."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:362
msgid "When a minor release candidate is ready, a new ``release`` branch will be created from ``main`` with the next incremented minor version (e.g. ``release/0.25``), which will be thoroughly tested. When deemed stable, the release branch will be tagged with the version (``0.25.0`` in this case), and if necessary merged with main if any changes were pushed to it. Feature development then continues on ``main`` and any hotfixes will now be merged with this release. Older release branches should not be deleted so they can be patched as needed."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:373
msgid "Minor Release Steps"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:375
msgid "Minor releases are feature and bug releases that improve the functionality and stability of ``pyvista``. Before a minor release is created the following will occur:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:379
msgid "Create a new branch from the ``main`` branch with name ``release/MAJOR.MINOR`` (e.g. ``release/0.25``)."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:382
msgid "Locally run all tests as outlined in the `Testing Section <#testing>`__ and ensure all are passing."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:385
msgid "Locally test and build the documentation with link checking to make sure no links are outdated. Be sure to run ``make clean`` to ensure no results are cached. ``bash     cd doc     make clean  # deletes the sphinx-gallery cache     make doctest     make html -b linkcheck``"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:390
msgid "After building the documentation, open the local build and examine the examples gallery for any obvious issues."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:393
msgid "Update the version numbers in ``pyvista/_version.py`` and commit it. Push the branch to GitHub and create a new PR for this release that merges it to main. Development to main should be limited at this point while effort is focused on the release."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:398
msgid "It is now the responsibility of the ``pyvista`` community to functionally test the new release. It is best to locally install this branch and use it in production. Any bugs identified should have their hotfixes pushed to this release branch."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:403
msgid "When the branch is deemed as stable for public release, the PR will be merged to main and the ``main`` branch will be tagged with a ``MAJOR.MINOR.0`` release. The release branch will not be deleted. Tag the release with:"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:413
msgid "Create a list of all changes for the release. It is often helpful to leverage `GitHub's *compare* feature <https://github.com/pyvista/pyvista/compare>`__ to see the differences from the last tag and the ``main`` branch. Be sure to acknowledge new contributors by their GitHub username and place mentions where appropriate if a specific contributor is to thank for a new feature."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:421
msgid "Place your release notes from step 8 in the description for `the new release on GitHub <https://github.com/pyvista/pyvista/releases/new>`__"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:425
msgid "Go grab a beer/coffee/water and wait for [@regro-cf-autotick-bot](https://github.com/regro-cf-autotick-bot) to open a pull request on the conda-forge `PyVista feedstock <https://github.com/conda-forge/pyvista-feedstock>`__. Merge that pull request."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:431
msgid "Announce the new release in the PyVista Slack workspace and celebrate!"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:435
msgid "Patch Release Steps"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:437
msgid "Patch releases are for critical and important bugfixes that can not or should not wait until a minor release. The steps for a patch release"
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:440
msgid "Push the necessary bugfix(es) to the applicable release branch. This will generally be the latest release branch (e.g. ``release/0.25``)."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:443
msgid "Update ``__version__.py`` with the next patch increment (e.g. ``0.25.1``), commit it, and open a PR that merge with the release branch. This gives the ``pyvista`` community a chance to validate and approve the bugfix release. Any additional hotfixes should be outside of this PR."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:449
msgid "When approved, merge with the release branch, but not ``main`` as there is no reason to increment the version of the ``main`` branch. Then create a tag from the release branch with the applicable version number (see above for the correct steps)."
msgstr ""

#: ../../pyvista/doc/extras/developer_notes.rst:454
msgid "If deemed necessary, create a release notes page. Also, open the PR from conda and follow the directions in step 10 in the minor release section."
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:4
msgid "PyVista within a Docker Container"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:5
msgid "You can use ``pyvista`` from within a docker container with jupyterlab.  To create a local docker image install ``docker`` and be sure you've logged into docker by following the directions at `Working with the Docker registry <https://docs.github.com/en/enterprise-server@3.0/packages/working-with-a-github-packages-registry/working-with-the-docker-registry>`_)"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:10
msgid "Next pull and run the image with:"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:16
msgid "Finally, open the link that shows up from the terminal output and start playing around with pyvista in jupyterlab!  For example:"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:29
msgid "Create your own Docker Container with `pyvista`"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:30
msgid "Clone pyvista and cd into this directory to create your own customized docker image."
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:40
msgid "If you wish to have off-screen GPU support when rending on jupyterlab, see the the notes about building with EGL at :ref:`ref_building_vtk`, or use the custom, pre-built wheels at `Release 0.27.0 <https://github.com/pyvista/pyvista/releases/tag/0.27.0>`_. Install that customized vtk wheel onto your docker image by modifying the docker image at ``pyvista/docker/Dockerfile`` with:"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:52
msgid "Additionally, you must install GPU drivers on the docker image of the same version running on the host machine.  For example, if you are running on Azure Kubernetes Service and the GPU nodes on the kubernetes cluster are running ``450.51.06``, you must install the same version on your image.  Since you will be using the underlying kernel module, there's no reason to build it on the container (and trying will only result in an error)."
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:66
msgid "To verify that you're rendering on a GPU, first check the output of ``nvidia-smi``.  You should get something like:"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:85
msgid "Note the driver version (which is actually the kernel driver version), and verify it matches the version you installed on your docker image."
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:88
msgid "Finally, check that your render window is using NVIDIA by running ``ReportCapabilities``:"
msgstr ""

#: ../../pyvista/doc/extras/docker.rst:107
msgid "If you get ``display id not set``, then your environment is likely not setup correctly."
msgstr ""

#: ../../pyvista/doc/extras/extending_pyvista.rst:2
msgid "Extending PyVista"
msgstr ""

#: ../../pyvista/doc/extras/extending_pyvista.rst:4
msgid "PyVista ``DataSets`` can be extended for user defined functionality. See :ref:`Extending PyVista Example <extending_pyvista_example>`."
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:4
msgid "Flask Application"
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:5
msgid "You can use ``pyvista`` in to make a flask application to display static plots.  See the following example as well as the demo at `Flask Example <https://github.com/pyvista/pyvista/tree/main/examples_flask>`__."
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:9
msgid "For dynamic examples, it's recommended to use `Jupyter Notebooks <https://jupyter.org/>`__.  See our documentation regarding this at :ref:`jupyter_plotting`."
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:15
msgid "Example Flask Webpage"
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:19
msgid "Python Application ``app.py``"
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:25
msgid "Ajax Template ``index.html``"
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:26
msgid "This template should be within the ``templates`` directory in the same path as ``app.py``."
msgstr ""

#: ../../pyvista/doc/extras/flask.rst:29
msgid "This template returns the ``meshtype`` parameter back to the ``get_img`` method in the flask app, which is used to select the type of mesh to be plotted."
msgstr ""

#: ../../pyvista/doc/extras/index.rst:2
msgid "Extras"
msgstr ""

#: ../../pyvista/doc/extras/index.rst:3
msgid "This section contains resources to expand the usage of PyVista beyond just running it from a Python console or IDE.  For example, you can package PyVista in a docker image and build VTK with EGL to enable rich headless plotting on remote servers.  You can also package PyVista using `pyinstaller`_ to be used within a standalone application.  You could even make a basic web application using `flask`_."
msgstr ""

#: ../../pyvista/doc/extras/index.rst:11
msgid "See the :ref:`ref_developer_notes` section for details on contributing and how you can help develop PyVista."
msgstr ""

#: ../../pyvista/doc/extras/plot_directive.rst:4
msgid "Sphinx PyVista Plot Directive"
msgstr ""

#: ../../pyvista/doc/extras/plot_directive.rst:5
msgid "You can generate static images of pyvista plots using the ``.. pyvista-plot`` directive by adding the following to your ``conf.py`` when building your documentation using Sphinx."
msgstr ""

#: ../../pyvista/doc/extras/plot_directive.rst:16
msgid "You can then issue the plotting directive within your sphinx documentation files:"
msgstr ""

#: ../../pyvista/doc/extras/plot_directive.rst:14
msgid "A sphere"
msgstr ""

#: ../../pyvista/doc/extras/plot_directive.rst:27
msgid "Which will be rendered as:"
msgstr ""

#: ../../pyvista/doc/extras/plot_directive.rst:14
msgid "This is a default sphere"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:1
msgid "Plot directive module."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:4
msgid "A directive for including a PyVista plot in a Sphinx document"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:6
msgid "The `.. pyvista-plot::` sphinx directive will include an inline ``.png`` image."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:9
msgid "The source code for the plot may be included in one of two ways:"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:11
msgid "Using **doctest** syntax::"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:19
msgid "**A path to a source file** as the argument to the directive::"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:23
msgid "When a path to a source file is given, the content of the directive may optionally contain a caption for the plot::"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:30
msgid "Additionally, one may specify the name of a function to call (with no arguments) immediately after importing the module::"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:36
msgid "Code blocks containing ``doctest:+SKIP`` will be skipped."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:39
msgid "Animations will not be saved, only the last frame will be shown."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:43
msgid "Options"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:44
msgid "The ``pyvista-plot`` directive supports the following options:"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:48
msgid "include-source"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:None
#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:None
msgid "bool"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:47
msgid "Whether to display the source code. The default can be changed using the `plot_include_source` variable in :file:`conf.py`."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:53
msgid "encoding"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:None
#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:None
msgid "str"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:51
msgid "If this source file is in a non-UTF8 or non-ASCII encoding, the encoding must be specified using the ``:encoding:`` option.  The encoding will not be inferred using the ``-*- coding -*-`` metacomment."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:58
msgid "context"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:None
msgid "None"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:56
msgid "If provided, the code will be run in the context of all previous plot directives for which the ``:context:`` option was specified.  This only applies to inline code plot directives, not those run from files."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:62
msgid "nofigs"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:61
msgid "If specified, the code block will be run, but no figures will be inserted.  This is usually useful with the ``:context:`` option."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:67
msgid "caption"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:65
msgid "If specified, the option's argument will be used as a caption for the figure. This overwrites the caption given in the content, when the plot is generated from a file."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:69
msgid "Additionally, this directive supports all of the options of the `image` directive, except for *target* (since plot will add its own target).  These include *alt*, *height*, *width*, *scale*, *align*."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:75
msgid "Configuration options"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:76
msgid "The plot directive has the following configuration options:"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:79
msgid "plot_include_source"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:79
msgid "Default value for the include-source option."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:84
msgid "plot_basedir"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:82
msgid "Base directory, to which ``plot::`` file names are relative to.  (If ``None`` or empty, file names are relative to the directory where the file containing the directive is.)"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:87
msgid "plot_html_show_formats"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:87
msgid "Whether to show links to the files in HTML."
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:90
msgid "plot_template"
msgstr ""

#: ../../pyvista/pyvista/ext/plot_directive.py:docstring of pyvista.ext.plot_directive:90
msgid "Provide a customized template for preparing restructured text."
msgstr ""

#: ../../pyvista/doc/extras/pyinstaller.rst:4
msgid "Freezing PyVista with pyinstaller"
msgstr ""

#: ../../pyvista/doc/extras/pyinstaller.rst:5
msgid "You can make some fantastic standalone programs with ``pyinstaller`` and ``pyvista``, and you can even make a graphical user interface incorporating ``PyQt5`` or ``pyside2``.  Depending on your version of VTK, this requires some extra steps to setup."
msgstr ""

#: ../../pyvista/doc/extras/pyinstaller.rst:10
msgid "When running VTK v9, you need to add several additional ``hiddenimports``.  For clarity and completeness, create a spec file (we'll name it ``pyvista.spec``) following the directions given at `Using Spec Files <https://pyinstaller.readthedocs.io/en/stable/spec-files.html>`__.  Modify the ``Analysis`` and add the following hidden imports:"
msgstr ""

#: ../../pyvista/doc/extras/pyinstaller.rst:29
msgid "From there, you can freeze an application using ``pyvista`` and create a standalone application."
msgstr ""

#: ../../pyvista/doc/extras/vtk_data.rst:3
msgid "Using Local VTK-Data"
msgstr ""

#: ../../pyvista/doc/extras/vtk_data.rst:5
msgid "Normally, the PyVista examples will be downloaded from the `pyvista/vtk-data repository <https://github.com/pyvista/vtk-data>`_. Alternatively, the entire pyvista/vtk-data repository can be supplied as a local folder. If the ``PYVISTA_VTK_DATA`` environment variable is set to the folder path, the examples will instead be copied from the local folder."
msgstr ""

#: ../../pyvista/doc/extras/vtk_data.rst:11
msgid "This example uses a cloned vtk-data repository:"
msgstr ""
