# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2021, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.28.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-28 00:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-geometric-objects.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:24
msgid "Geometric Objects"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:26
msgid "The \"Hello, world!\" of VTK"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:43
msgid "This runs through several of the available geometric objects available in VTK which PyVista provides simple convenience methods for generating."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:46
msgid "Let's run through creating a few geometric objects!"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:72
msgid "Now let's plot them all in one window"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:113
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:69
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:105
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:149
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:183
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:218
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:252
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:286
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:320
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:354
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:388
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:422
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:456
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:490
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:524
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:558
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:592
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:626
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:661
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:695
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:729
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:763
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:797
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:842
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:881
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:80
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:145
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:176
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:238
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:284
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:342
#: ../../pyvista/docs/examples/00-load/create-poly.rst:82
#: ../../pyvista/docs/examples/00-load/create-spline.rst:72
#: ../../pyvista/docs/examples/00-load/create-spline.rst:153
#: ../../pyvista/docs/examples/00-load/create-spline.rst:198
#: ../../pyvista/docs/examples/00-load/create-spline.rst:252
#: ../../pyvista/docs/examples/00-load/create-spline.rst:289
#: ../../pyvista/docs/examples/00-load/create-spline.rst:325
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:95
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:124
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:154
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:219
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:306
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:349
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:382
#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:116
#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:203
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:72
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:109
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:144
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:224
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:258
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:305
#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:90
#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:144
#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:204
#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:63
#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:130
#: ../../pyvista/docs/examples/00-load/read-file.rst:72
#: ../../pyvista/docs/examples/00-load/read-file.rst:130
#: ../../pyvista/docs/examples/00-load/read-file.rst:158
#: ../../pyvista/docs/examples/00-load/read-file.rst:191
#: ../../pyvista/docs/examples/00-load/read-file.rst:236
#: ../../pyvista/docs/examples/00-load/read-file.rst:269
#: ../../pyvista/docs/examples/00-load/read-file.rst:302
#: ../../pyvista/docs/examples/00-load/read-file.rst:334
#: ../../pyvista/docs/examples/00-load/read-image.rst:90
#: ../../pyvista/docs/examples/00-load/read-image.rst:118
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:112
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:133
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:212
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:238
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:122
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:193
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:279
#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:74
#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:106
#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:149
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:74
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:115
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:159
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:203
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:235
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:276
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:75
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:119
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:149
#: ../../pyvista/docs/examples/01-filter/clipping.rst:76
#: ../../pyvista/docs/examples/01-filter/clipping.rst:121
#: ../../pyvista/docs/examples/01-filter/clipping.rst:166
#: ../../pyvista/docs/examples/01-filter/clipping.rst:206
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:81
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:127
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:162
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:204
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:245
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:67
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:112
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:159
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:135
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:182
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:225
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:273
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:302
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:386
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:435
#: ../../pyvista/docs/examples/01-filter/connectivity.rst:73
#: ../../pyvista/docs/examples/01-filter/connectivity.rst:116
#: ../../pyvista/docs/examples/01-filter/contouring.rst:77
#: ../../pyvista/docs/examples/01-filter/contouring.rst:120
#: ../../pyvista/docs/examples/01-filter/decimate.rst:54
#: ../../pyvista/docs/examples/01-filter/decimate.rst:84
#: ../../pyvista/docs/examples/01-filter/decimate.rst:112
#: ../../pyvista/docs/examples/01-filter/decimate.rst:142
#: ../../pyvista/docs/examples/01-filter/decimate.rst:189
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:86
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:149
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:178
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:216
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:243
#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:62
#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:160
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:84
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:126
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:175
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:212
#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:100
#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:153
#: ../../pyvista/docs/examples/01-filter/geodesic.rst:97
#: ../../pyvista/docs/examples/01-filter/geodesic.rst:124
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:83
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:131
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:164
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:210
#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:107
#: ../../pyvista/docs/examples/01-filter/gradients.rst:98
#: ../../pyvista/docs/examples/01-filter/gradients.rst:150
#: ../../pyvista/docs/examples/01-filter/gradients.rst:253
#: ../../pyvista/docs/examples/01-filter/gradients.rst:284
#: ../../pyvista/docs/examples/01-filter/gradients.rst:324
#: ../../pyvista/docs/examples/01-filter/interpolate.rst:72
#: ../../pyvista/docs/examples/01-filter/interpolate.rst:111
#: ../../pyvista/docs/examples/01-filter/interpolate.rst:194
#: ../../pyvista/docs/examples/01-filter/interpolate.rst:251
#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:107
#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:37
#: ../../pyvista/docs/examples/01-filter/project-plane.rst:50
#: ../../pyvista/docs/examples/01-filter/project-plane.rst:88
#: ../../pyvista/docs/examples/01-filter/resample.rst:90
#: ../../pyvista/docs/examples/01-filter/resample.rst:125
#: ../../pyvista/docs/examples/01-filter/resample.rst:185
#: ../../pyvista/docs/examples/01-filter/slicing.rst:77
#: ../../pyvista/docs/examples/01-filter/slicing.rst:114
#: ../../pyvista/docs/examples/01-filter/slicing.rst:146
#: ../../pyvista/docs/examples/01-filter/slicing.rst:185
#: ../../pyvista/docs/examples/01-filter/slicing.rst:221
#: ../../pyvista/docs/examples/01-filter/slicing.rst:359
#: ../../pyvista/docs/examples/01-filter/slicing.rst:432
#: ../../pyvista/docs/examples/01-filter/slicing.rst:542
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:124
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:184
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:252
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:327
#: ../../pyvista/docs/examples/01-filter/subdivide.rst:130
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:74
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:112
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:147
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:181
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:113
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:171
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:237
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:88
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:125
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:198
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:274
#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:58
#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:99
#: ../../pyvista/docs/examples/02-plot/background_image.rst:67
#: ../../pyvista/docs/examples/02-plot/background_image.rst:118
#: ../../pyvista/docs/examples/02-plot/clear.rst:63
#: ../../pyvista/docs/examples/02-plot/clear.rst:100
#: ../../pyvista/docs/examples/02-plot/clear.rst:136
#: ../../pyvista/docs/examples/02-plot/cmap.rst:138
#: ../../pyvista/docs/examples/02-plot/cmap.rst:171
#: ../../pyvista/docs/examples/02-plot/cmap.rst:203
#: ../../pyvista/docs/examples/02-plot/cmap.rst:243
#: ../../pyvista/docs/examples/02-plot/cmap.rst:304
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:98
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:151
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:200
#: ../../pyvista/docs/examples/02-plot/edges.rst:63
#: ../../pyvista/docs/examples/02-plot/edl.rst:76
#: ../../pyvista/docs/examples/02-plot/edl.rst:123
#: ../../pyvista/docs/examples/02-plot/edl.rst:182
#: ../../pyvista/docs/examples/02-plot/edl.rst:220
#: ../../pyvista/docs/examples/02-plot/edl.rst:255
#: ../../pyvista/docs/examples/02-plot/floors.rst:37
#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:90
#: ../../pyvista/docs/examples/02-plot/gif.rst:37
#: ../../pyvista/docs/examples/02-plot/image_depth.rst:53
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:98
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:149
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:202
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:250
#: ../../pyvista/docs/examples/02-plot/isovalue.rst:184
#: ../../pyvista/docs/examples/02-plot/labels.rst:132
#: ../../pyvista/docs/examples/02-plot/labels.rst:202
#: ../../pyvista/docs/examples/02-plot/labels.rst:259
#: ../../pyvista/docs/examples/02-plot/lighting.rst:71
#: ../../pyvista/docs/examples/02-plot/lighting.rst:102
#: ../../pyvista/docs/examples/02-plot/lighting.rst:146
#: ../../pyvista/docs/examples/02-plot/lighting.rst:177
#: ../../pyvista/docs/examples/02-plot/lighting.rst:209
#: ../../pyvista/docs/examples/02-plot/lighting.rst:240
#: ../../pyvista/docs/examples/02-plot/movie.rst:79
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:91
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:132
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:192
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:287
#: ../../pyvista/docs/examples/02-plot/opacity.rst:75
#: ../../pyvista/docs/examples/02-plot/opacity.rst:128
#: ../../pyvista/docs/examples/02-plot/opacity.rst:157
#: ../../pyvista/docs/examples/02-plot/opacity.rst:244
#: ../../pyvista/docs/examples/02-plot/opacity.rst:310
#: ../../pyvista/docs/examples/02-plot/opacity.rst:349
#: ../../pyvista/docs/examples/02-plot/opacity.rst:398
#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:46
#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:98
#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:150
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:77
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:148
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:77
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:146
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:192
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:228
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:268
#: ../../pyvista/docs/examples/02-plot/screenshot.rst:69
#: ../../pyvista/docs/examples/02-plot/shading.rst:65
#: ../../pyvista/docs/examples/02-plot/shading.rst:95
#: ../../pyvista/docs/examples/02-plot/spherical.rst:131
#: ../../pyvista/docs/examples/02-plot/spherical.rst:202
#: ../../pyvista/docs/examples/02-plot/spherical.rst:261
#: ../../pyvista/docs/examples/02-plot/texture.rst:75
#: ../../pyvista/docs/examples/02-plot/texture.rst:121
#: ../../pyvista/docs/examples/02-plot/texture.rst:161
#: ../../pyvista/docs/examples/02-plot/texture.rst:196
#: ../../pyvista/docs/examples/02-plot/texture.rst:237
#: ../../pyvista/docs/examples/02-plot/texture.rst:291
#: ../../pyvista/docs/examples/02-plot/texture.rst:328
#: ../../pyvista/docs/examples/02-plot/texture.rst:356
#: ../../pyvista/docs/examples/02-plot/texture.rst:444
#: ../../pyvista/docs/examples/02-plot/texture.rst:484
#: ../../pyvista/docs/examples/02-plot/texture.rst:537
#: ../../pyvista/docs/examples/02-plot/themes.rst:96
#: ../../pyvista/docs/examples/02-plot/themes.rst:139
#: ../../pyvista/docs/examples/02-plot/themes.rst:173
#: ../../pyvista/docs/examples/02-plot/themes.rst:208
#: ../../pyvista/docs/examples/02-plot/themes.rst:244
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:99
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:154
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:185
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:228
#: ../../pyvista/docs/examples/02-plot/volume.rst:103
#: ../../pyvista/docs/examples/02-plot/volume.rst:142
#: ../../pyvista/docs/examples/02-plot/volume.rst:178
#: ../../pyvista/docs/examples/02-plot/volume.rst:218
#: ../../pyvista/docs/examples/02-plot/volume.rst:258
#: ../../pyvista/docs/examples/02-plot/volume.rst:291
#: ../../pyvista/docs/examples/02-plot/volume.rst:327
#: ../../pyvista/docs/examples/02-plot/volume.rst:412
#: ../../pyvista/docs/examples/02-plot/volume.rst:454
#: ../../pyvista/docs/examples/02-plot/volume.rst:491
#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:75
#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:101
#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:74
#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:155
#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:88
#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:123
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:57
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:84
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:128
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:155
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:217
#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:73
#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:100
#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:157
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:92
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:153
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:266
#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:81
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:126
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:156
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:202
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:241
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:289
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:325
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:356
#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:37
#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:203
#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:278
#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:321
msgid "Out:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:127
msgid "**Total running time of the script:** ( 0 minutes  2.412 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:142
msgid ":download:`Download Python source code: create-geometric-objects.py <create-geometric-objects.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:148
msgid ":download:`Download Jupyter notebook: create-geometric-objects.ipynb <create-geometric-objects.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:155
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:923
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:384
#: ../../pyvista/docs/examples/00-load/create-poly.rst:124
#: ../../pyvista/docs/examples/00-load/create-spline.rst:367
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:424
#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:245
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:347
#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:186
#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:276
#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:172
#: ../../pyvista/docs/examples/00-load/read-file.rst:376
#: ../../pyvista/docs/examples/00-load/read-image.rst:160
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:280
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:321
#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:196
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:318
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:191
#: ../../pyvista/docs/examples/01-filter/clipping.rst:248
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:287
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:201
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:477
#: ../../pyvista/docs/examples/01-filter/connectivity.rst:158
#: ../../pyvista/docs/examples/01-filter/contouring.rst:162
#: ../../pyvista/docs/examples/01-filter/decimate.rst:231
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:285
#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:202
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:254
#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:195
#: ../../pyvista/docs/examples/01-filter/geodesic.rst:164
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:252
#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:149
#: ../../pyvista/docs/examples/01-filter/gradients.rst:366
#: ../../pyvista/docs/examples/01-filter/interpolate.rst:293
#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:149
#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:113
#: ../../pyvista/docs/examples/01-filter/project-plane.rst:130
#: ../../pyvista/docs/examples/01-filter/resample.rst:227
#: ../../pyvista/docs/examples/01-filter/slicing.rst:584
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:369
#: ../../pyvista/docs/examples/01-filter/subdivide.rst:172
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:223
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:279
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:316
#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:141
#: ../../pyvista/docs/examples/02-plot/background_image.rst:160
#: ../../pyvista/docs/examples/02-plot/clear.rst:178
#: ../../pyvista/docs/examples/02-plot/cmap.rst:346
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:242
#: ../../pyvista/docs/examples/02-plot/edges.rst:105
#: ../../pyvista/docs/examples/02-plot/edl.rst:297
#: ../../pyvista/docs/examples/02-plot/floors.rst:97
#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:132
#: ../../pyvista/docs/examples/02-plot/gif.rst:128
#: ../../pyvista/docs/examples/02-plot/image_depth.rst:162
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:305
#: ../../pyvista/docs/examples/02-plot/isovalue.rst:224
#: ../../pyvista/docs/examples/02-plot/labels.rst:301
#: ../../pyvista/docs/examples/02-plot/lighting.rst:282
#: ../../pyvista/docs/examples/02-plot/linked.rst:110
#: ../../pyvista/docs/examples/02-plot/movie.rst:123
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:329
#: ../../pyvista/docs/examples/02-plot/opacity.rst:440
#: ../../pyvista/docs/examples/02-plot/orbit.rst:169
#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:192
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:217
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:310
#: ../../pyvista/docs/examples/02-plot/screenshot.rst:133
#: ../../pyvista/docs/examples/02-plot/shading.rst:137
#: ../../pyvista/docs/examples/02-plot/spherical.rst:303
#: ../../pyvista/docs/examples/02-plot/texture.rst:579
#: ../../pyvista/docs/examples/02-plot/themes.rst:286
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:270
#: ../../pyvista/docs/examples/02-plot/volume.rst:533
#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:148
#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:197
#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:136
#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:165
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:265
#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:205
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:314
#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:123
#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:398
#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:112
#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:363
#: ../../pyvista/docs/examples/index.rst:1925
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-parametric-geometric-objects.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:24
msgid "Parametric Geometric Objects"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:26
msgid "Creating parametric objects"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:46
msgid "This example demonstrates how to plot parametric objects using pyvista"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:49
msgid "Supertoroid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:83
msgid "Parametric Ellipsoid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:119
msgid "Partial Parametric Ellipsoid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:163
msgid "Pseudosphere"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:197
msgid "Bohemian Dome"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:232
msgid "Bour"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:266
msgid "Boy's Surface"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:300
msgid "Catalan Minimal"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:334
msgid "Conic Spiral"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:368
msgid "Cross Cap"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:402
msgid "Dini"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:436
msgid "Enneper"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:470
msgid "Figure-8 Klein"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:504
msgid "Henneberg"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:538
msgid "Klein"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:572
msgid "Kuen"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:606
msgid "Mobius"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:640
msgid "Plucker Conoid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:675
msgid "Random Hills"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:709
msgid "Roman"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:743
msgid "Super Ellipsoid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:777
msgid "Torus"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:811
msgid "Circular Arc"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:856
msgid "Extruded Half Arc"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:895
msgid "**Total running time of the script:** ( 0 minutes  16.159 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:910
msgid ":download:`Download Python source code: create-parametric-geometric-objects.py <create-parametric-geometric-objects.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:916
msgid ":download:`Download Jupyter notebook: create-parametric-geometric-objects.ipynb <create-parametric-geometric-objects.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-point-cloud.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:24
msgid "Create Point Cloud"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:26
msgid "Create a :class:`pyvista.PolyData` object from a point cloud of vertices and scalar arrays for those points."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:49
msgid "Point clouds are generally constructed in the :class:`pyvista.PolyData` class and can easily have scalar/vector data arrays associated with the point cloud. In this example, we'll work a bit backwards using a point cloud that that is available from our ``examples`` module. This however is no different than creating a PyVista mesh with your own NumPy arrays of vertice locations."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:95
msgid "Now that you have a NumPy array of points/vertices either from our sample data or your own project, creating a PyVista mesh of those points is simply:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:110
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>67841</td></tr>\n"
"<tr><td>N Points</td><td>67841</td></tr>\n"
"<tr><td>X Bounds</td><td>4.809e+05, 4.811e+05</td></tr>\n"
"<tr><td>Y Bounds</td><td>4.400e+06, 4.400e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.754e+03, 1.784e+03</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:131
msgid "And we can even do a sanity check"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:156
msgid "And now that we have a PyVista mesh, we can plot it. Note that we add an option to use eye dome lighting - this is a shading technique to improve depth perception with point clouds (learn more in :ref:`ref_edl`)."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:189
msgid "Now what if you have data attributes (scalar/vector arrays) that you'd like to associate with every node of your mesh? You can easily add NumPy data arrays that have a length equal to the number of points in the mesh along the first axis. For example, lets add a few arrays to this new ``point_cloud`` mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:195
msgid "Make an array of scalar values with the same length as the points array. Each element in this array will correspond to points at the same index:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:218
msgid "And now we can plot the point cloud with that random data. PyVista is smart enough to plot the scalar array you added by default. Note that this time, we specify to render every point as its own sphere."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:251
msgid "That data is kind of boring, right? You can also add data arrays with more than one scalar value - perhaps a vector with three elements? Let's make a little function that will compute vectors for every node in the point cloud and add those vectors to the mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:256
msgid "This time, we're going to create a totally new, random point cloud."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:313
msgid "Now we can make arrows using those vectors using the glyph filter (see :ref:`glyph_example` for more details)."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:356
msgid "**Total running time of the script:** ( 0 minutes  6.057 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:371
msgid ":download:`Download Python source code: create-point-cloud.py <create-point-cloud.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:377
msgid ":download:`Download Jupyter notebook: create-point-cloud.ipynb <create-point-cloud.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-poly.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:24
msgid "Create PolyData"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:26
msgid "Creating a PolyData (triangulated surface) object from NumPy arrays of the vertices and faces."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:47
msgid "A PolyData object can be created quickly from numpy arrays.  The vertex array contains the locations of the points in the mesh and the face array contains the number of points of each face and the indices of the vertices which comprise that face."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:96
msgid "**Total running time of the script:** ( 0 minutes  0.619 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:111
msgid ":download:`Download Python source code: create-poly.py <create-poly.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:117
msgid ":download:`Download Jupyter notebook: create-poly.ipynb <create-poly.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-spline.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:24
msgid "Creating a Spline"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:26
msgid "Create a spline/polyline from a numpy array of XYZ vertices"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:47
msgid "Create a dataset to plot"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:87
msgid "Now let's make a function that can create line cells on a :class:`pyvista.PolyData` mesh given that the points are in order for the segments they make."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:115
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>99</td></tr>\n"
"<tr><td>N Points</td><td>100</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.084e+00, 4.084e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.281e+00, 5.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:166
msgid "That tube has sharp edges at each line segment. This can be mitigated by creating a single PolyLine cell for all of the points"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:211
msgid "You could also interpolate those points onto a parametric spline"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:230
msgid "Plot spline as a tube"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:265
msgid "The spline can also be plotted as a plain line"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:303
msgid "Ribbons"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:305
msgid "Ayy of the lines from the examples above can be used to create ribbons. Take a look at the :func:`pyvista.PolyDataFilters.ribbon` filter."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:339
msgid "**Total running time of the script:** ( 0 minutes  3.192 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:354
msgid ":download:`Download Python source code: create-spline.py <create-spline.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-spline.rst:360
msgid ":download:`Download Jupyter notebook: create-spline.ipynb <create-spline.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-structured-surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:24
msgid "Creating a Structured Surface"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:26
msgid "Create a StructuredGrid surface from NumPy arrays"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:49
msgid "From NumPy Meshgrid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:51
msgid "Create a simple meshgrid using NumPy"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:74
msgid "Now pass the NumPy meshgrid to PyVista"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:137
msgid "Generating a structured grid is a one liner in this module, and the points from the resulting surface can be accessed as a NumPy array:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:172
msgid "From XYZ Points"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:174
msgid "Quite often, you might be given a set of coordinates (XYZ points) in a simple tabular format where there exists some structure such that grid could be built between the nodes you have. A great example is found in `pyvista-support#16`_ where a structured grid that is rotated from the cartesian reference frame is given as just XYZ points. In these cases, all that is needed to recover the grid is the dimensions of the grid (`nx` by `ny` by `nz`) and that the coordinates are ordered appropriately."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:184
msgid "For this example, we will create a small dataset and rotate the coordinates such that they are not on orthogonal to cartesian reference frame."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:234
msgid "Now pretend that the (n by 3) NumPy array above are coordinates that you have, possibly from a file with three columns of XYZ points."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:237
msgid "We simply need to recover the dimensions of the grid that these points make and then we can generate a :class:`pyvista.StructuredGrid` mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:240
msgid "Let's preview the points to see what we are dealing with:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:268
msgid "In the figure above, we can see some inherit structure to the points and thus we could connect the points as a structured grid. All we need to know are the dimensions of the grid present. In this case, we know (because we made this dataset) the dimensions are ``[29, 32, 1]``, but you might not know the dimensions of your pointset. There are a few ways to figure out the dimensionality of structured grid including:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:275
msgid "manually counting the nodes along the edges of the pointset"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:276
msgid "using a technique like principle component analysis to strip the rotation from the dataset and count the unique values along each axis for the new;y projected dataset."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:320
msgid "Extending a 2D StructuredGrid to 3D"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:322
msgid "A 2D :class:`pyvista.StructuredGrid` mesh can be extended into a 3D mesh. This is highly applicable when wanting to create a terrain following mesh in earth science research applications."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:326
msgid "For example, we could have a :class:`pyvista.StructuredGrid` of a topography surface and extend that surface to a few different levels and connect each \"level\" to create the 3D terrain following mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:330
msgid "Let's start with a simple example by extending the wave mesh to 3D"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:396
msgid "**Total running time of the script:** ( 0 minutes  4.097 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:411
msgid ":download:`Download Python source code: create-structured-surface.py <create-structured-surface.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:417
msgid ":download:`Download Jupyter notebook: create-structured-surface.ipynb <create-structured-surface.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-surface-draped.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:22
msgid "Drape 2D Surface From Line"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:24
msgid "Drape a surface (2D array) from a line in 3D space."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:26
msgid "This is a common task to create a 2.5D image/sectional mesh of data like GPR or airborne EM profiles (geophysics applications). This example provides a look into how to create a 2.5D sectional mesh from typical data in those use cases."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:30
msgid "For this example, we have an instrument path on the ground surface (the line) and a 2D array of the collected image under that line."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:33
msgid "Originally posted in `this support issue <https://github.com/pyvista/pyvista-support/issues/135>`_."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:35
msgid "Suppose you have some GPR data (or anything that produces a line of data with values at depth). With these data, you'll have a 2D image/array of your data values and 3D coordinates of where that line/profile is in 3D space (often where you collected the data on the surface of topography). Attached below are some example data for this: 1) XYZ coordinates of a GPR path and 2) a 2D array of data values produced from the GPR."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:42
msgid "the data here are wacky (it's difficult to get shareable data of decent quality), so ignore them but pay attention to the structure. The coordinates we have are technically shifted up and we have some NaN filler above the surface - its weird and just ignore it. You'll typically have a more uniform looking profile in 2D with the coordinates associated to the top of each column in your 2D array."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:93
msgid "View the the path of the GPR profile from a top-down perspective. Since we have the full coordinates (XY and Z), we can create a structured mesh \"draping\" down from those coordinates to hold the GPR image data."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:155
msgid "Make a StructuredGrid from the structured points"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:177
msgid "And now we can plot it! or process or do anything, because it is a PyVista mesh and the possibilities are endless with PyVista"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:217
msgid "**Total running time of the script:** ( 0 minutes  9.124 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:232
msgid ":download:`Download Python source code: create-surface-draped.py <create-surface-draped.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-surface-draped.rst:238
msgid ":download:`Download Jupyter notebook: create-surface-draped.ipynb <create-surface-draped.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-tri-surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:22
msgid "Create Triangulated Surface"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:24
msgid "Create a surface from a set of points through a Delaunay triangulation."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:45
msgid "Simple Triangulations"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:47
msgid "First, create some points for the surface."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:87
msgid "Now use those points to create a point cloud PyVista data object. This will be encompassed in a :class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:122
msgid "Now that we have a PyVista data structure of the points, we can perform a triangulation to turn those boring discrete points into a connected surface."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:158
msgid "Masked Triangulations"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:183
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>100</td></tr>\n"
"<tr><td>N Points</td><td>100</td></tr>\n"
"<tr><td>X Bounds</td><td>8.023e-02, 9.273e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.327e-03, 9.275e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:204
msgid "Run the triangulation on these points"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:237
msgid "Note that some of the outer edges are unconstrained and the triangulation added unwanted triangles. We can mitigate that with the ``alpha`` parameter."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:271
msgid "We could also add a polygon to ignore during the triangulation via the ``edge_source`` parameter."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:319
msgid "**Total running time of the script:** ( 0 minutes  2.831 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:334
msgid ":download:`Download Python source code: create-tri-surface.py <create-tri-surface.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:340
msgid ":download:`Download Jupyter notebook: create-tri-surface.ipynb <create-tri-surface.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-uniform-grid.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:22
msgid "Creating a Uniform Grid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:24
msgid "Create a simple uniform grid from a 3D NumPy array of values."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:44
msgid "Take a 3D NumPy array of data values that holds some spatial data where each axis corresponds to the XYZ cartesian axes. This example will create a :class:`pyvista.UniformGrid` object that will hold the spatial reference for a 3D grid which a 3D NumPy array of values can be plotted against."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:51
msgid "Create the 3D NumPy array of spatially referenced data. This is spatially referenced such that the grid is 20 by 5 by 10 (nx by ny by nz)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:103
msgid "Don't like cell data? You could also add the NumPy array to the point data of a :class:`pyvista.UniformGrid`. Take note of the subtle difference when setting the grid dimensions upon initialization."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:158
msgid "**Total running time of the script:** ( 0 minutes  1.559 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:173
msgid ":download:`Download Python source code: create-uniform-grid.py <create-uniform-grid.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:179
msgid ":download:`Download Jupyter notebook: create-uniform-grid.ipynb <create-uniform-grid.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_create-unstructured-surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:24
msgid "Creating an Unstructured Grid"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:26
msgid "Create an irregular, unstructured grid from NumPy arrays."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:46
msgid "An unstructured grid can be created directly from NumPy arrays. This is useful when creating a grid from scratch or copying it from another format.  See `vtkUnstructuredGrid <https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html>`_ for available cell types and their descriptions."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:126
msgid "UnstructuredGrid with Shared Points"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:128
msgid "The next example again creates an unstructured grid containing hexahedral cells, but using common points between the cells."
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:215
msgid "Finally, create the unstructured grid and plot it"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:248
msgid "**Total running time of the script:** ( 0 minutes  1.286 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:263
msgid ":download:`Download Python source code: create-unstructured-surface.py <create-unstructured-surface.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:269
msgid ":download:`Download Jupyter notebook: create-unstructured-surface.ipynb <create-unstructured-surface.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_read-dolfin.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:22
msgid "Read FEniCS/Dolfin Meshes"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:24
msgid "PyVista leverages `meshio`_ to read many mesh formats not natively supported by VTK including the `FEniCS/Dolfin`_ XML format."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:46
msgid "Let's download an example FEniCS/Dolfin mesh from our example data repository. This will download an XML Dolfin mesh and save it to PyVista's data directory."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:74
msgid "As shown, we now have an XML Dolfin mesh save locally. This filename can be passed directly to PyVista's :func:`pyvista.read` method to be read into a PyVista mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:91
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>5400</td></tr>\n"
"<tr><td>N Points</td><td>2868</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:112
msgid "Now we can do stuff with that Dolfin mesh!"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:144
msgid "**Total running time of the script:** ( 0 minutes  1.495 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:159
msgid ":download:`Download Python source code: read-dolfin.py <read-dolfin.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:165
msgid ":download:`Download Jupyter notebook: read-dolfin.ipynb <read-dolfin.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_read-file.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:22
msgid "Load and Plot from a File"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:24
msgid "Read a dataset from a known file type."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:29
msgid "Loading a mesh is trivial - if your data is in one of the many supported file formats, simply use :func:`pyvista.read` to load your spatially referenced dataset into a PyVista mesh object."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:33
msgid "The following code block uses a built-in example file and displays an airplane mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:54
msgid "The following code block uses a built-in example file, displays an airplane mesh and returns the camera's position:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:83
msgid "Note the above filename, it's a ``.ply`` file - one of the many supported formats in PyVista."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:107
msgid "You can also take a screenshot without creating an interactive plot window using the ``Plotter``:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:143
msgid "The points from the mesh are directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:175
msgid "The faces from the mesh are also directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:208
msgid "Loading other files types is just as easy! Simply pass your file path to the :func:`pyvista.read` function and that's it!"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:211
msgid "Here are a few other examples - simply replace ``examples.download_*`` in the examples below with ``pyvista.read('path/to/you/file.ext')``"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:216
msgid "Example STL file:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:249
msgid "Example OBJ file"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:282
msgid "Example BYU file"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:315
msgid "Example VTK file"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:348
msgid "**Total running time of the script:** ( 0 minutes  5.754 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:363
msgid ":download:`Download Python source code: read-file.py <read-file.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:369
msgid ":download:`Download Jupyter notebook: read-file.ipynb <read-file.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_read-image.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:22
msgid "Read Image Files"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:24
msgid "Read and plot image files (JPEG, TIFF, PNG, etc)."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:42
msgid "PyVista fully supports reading images into their own spatially referenced data objects (this example) as well as supports texture mapping of images onto datasets (see :ref:`ref_texture_example`)."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:46
msgid "Download a JPEG image of a puppy and load it to :class:`pyvista.UniformGrid`. This could similarly be implemented with any image file by using the :func:`pyvista.read` function and passing the path to the image file."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:68
msgid "When plotting images stored in :class:`pyvista.UniformGrid` objects, it is important to specify using the `rgb` option when plotting to ensure that the image's true colors are used and not mapped."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:132
msgid "**Total running time of the script:** ( 0 minutes  6.699 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:147
msgid ":download:`Download Python source code: read-image.py <read-image.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:153
msgid ":download:`Download Jupyter notebook: read-image.ipynb <read-image.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_read-parallel.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:22
msgid "Parallel Files"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:24
msgid "The VTK library supports parallel file formats. Reading meshes broken up into several files is natively supported by VTK and PyVista."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:45
msgid "Let's go ahead and download the sample dataset containing an :class:`pyvista.UnstructuredGrid` broken up into several files."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:61
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:162
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>39353</td></tr>\n"
"<tr><td>N Points</td><td>48823</td></tr>\n"
"<tr><td>X Bounds</td><td>5.300e+01, 1.210e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.000e+01, 9.700e+01</td></tr>\n"
"<tr><td>Z Bounds</td><td>6.400e+01, 1.820e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>5</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>node_value</b></td><td>Points</td><td>int32</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td>simerr_type</td><td>Points</td><td>int32</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td>density</td><td>Cells</td><td>float32</td><td>1</td><td>2.203e-01</td><td>5.232e-01</td></tr>\n"
"<tr><td>velocity</td><td>Cells</td><td>float32</td><td>3</td><td>-3.607e-01</td><td>8.989e-02</td></tr>\n"
"<tr><td>shearstress</td><td>Cells</td><td>float32</td><td>1</td><td>6.160e-05</td><td>1.726e-02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:92
msgid "The above code downloaded a dataset containing a set of parallel files for a blood vessel mesh and returned an :class:`pyvista.UnstructuredGrid` - we did not grab that UnstructuredGrid, so that we could demo how to use these types of files."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:97
msgid "Let's inspect where this downloaded our dataset:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:144
msgid "Note that a ``.pvtu`` file is available along side a directory. This directory contains all the parallel files or pieces that make the whole mesh. We can simply read the ``.pvtu`` file and VTK will handle putting the mesh together."
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:193
msgid "Plot the pieced together mesh"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:252
msgid "**Total running time of the script:** ( 0 minutes  2.367 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:267
msgid ":download:`Download Python source code: read-parallel.py <read-parallel.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:273
msgid ":download:`Download Jupyter notebook: read-parallel.ipynb <read-parallel.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:7
msgid "Computation times"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:8
msgid "**01:08.081** total execution time for **examples_00-load** files:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py` (``create-parametric-geometric-objects.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:11
msgid "00:16.159"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:27
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:29
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:31
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:33
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:35
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:37
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:39
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:41
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:27
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:29
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:31
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:33
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:35
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:37
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:39
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:41
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:43
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:45
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:47
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:49
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:51
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:53
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:55
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:57
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:59
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:61
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:63
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:65
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:67
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:27
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:29
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:31
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:33
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:35
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:37
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:39
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:41
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:43
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:45
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:47
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:49
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:51
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:53
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:55
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:57
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:59
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:61
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:63
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:65
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:67
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:15
msgid "0.0 MB"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_00-load_create-surface-draped.py` (``create-surface-draped.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:13
msgid "00:09.124"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_00-load_read-image.py` (``read-image.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:15
msgid "00:06.699"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_00-load_create-point-cloud.py` (``create-point-cloud.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:17
msgid "00:06.057"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_00-load_read-file.py` (``read-file.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:19
msgid "00:05.754"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_00-load_create-structured-surface.py` (``create-structured-surface.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:21
msgid "00:04.097"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py` (``terrain-mesh.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:23
msgid "00:03.573"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_examples_00-load_create-spline.py` (``create-spline.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:25
msgid "00:03.192"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:27
msgid ":ref:`sphx_glr_examples_00-load_create-tri-surface.py` (``create-tri-surface.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:27
msgid "00:02.831"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_00-load_create-geometric-objects.py` (``create-geometric-objects.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:29
msgid "00:02.412"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_00-load_read-parallel.py` (``read-parallel.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:31
msgid "00:02.367"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:33
msgid ":ref:`sphx_glr_examples_00-load_create-uniform-grid.py` (``create-uniform-grid.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:33
msgid "00:01.559"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py` (``read-dolfin.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:35
msgid "00:01.495"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:37
msgid ":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py` (``create-unstructured-surface.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:37
msgid "00:01.286"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:39
msgid ":ref:`sphx_glr_examples_00-load_wrap-trimesh.py` (``wrap-trimesh.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:39
msgid "00:00.857"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py` (``create-poly.py``)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:41
msgid "00:00.619"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_terrain-mesh.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:22
msgid "Terrain Following Mesh"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:24
msgid "Use a topographic surface to create a 3D terrain-following mesh."
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:26
msgid "Terrain following meshes are common in the environmental sciences, for instance in hydrological modelling (see `Maxwell 2013 <https://www.sciencedirect.com/science/article/abs/pii/S0309170812002564>`_ and `ParFlow <https://parflow.org>`_)."
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:32
msgid "In this example, we demonstrate a simple way to make a 3D grid/mesh that follows a given topographic surface. In this example, it is important to note that the given digital elevation model (DEM) is structured (gridded and not triangulated): this is common for DEMs."
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:56
msgid "Download a gridded topography surface (DEM)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:70
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1677401</td></tr>\n"
"<tr><td>N Points</td><td>1680000</td></tr>\n"
"<tr><td>X Bounds</td><td>1.810e+06, 1.831e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.640e+06, 5.658e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>Dimensions</td><td>1400, 1200, 1</td></tr>\n"
"<tr><td>Spacing</td><td>1.500e+01, 1.500e+01, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>7.339e+02</td><td>2.787e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:99
msgid "Now let's subsample and extract an area of interest to make this example simple (also the DEM we just load is pretty big). Since the DEM we loaded is a :class:`pyvista.UniformGrid` mesh, we can use the :func:`pyvista.UniformGridFilters.extract_subset` filter:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:135
msgid "Now that we have a region of interest for our terrain following mesh, lets make a 3D surface of that DEM:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:150
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6400</td></tr>\n"
"<tr><td>N Points</td><td>6561</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.441e+03, 2.769e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>81, 81, 1</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.441e+03</td><td>2.769e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:206
msgid "And now we have a 3D structured surface of the terrain! We can now extend that structured surface into a 3D mesh to form a terrain following grid. To do this, we first our cell spacings in the z-direction (these start from the terrain surface). Then we repeat the XYZ structured coordinates of the terrain mesh and decrease each Z level by our Z cell spacing. Once we have those structured coordinates, we can create a :class:`pyvista.StructuredGrid`."
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:234
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>70400</td></tr>\n"
"<tr><td>N Points</td><td>78732</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.364e+02, 2.744e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>81, 81, 12</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>Elevation</b></td><td>Points</td><td>float64</td><td>1</td><td>9.364e+02</td><td>2.744e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:293
msgid "**Total running time of the script:** ( 0 minutes  3.573 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:308
msgid ":download:`Download Python source code: terrain-mesh.py <terrain-mesh.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:314
msgid ":download:`Download Jupyter notebook: terrain-mesh.ipynb <terrain-mesh.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_00-load_wrap-trimesh.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:24
msgid "Wrapping Other Objects"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:25
msgid "You can wrap several other object types using pyvista including:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:27
msgid "`numpy` arrays"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:28
msgid "`trimesh.Trimesh` meshes"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:29
msgid "VTK objects"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:31
msgid "This allows for the \"best of both worlds\" programming special to Python due to its modularity.  If there's some limitation of pyvista (or trimesh), then you can adapt your scripts to use the best features of more than one module."
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:52
msgid "Wrap a point cloud composed of random points from numpy"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:87
msgid "Wrap an instance of Trimesh"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:124
msgid "Wrap an instance of vtk.vtkPolyData"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:168
msgid "**Total running time of the script:** ( 0 minutes  0.857 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:183
msgid ":download:`Download Python source code: wrap-trimesh.py <wrap-trimesh.py>`"
msgstr ""

#: ../../pyvista/docs/examples/00-load/wrap-trimesh.rst:189
msgid ":download:`Download Jupyter notebook: wrap-trimesh.ipynb <wrap-trimesh.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_boolean-operations.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:22
msgid "Boolean Operations"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:24
msgid "Perform boolean operations with closed surfaces (intersect, cut, etc.)."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:26
msgid "Boolean/topological operations (intersect, cut, etc.) methods are implemented for :class:`pyvista.PolyData` mesh types only and are accessible directly from any :class:`pyvista.PolyData` mesh. Check out :class:`pyvista.PolyDataFilters` and take a look at the following filters:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:31
msgid ":func:`pyvista.PolyDataFilters.boolean_add`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:32
msgid ":func:`pyvista.PolyDataFilters.boolean_cut`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:33
msgid ":func:`pyvista.PolyDataFilters.boolean_difference`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:34
msgid ":func:`pyvista.PolyDataFilters.boolean_union`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:36
msgid "For merging, the ``+`` operator can be used between any two meshes in PyVista which simply calls the ``.merge()`` filter to combine any two meshes. Similarly, the ``-`` operator can be used between any two :class:`pyvista.PolyData` meshes in PyVista to cut the first mesh by the second."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:88
msgid "Boolean Add"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:90
msgid "Add all of the two meshes together using the :func:`pyvista.PolyDataFilters.boolean_add` filter or the ``+`` operator."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:93
msgid "Order of operations does not matter for boolean add as the entirety of both meshes are appended together."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:129
msgid "Boolean Cut"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:131
msgid "Perform a boolean cut of ``a`` using ``b`` with the :func:`pyvista.PolyDataFilters.boolean_cut` filter or the ``-`` operator since both meshes are :class:`pyvista.PolyData`."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:135
msgid "Order of operations does not matter for boolean cut."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:173
msgid "Boolean Difference"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:175
msgid "Combine two meshes and retains only the volume in common between the meshes using the :func:`pyvista.PolyDataFilters.boolean_difference` method."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:178
msgid "Note that the order of operations for a boolean difference will affect the results."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:249
msgid "Boolean Union"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:251
msgid "Combine two meshes and attempts to create a manifold mesh using the :func:`pyvista.PolyDataFilters.boolean_union` method."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:254
msgid "Order of operations does not matter for boolean union."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:290
msgid "**Total running time of the script:** ( 0 minutes  13.712 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:305
msgid ":download:`Download Python source code: boolean-operations.py <boolean-operations.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:311
msgid ":download:`Download Jupyter notebook: boolean-operations.ipynb <boolean-operations.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_cell-centers.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:22
msgid "Extract Cell Centers"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:24
msgid "Extract the coordinates of the centers of all cells/faces in a mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:26
msgid "Here we use :func:`pyvista.DataSetFilters.cell_centers`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:45
msgid "First let's fetch the centers of a mesh with 2D geometries (a surface)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:88
msgid "We can also do this for full 3D meshes."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:163
msgid "**Total running time of the script:** ( 0 minutes  2.655 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:178
msgid ":download:`Download Python source code: cell-centers.py <cell-centers.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:184
msgid ":download:`Download Jupyter notebook: cell-centers.ipynb <cell-centers.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_clipping.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:22
msgid "Clipping with Planes & Boxes"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:24
msgid "Clip/cut any dataset using using planes or boxes."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:44
msgid "Clip with Plane"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:46
msgid "Clip any dataset by a user defined plane using the :func:`pyvista.DataSetFilters.clip` filter"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:90
msgid "Clip with Bounds"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:92
msgid "Clip any dataset by a set of XYZ bounds using the :func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:135
msgid "Clip with Rotated Box"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:137
msgid "Clip any dataset by an arbitrarily rotated solid box using the :func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:179
msgid "Run the box clipping algorithm"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:220
msgid "**Total running time of the script:** ( 0 minutes  3.079 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:235
msgid ":download:`Download Python source code: clipping.py <clipping.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:241
msgid ":download:`Download Jupyter notebook: clipping.ipynb <clipping.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_clipping-with-surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:22
msgid "Clipping with a Surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:24
msgid "Clip any PyVista dataset by a :class:`pyvista.PolyData` surface mesh using the :func:`pyvista.DataSet.Filters.clip_surface` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:27
msgid "Note that we first demonstrate how the clipping is performed by computing an implicit distance and thresholding the mesh. This thresholding is one approach to clip by a surface, and preserve the original geometry of the given mesh, but many folks leverage the ``clip_surface`` filter to triangulate/tessellate the mesh geometries along the clip."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:94
msgid "Take a look at the implicit function used to perform the surface clipping by using the :func:`pyvista.DataSetFilters.compute_implicit_distance` filter. The clipping operation field is performed where the ``implicit_distance`` field is zero and the ``invert`` flag controls which sides of zero to preserve."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:175
msgid "Clip the rectilinear grid dataset using the :class:`pyvista.PolyData` surface mesh via the :func:`pyvista.DataSet.Filters.clip_surface` filter. This will triangulate/tessellate the mesh geometries along the clip."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:217
msgid "Here is another example of clipping a mesh by a surface. This time, we'll generate a :class:`pyvista.UniformGrid` around a topography surface and then clip that grid using the surface to create a closed 3D model of the surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:259
msgid "**Total running time of the script:** ( 1 minutes  1.218 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:274
msgid ":download:`Download Python source code: clipping-with-surface.py <clipping-with-surface.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:280
msgid ":download:`Download Jupyter notebook: clipping-with-surface.ipynb <clipping-with-surface.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_compute-normals.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:22
msgid "Computing Surface Normals"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:25
msgid "Compute normals on a surface."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:45
msgid "Computing the normals of a surace is quite easy using :class:`pyvista.PolyData`'s :func:`pyvista.PolyDataFilters.compute_normals` method."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:80
msgid "Now we have a surface dataset of the globe loaded - unfortunately, the dataset shows the globe with a uniform radius which hides topographic relief. Using :func:`pyvista.PolyData.compute_normals`, we can compute the normal vectors on the globe at all points in the dataset, then use the values given in the dataset to warp the surface in the normals direction to create some exaggerated topographic relief."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:125
msgid "We could also use face/cell normals to extract a all the faces of a mesh facing a general direction. In the following snippet, we take a mesh, compute the normals along its cell faces, and extract the faces that face upward."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:173
msgid "**Total running time of the script:** ( 0 minutes  20.384 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:188
msgid ":download:`Download Python source code: compute-normals.py <compute-normals.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:194
msgid ":download:`Download Jupyter notebook: compute-normals.ipynb <compute-normals.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_compute-volume.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:22
msgid "Volumetric Analysis"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:25
msgid "Calculate mass properties such as the volume or area of datasets"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:45
msgid "Computing mass properties such as the volume or area of datasets in PyVista is quite easy using the :func:`pyvista.DataSetFilters.compute_cell_sizes` filter and the :attr:`pyvista.Common.volume` property on all PyVista meshes."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:49
msgid "Let's get started with a simple gridded mesh:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:69
msgid "We can then calculate the volume of every cell in the array using the ``.compute_cell_sizes`` filter which will add arrays to the cell data of the mesh core the volume and area by default."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:93
msgid "We can also compute the total volume of the mesh using the ``.volume`` property:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:113
msgid "Okay awesome! But what if we have have a dataset that we threshold with two volumetric bodies left over in one dataset? Take this for example:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:148
msgid "We could then assign a classification array for the two bodies, compute the cell sizes, then extract the volumes of each body. Note that there is a simpler implementation of this below in :ref:`split_vol_ref`."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:195
msgid "Or better yet, you could simply extract the largest volume from your thresholded dataset by passing ``largest=True`` to the ``connectivity`` filter or by using ``extract_largest`` filter (both are equivalent)."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:243
msgid "Splitting Volumes"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:245
msgid "What if instead, we wanted to split all the different connected bodies / volumes in a dataset like the one above? We could use the :func:`pyvista.DataSetFilters.split_bodies` filter to extract all the different connected volumes in a dataset into blocks in a :class:`pyvista.MultiBlock` dataset. For example, lets split the thresholded volume in the example above:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:318
msgid "A Real Dataset"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:320
msgid "Here is a realistic training dataset of fluvial channels in the subsurface. This will threshold the channels from the dataset then separate each significantly large body and compute the volumes for each!"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:324
msgid "Load up the data and threshold the channels:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:343
msgid "Now extract all the different bodies and compute their volumes:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:370
msgid "Print out the volumes for each body:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:417
msgid "And visualize all the different volumes:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:449
msgid "**Total running time of the script:** ( 0 minutes  19.562 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:464
msgid ":download:`Download Python source code: compute-volume.py <compute-volume.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:470
msgid ":download:`Download Jupyter notebook: compute-volume.ipynb <compute-volume.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_connectivity.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:22
msgid "Connectivity"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:24
msgid "Use the connectivity filter to remove noisy isosurfaces."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:26
msgid "This example is very similar to `this VTK example <https://lorensen.github.io/VTKExamples/site/Python/VisualizationAlgorithms/PineRootConnectivity/>`__"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:45
msgid "Load a dataset that has noisy isosurfaces"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:86
msgid "The mesh plotted above is very noisy. We can extract the largest connected isosurface in that mesh using the :func:`pyvista.DataSetFilters.connectivity` filter and passing ``largest=True`` to the ``connectivity`` filter or by using the :func:`pyvista.DataSetFilters.extract_largest` filter (both are equivalent)."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:130
msgid "**Total running time of the script:** ( 0 minutes  2.962 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:145
msgid ":download:`Download Python source code: connectivity.py <connectivity.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:151
msgid ":download:`Download Jupyter notebook: connectivity.ipynb <connectivity.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_contouring.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:22
msgid "Contouring"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:24
msgid "Generate iso-lines or -surfaces for the scalars of a surface or volume."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:26
msgid "3D meshes can have 2D iso-surfaces of a scalar field extracted and 2D surface meshes can have 1D iso-lines of a scalar field extracted."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:49
msgid "Iso-Lines"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:51
msgid "Let's extract 1D iso-lines of a scalar field from a 2D surface mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:91
msgid "Iso-Surfaces"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:93
msgid "Let's extract 2D iso-surfaces of a scalar field from a 3D mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:134
msgid "**Total running time of the script:** ( 0 minutes  6.187 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:149
msgid ":download:`Download Python source code: contouring.py <contouring.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:155
msgid ":download:`Download Jupyter notebook: contouring.ipynb <contouring.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_decimate.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:22
msgid "Decimation"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:24
msgid "Decimate a mesh"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:67
msgid "Now let's define a target reduction and compare the :func:`pyvista.PolyData.decimate` and :func:`pyvista.PolyData.decimate_pro` filters."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:155
msgid "Side by side comparison:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:203
msgid "**Total running time of the script:** ( 0 minutes  3.312 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:218
msgid ":download:`Download Python source code: decimate.py <decimate.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:224
msgid ":download:`Download Jupyter notebook: decimate.ipynb <decimate.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_distance-between-surfaces.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:22
msgid "Distance Between Two Surfaces"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:24
msgid "Compute the average thickness between two surfaces."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:26
msgid "For example, you might have two surfaces that represent the boundaries of lithological layers in a subsurface geological model and you want to know the average thickness of a unit between those boundaries."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:30
msgid "We can compute the thickness between the two surfaces using a few different methods. First, we will demo a method where we compute the normals of the bottom surface, and then project a ray to the top surface to compute the distance along the surface normals. Second, we will use a KDTree to compute the distance from every point in the bottom mesh to it's closest point in the top mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:100
msgid "Ray Tracing Distance"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:102
msgid "Compute normals of lower surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:120
msgid "Travel along normals to the other surface and compute the thickness on each vector."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:192
msgid "Nearest Neighbor Distance"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:194
msgid "You could also use a KDTree to compare the distance between each point of the upper surface and the nearest neighbor of the lower surface. This won't be the exact surface to surface distance, but it will be noticeably faster than a ray trace, especially for large surfaces."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:257
msgid "**Total running time of the script:** ( 0 minutes  5.955 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:272
msgid ":download:`Download Python source code: distance-between-surfaces.py <distance-between-surfaces.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:278
msgid ":download:`Download Jupyter notebook: distance-between-surfaces.ipynb <distance-between-surfaces.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_extract-cells-inside-surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:22
msgid "Extract Cells Inside Surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:24
msgid "Extract the cells in a mesh that exist inside or outside a closed surface of another mesh"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:75
msgid "Mark points inside with 1 and outside with a 0"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:89
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>3263</td></tr>\n"
"<tr><td>N Points</td><td>2903</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.446e+00, 5.998e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.637e+00, 2.760e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-1.701e+00, 1.701e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>SelectedPoints</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:116
msgid "Extract two meshes, one completely inside and one completely outside the enclosing surface."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:136
msgid "display the results"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:174
msgid "**Total running time of the script:** ( 0 minutes  1.779 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:189
msgid ":download:`Download Python source code: extract-cells-inside-surface.py <extract-cells-inside-surface.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:195
msgid ":download:`Download Jupyter notebook: extract-cells-inside-surface.ipynb <extract-cells-inside-surface.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_extract-edges.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:22
msgid "Extract Edges"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:24
msgid "Extracts edges from a surface."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:44
msgid "From vtk documentation, the edges of a mesh are one of the following:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:46
msgid "boundary (used by one polygon) or a line cell"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:47
msgid "non-manifold (used by three or more polygons)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:48
msgid "feature edges (edges used by two triangles and whose dihedral angle > feature_angle)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:49
msgid "manifold edges (edges used by exactly two polygons)."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:51
msgid "This filter will extract those edges given a feature angle and return a dataset with lines that represent the edges of the original mesh. To demonstrate, we will first extract the edges around Queen Nefertiti's eyes:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:97
msgid "We can do this analysis for any :class:`pyvista.PolyData` object. Let's try the cow mesh example:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:139
msgid "We can leverage the :any:`pyvista.PolyData.n_open_edges` property and :func:`pyvista.PolyDataFilters.extract_feature_edges` filter to count and extract the open edges on a :class:`pyvista.PolyData` mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:160
msgid "We can get a count of the open edges with:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:186
msgid "And we can extract those edges with the ``boundary_edges`` option of :func:`pyvista.PolyDataFilters.extract_feature_edges`:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:226
msgid "**Total running time of the script:** ( 0 minutes  11.173 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:241
msgid ":download:`Download Python source code: extract-edges.py <extract-edges.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:247
msgid ":download:`Download Jupyter notebook: extract-edges.ipynb <extract-edges.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_gaussian-smoothing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:22
msgid "Gaussian Smoothing"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:24
msgid "Perform a Gaussian convolution on a uniformly gridded data set."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:26
msgid ":class:`pyvista.UniformGrid` data sets (a.k.a. images) a can be smoothed by convolving the  image data set with a Gaussian for one- to three-dimensional inputs. This is commonly referred to as Gaussian blurring and typically used to reduce noise or decrease the detail of an image dataset"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:59
msgid "Let's apply the gaussian smoothing with different values of standard deviation."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:113
msgid "Now let's see an example on a 3D dataset with volume rendering:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:167
msgid "**Total running time of the script:** ( 0 minutes  12.708 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:182
msgid ":download:`Download Python source code: gaussian-smoothing.py <gaussian-smoothing.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:188
msgid ":download:`Download Jupyter notebook: gaussian-smoothing.ipynb <gaussian-smoothing.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_geodesic.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:22
msgid "Geodesic Paths"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:24
msgid "Calculates the geodesic path between two vertices using Dijkstra's algorithm"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:46
msgid "Get the geodesic path as a new :class:`pyvista.PolyData` object:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:70
msgid "Render the path along the land surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:110
msgid "How long is that path?"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:136
msgid "**Total running time of the script:** ( 0 minutes  15.554 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:151
msgid ":download:`Download Python source code: geodesic.py <geodesic.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:157
msgid ":download:`Download Jupyter notebook: geodesic.ipynb <geodesic.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_glyphs.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:24
msgid "Plotting Glyphs (Vectors or PolyData)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:26
msgid "Use vectors in a dataset to plot and orient glyphs/geometric objects."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:47
msgid "Glyphying can be done via the :func:`pyvista.DataSetFilters.glyph` filter"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:96
msgid "Another approach is to load the vectors directly to the mesh object and then access the :attr:`pyvista.Common.arrows` property."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:178
msgid "Subset of Glyphs"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:180
msgid "Sometimes you might not want glyphs for every node in the input dataset. In this case, you can choose to build glyphs for a subset of the input dataset by using a merging tolerance. Here we specify a merging tolerance of five percent which equates to five percent of the bounding box's length."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:224
msgid "**Total running time of the script:** ( 0 minutes  6.926 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:239
msgid ":download:`Download Python source code: glyphs.py <glyphs.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:245
msgid ":download:`Download Jupyter notebook: glyphs.ipynb <glyphs.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_glyphs_table.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:24
msgid "Plotting Glyphs (PolyData)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:26
msgid "Use parameters in a dataset to plot and orient glyphs/geometric objects."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:46
msgid "Table of Glyphs"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:48
msgid "``vtk`` supports tables of glyphs from which glyphs are looked up. This example demonstrates this functionality."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:51
msgid "We can allow tables of glyphs in a backward-compatible way by allowing a sequence of geometries as well as single (scalar) geometries to be passed as the geom kwarg of glyph. An indices optional keyword is added, which is mandatory in case geom is a sequence, and in this case has to be the same length."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:121
msgid "**Total running time of the script:** ( 0 minutes  1.462 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:136
msgid ":download:`Download Python source code: glyphs_table.py <glyphs_table.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs_table.rst:142
msgid ":download:`Download Jupyter notebook: glyphs_table.ipynb <glyphs_table.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_gradients.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:22
msgid "Compute Gradients of a Field"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:24
msgid "Estimate the gradient of a scalar or vector field in a data set."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:26
msgid "The ordering for the output gradient tuple will be {du/dx, du/dy, du/dz, dv/dx, dv/dy, dv/dz, dw/dx, dw/dy, dw/dz} for an input array {u, v, w}."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:30
msgid "Showing the :func:`pyvista.DataSetFilters.compute_derivative` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:51
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>158400</td></tr>\n"
"<tr><td>N Points</td><td>167580</td></tr>\n"
"<tr><td>X Bounds</td><td>1.000e+02, 1.750e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.000e+01, 1.280e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.000e+00, 4.500e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>76, 49, 45</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>5.800e+02</td></tr>\n"
"<tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-2.263e+01</td><td>1.662e+01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:81
msgid "Now compute the gradients of the ``vectors`` vector field in the point data of that mesh. This is as simple as calling :func:`pyvista.DataSetFilters.compute_derivative`."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:121
msgid "You can also use :func:`pyvista.DataSetFilters.compute_derivative` for computing other derivative based quantities, such as divergence, vorticity, and Q-criterion. See function documentation for options."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:127
msgid "``mesh_g[\"gradient\"]`` is an ``N`` by 9 NumPy array of the gradients, so we could make a dictionary of NumPy arrays of the gradients like:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:170
msgid "And we can add all of those components as individual arrays back to the mesh by:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:185
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>158400</td></tr>\n"
"<tr><td>N Points</td><td>167580</td></tr>\n"
"<tr><td>X Bounds</td><td>1.000e+02, 1.750e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.000e+01, 1.280e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.000e+00, 4.500e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>76, 49, 45</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>12</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>5.800e+02</td></tr>\n"
"<tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-2.263e+01</td><td>1.662e+01</td></tr>\n"
"<tr><td>gradient</td><td>Points</td><td>float32</td><td>9</td><td>-1.585e+01</td><td>1.536e+01</td></tr>\n"
"<tr><td>du/dx</td><td>Points</td><td>float32</td><td>1</td><td>-8.293e+00</td><td>8.336e+00</td></tr>\n"
"<tr><td>du/dy</td><td>Points</td><td>float32</td><td>1</td><td>-1.084e+01</td><td>8.334e+00</td></tr>\n"
"<tr><td>du/dz</td><td>Points</td><td>float32</td><td>1</td><td>-8.300e+00</td><td>8.317e+00</td></tr>\n"
"<tr><td>dv/dx</td><td>Points</td><td>float32</td><td>1</td><td>-1.133e+01</td><td>1.536e+01</td></tr>\n"
"<tr><td>dv/dy</td><td>Points</td><td>float32</td><td>1</td><td>-1.585e+01</td><td>1.170e+01</td></tr>\n"
"<tr><td>dv/dz</td><td>Points</td><td>float32</td><td>1</td><td>-1.131e+01</td><td>7.459e+00</td></tr>\n"
"<tr><td>dw/dx</td><td>Points</td><td>float32</td><td>1</td><td>-8.738e+00</td><td>1.212e+01</td></tr>\n"
"<tr><td>dw/dy</td><td>Points</td><td>float32</td><td>1</td><td>-8.734e+00</td><td>8.740e+00</td></tr>\n"
"<tr><td>dw/dz</td><td>Points</td><td>float32</td><td>1</td><td>-1.124e+01</td><td>8.728e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:266
msgid "And there you have it, the gradients for a vector field! We could also do this for a scalar  field like for the ``scalars`` field in the given dataset."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:338
msgid "**Total running time of the script:** ( 0 minutes  2.430 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:353
msgid ":download:`Download Python source code: gradients.py <gradients.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gradients.rst:359
msgid ":download:`Download Jupyter notebook: gradients.ipynb <gradients.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_interpolate.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:22
msgid "Interpolating"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:24
msgid "Interpolate one mesh's point/cell arrays onto another mesh's nodes using a Gaussian Kernel."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:45
msgid "Simple Surface Interpolation"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:46
msgid "Resample the points' arrays onto a surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:85
msgid "Run the interpolation"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:125
msgid "Complex Interpolation"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:126
msgid "In this example, we will in interpolate sparse points in 3D space into a volume. These data are from temperature probes in the subsurface and the goal is to create an approximate 3D model of the temperature field in the subsurface."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:131
msgid "This approach is a great for back-of-the-hand estimations but pales in comparison to kriging"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:151
msgid "Create the interpolation grid around the sparse data"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:207
msgid "Run an interpolation"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:224
msgid "Visualize the results"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:265
msgid "**Total running time of the script:** ( 0 minutes  11.117 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:280
msgid ":download:`Download Python source code: interpolate.py <interpolate.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/interpolate.rst:286
msgid ":download:`Download Jupyter notebook: interpolate.ipynb <interpolate.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_mesh-quality.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:22
msgid "Computing Mesh Quality"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:24
msgid "Leverage a powerful VTK algorithm for computing mesh quality."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:26
msgid "Here we will use the :func:`pyvista.DataSetFilters.compute_cell_quality` filter to compute the cell qualities. For a full list of the various quality metrics available, please refer to the documentation for that filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:53
msgid "Compute the cell quality. Note that there are many different quality measures"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:67
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1740</td></tr>\n"
"<tr><td>N Points</td><td>871</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.389e+00, 6.005e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.648e+00, 2.761e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-1.701e+00, 1.701e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>CellQuality</b></td><td>Cells</td><td>float64</td><td>1</td><td>6.197e-02</td><td>9.911e-01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:121
msgid "**Total running time of the script:** ( 0 minutes  0.833 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:136
msgid ":download:`Download Python source code: mesh-quality.py <mesh-quality.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/mesh-quality.rst:142
msgid ":download:`Download Jupyter notebook: mesh-quality.ipynb <mesh-quality.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_poly-ray-trace.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:22
#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:22
msgid "Ray Tracing"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:24
#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:24
msgid "Single line segment ray tracing for PolyData objects."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:85
msgid "**Total running time of the script:** ( 0 minutes  0.556 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:100
msgid ":download:`Download Python source code: poly-ray-trace.py <poly-ray-trace.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:106
msgid ":download:`Download Jupyter notebook: poly-ray-trace.ipynb <poly-ray-trace.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_project-plane.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:22
msgid "Project to a Plane"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:24
msgid ":class:`pyvista.PolyData` surfaces and pointsets can easily be projected to a plane defined by a normal and origin"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:63
msgid "Project that surface to a plane underneath the surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:102
msgid "**Total running time of the script:** ( 0 minutes  1.740 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:117
msgid ":download:`Download Python source code: project-plane.py <project-plane.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:123
msgid ":download:`Download Jupyter notebook: project-plane.ipynb <project-plane.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_resample.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:22
msgid "Resampling"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:24
msgid "Resample one mesh's point/cell arrays onto another mesh's nodes."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:28
msgid "This example will resample a volumetric mesh's  scalar data onto the surface of a sphere contained in that volume."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:50
msgid "Simple Resample"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:51
msgid "Query a grids points onto a sphere"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:69
msgid "Plot the two datasets"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:103
msgid "Run the algorithm and plot the result"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:139
msgid "Complex Resample"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:140
msgid "Take a volume of data and create a grid of lower resolution to resample on"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:199
msgid "**Total running time of the script:** ( 0 minutes  11.665 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:214
msgid ":download:`Download Python source code: resample.py <resample.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:220
msgid ":download:`Download Jupyter notebook: resample.ipynb <resample.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:8
msgid "**04:56.140** total execution time for **examples_01-filter** files:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py` (``clipping-with-surface.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:11
msgid "01:01.218"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py` (``slicing.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:13
msgid "00:35.075"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py` (``voxelize.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:15
msgid "00:26.344"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_01-filter_compute-normals.py` (``compute-normals.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:17
msgid "00:20.384"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_01-filter_compute-volume.py` (``compute-volume.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:19
msgid "00:19.562"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py` (``geodesic.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:21
msgid "00:15.554"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_examples_01-filter_boolean-operations.py` (``boolean-operations.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:23
msgid "00:13.712"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py` (``gaussian-smoothing.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:25
msgid "00:12.708"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:27
msgid ":ref:`sphx_glr_examples_01-filter_resample.py` (``resample.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:27
msgid "00:11.665"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_01-filter_extract-edges.py` (``extract-edges.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:29
msgid "00:11.173"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_01-filter_interpolate.py` (``interpolate.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:31
msgid "00:11.117"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:33
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py` (``streamlines.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:33
msgid "00:08.197"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py` (``glyphs.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:35
msgid "00:06.926"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:37
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py` (``contouring.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:37
msgid "00:06.187"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:39
msgid ":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py` (``distance-between-surfaces.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:39
msgid "00:05.955"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_01-filter_surface-smoothing.py` (``surface-smoothing.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:41
msgid "00:03.461"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:43
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py` (``decimate.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:43
msgid "00:03.312"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:45
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py` (``clipping.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:45
msgid "00:03.079"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_01-filter_connectivity.py` (``connectivity.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:47
msgid "00:02.962"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:49
msgid ":ref:`sphx_glr_examples_01-filter_using-filters.py` (``using-filters.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:49
msgid "00:02.746"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:51
msgid ":ref:`sphx_glr_examples_01-filter_cell-centers.py` (``cell-centers.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:51
msgid "00:02.655"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py` (``gradients.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:53
msgid "00:02.430"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:55
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py` (``subdivide.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:55
msgid "00:01.792"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:57
msgid ":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py` (``extract-cells-inside-surface.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:57
msgid "00:01.779"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_01-filter_project-plane.py` (``project-plane.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:59
msgid "00:01.740"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:61
msgid ":ref:`sphx_glr_examples_01-filter_warp-by-vector.py` (``warp-by-vector.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:61
msgid "00:01.555"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:63
msgid ":ref:`sphx_glr_examples_01-filter_glyphs_table.py` (``glyphs_table.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:63
msgid "00:01.462"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:65
msgid ":ref:`sphx_glr_examples_01-filter_mesh-quality.py` (``mesh-quality.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:65
msgid "00:00.833"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:67
msgid ":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py` (``poly-ray-trace.py``)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:67
msgid "00:00.556"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_slicing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:22
msgid "Slicing"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:24
msgid "Extract thin planar slices from a volume"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:45
msgid "PyVista meshes have several slicing filters bound directly to all datasets. These filters allow you to slice through a volumetric dataset to extract and view sections through the volume of data."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:49
msgid "One of the most common slicing filters used in PyVista is the :func:`pyvista.DataSetFilters.slice_orthogonal` filter which creates three orthogonal slices through the dataset parallel to the three Cartesian planes. For example, let's slice through the sample geostatistical training image volume. First, load up the volume and preview it:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:90
msgid "Note that this dataset is a 3D volume and there might be regions within this volume that we would like to inspect. We can create slices through the mesh to gain further insight about the internals of the volume."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:127
msgid "The orthogonal slices can be easily translated throughout the volume:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:159
msgid "We can also add just a single slice of the volume by specifying the origin and normal of the slicing plane with the :func:`pyvista.DataSetFilters.slice` filter:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:198
msgid "Adding slicing planes uniformly across an axial direction can also be automated with the :func:`pyvista.DataSetFilters.slice_along_axis` filter:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:235
msgid "Slice Along Line"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:237
msgid "We can also slice a dataset along a :func:`pyvista.Spline` or :func:`pyvista.Line` using the :func:`DataSetFilters.slice_along_line` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:240
msgid "First, define a line source through the dataset of interest. Please note that this type of slicing is computationally expensive and might take a while if there are a lot of points in the line - try to keep the resolution of the line low."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:272
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>15</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.475e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.400e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.000e+00, 1.100e+01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>arc_length</b></td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>3.605e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:299
msgid "Then run the filter"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:313
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>49100</td></tr>\n"
"<tr><td>N Points</td><td>49692</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.415e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>facies</b></td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>4.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:373
msgid "Multiple Slices in Vector Direction"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:375
msgid "Slice a mesh perpendicularly along a vector direction perpendicularly."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:446
msgid "Slice At Different Bearings"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:448
msgid "From `pyvista-support#23 <https://github.com/pyvista/pyvista-support/issues/23>`_"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:450
msgid "An example of how to get many slices at different bearings all centered around a user-chosen location."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:453
msgid "Create a point to orient slices around"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:471
msgid "Now generate a few normal vectors to rotate a slice around the z-axis. Use equation for circle since its about the Z-axis."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:492
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Information</th><th>Blocks</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>MultiBlock</th><th>Values</th></tr>\n"
"<tr><td>N Blocks</td><td>6</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000, 250.000</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000, 250.000</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000, 100.000</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Index</th><th>Name</th><th>Type</th></tr>\n"
"<tr><th>0</th><th>Bearing: 0.00</th><th>PolyData</th></tr>\n"
"<tr><th>1</th><th>Bearing: 30.00</th><th>PolyData</th></tr>\n"
"<tr><th>2</th><th>Bearing: 60.00</th><th>PolyData</th></tr>\n"
"<tr><th>3</th><th>Bearing: 90.00</th><th>PolyData</th></tr>\n"
"<tr><th>4</th><th>Bearing: 120.00</th><th>PolyData</th></tr>\n"
"<tr><th>5</th><th>Bearing: 150.00</th><th>PolyData</th></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:522
msgid "And now display it!"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:556
msgid "**Total running time of the script:** ( 0 minutes  35.075 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:571
msgid ":download:`Download Python source code: slicing.py <slicing.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:577
msgid ":download:`Download Jupyter notebook: slicing.ipynb <slicing.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_streamlines.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:22
msgid "Streamlines"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:24
msgid "Integrate a vector field to generate streamlines."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:28
msgid "This example generates streamlines of blood velocity. An isosurface of speed provides context. The starting positions for the streamtubes were determined by experimenting with the data."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:52
msgid "Carotid"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:53
msgid "Download a sample dataset containing a vector field that can be integrated."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:71
msgid "Run the stream line filtering algorithm."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:97
msgid "Display the results! Please note that because this dataset's velocity field was measured with low resolution, many streamlines travel outside the artery."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:138
msgid "Blood Vessels"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:139
msgid "Here is another example of blood flow:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:198
msgid "Kitchen"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:266
msgid "Custom 3D Vector Field"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:341
msgid "**Total running time of the script:** ( 0 minutes  8.197 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:356
msgid ":download:`Download Python source code: streamlines.py <streamlines.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:362
msgid ":download:`Download Jupyter notebook: streamlines.ipynb <streamlines.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_subdivide.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:22
msgid "Subdivide Cells"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:24
msgid "Increase the number of triangles in a single, connected triangular mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:26
msgid "The :func:`pyvista.PolyDataFilters.subdivide` filter utilizes three different subdivision algorithms to subdivide a mesh's cells: `butterfly`, `loop`, or `linear`."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:46
msgid "First, let's load a **triangulated** mesh to subdivide. We can use the :func:`pyvista.DataSetFilters.triangulate` filter to ensure the mesh we are using is purely triangles."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:69
msgid "Now, lets do a few subdivisions with the mesh and compare the results. Below is a helper function to make a comparison plot of thee different subdivisions."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:110
msgid "Run the subdivisions for 1 and 3 levels."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:144
msgid "**Total running time of the script:** ( 0 minutes  1.792 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:159
msgid ":download:`Download Python source code: subdivide.py <subdivide.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:165
msgid ":download:`Download Jupyter notebook: subdivide.ipynb <subdivide.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_surface-smoothing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:22
msgid "Surface Smoothing"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:24
msgid "Smoothing rough edges of a surface mesh"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:43
msgid "Suppose you extract a volumetric subset of a dataset that has roughly defined edges. Perhaps you'd like a smooth representation of that model region. This can be achieved by extracting the bounding surface of the volume and applying a :func:`pyvista.PolyData.smooth` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:48
msgid "The below code snippet loads a sample roughly edged volumetric dataset:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:87
msgid "Extract the outer surface of the volume using the :func:`pyvista.DataSetFilters.extract_geometry` filter and then apply the smoothing filter:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:125
msgid "Not smooth enough? Try increasing the number of iterations for the Laplacian smoothing algorithm:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:160
msgid "Still not smooth enough? Increase the number of iterations for the Laplacian smoothing algorithm to a crazy high value:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:195
msgid "**Total running time of the script:** ( 0 minutes  3.461 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:210
msgid ":download:`Download Python source code: surface-smoothing.py <surface-smoothing.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:216
msgid ":download:`Download Jupyter notebook: surface-smoothing.ipynb <surface-smoothing.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_using-filters.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:22
msgid "Using Common Filters"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:24
msgid "Using common filters like thresholding and clipping"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:44
msgid "PyVista wrapped data objects have a suite of common filters ready for immediate use directly on the object. These filters include the following (see :ref:`filters_ref` for a complete list):"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:48
msgid "``slice``: creates a single slice through the input dataset on a user defined plane"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:49
msgid "``slice_orthogonal``: creates a ``MultiBlock`` dataset of three orthogonal slices"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:50
msgid "``slice_along_axis``: creates a ``MultiBlock`` dataset of many slices along a specified axis"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:51
msgid "``threshold``: Thresholds a dataset by a single value or range of values"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:52
msgid "``threshold_percent``: Threshold by percentages of the scalar range"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:53
msgid "``clip``: Clips the dataset by a user defined plane"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:54
msgid "``outline_corners``: Outlines the corners of the data extent"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:55
msgid "``extract_geometry``: Extract surface geometry"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:57
msgid "To use these filters, call the method of your choice directly on your data object:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:82
msgid "And now there is a thresholded version of the input dataset in the new ``threshed`` object. To learn more about what keyword arguments are available to alter how filters are executed, print the docstring for any filter attached to PyVista objects with either ``help(dataset.threshold)`` or using ``shift+tab`` in an IPython environment."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:88
msgid "We can now plot this filtered dataset along side an outline of the original dataset"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:126
msgid "What about other filters? Let's collect a few filter results and compare them:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:185
msgid "Filter Pipeline"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:187
msgid "In VTK, filters are often used in a pipeline where each algorithm passes its output to the next filtering algorithm. In PyVista, we can mimic the filtering pipeline through a chain; attaching each filter to the last filter. In the following example, several filters are chained together:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:192
msgid "First, and empty ``threshold`` filter to clean out any ``NaN`` values."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:193
msgid "Use an ``elevation`` filter to generate scalar values corresponding to height."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:194
msgid "Use the ``clip`` filter to cut the dataset in half."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:195
msgid "Create three slices along each axial plane using the ``slice_orthogonal`` filter."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:214
msgid "And to view this filtered data, simply call the ``plot`` method (``result.plot()``) or create a rendering scene:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:251
msgid "**Total running time of the script:** ( 0 minutes  2.746 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:266
msgid ":download:`Download Python source code: using-filters.py <using-filters.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:272
msgid ":download:`Download Jupyter notebook: using-filters.ipynb <using-filters.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_voxelize.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:22
msgid "Voxelize a Surface Mesh"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:24
msgid "Create a voxel model (like legos) of a closed surface or volumetric mesh."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:26
msgid "This example also demonstrates how to compute an implicit distance from a bounding :class:`pyvista.PolyData` surface."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:48
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>4204</td></tr>\n"
"<tr><td>N Points</td><td>2154</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.633e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.860e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.126e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:101
msgid "Create a voxel model of the bounding surface"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:138
msgid "We could even add a scalar field to that new voxel model in case we wanted to create grids for modelling. In this case, let's add a scalar field for bone density noting:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:154
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>93041</td></tr>\n"
"<tr><td>N Points</td><td>113192</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.584e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.858e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.097e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>3</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>3.685e+03</td><td>7.283e+05</td></tr>\n"
"<tr><td><b>vtkOriginalCellIds</b></td><td>Cells</td><td>int64</td><td>1</td><td>3.624e+03</td><td>7.017e+05</td></tr>\n"
"<tr><td>density</td><td>Cells</td><td>float64</td><td>1</td><td>3.650e+00</td><td>3.650e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:211
msgid "A constant scalar field is kind of boring, so let's get a little fancier by added a scalar field that varies by the distance from the bounding surface."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:226
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>93041</td></tr>\n"
"<tr><td>N Points</td><td>113192</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.584e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.858e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.097e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>4</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>3.685e+03</td><td>7.283e+05</td></tr>\n"
"<tr><td>implicit_distance</td><td>Points</td><td>float64</td><td>1</td><td>-6.951e-01</td><td>4.148e-01</td></tr>\n"
"<tr><td><b>vtkOriginalCellIds</b></td><td>Cells</td><td>int64</td><td>1</td><td>3.624e+03</td><td>7.017e+05</td></tr>\n"
"<tr><td>density</td><td>Cells</td><td>float64</td><td>1</td><td>3.650e+00</td><td>3.650e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:288
msgid "**Total running time of the script:** ( 0 minutes  26.344 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:303
msgid ":download:`Download Python source code: voxelize.py <voxelize.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:309
msgid ":download:`Download Jupyter notebook: voxelize.ipynb <voxelize.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_01-filter_warp-by-vector.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:22
msgid "Warping by Vectors"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:24
msgid "This example applies the ``warp_by_vector`` filter to a sphere mesh that has 3D displacement vectors defined at each node."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:29
msgid "We first compare the unwarped sphere to the warped sphere."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:71
msgid "We then use several values for the scale factor applied to the warp operation. Applying a warping factor that is too high can often lead to unrealistic results."
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:113
msgid "**Total running time of the script:** ( 0 minutes  1.555 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:128
msgid ":download:`Download Python source code: warp-by-vector.py <warp-by-vector.py>`"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:134
msgid ":download:`Download Jupyter notebook: warp-by-vector.ipynb <warp-by-vector.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_background_image.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:22
msgid "Background Image"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:24
msgid "Add a background image with ``add_background_image``"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:44
msgid "Plot an airplane with the map of the earth in the background"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:80
msgid "Plot several earth related plots"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:132
msgid "**Total running time of the script:** ( 0 minutes  5.419 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:147
msgid ":download:`Download Python source code: background_image.py <background_image.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:153
msgid ":download:`Download Jupyter notebook: background_image.ipynb <background_image.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_clear.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:22
msgid "Clearing a Mesh or the Entire Plot"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:24
msgid "This example demonstrates how to remove elements from a scene."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:76
msgid "Clearing the entire plotting window:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:113
msgid "Or you can give any actor a ``name`` when adding it and if an actor is added with that same name at a later time, it will replace the previous actor:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:150
msgid "**Total running time of the script:** ( 0 minutes  1.095 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:165
msgid ":download:`Download Python source code: clear.py <clear.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:171
msgid ":download:`Download Jupyter notebook: clear.ipynb <clear.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_cmap.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:22
msgid "Colormap Choices"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:24
msgid "Use a Matplotlib, Colorcet, cmocean, or custom colormap when plotting scalar values."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:47
msgid "Any colormap built for ``matplotlib``, ``colorcet``, or ``cmocean`` is fully compatible with PyVista. Colormaps are typically specified by passing the string name of the colormap to the plotting routine via the ``cmap`` argument."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:52
msgid "See `Matplotlib's complete list of available colormaps`_, `Colorcet's complete list`_, and `cmocean's complete list`_."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:62
msgid "Custom Made Colormaps"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:64
msgid "To get started using a custom colormap, download some data with scalar values to plot."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:85
msgid "Build a custom colormap - here we make a colormap with 5 discrete colors and we specify the ranges where those colors fall:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:120
msgid "Simply pass the colormap to the plotting routine!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:151
msgid "Or you could make a simple colormap... any Matplotlib colormap can be passed to PyVista!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:184
msgid "You can also pass a list of color strings to the color map.  This approach divides up the colormap into 5 equal parts."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:216
msgid "If you still wish to have control of the separation of values, you can do this by creating a scalar array and passing that to the plotter along with the the colormap"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:257
msgid "Matplotlib vs. Colorcet"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:259
msgid "Let's compare Colorcet's perceptually uniform \"fire\" colormap to Matplotlib's \"hot\" colormap much like the example on the `first page of Colorcet's docs`_."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:264
msgid "The \"hot\" version washes out detail at the high end, as if the image is overexposed, while \"fire\" makes detail visible throughout the data range."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:267
msgid "Please note that in order to use Colorcet's colormaps including \"fire\", you must have Colorcet installed in your Python environment: ``pip install colorcet``"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:318
msgid "**Total running time of the script:** ( 0 minutes  6.410 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:333
msgid ":download:`Download Python source code: cmap.py <cmap.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:339
msgid ":download:`Download Jupyter notebook: cmap.ipynb <cmap.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_depth-peeling.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:22
msgid "Depth Peeling"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:24
msgid "Depth peeling is a technique to correctly render translucent geometry. This is not enabled by default in :any:`pyvista.rcParams` as some operating systems and versions of VTK have issues with this routine."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:28
msgid "For this example, we will showcase the difference that depth peeling provides."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:111
msgid "The following room surfaces example mesh, provided courtesy of `Sam Potter <https://github.com/sampotter>`_ has coincident topology and depth rendering helps correctly render those geometries when a global opacity value is used."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:164
msgid "And here is another example wheen rendering many translucent contour surfaces."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:214
msgid "**Total running time of the script:** ( 0 minutes  55.037 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:229
msgid ":download:`Download Python source code: depth-peeling.py <depth-peeling.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:235
msgid ":download:`Download Jupyter notebook: depth-peeling.ipynb <depth-peeling.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_edges.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:22
msgid "Show Edges"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:24
msgid "Show the edges of all geometries within a mesh"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:28
msgid "Sometimes it can be useful to show all of the edges of a mesh when rendering to communicate aspects of the dataset like resolution."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:31
msgid "Showing the edges for any rendered dataset is as simple as specifying the the ``show_edges`` keyword argument to ``True`` when plotting a dataset."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:77
msgid "**Total running time of the script:** ( 0 minutes  8.914 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:92
msgid ":download:`Download Python source code: edges.py <edges.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:98
msgid ":download:`Download Jupyter notebook: edges.ipynb <edges.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_edl.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:24
msgid "Eye Dome Lighting"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:26
msgid "Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique designed to improve depth perception in scientific visualization images. To learn more, please see `this blog post`_."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:52
msgid "Statue"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:54
msgid "Eye-Dome Lighting can dramatically improve depth perception when plotting incredibly sophisticated meshes like the creative commons Queen Nefertiti statue:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:89
msgid "Here we will compare a EDL shading side by side with normal shading"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:137
msgid "Point Cloud"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:139
msgid "When plotting a simple point cloud, it can be difficult to perceive depth. Take this Lidar point cloud for example:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:159
msgid "And now plot this point cloud as-is:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:195
msgid "We can improve the depth mapping by enabling eye dome lighting on the renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:233
msgid "The eye dome lighting mode can also handle plotting scalar arrays:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:269
msgid "**Total running time of the script:** ( 0 minutes  24.568 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:284
msgid ":download:`Download Python source code: edl.py <edl.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:290
msgid ":download:`Download Jupyter notebook: edl.ipynb <edl.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_floors.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:22
msgid "Plot with Floors"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:24
msgid "Add a floor/wall at the boundary of the rendering scene."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:69
msgid "**Total running time of the script:** ( 0 minutes  3.119 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:84
msgid ":download:`Download Python source code: floors.py <floors.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:90
msgid ":download:`Download Jupyter notebook: floors.ipynb <floors.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_ghost-cells.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:22
msgid "Hide Cells with Ghosting"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:24
msgid "Specify specific cells to hide when plotting."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:26
msgid "This is a lightweight alternative to thresholding to quickly hide cells in a mesh without creating a new mesh."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:29
msgid "Notably, the mesh must be cast to an :class:`pyvista.UnstructuredGrid` type for this to work (use the ``cast_to_unstructured_grid`` filter)."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:52
msgid "Decide which cells are ghosted with a criteria (feel free to adjust this or manually create this array to hide specific cells)."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:73
msgid "Now we can plot the mesh and those cells will be hidden"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:104
msgid "**Total running time of the script:** ( 0 minutes  6.216 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:119
msgid ":download:`Download Python source code: ghost-cells.py <ghost-cells.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ghost-cells.rst:125
msgid ":download:`Download Jupyter notebook: ghost-cells.ipynb <ghost-cells.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_gif.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:22
msgid "Create a GIF Movie"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:24
msgid "Generate a moving gif from an active plotter"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:100
msgid "**Total running time of the script:** ( 0 minutes  6.600 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:115
msgid ":download:`Download Python source code: gif.py <gif.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:121
msgid ":download:`Download Jupyter notebook: gif.ipynb <gif.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_image_depth.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:22
msgid "Render a depth image"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:24
msgid "Plot a depth image as viewed from a camera overlooking the \"hills\" example mesh."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:66
msgid "Record depth image without and with a custom fill value"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:84
msgid "Visualize depth images"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:134
msgid "**Total running time of the script:** ( 0 minutes  1.211 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:149
msgid ":download:`Download Python source code: image_depth.py <image_depth.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:155
msgid ":download:`Download Jupyter notebook: image_depth.ipynb <image_depth.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_interpolate-before-map.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:22
msgid "Interpolate Before Mapping"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:24
msgid "The ``add_mesh`` function has an ``interpolate_before_map`` argument - this affects the way scalar data is visualized with colors. The effect can of this can vary depending on the dataset's topology and the chosen colormap."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:29
msgid "This example serves to demo the difference and why we've chosen to enable this by default."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:32
msgid "For more details, please see `this blog post <https://blog.kitware.com/what-is-interpolatescalarsbeforemapping-in-vtk/>`_"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:50
msgid "Meshes are colored by the data on their nodes or cells - when coloring a mesh by data on its nodes, the values must be interpolated across the faces of cells. The process by which those scalars are interpolated is critical. If the ``interpolate_before_map`` is left off, the color mapping occurs at polygon points and  colors are interpolated, which is generally less accurate whereas if the ``interpolate_before_map`` is on, then the scalars will be interpolated across the topology of the dataset which is more accurate."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:58
msgid "To summarize, when ``interpolate_before_map`` is off, the colors are interpolated after rendering and when ``interpolate_before_map`` is on, the scalars are interpolated across the mesh and those values are mapped to colors."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:63
msgid "So lets take a look at the difference:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:111
msgid "Shown in the figure above, when not interpolating the scalars before mapping, the colors (RGB values, not scalars) are interpolated between the vertices by the underlying graphics library (OpenGL), and the colors shown are not accurate."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:116
msgid "The same interpolation effect occurs for wireframe visualization too:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:162
msgid "The cylinder mesh above is a great example dataset for this as it has a wide spread between the vertices (points are only at the top and bottom of the cylinder) which means high surface are of the mesh has to be interpolated."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:166
msgid "However, most meshes don't have such a wide spread and the effects of color interpolating are harder to notice. Let's take a look at a wavelet example and try to figure out how the ``interpolate_before_map`` option affects its rendering."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:215
msgid "This time is pretty difficult to notice the differences - they are there, subtle, but present. The differences become more apparent when we decrease the number of colors in colormap. Let's take a look at the differences when using eight discrete colors via the ``n_colors`` argument:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:263
msgid "Left, ``interpolate_before_map`` OFF.  Right, ``interpolate_before_map`` ON."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:265
msgid "Now that is much more compelling! On the right, the contours of the scalar field are visible, but on the left, the contours are obscured due to the color interpolation by OpenGL. In both cases, the colors at the vertices are the same, the difference is how color is assigned between the vertices."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:270
msgid "In our opinion, color interpolation is not a preferred default for scientific visualization and is why we have chosen to set the ``interpolate_before_map`` flag to ``True``."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:277
msgid "**Total running time of the script:** ( 0 minutes  3.953 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:292
msgid ":download:`Download Python source code: interpolate-before-map.py <interpolate-before-map.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:298
msgid ":download:`Download Jupyter notebook: interpolate-before-map.ipynb <interpolate-before-map.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_isovalue.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:22
msgid "Moving Isovalue"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:24
msgid "Make an animation of an isovalue through a volumetric dataset"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:42
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6998400</td></tr>\n"
"<tr><td>N Points</td><td>7109137</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.800e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.160e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.800e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>181, 217, 181</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>image_data</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>2.550e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:71
msgid "Now lets make an array of all of the isovalues for which we want to show."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:88
msgid "Now let's create an initial isosurface that we can plot and move"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:105
msgid "Precompute the surfaces"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:122
msgid "Set a single surface as the one being plotted that can be overwritten"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:196
msgid "**Total running time of the script:** ( 0 minutes  35.577 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:211
msgid ":download:`Download Python source code: isovalue.py <isovalue.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/isovalue.rst:217
msgid ":download:`Download Jupyter notebook: isovalue.ipynb <isovalue.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_labels.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:22
msgid "Label Points"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:24
msgid "Use string arrays in a point set to label points"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:45
msgid "Label String Array"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:47
msgid "This example will label the nodes of a mesh with a given array of string labels for each of the nodes."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:67
msgid "Add string labels to the point data - this associates a label with every node:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:83
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>10</td></tr>\n"
"<tr><td>N Points</td><td>10</td></tr>\n"
"<tr><td>X Bounds</td><td>3.811e-02, 8.904e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>1.638e-01, 4.803e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.438e-01, 9.227e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>My Labels</b></td><td>Points</td><td><U7</td><td>1</td><td>nan</td><td>nan</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:110
msgid "Now plot the points with labels:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:146
msgid "Label Node Locations"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:148
msgid "This example will label the nodes of a mesh with their coordinate locations"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:168
msgid "Create plotting class and add the unstructured grid"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:216
msgid "Label Scalar Values"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:218
msgid "This example will label each point with their scalar values"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:273
msgid "**Total running time of the script:** ( 0 minutes  1.961 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:288
msgid ":download:`Download Python source code: labels.py <labels.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:294
msgid ":download:`Download Jupyter notebook: labels.ipynb <labels.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_lighting.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:22
msgid "Lighting Controls"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:24
msgid "Control aspects of the rendered mesh's lighting such as Ambient, Diffuse, and Specular. These options only work if the ``lighting`` argument to ``add_mesh`` is ``True`` (it's true by default)."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:28
msgid "You can turn off all lighting by passing ``lighting=False`` to ``add_mesh``."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:53
msgid "First, lets take a look at the mesh with default lighting conditions"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:84
msgid "What about with no lighting"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:115
msgid "Demonstration of the specular property"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:159
msgid "Just specular"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:190
msgid "Specular power"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:222
msgid "Demonstration of all three in use"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:254
msgid "**Total running time of the script:** ( 0 minutes  6.938 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:269
msgid ":download:`Download Python source code: lighting.py <lighting.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:275
msgid ":download:`Download Jupyter notebook: lighting.ipynb <lighting.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/linked.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_linked.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/linked.rst:22
msgid "Linked Views in Subplots"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/linked.rst:82
msgid "**Total running time of the script:** ( 0 minutes  6.129 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/linked.rst:97
msgid ":download:`Download Python source code: linked.py <linked.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/linked.rst:103
msgid ":download:`Download Jupyter notebook: linked.ipynb <linked.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_movie.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:22
msgid "Create a MP4 Movie"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:24
msgid "Create an animated MP4 movie of a rendering scene"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:95
msgid "**Total running time of the script:** ( 0 minutes  14.535 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:110
msgid ":download:`Download Python source code: movie.py <movie.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:116
msgid ":download:`Download Jupyter notebook: movie.ipynb <movie.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_multi-window.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:22
msgid "Multi-Window Plot"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:25
msgid "Subplotting: having multiple scenes in a single window"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:44
msgid "This example shows how to create a multi-window plotter by specifying the ``shape`` parameter.  The window generated is a two by two window by setting ``shape=(2, 2)``. Use the :func:`pyvista.BasePlotter.subplot` function to select the subplot you wish to be the active subplot."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:145
msgid "Split the rendering window in half and subdivide it in a nr. of vertical or horizontal subplots."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:205
msgid "To get full flexibility over the layout grid, you can define the relative weighting of rows and columns and register groups that can span over multiple rows and columns. A group is defined through a tuple ``(rows,cols)`` of row and column indices or slices. The group always spans from the smallest to the largest (row or column) id that is passed through the list or slice."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:301
msgid "**Total running time of the script:** ( 0 minutes  4.758 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:316
msgid ":download:`Download Python source code: multi-window.py <multi-window.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:322
msgid ":download:`Download Jupyter notebook: multi-window.ipynb <multi-window.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_opacity.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:22
msgid "Plot with Opacity"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:24
msgid "Plot a mesh's scalar array with an opacity transfer function or opacity mapping based on a scalar array."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:50
msgid "Global Value"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:52
msgid "You can also apply a global opacity value to the mesh by passing a single float between 0 and 1 which would enable you to see objects behind the mesh:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:88
msgid "Note that you can specify ``use_transparency=True`` to convert opacities to transparencies in any of the following examples."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:94
msgid "Transfer Functions"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:96
msgid "It's possible to apply an opacity mapping to any scalar array plotted. You can specify either a single static value to make the mesh transparent on all cells, or use a transfer function where the scalar array plotted is mapped to the opacity. We have several predefined transfer functions."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:101
msgid "Opacity transfer functions are:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:103
msgid "``'linear'``: linearly vary (increase) opacity across the plotted scalar range from low to high"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:104
msgid "``'linear_r'``: linearly vary (increase) opacity across the plotted scalar range from high to low"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:105
msgid "``'geom'``: on a log scale, vary (increase) opacity across the plotted scalar range from low to high"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:106
msgid "``'geom_r'``: on a log scale, vary (increase) opacity across the plotted scalar range from high to low"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:107
msgid "``'sigmoid'``: vary (increase) opacity on a sigmoidal s-curve across the plotted scalar range from low to high"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:108
msgid "``'sigmoid_r'``: vary (increase) opacity on a sigmoidal s-curve across the plotted scalar range from high to low"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:170
msgid "It's also possible to use your own transfer function that will be linearly mapped to the scalar array plotted. For example, we can create an opacity mapping as:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:189
msgid "When given a minimized opacity mapping like that above, PyVista interpolates it across a range of how many colors are shown when mapping the scalars. If ``scipy`` is available, then a quadratic interpolation is used - otherwise, a simple linear interpolation is used. Curious what that opacity transfer function looks like? You can fetch it:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:223
msgid "That opacity mapping will have an opacity of 0.0 at the minimum scalar range, a value or 0.9 at the middle of the scalar range, and a value of 0.3 at the maximum of the scalar range:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:257
msgid "Opacity mapping is often useful when plotting DICOM images. For example, download the sample knee DICOM image:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:275
msgid "And here we inspect the DICOM image with a few different opacity mappings:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:324
msgid "Opacity by Array"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:326
msgid "You can also use a scalar array associated with the mesh to give each cell its own opacity/transparency value derived from a scalar field. For example, an uncertainty array from a modelling result could be used to hide regions of a mesh that are uncertain and highlight regions that are well resolved."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:331
msgid "The following is a demonstration of plotting a mesh with colored values and using a second array to control the transparency of the mesh"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:360
msgid "Make sure to flag ``use_transparency=True`` since we want areas of high variance to have high transparency."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:363
msgid "Also, since the opacity array must be between 0 and 1, we normalize the temperature variance array by the maximum value.  That way high variance will be completely transparent."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:412
msgid "**Total running time of the script:** ( 0 minutes  12.774 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:427
msgid ":download:`Download Python source code: opacity.py <opacity.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:433
msgid ":download:`Download Jupyter notebook: opacity.ipynb <opacity.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_orbit.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:22
msgid "Orbiting"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:24
msgid "Orbit around a scene."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:26
msgid "NOTE: using ``p.open_movie('orbit.mp4')`` is better than ``p.open_gif('orbit.gif')``"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:29
msgid "For orbiting to work you first have to show the scene and leave the plotter open with ``.show(auto_close=False)``."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:141
msgid "**Total running time of the script:** ( 3 minutes  7.427 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:156
msgid ":download:`Download Python source code: orbit.py <orbit.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:162
msgid ":download:`Download Jupyter notebook: orbit.ipynb <orbit.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_ortho-slices.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:22
msgid "Orthogonal Slices"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:24
msgid "View three orthogonal slices from a mesh."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:26
msgid "Use the :func:`pyvista.DataSetFilters.slice_orthogonal` filter to create these slices simultaneously."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:57
msgid "Create three slices. Easily control their locations with the ``x``, ``y``, and ``z`` arguments."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:164
msgid "**Total running time of the script:** ( 0 minutes  5.654 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:179
msgid ":download:`Download Python source code: ortho-slices.py <ortho-slices.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/ortho-slices.rst:185
msgid ":download:`Download Jupyter notebook: ortho-slices.ipynb <ortho-slices.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_plot-over-line.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:22
msgid "Plot Over Line"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:24
msgid "Plot the values of a dataset over a line through that dataset"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:45
msgid "Volumetric Mesh"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:47
msgid "First a 3D mesh example to demonstrate"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:90
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:161
msgid "Run the filter and produce a line plot"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:113
msgid "Flat Surface"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:115
msgid "We could also plot the values of a mesh that lies on a flat surface"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:189
msgid "**Total running time of the script:** ( 0 minutes  1.914 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:204
msgid ":download:`Download Python source code: plot-over-line.py <plot-over-line.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:210
msgid ":download:`Download Jupyter notebook: plot-over-line.ipynb <plot-over-line.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_scalar-bars.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:22
msgid "Customize Scalar Bars"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:24
msgid "Walk through of all the different capabilities of scalar bars and how a user can customize scalar bars."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:46
msgid "By default, when plotting a dataset with a scalar array, a scalar bar for that array is added. To turn off this behavior, a user could specify ``show_scalar_bar=False`` when calling ``.add_mesh()``. Let's start with a sample dataset provide via PyVista to demonstrate the default behavior of scalar bar plotting:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:90
msgid "We could also plot the scene with an interactive scalar bar to move around and place where we like by specifying passing keyword arguments to control the scalar bar via the ``scalar_bar_args`` parameter in :func:`pyvista.BasePlotter.add_mesh`. The keyword arguments to control the scalar bar are defined in :func:`pyvista.BasePlotter.add_scalar_bar`."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:122
msgid "Or manually define the scalar bar's location:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:159
msgid "The text properties of the scalar bar can also be controlled:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:205
msgid "Labelling values outside of the scalar range"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:241
msgid "Annotate values of interest using a dictionary. The key of the dictionary must be the value to annotate, and the value must be the string label."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:282
msgid "**Total running time of the script:** ( 0 minutes  5.801 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:297
msgid ":download:`Download Python source code: scalar-bars.py <scalar-bars.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:303
msgid ":download:`Download Jupyter notebook: scalar-bars.ipynb <scalar-bars.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_screenshot.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:22
msgid "Saving Screenshots"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:47
msgid "You can also take a screenshot without creating an interactive plot window using the :class:`pyvista.Plotter`:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:82
msgid "The ``img`` array can be used to plot the screenshot in ``matplotlib``:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:105
msgid "**Total running time of the script:** ( 0 minutes  0.886 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:120
msgid ":download:`Download Python source code: screenshot.py <screenshot.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:126
msgid ":download:`Download Jupyter notebook: screenshot.ipynb <screenshot.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:8
msgid "**08:09.110** total execution time for **examples_02-plot** files:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py` (``orbit.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:11
msgid "03:07.427"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_02-plot_depth-peeling.py` (``depth-peeling.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:13
msgid "00:55.037"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_02-plot_volume.py` (``volume.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:15
msgid "00:42.492"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_02-plot_isovalue.py` (``isovalue.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:17
msgid "00:35.577"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_02-plot_edl.py` (``edl.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:19
msgid "00:24.568"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py` (``topo-map.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:21
msgid "00:21.900"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_examples_02-plot_movie.py` (``movie.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:23
msgid "00:14.535"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py` (``opacity.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:25
msgid "00:12.774"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:27
msgid ":ref:`sphx_glr_examples_02-plot_texture.py` (``texture.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:27
msgid "00:11.045"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_02-plot_edges.py` (``edges.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:29
msgid "00:08.914"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_02-plot_lighting.py` (``lighting.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:31
msgid "00:06.938"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:33
msgid ":ref:`sphx_glr_examples_02-plot_gif.py` (``gif.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:33
msgid "00:06.600"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py` (``cmap.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:35
msgid "00:06.410"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:37
msgid ":ref:`sphx_glr_examples_02-plot_ghost-cells.py` (``ghost-cells.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:37
msgid "00:06.216"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:39
msgid ":ref:`sphx_glr_examples_02-plot_linked.py` (``linked.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:39
msgid "00:06.129"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py` (``scalar-bars.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:41
msgid "00:05.801"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:43
msgid ":ref:`sphx_glr_examples_02-plot_ortho-slices.py` (``ortho-slices.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:43
msgid "00:05.654"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:45
msgid ":ref:`sphx_glr_examples_02-plot_background_image.py` (``background_image.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:45
msgid "00:05.419"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py` (``multi-window.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:47
msgid "00:04.758"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:49
msgid ":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py` (``interpolate-before-map.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:49
msgid "00:03.953"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:51
msgid ":ref:`sphx_glr_examples_02-plot_themes.py` (``themes.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:51
msgid "00:03.295"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_02-plot_floors.py` (``floors.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:53
msgid "00:03.119"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:55
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py` (``spherical.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:55
msgid "00:02.162"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:57
msgid ":ref:`sphx_glr_examples_02-plot_labels.py` (``labels.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:57
msgid "00:01.961"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-line.py` (``plot-over-line.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:59
msgid "00:01.914"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:61
msgid ":ref:`sphx_glr_examples_02-plot_shading.py` (``shading.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:61
msgid "00:01.319"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:63
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py` (``image_depth.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:63
msgid "00:01.211"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:65
msgid ":ref:`sphx_glr_examples_02-plot_clear.py` (``clear.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:65
msgid "00:01.095"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:67
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py` (``screenshot.py``)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:67
msgid "00:00.886"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_shading.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:22
msgid "Types of Shading"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:24
msgid "Comparison of default, flat shading vs. smooth shading."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:43
msgid "PyVista supports two types of shading, flat and smooth shading that uses VTK's Phong shading algorithm."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:46
msgid "This is a plot with the default flat shading:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:78
msgid "Here's the same sphere with smooth shading:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:109
msgid "**Total running time of the script:** ( 0 minutes  1.319 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:124
msgid ":download:`Download Python source code: shading.py <shading.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:130
msgid ":download:`Download Jupyter notebook: shading.ipynb <shading.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_spherical.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:22
msgid "Plot data in spherical coordinates"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:24
msgid "Generate and visualize meshes from data in longitude-latitude coordinates."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:103
msgid "Create a structured grid"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:144
msgid "Visualize vectors in spherical coordinates Vertical wind"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:215
msgid "Isurfaces of 3D data in spherical coordinates"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:275
msgid "**Total running time of the script:** ( 0 minutes  2.162 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:290
msgid ":download:`Download Python source code: spherical.py <spherical.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:296
msgid ":download:`Download Jupyter notebook: spherical.ipynb <spherical.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_texture.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:24
msgid "Applying Textures"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:26
msgid "Plot a mesh with an image projected onto it as a texture."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:47
msgid "Texture mapping is easily implemented using PyVista. Many of the geometric objects come preloaded with texture coordinates, so quickly creating a surface and displaying an image is simply:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:88
msgid "But what if your dataset doesn't have texture coordinates? Then you can harness the :func:`pyvista.DataSetFilters.texture_map_to_plane` filter to properly map an image to a dataset's surface. For example, let's map that same image of bricks to a curvey surface:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:134
msgid "Display scalar data along with a texture by ensuring the ``interpolate_before_map`` setting is ``False`` and specifying both the ``texture`` and ``scalars`` arguments."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:174
msgid "Note that this process can be completed with any image texture!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:210
msgid "Textures from Files"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:212
msgid "What about loading your own texture from an image? This is often most easily done using the :func:`pyvista.read_texture` function - simply pass an image file's path, and this function with handle making a ``vtkTexture`` for you to use."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:251
msgid "NumPy Arrays as Textures"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:253
msgid "Want to use a programmatically built image? :class:`pyvista.UniformGrid` objects can be converted to textures using :func:`pyvista.image_to_texture` and 3D NumPy (X by Y by RGB) arrays can be converted to textures using :func:`pyvista.numpy_to_texture`."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:305
msgid "Textures with Transparency"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:307
msgid "Textures can also specify per-pixel opacity values. The image must contain a 4th channel specifying the opacity value from 0 [transparent] to 255 [fully visible]. To enable this feature just pass the opacity array as the 4th channel of the image as a 3 dimensional matrix with shape [nrows, ncols, 4] :func:`pyvista.numpy_to_texture`."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:313
msgid "Here we can download an image that has an alpha channel:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:370
msgid "Repeating Textures"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:372
msgid "What if you have a single texture that you'd like to repeat across a mesh? Simply define the texture coordinates for all nodes explicitly."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:375
msgid "Here we create the texture coordinates to fill up the grid with several mappings of a single texture. In order to do this we must define texture coordinates outside of the typical ``(0, 1)`` range:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:400
msgid "By defining texture coordinates that range ``(0, 4)`` on each axis, we will produce 4 repetitions of the same texture on this mesh."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:403
msgid "Then we must associate those texture coordinates with the mesh through the :attr:`pyvista.Common.t_coords` property."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:422
msgid "Now display all the puppies!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:458
msgid "Spherical Texture Coordinates"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:459
msgid "We have a built in convienance method for mapping textures to spherical coordinate systems much like the planar mapping demoed above."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:497
msgid "The helper method above does not always produce the desired texture coordinates, so sometimes it must be done manually. Here is a great, user contributed example from `this support issue <https://github.com/pyvista/pyvista-support/issues/257>`_"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:501
msgid "Manually create the texture coordinates for a globe map. First, we create the mesh that will be used as the globe. Note the `start_theta` for a slight overlappig"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:551
msgid "**Total running time of the script:** ( 0 minutes  11.045 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:566
msgid ":download:`Download Python source code: texture.py <texture.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:572
msgid ":download:`Download Jupyter notebook: texture.ipynb <texture.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_themes.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:22
msgid "Change the Theme"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:24
msgid "PyVista has a few coloring themes for you to choose!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:42
msgid "Define a simple plotting routine for comparing the themes"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:68
msgid "PyVista's default color theme is chosen to be generally easy on your eyes and is best used when working long hours on your visualization project. The grey background and warm colormaps are chosen to make sure 3D renderings do not drastically change the brightness of your screen when working in dark environments."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:74
msgid "Here's an example of our default plotting theme - this is what you would see by default after running any of our examples."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:109
msgid "PyVista also ships with a few plotting themes:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:111
msgid "``'ParaView'``: this is designed to mimic ParaView's default plotting theme"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:112
msgid "``'night'``: this is designed to be night-mode friendly with dark backgrounds and color schemes"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:113
msgid "``'document'``: this is built for use in document style plotting and making publication quality figures"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:117
msgid "Demo the ``'ParaView'`` theme"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:152
msgid "Demo the ``'night'`` theme"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:186
msgid "Demo the ``'document'`` theme"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:221
msgid "Note that you can also use color gradients for the background of the plotting window!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:258
msgid "**Total running time of the script:** ( 0 minutes  3.295 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:273
msgid ":download:`Download Python source code: themes.py <themes.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:279
msgid ":download:`Download Jupyter notebook: themes.ipynb <themes.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_topo-map.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:22
msgid "Topographic Map"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:24
msgid "This is very similar to the :ref:`ref_texture_example` example except it is focused on plotting aerial imagery from a GeoTIFF on top of some topography mesh."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:49
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1677401</td></tr>\n"
"<tr><td>N Points</td><td>1680000</td></tr>\n"
"<tr><td>X Bounds</td><td>1.810e+06, 1.831e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.640e+06, 5.658e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>7.339e+02, 2.787e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>1400, 1200, 1</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>7.339e+02</td><td>2.787e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:77
msgid "Let's inspect the imagery that we just loaded"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:110
msgid "Once you have a topography mesh loaded as a surface mesh (we use a :class:`pyvista.StructuredGrid` here) and an image loaded as a :class:`pyvista.Texture` object using the :func:`pyvista.read_texture` method, then you can map that imagery to the surface mesh as follows:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:136
msgid "Now display it! Note that the imagery is aligned as we expect."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:167
msgid "And here is a 3D perspective!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:198
msgid "We could also display the entire region by extracting the surrounding region and plotting the texture mapped local topography and the outside area"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:242
msgid "**Total running time of the script:** ( 0 minutes  21.900 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:257
msgid ":download:`Download Python source code: topo-map.py <topo-map.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:263
msgid ":download:`Download Jupyter notebook: topo-map.ipynb <topo-map.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_02-plot_volume.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:22
msgid "Volume Rendering"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:24
msgid "Volume render uniform mesh types like :class:`pyvista.UniformGrid` or 3D NumPy arrays."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:27
msgid "This also explores how to extract a volume of interest (VOI) from a :class:`pyvista.UniformGrid` using the :func:`pyvista.UniformGridFilters.extract_subset` filter."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:49
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>10225800</td></tr>\n"
"<tr><td>N Points</td><td>10368384</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.497e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.786e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 2.000e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>208, 248, 201</td></tr>\n"
"<tr><td>Spacing</td><td>7.230e-01, 7.230e-01, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>SLCImage</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.740e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:79
msgid "Simple Volume Render"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:117
msgid "Opacity Mappings"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:119
msgid "Or use the :func:`pyvista.BasePlotter.add_volume` method like below. Note that here we use a non-default opacity mapping to a sigmoid:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:155
msgid "You can also use a custom opacity mapping"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:191
msgid "We can also use a shading technique when volume rendering with the ``shade`` option"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:232
msgid "Cool Volume Examples"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:234
msgid "Here are a few more cool volume rendering examples"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:341
msgid "Extracting a VOI"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:343
msgid "Use the :func:`pyvista.UniformGridFilters.extract_subset` filter to extract a volume of interest/subset volume to volume render. This is ideal when dealing with particularly large volumes and you want to volume render only a specific region."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:362
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>11003760</td></tr>\n"
"<tr><td>N Points</td><td>11156040</td></tr>\n"
"<tr><td>X Bounds</td><td>4.130e+05, 6.920e+05</td></tr>\n"
"<tr><td>Y Bounds</td><td>3.864e+06, 4.096e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>-5.479e+04, 5.302e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>280, 233, 171</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+03, 1.000e+03, 3.535e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>data</b></td><td>Points</td><td>float32</td><td>1</td><td>9.782e-15</td><td>1.000e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:425
msgid "Woah, that's a big volume! We probably don't want to volume render the whole thing. So let's extract a region of interest under the volcano."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:428
msgid "The region we will extract will be between nodes 175 and 200 on the x-axis, between nodes 105 and 132 on the y-axis, and between nodes 98 and 170 on the z-axis."
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:467
msgid "Ah, much better. Let's now volume render that region of interest!"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:505
msgid "**Total running time of the script:** ( 0 minutes  42.492 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:520
msgid ":download:`Download Python source code: volume.py <volume.py>`"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:526
msgid ":download:`Download Jupyter notebook: volume.ipynb <volume.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_box-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:22
msgid "Box Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:24
msgid "The box widget can be enabled and disabled by the :func:`pyvista.WidgetHelper.add_box_widget` and :func:`pyvista.WidgetHelper.clear_box_widgets` methods respectively. When enabling the box widget, you must provide a custom callback function otherwise the box would appear and do nothing - the callback functions are what allow us to leverage the widget to perform a task like clipping/cropping."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:31
msgid "Considering that using a box to clip/crop a mesh is one of the most common use cases, we have included a helper method that will allow you to add a mesh to a scene with a box widget that controls its extent, the :func:`pyvista.WidgetHelper.add_mesh_clip_box` method."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:88
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:70
msgid "After interacting with the scene, the clipped mesh is available as:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:120
msgid "**Total running time of the script:** ( 0 minutes  11.991 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:135
msgid ":download:`Download Python source code: box-widget.py <box-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/box-widget.rst:141
msgid ":download:`Download Jupyter notebook: box-widget.ipynb <box-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_checkbox-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:22
msgid "Checkbox Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:24
msgid "Use a checkbox to turn on/off the visibility of meshes in a scene."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:26
msgid "See :func:`pyvista.WidgetHelper.add_checkbox_button_widget` for more details."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:46
msgid "Single Checkbox"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:88
msgid "Multiple Checkboxes"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:90
msgid "In this example, we will add many meshes to a scene with unique colors and create corresponding checkboxes for those meshes of the same color to toggle their visibility in the scene."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:169
msgid "**Total running time of the script:** ( 0 minutes  0.605 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:184
msgid ":download:`Download Python source code: checkbox-widget.py <checkbox-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/checkbox-widget.rst:190
msgid ":download:`Download Jupyter notebook: checkbox-widget.ipynb <checkbox-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_line-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:22
msgid "Line Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:24
msgid "The line widget can be enabled and disabled by the :func:`pyvista.WidgetHelper.add_line_widget` and :func:`pyvista.WidgetHelper.clear_line_widgets` methods respectively. Unfortunately, PyVista does not have any helper methods to utilize this widget, so it is necessary to pass a custom callback method."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:30
msgid "One particularly fun example is to use the line widget to create a source for the :func:`pyvista.DataSetFilters.streamlines` filter. Again note the use of the ``name`` argument in ``add_mesh``."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:101
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:102
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:173
#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:230
#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:118
#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:170
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:105
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:166
#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:279
msgid "And here is a screen capture of a user interacting with this"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:108
msgid "**Total running time of the script:** ( 0 minutes  0.988 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:123
msgid ":download:`Download Python source code: line-widget.py <line-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/line-widget.rst:129
msgid ":download:`Download Jupyter notebook: line-widget.ipynb <line-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_multi-slider-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:22
msgid "Multiple Slider Widgets"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:24
msgid "Use a class based callback to track multiple slider widgets for updating a single mesh."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:27
msgid "In this example we simply change a few parameters for the :func:`pyvista.Sphere` method, but this could easily be applied to any mesh-generating/altering code."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:137
msgid "**Total running time of the script:** ( 0 minutes  0.355 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:152
msgid ":download:`Download Python source code: multi-slider-widget.py <multi-slider-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/multi-slider-widget.rst:158
msgid ":download:`Download Jupyter notebook: multi-slider-widget.ipynb <multi-slider-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_plane-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:22
msgid "Plane Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:24
msgid "The plane widget can be enabled and disabled by the :func:`pyvista.WidgetHelper.add_plane_widget` and :func:`pyvista.WidgetHelper.clear_plane_widgets` methods respectively. As with all widgets, you must provide a custom callback method to utilize that plane. Considering that planes are most commonly used for clipping and slicing meshes, we have included two helper methods for doing those tasks!"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:31
msgid "Let's use a plane to clip a mesh:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:108
msgid "Or you could slice a mesh using the plane widget:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:141
msgid "After interacting with the scene, the slice is available as:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:179
msgid "Or you could leverage the plane widget for some custom task like glyphing a vector field along that plane. Note that we have to pass a ``name`` when calling ``add_mesh`` to ensure that there is only one set of glyphs plotted at a time."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:237
msgid "**Total running time of the script:** ( 0 minutes  5.407 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:252
msgid ":download:`Download Python source code: plane-widget.py <plane-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/plane-widget.rst:258
msgid ":download:`Download Jupyter notebook: plane-widget.ipynb <plane-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:8
msgid "**00:23.659** total execution time for **examples_03-widgets** files:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_03-widgets_box-widget.py` (``box-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:11
msgid "00:11.991"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_03-widgets_plane-widget.py` (``plane-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:13
msgid "00:05.407"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_03-widgets_slider-bar-widget.py` (``slider-bar-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:15
msgid "00:02.498"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_03-widgets_sphere-widget.py` (``sphere-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:17
msgid "00:01.244"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_03-widgets_line-widget.py` (``line-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:19
msgid "00:00.988"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_03-widgets_checkbox-widget.py` (``checkbox-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:21
msgid "00:00.605"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_examples_03-widgets_spline-widget.py` (``spline-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:23
msgid "00:00.572"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_examples_03-widgets_multi-slider-widget.py` (``multi-slider-widget.py``)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sg_execution_times.rst:25
msgid "00:00.355"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_slider-bar-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:22
msgid "Slider Bar Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:24
msgid "The slider widget can be enabled and disabled by the :func:`pyvista.WidgetHelper.add_slider_widget` and :func:`pyvista.WidgetHelper.clear_slider_widgets` methods respectively. This is one of the most versatile widgets as it can control a value that can be used for just about anything."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:45
msgid "One helper method we've added is the :func:`pyvista.WidgetHelper.add_mesh_threshold` method which leverages the slider widget to control a thresholding value."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:86
msgid "After interacting with the scene, the threshold mesh is available as:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:125
msgid "Custom Callback"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:127
msgid "Or you could leverage a custom callback function that takes a single value from the slider as its argument to do something like control the resolution of a mesh. Again note the use of the ``name`` argument in ``add_mesh``:"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:177
msgid "**Total running time of the script:** ( 0 minutes  2.498 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:192
msgid ":download:`Download Python source code: slider-bar-widget.py <slider-bar-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/slider-bar-widget.rst:198
msgid ":download:`Download Jupyter notebook: slider-bar-widget.ipynb <slider-bar-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_sphere-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:22
msgid "Sphere Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:24
msgid "The sphere widget can be enabled and disabled by the :func:`pyvista.WidgetHelper.add_sphere_widget` and :func:`pyvista.WidgetHelper.clear_sphere_widgets` methods respectively. This is a very versatile widget as it can control vertex location that can be used to control or update the location of just about anything."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:30
msgid "We don't have any convenient helper methods that utilize this widget out of the box, but we have added a lot of ways to use this widget so that you can easily add several widgets to a scene."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:34
msgid "Let's look at a few use cases that all update a surface mesh."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:52
msgid "Example A"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:54
msgid "Use a single sphere widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:112
msgid "Example B"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:114
msgid "Use several sphere widgets at once"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:173
msgid "Example C"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:175
msgid "This one is the coolest - use four sphere widgets to update perturbations on a surface and interpolate between them with some boundary conditions"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:286
msgid "**Total running time of the script:** ( 0 minutes  1.244 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:301
msgid ":download:`Download Python source code: sphere-widget.py <sphere-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/sphere-widget.rst:307
msgid ":download:`Download Jupyter notebook: sphere-widget.ipynb <sphere-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_03-widgets_spline-widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:22
msgid "Spline Widget"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:25
msgid "A spline widget can be enabled and disabled by the :func:`pyvista.WidgetHelper.add_spline_widget` and :func:`pyvista.WidgetHelper.clear_spline_widgets` methods respectively. This widget allows users to interactively create a poly line (spline) through a scene and use that spline."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:31
msgid "A common task with splines is to slice a volumetric dataset using an irregular path. To do this, we have added a convenient helper method which leverages the :func:`pyvista.DataSetFilters.slice_along_line` filter named :func:`pyvista.WidgetHelper.add_mesh_slice_spline`."
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:95
msgid "**Total running time of the script:** ( 0 minutes  0.572 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:110
msgid ":download:`Download Python source code: spline-widget.py <spline-widget.py>`"
msgstr ""

#: ../../pyvista/docs/examples/03-widgets/spline-widget.rst:116
msgid ":download:`Download Jupyter notebook: spline-widget.ipynb <spline-widget.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_99-advanced_antarctica-compare.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:22
msgid "Compare Field Across Mesh Regions"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:24
msgid "Here is some velocity data from a glacier modelling simulation that is compared across nodes in the simulation. We have simplified the mesh to have the simulation node value already on the mesh."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:28
msgid "This was originally posted to `pyvista/pyvista-support#83 <https://github.com/pyvista/pyvista-support/issues/83>`_."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:30
msgid "The modeling results are courtesy of `Urruty Benoit <https://github.com/BenoitURRUTY>`_ and  are from the `Elmer/Ice <http://elmerice.elmerfem.org>`_ simulation software."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:55
msgid "<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1106948</td></tr>\n"
"<tr><td>N Points</td><td>557470</td></tr>\n"
"<tr><td>X Bounds</td><td>-2.506e+06, 2.743e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>-2.143e+06, 2.240e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>3</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>ssavelocity</b></td><td>Points</td><td>float64</td><td>3</td><td>-4.341e+03</td><td>9.677e+03</td></tr>\n"
"<tr><td>node_value</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>2.300e+01</td></tr>\n"
"<tr><td>magnitude</td><td>Points</td><td>float64</td><td>1</td><td>6.649e-03</td><td>1.013e+04</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:84
msgid "Here is a helper to extract regions of the mesh based on the simulation node."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:215
msgid "plot vectors without mesh"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:254
msgid "Compare directions. Normalize them so we can get a reasonable direction comparison."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:302
msgid "flow_a that agrees with the mean flow path of flow_b"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:370
msgid "**Total running time of the script:** ( 0 minutes  10.976 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:385
msgid ":download:`Download Python source code: antarctica-compare.py <antarctica-compare.py>`"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/antarctica-compare.rst:391
msgid ":download:`Download Jupyter notebook: antarctica-compare.ipynb <antarctica-compare.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_99-advanced_ray-trace.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:84
msgid "**Total running time of the script:** ( 0 minutes  0.345 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:99
msgid ":download:`Download Python source code: ray-trace.py <ray-trace.py>`"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/ray-trace.rst:105
msgid ":download:`Download Jupyter notebook: ray-trace.ipynb <ray-trace.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:8
msgid "**00:27.052** total execution time for **examples_99-advanced** files:"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_99-advanced_warp-by-vector-eigenmodes.py` (``warp-by-vector-eigenmodes.py``)"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:11
msgid "00:15.731"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_99-advanced_antarctica-compare.py` (``antarctica-compare.py``)"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:13
msgid "00:10.976"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace.py` (``ray-trace.py``)"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/sg_execution_times.rst:15
msgid "00:00.345"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:13
msgid "Click :ref:`here <sphx_glr_download_examples_99-advanced_warp-by-vector-eigenmodes.py>` to download the full example code"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:22
msgid "Displaying eigenmodes of vibration using ``warp_by_vector``"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:24
msgid "This example applies the ``warp_by_vector`` filter to a cube whose eigenmodes have been computed using the Ritz method, as outlined in Visscher, William M., Albert Migliori, Thomas M. Bell, et Robert A. Reinert. « On the normal modes of free vibration of inhomogeneous and anisotropic elastic objects ». The Journal of the Acoustical Society of America 90, nᵒ 4 (october 1991): 2154‑62. https://doi.org/10.1121/1.401643."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:34
msgid "First, let's solve the eigenvalue problem for a vibrating cube. We use a crude approximation (by choosing a low max polynomial order) to get a fast computation."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:222
msgid "Now, let's display a mode on a mesh of the cube."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:291
msgid "Finally, let's make a gallery of the first 8 unique eigenmodes."
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:335
msgid "**Total running time of the script:** ( 0 minutes  15.731 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:350
msgid ":download:`Download Python source code: warp-by-vector-eigenmodes.py <warp-by-vector-eigenmodes.py>`"
msgstr ""

#: ../../pyvista/docs/examples/99-advanced/warp-by-vector-eigenmodes.rst:356
msgid ":download:`Download Jupyter notebook: warp-by-vector-eigenmodes.ipynb <warp-by-vector-eigenmodes.ipynb>`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:10
msgid "Quick Examples"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:12
msgid "Here is a gallery of all the quick examples demonstrating what PyVista can do!"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:14
msgid "All of these examples are live and available on MyBinder!"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:21
#: ../../pyvista/docs/examples/index.rst:376
#: ../../pyvista/docs/examples/index.rst:1009
#: ../../pyvista/docs/examples/index.rst:1645
#: ../../pyvista/docs/examples/index.rst:1837
#: ../../pyvista/docs/examples/index.rst:1915
msgid "<div class=\"sphx-glr-clear\"></div>"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:30
msgid "Mesh Creation"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:32
msgid "These examples demo how to read various file types into PyVista mesh objects, create meshes from NumPy arrays, and how to create primitive geometric objects like spheres, arrows, cubes, ellipsoids and more! Once a mesh is loaded, it is ready for plotting with just a few lines of code - explore these examples to get started with using PyVista for your data."
msgstr ""

#: ../../pyvista/docs/examples/index.rst:41
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The &quot;Hello, world!&quot; of VTK \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:50
msgid ":ref:`sphx_glr_examples_00-load_create-geometric-objects.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:52
#: ../../pyvista/docs/examples/index.rst:73
#: ../../pyvista/docs/examples/index.rst:94
#: ../../pyvista/docs/examples/index.rst:115
#: ../../pyvista/docs/examples/index.rst:136
#: ../../pyvista/docs/examples/index.rst:157
#: ../../pyvista/docs/examples/index.rst:178
#: ../../pyvista/docs/examples/index.rst:199
#: ../../pyvista/docs/examples/index.rst:220
#: ../../pyvista/docs/examples/index.rst:241
#: ../../pyvista/docs/examples/index.rst:262
#: ../../pyvista/docs/examples/index.rst:283
#: ../../pyvista/docs/examples/index.rst:304
#: ../../pyvista/docs/examples/index.rst:325
#: ../../pyvista/docs/examples/index.rst:346
#: ../../pyvista/docs/examples/index.rst:367
#: ../../pyvista/docs/examples/index.rst:412
#: ../../pyvista/docs/examples/index.rst:433
#: ../../pyvista/docs/examples/index.rst:454
#: ../../pyvista/docs/examples/index.rst:475
#: ../../pyvista/docs/examples/index.rst:496
#: ../../pyvista/docs/examples/index.rst:517
#: ../../pyvista/docs/examples/index.rst:538
#: ../../pyvista/docs/examples/index.rst:559
#: ../../pyvista/docs/examples/index.rst:580
#: ../../pyvista/docs/examples/index.rst:601
#: ../../pyvista/docs/examples/index.rst:622
#: ../../pyvista/docs/examples/index.rst:643
#: ../../pyvista/docs/examples/index.rst:664
#: ../../pyvista/docs/examples/index.rst:685
#: ../../pyvista/docs/examples/index.rst:706
#: ../../pyvista/docs/examples/index.rst:727
#: ../../pyvista/docs/examples/index.rst:748
#: ../../pyvista/docs/examples/index.rst:769
#: ../../pyvista/docs/examples/index.rst:790
#: ../../pyvista/docs/examples/index.rst:811
#: ../../pyvista/docs/examples/index.rst:832
#: ../../pyvista/docs/examples/index.rst:853
#: ../../pyvista/docs/examples/index.rst:874
#: ../../pyvista/docs/examples/index.rst:895
#: ../../pyvista/docs/examples/index.rst:916
#: ../../pyvista/docs/examples/index.rst:937
#: ../../pyvista/docs/examples/index.rst:958
#: ../../pyvista/docs/examples/index.rst:979
#: ../../pyvista/docs/examples/index.rst:1000
#: ../../pyvista/docs/examples/index.rst:1048
#: ../../pyvista/docs/examples/index.rst:1069
#: ../../pyvista/docs/examples/index.rst:1090
#: ../../pyvista/docs/examples/index.rst:1111
#: ../../pyvista/docs/examples/index.rst:1132
#: ../../pyvista/docs/examples/index.rst:1153
#: ../../pyvista/docs/examples/index.rst:1174
#: ../../pyvista/docs/examples/index.rst:1195
#: ../../pyvista/docs/examples/index.rst:1216
#: ../../pyvista/docs/examples/index.rst:1237
#: ../../pyvista/docs/examples/index.rst:1258
#: ../../pyvista/docs/examples/index.rst:1279
#: ../../pyvista/docs/examples/index.rst:1300
#: ../../pyvista/docs/examples/index.rst:1321
#: ../../pyvista/docs/examples/index.rst:1342
#: ../../pyvista/docs/examples/index.rst:1363
#: ../../pyvista/docs/examples/index.rst:1384
#: ../../pyvista/docs/examples/index.rst:1405
#: ../../pyvista/docs/examples/index.rst:1426
#: ../../pyvista/docs/examples/index.rst:1447
#: ../../pyvista/docs/examples/index.rst:1468
#: ../../pyvista/docs/examples/index.rst:1489
#: ../../pyvista/docs/examples/index.rst:1510
#: ../../pyvista/docs/examples/index.rst:1531
#: ../../pyvista/docs/examples/index.rst:1552
#: ../../pyvista/docs/examples/index.rst:1573
#: ../../pyvista/docs/examples/index.rst:1594
#: ../../pyvista/docs/examples/index.rst:1615
#: ../../pyvista/docs/examples/index.rst:1636
#: ../../pyvista/docs/examples/index.rst:1681
#: ../../pyvista/docs/examples/index.rst:1702
#: ../../pyvista/docs/examples/index.rst:1723
#: ../../pyvista/docs/examples/index.rst:1744
#: ../../pyvista/docs/examples/index.rst:1765
#: ../../pyvista/docs/examples/index.rst:1786
#: ../../pyvista/docs/examples/index.rst:1807
#: ../../pyvista/docs/examples/index.rst:1828
#: ../../pyvista/docs/examples/index.rst:1864
#: ../../pyvista/docs/examples/index.rst:1885
#: ../../pyvista/docs/examples/index.rst:1906
msgid "</div>"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:62
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Creating parametric objects \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:71
msgid ":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:83
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a pyvista.PolyData object from a point cloud of vertices and scalar arrays for those poi...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:92
msgid ":ref:`sphx_glr_examples_00-load_create-point-cloud.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:104
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Creating a PolyData (triangulated surface) object from NumPy arrays of the vertices and faces.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:113
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:125
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a spline/polyline from a numpy array of XYZ vertices \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:134
msgid ":ref:`sphx_glr_examples_00-load_create-spline.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:146
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a StructuredGrid surface from NumPy arrays \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:155
msgid ":ref:`sphx_glr_examples_00-load_create-structured-surface.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:167
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Drape a surface (2D array) from a line in 3D space.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:176
msgid ":ref:`sphx_glr_examples_00-load_create-surface-draped.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:188
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a surface from a set of points through a Delaunay triangulation. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:197
msgid ":ref:`sphx_glr_examples_00-load_create-tri-surface.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:209
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a simple uniform grid from a 3D NumPy array of values.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:218
msgid ":ref:`sphx_glr_examples_00-load_create-uniform-grid.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:230
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an irregular, unstructured grid from NumPy arrays. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:239
msgid ":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:251
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista leverages `meshio`_ to read many mesh formats not natively supported by VTK including t...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:260
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:272
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Read a dataset from a known file type.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:281
msgid ":ref:`sphx_glr_examples_00-load_read-file.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:293
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Read and plot image files (JPEG, TIFF, PNG, etc).\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:302
msgid ":ref:`sphx_glr_examples_00-load_read-image.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:314
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The VTK library supports parallel file formats. Reading meshes broken up into several files is ...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:323
msgid ":ref:`sphx_glr_examples_00-load_read-parallel.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:335
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a topographic surface to create a 3D terrain-following mesh.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:344
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:356
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"- numpy arrays - trimesh.Trimesh meshes - VTK objects\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:365
msgid ":ref:`sphx_glr_examples_00-load_wrap-trimesh.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:385
msgid "Filtering"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:387
msgid "These examples show case various mesh analysis and filtering routines present in the :ref:`filters_ref` module. Explore these demos to perform tasks such as:"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:390
msgid "Slicing and cutting meshes"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:391
msgid "Computing mesh properties like volume, area, and surface normals"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:392
msgid "Mesh decimation"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:393
msgid "Extract regions of one mesh using another mesh's surface"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:394
msgid "Ray tracing through surface meshes"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:395
msgid "Resampling and interpolating scalar/vector values across meshes"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:396
msgid "Integrating a vector field to generate streamlines"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:397
msgid "Smoothing surfaces"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:401
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perform boolean operations with closed surfaces (intersect, cut, etc.).\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:410
msgid ":ref:`sphx_glr_examples_01-filter_boolean-operations.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:422
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract the coordinates of the centers of all cells/faces in a mesh.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:431
msgid ":ref:`sphx_glr_examples_01-filter_cell-centers.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:443
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip any PyVista dataset by a pyvista.PolyData surface mesh using the pyvista.DataSet.Filters.c...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:452
msgid ":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:464
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip/cut any dataset using using planes or boxes. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:473
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:485
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Compute normals on a surface. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:494
msgid ":ref:`sphx_glr_examples_01-filter_compute-normals.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:506
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Calculate mass properties such as the volume or area of datasets \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:515
msgid ":ref:`sphx_glr_examples_01-filter_compute-volume.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:527
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use the connectivity filter to remove noisy isosurfaces.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:536
msgid ":ref:`sphx_glr_examples_01-filter_connectivity.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:548
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate iso-lines or -surfaces for the scalars of a surface or volume.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:557
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:569
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Decimate a mesh\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:578
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:590
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Compute the average thickness between two surfaces.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:599
msgid ":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:611
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract the cells in a mesh that exist inside or outside a closed surface of another mesh\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:620
msgid ":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:632
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extracts edges from a surface. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:641
msgid ":ref:`sphx_glr_examples_01-filter_extract-edges.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:653
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perform a Gaussian convolution on a uniformly gridded data set.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:662
msgid ":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:674
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Calculates the geodesic path between two vertices using Dijkstra&#x27;s algorithm \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:683
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:695
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use vectors in a dataset to plot and orient glyphs/geometric objects. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:704
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:716
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use parameters in a dataset to plot and orient glyphs/geometric objects. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:725
msgid ":ref:`sphx_glr_examples_01-filter_glyphs_table.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:737
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Estimate the gradient of a scalar or vector field in a data set.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:746
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:758
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Interpolate one mesh&#x27;s point/cell arrays onto another mesh&#x27;s nodes using a Gaussian Kernel. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:767
msgid ":ref:`sphx_glr_examples_01-filter_interpolate.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:779
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Leverage a powerful VTK algorithm for computing mesh quality.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:788
msgid ":ref:`sphx_glr_examples_01-filter_mesh-quality.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:800
#: ../../pyvista/docs/examples/index.rst:1874
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Single line segment ray tracing for PolyData objects. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:809
msgid ":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:821
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"pyvista.PolyData surfaces and pointsets can easily be projected to a plane defined by a normal ...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:830
msgid ":ref:`sphx_glr_examples_01-filter_project-plane.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:842
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Resample one mesh&#x27;s point/cell arrays onto another mesh&#x27;s nodes. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:851
msgid ":ref:`sphx_glr_examples_01-filter_resample.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:863
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract thin planar slices from a volume \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:872
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:884
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Integrate a vector field to generate streamlines. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:893
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:905
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Increase the number of triangles in a single, connected triangular mesh.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:914
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:926
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Smoothing rough edges of a surface mesh \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:935
msgid ":ref:`sphx_glr_examples_01-filter_surface-smoothing.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:947
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Using common filters like thresholding and clipping \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:956
msgid ":ref:`sphx_glr_examples_01-filter_using-filters.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:968
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a voxel model (like legos) of a closed surface or volumetric mesh.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:977
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:989
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example applies the warp_by_vector filter to a sphere mesh that has 3D displacement vector...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:998
msgid ":ref:`sphx_glr_examples_01-filter_warp-by-vector.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1018
msgid "Plotting"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1020
msgid "These examples show case many of the possibilities for altering how you display spatial data. Explore these examples to learn how to leverage our powerful 3D plotting routines to perform tasks like:"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1024
msgid "Color mapping scalar values with ``matplotlib`` colormaps"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1025
msgid "Creating animations as GIFs or movie files"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1026
msgid "Showing the edges and nodes of different mesh types"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1027
msgid "Use sophisticated lighting techniques like smooth shading or Eye Dome Lighting"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1028
msgid "Glyph a vector or scalar field on a mesh (place/orient a mesh on anther mesh's nodes and scale/orient based on data values)"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1029
msgid "Label points in 3D space along side your meshes"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1030
msgid "Creating side-by-side comparisons"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1031
msgid "Making a dataset transparent or using a scalar value to map opacity"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1032
msgid "Adding textures/images draped over a mesh (texture mapping)"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1033
msgid "Rendering a depth image"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1037
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Add a background image with add_background_image\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1046
msgid ":ref:`sphx_glr_examples_02-plot_background_image.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1058
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates how to remove elements from a scene.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1067
msgid ":ref:`sphx_glr_examples_02-plot_clear.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1079
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a Matplotlib, Colorcet, cmocean, or custom colormap when plotting scalar values. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1088
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1100
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Depth peeling is a technique to correctly render translucent geometry. This is not enabled by d...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1109
msgid ":ref:`sphx_glr_examples_02-plot_depth-peeling.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1121
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Show the edges of all geometries within a mesh \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1130
msgid ":ref:`sphx_glr_examples_02-plot_edges.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1142
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique designed to impr...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1151
msgid ":ref:`sphx_glr_examples_02-plot_edl.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1163
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Add a floor/wall at the boundary of the rendering scene. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1172
msgid ":ref:`sphx_glr_examples_02-plot_floors.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1184
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Specify specific cells to hide when plotting.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1193
msgid ":ref:`sphx_glr_examples_02-plot_ghost-cells.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1205
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate a moving gif from an active plotter \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1214
msgid ":ref:`sphx_glr_examples_02-plot_gif.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1226
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a depth image as viewed from a camera overlooking the &quot;hills&quot; example mesh. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1235
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1247
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The add_mesh function has an interpolate_before_map argument - this affects the way scalar data...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1256
msgid ":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1268
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Make an animation of an isovalue through a volumetric dataset \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1277
msgid ":ref:`sphx_glr_examples_02-plot_isovalue.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1289
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use string arrays in a point set to label points \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1298
msgid ":ref:`sphx_glr_examples_02-plot_labels.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1310
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Control aspects of the rendered mesh&#x27;s lighting such as Ambient, Diffuse, and Specular. These o...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1319
msgid ":ref:`sphx_glr_examples_02-plot_lighting.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1331
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Linked Views in Subplots\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1340
msgid ":ref:`sphx_glr_examples_02-plot_linked.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1352
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an animated MP4 movie of a rendering scene \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1361
msgid ":ref:`sphx_glr_examples_02-plot_movie.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1373
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Subplotting: having multiple scenes in a single window \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1382
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1394
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a mesh&#x27;s scalar array with an opacity transfer function or opacity mapping based on a scal...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1403
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1415
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Orbit around a scene.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1424
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1436
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"View three orthogonal slices from a mesh.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1445
msgid ":ref:`sphx_glr_examples_02-plot_ortho-slices.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1457
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot the values of a dataset over a line through that dataset \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1466
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-line.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1478
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Walk through of all the different capabilities of scalar bars and how a user can customize scal...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1487
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1499
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Saving Screenshots\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1508
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1520
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Comparison of default, flat shading vs. smooth shading. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1529
msgid ":ref:`sphx_glr_examples_02-plot_shading.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1541
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate and visualize meshes from data in longitude-latitude coordinates. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1550
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1562
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a mesh with an image projected onto it as a texture. \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1571
msgid ":ref:`sphx_glr_examples_02-plot_texture.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1583
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista has a few coloring themes for you to choose! \">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1592
msgid ":ref:`sphx_glr_examples_02-plot_themes.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1604
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This is very similar to the ref_texture_example example except it is focused on plotting aerial...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1613
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1625
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Volume render uniform mesh types like pyvista.UniformGrid or 3D NumPy arrays.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1634
msgid ":ref:`sphx_glr_examples_02-plot_volume.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1656
msgid "Widgets"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1658
msgid "PyVista has several widgets that can be added to the rendering scene to control filters like clipping, slicing, and thresholding - specifically there are widgets to control the positions of boxes, planes, and lines or slider bars which can all be highly customized through the use of custom callback functions."
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1664
msgid "Here we'll take a look at the various widgets, some helper methods that leverage those widgets to do common tasks, and demonstrate how to leverage the widgets for user defined tasks and processing routines."
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1670
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The box widget can be enabled and disabled by the pyvista.WidgetHelper.add_box_widget and pyvis...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1679
msgid ":ref:`sphx_glr_examples_03-widgets_box-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1691
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a checkbox to turn on/off the visibility of meshes in a scene.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1700
msgid ":ref:`sphx_glr_examples_03-widgets_checkbox-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1712
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The line widget can be enabled and disabled by the pyvista.WidgetHelper.add_line_widget and pyv...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1721
msgid ":ref:`sphx_glr_examples_03-widgets_line-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1733
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a class based callback to track multiple slider widgets for updating a single mesh.\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1742
msgid ":ref:`sphx_glr_examples_03-widgets_multi-slider-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1754
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The plane widget can be enabled and disabled by the pyvista.WidgetHelper.add_plane_widget and p...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1763
msgid ":ref:`sphx_glr_examples_03-widgets_plane-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1775
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The slider widget can be enabled and disabled by the pyvista.WidgetHelper.add_slider_widget and...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1784
msgid ":ref:`sphx_glr_examples_03-widgets_slider-bar-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1796
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The sphere widget can be enabled and disabled by the pyvista.WidgetHelper.add_sphere_widget and...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1805
msgid ":ref:`sphx_glr_examples_03-widgets_sphere-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1817
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\" A spline widget can be enabled and disabled by the pyvista.WidgetHelper.add_spline_widget and ...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1826
msgid ":ref:`sphx_glr_examples_03-widgets_spline-widget.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1846
msgid "Advanced"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1848
msgid "Include here are few longer, more advanced examples from our users and developers."
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1853
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Here is some velocity data from a glacier modelling simulation that is compared across nodes in...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1862
msgid ":ref:`sphx_glr_examples_99-advanced_antarctica-compare.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1883
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace.py`"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1895
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example applies the warp_by_vector filter to a cube whose eigenmodes have been computed us...\">"
msgstr ""

#: ../../pyvista/docs/examples/index.rst:1904
msgid ":ref:`sphx_glr_examples_99-advanced_warp-by-vector-eigenmodes.py`"
msgstr ""
