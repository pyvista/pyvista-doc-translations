# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2020, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.26.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-21 00:58+0000\n"
"PO-Revision-Date: 2020-08-05 16:06+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/getfem-doc/teams/112279/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-geometric-"
"objects.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-geometric-objects.py>`"
"     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:15
msgid "Geometric Objects"
msgstr "ジオメトリオブジェクト"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:17
msgid "The \"Hello, world!\" of VTK"
msgstr "VTKの \"Hello, world!\""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:31
msgid ""
"This runs through several of the available geomoetric objects available in "
"VTK which PyVista provides simple convenience methods for generating."
msgstr ""
"これは、VTKで利用可能ないくつかのジオメトリックオブジェクトを介して実行され、PyVistaは生成するための簡単で便利なメソッドを提供します。"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:34
msgid "Let's run through creating a few geometric objects!"
msgstr "ジオメトリオブジェクトをいくつか作成してみましょう!"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:57
msgid "Now let's plot them all in one window"
msgstr "ここで、すべてを1つのウィンドウにプロットします。"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:97
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:56
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:89
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:130
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:161
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:193
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:224
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:255
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:286
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:317
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:348
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:379
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:410
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:441
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:472
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:503
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:534
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:565
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:597
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:628
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:659
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:690
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:721
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:763
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:799
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:67
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:124
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:152
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:208
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:251
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:305
#: ../../pyvista/docs/examples/00-load/create-poly.rst:69
#: ../../pyvista/docs/examples/00-load/create-spline.rst:59
#: ../../pyvista/docs/examples/00-load/create-spline.rst:134
#: ../../pyvista/docs/examples/00-load/create-spline.rst:176
#: ../../pyvista/docs/examples/00-load/create-spline.rst:224
#: ../../pyvista/docs/examples/00-load/create-spline.rst:258
#: ../../pyvista/docs/examples/00-load/create-spline.rst:291
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:79
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:107
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:134
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:196
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:277
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:317
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:349
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:59
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:93
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:125
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:197
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:228
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:272
#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:75
#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:126
#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:102
#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:190
#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:223
#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:50
#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:109
#: ../../pyvista/docs/examples/00-load/read-file.rst:57
#: ../../pyvista/docs/examples/00-load/read-file.rst:109
#: ../../pyvista/docs/examples/00-load/read-file.rst:134
#: ../../pyvista/docs/examples/00-load/read-file.rst:164
#: ../../pyvista/docs/examples/00-load/read-file.rst:204
#: ../../pyvista/docs/examples/00-load/read-file.rst:234
#: ../../pyvista/docs/examples/00-load/read-file.rst:264
#: ../../pyvista/docs/examples/00-load/read-file.rst:293
#: ../../pyvista/docs/examples/00-load/read-image.rst:74
#: ../../pyvista/docs/examples/00-load/read-image.rst:101
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:94
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:114
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:185
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:210
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:104
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:169
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:249
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:64
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:102
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:143
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:184
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:215
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:253
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:62
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:103
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:132
#: ../../pyvista/docs/examples/01-filter/clipping.rst:63
#: ../../pyvista/docs/examples/01-filter/clipping.rst:105
#: ../../pyvista/docs/examples/01-filter/clipping.rst:147
#: ../../pyvista/docs/examples/01-filter/clipping.rst:184
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:70
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:113
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:147
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:186
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:224
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:54
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:96
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:140
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:113
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:157
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:197
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:242
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:270
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:345
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:391
#: ../../pyvista/docs/examples/01-filter/connectivity.rst:60
#: ../../pyvista/docs/examples/01-filter/connectivity.rst:100
#: ../../pyvista/docs/examples/01-filter/contouring.rst:64
#: ../../pyvista/docs/examples/01-filter/contouring.rst:104
#: ../../pyvista/docs/examples/01-filter/decimate.rst:44
#: ../../pyvista/docs/examples/01-filter/decimate.rst:71
#: ../../pyvista/docs/examples/01-filter/decimate.rst:98
#: ../../pyvista/docs/examples/01-filter/decimate.rst:127
#: ../../pyvista/docs/examples/01-filter/decimate.rst:171
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:74
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:131
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:159
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:194
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:220
#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:52
#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:139
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:71
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:110
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:153
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:187
#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:87
#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:137
#: ../../pyvista/docs/examples/01-filter/geodesic.rst:81
#: ../../pyvista/docs/examples/01-filter/geodesic.rst:105
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:70
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:115
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:147
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:190
#: ../../pyvista/docs/examples/01-filter/gradients.rst:83
#: ../../pyvista/docs/examples/01-filter/gradients.rst:130
#: ../../pyvista/docs/examples/01-filter/gradients.rst:227
#: ../../pyvista/docs/examples/01-filter/gradients.rst:255
#: ../../pyvista/docs/examples/01-filter/gradients.rst:294
#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:26
#: ../../pyvista/docs/examples/01-filter/project-plane.rst:40
#: ../../pyvista/docs/examples/01-filter/project-plane.rst:75
#: ../../pyvista/docs/examples/01-filter/resample.rst:70
#: ../../pyvista/docs/examples/01-filter/resample.rst:103
#: ../../pyvista/docs/examples/01-filter/resample.rst:143
#: ../../pyvista/docs/examples/01-filter/resample.rst:177
#: ../../pyvista/docs/examples/01-filter/slicing.rst:64
#: ../../pyvista/docs/examples/01-filter/slicing.rst:98
#: ../../pyvista/docs/examples/01-filter/slicing.rst:127
#: ../../pyvista/docs/examples/01-filter/slicing.rst:163
#: ../../pyvista/docs/examples/01-filter/slicing.rst:196
#: ../../pyvista/docs/examples/01-filter/slicing.rst:323
#: ../../pyvista/docs/examples/01-filter/slicing.rst:392
#: ../../pyvista/docs/examples/01-filter/slicing.rst:491
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:103
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:159
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:222
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:292
#: ../../pyvista/docs/examples/01-filter/subdivide.rst:111
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:61
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:96
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:128
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:159
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:97
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:152
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:212
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:75
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:109
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:176
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:246
#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:46
#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:84
#: ../../pyvista/docs/examples/02-plot/background_image.rst:54
#: ../../pyvista/docs/examples/02-plot/background_image.rst:103
#: ../../pyvista/docs/examples/02-plot/clear.rst:52
#: ../../pyvista/docs/examples/02-plot/clear.rst:86
#: ../../pyvista/docs/examples/02-plot/clear.rst:119
#: ../../pyvista/docs/examples/02-plot/cmap.rst:117
#: ../../pyvista/docs/examples/02-plot/cmap.rst:147
#: ../../pyvista/docs/examples/02-plot/cmap.rst:176
#: ../../pyvista/docs/examples/02-plot/cmap.rst:213
#: ../../pyvista/docs/examples/02-plot/cmap.rst:271
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:86
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:136
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:182
#: ../../pyvista/docs/examples/02-plot/edges.rst:51
#: ../../pyvista/docs/examples/02-plot/edl.rst:66
#: ../../pyvista/docs/examples/02-plot/edl.rst:110
#: ../../pyvista/docs/examples/02-plot/edl.rst:163
#: ../../pyvista/docs/examples/02-plot/edl.rst:198
#: ../../pyvista/docs/examples/02-plot/edl.rst:230
#: ../../pyvista/docs/examples/02-plot/floors.rst:26
#: ../../pyvista/docs/examples/02-plot/gif.rst:26
#: ../../pyvista/docs/examples/02-plot/image_depth.rst:43
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:85
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:133
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:183
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:228
#: ../../pyvista/docs/examples/02-plot/labels.rst:114
#: ../../pyvista/docs/examples/02-plot/labels.rst:178
#: ../../pyvista/docs/examples/02-plot/labels.rst:231
#: ../../pyvista/docs/examples/02-plot/lighting.rst:58
#: ../../pyvista/docs/examples/02-plot/lighting.rst:86
#: ../../pyvista/docs/examples/02-plot/lighting.rst:127
#: ../../pyvista/docs/examples/02-plot/lighting.rst:155
#: ../../pyvista/docs/examples/02-plot/lighting.rst:184
#: ../../pyvista/docs/examples/02-plot/lighting.rst:212
#: ../../pyvista/docs/examples/02-plot/movie.rst:68
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:78
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:118
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:175
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:267
#: ../../pyvista/docs/examples/02-plot/opacity.rst:62
#: ../../pyvista/docs/examples/02-plot/opacity.rst:110
#: ../../pyvista/docs/examples/02-plot/opacity.rst:138
#: ../../pyvista/docs/examples/02-plot/opacity.rst:216
#: ../../pyvista/docs/examples/02-plot/opacity.rst:276
#: ../../pyvista/docs/examples/02-plot/opacity.rst:312
#: ../../pyvista/docs/examples/02-plot/opacity.rst:358
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:64
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:129
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:64
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:127
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:170
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:203
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:240
#: ../../pyvista/docs/examples/02-plot/screenshot.rst:56
#: ../../pyvista/docs/examples/02-plot/shading.rst:52
#: ../../pyvista/docs/examples/02-plot/shading.rst:79
#: ../../pyvista/docs/examples/02-plot/spherical.rst:118
#: ../../pyvista/docs/examples/02-plot/spherical.rst:186
#: ../../pyvista/docs/examples/02-plot/spherical.rst:242
#: ../../pyvista/docs/examples/02-plot/texture.rst:62
#: ../../pyvista/docs/examples/02-plot/texture.rst:105
#: ../../pyvista/docs/examples/02-plot/texture.rst:142
#: ../../pyvista/docs/examples/02-plot/texture.rst:174
#: ../../pyvista/docs/examples/02-plot/texture.rst:212
#: ../../pyvista/docs/examples/02-plot/texture.rst:263
#: ../../pyvista/docs/examples/02-plot/texture.rst:297
#: ../../pyvista/docs/examples/02-plot/texture.rst:324
#: ../../pyvista/docs/examples/02-plot/texture.rst:403
#: ../../pyvista/docs/examples/02-plot/texture.rst:440
#: ../../pyvista/docs/examples/02-plot/texture.rst:490
#: ../../pyvista/docs/examples/02-plot/themes.rst:80
#: ../../pyvista/docs/examples/02-plot/themes.rst:118
#: ../../pyvista/docs/examples/02-plot/themes.rst:149
#: ../../pyvista/docs/examples/02-plot/themes.rst:181
#: ../../pyvista/docs/examples/02-plot/themes.rst:214
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:84
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:133
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:161
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:201
#: ../../pyvista/docs/examples/02-plot/volume.rst:91
#: ../../pyvista/docs/examples/02-plot/volume.rst:127
#: ../../pyvista/docs/examples/02-plot/volume.rst:160
#: ../../pyvista/docs/examples/02-plot/volume.rst:197
#: ../../pyvista/docs/examples/02-plot/volume.rst:234
#: ../../pyvista/docs/examples/02-plot/volume.rst:266
#: ../../pyvista/docs/examples/02-plot/volume.rst:301
#: ../../pyvista/docs/examples/02-plot/volume.rst:380
#: ../../pyvista/docs/examples/02-plot/volume.rst:419
#: ../../pyvista/docs/examples/02-plot/volume.rst:453
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:110
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:139
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:183
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:219
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:264
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:297
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:327
#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:191
#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:263
#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:303
msgid "Out:"
msgstr "出力:"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:111
msgid "**Total running time of the script:** ( 0 minutes  2.447 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:126
msgid ""
":download:`Download Python source code: create-geometric-objects.py <create-"
"geometric-objects.py>`"
msgstr ""
":download:`Python source code: create-geometric-objects.py <create-"
"geometric-objects.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:132
msgid ""
":download:`Download Jupyter notebook: create-geometric-objects.ipynb "
"<create-geometric-objects.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-geometric-objects.ipynb <create-"
"geometric-objects.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-geometric-objects.rst:139
#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:841
#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:347
#: ../../pyvista/docs/examples/00-load/create-poly.rst:111
#: ../../pyvista/docs/examples/00-load/create-spline.rst:333
#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:391
#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:314
#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:168
#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:264
#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:151
#: ../../pyvista/docs/examples/00-load/read-file.rst:335
#: ../../pyvista/docs/examples/00-load/read-image.rst:143
#: ../../pyvista/docs/examples/00-load/read-parallel.rst:252
#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:291
#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:295
#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:174
#: ../../pyvista/docs/examples/01-filter/clipping.rst:226
#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:266
#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:182
#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:433
#: ../../pyvista/docs/examples/01-filter/connectivity.rst:142
#: ../../pyvista/docs/examples/01-filter/contouring.rst:146
#: ../../pyvista/docs/examples/01-filter/decimate.rst:213
#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:262
#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:181
#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:229
#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:179
#: ../../pyvista/docs/examples/01-filter/geodesic.rst:145
#: ../../pyvista/docs/examples/01-filter/glyphs.rst:232
#: ../../pyvista/docs/examples/01-filter/gradients.rst:336
#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:103
#: ../../pyvista/docs/examples/01-filter/project-plane.rst:117
#: ../../pyvista/docs/examples/01-filter/resample.rst:219
#: ../../pyvista/docs/examples/01-filter/slicing.rst:533
#: ../../pyvista/docs/examples/01-filter/streamlines.rst:334
#: ../../pyvista/docs/examples/01-filter/subdivide.rst:153
#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:201
#: ../../pyvista/docs/examples/01-filter/using-filters.rst:254
#: ../../pyvista/docs/examples/01-filter/voxelize.rst:288
#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:126
#: ../../pyvista/docs/examples/02-plot/background_image.rst:145
#: ../../pyvista/docs/examples/02-plot/clear.rst:161
#: ../../pyvista/docs/examples/02-plot/cmap.rst:313
#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:224
#: ../../pyvista/docs/examples/02-plot/edges.rst:93
#: ../../pyvista/docs/examples/02-plot/edl.rst:272
#: ../../pyvista/docs/examples/02-plot/floors.rst:87
#: ../../pyvista/docs/examples/02-plot/gif.rst:118
#: ../../pyvista/docs/examples/02-plot/image_depth.rst:145
#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:281
#: ../../pyvista/docs/examples/02-plot/labels.rst:273
#: ../../pyvista/docs/examples/02-plot/lighting.rst:254
#: ../../pyvista/docs/examples/02-plot/linked.rst:100
#: ../../pyvista/docs/examples/02-plot/movie.rst:110
#: ../../pyvista/docs/examples/02-plot/multi-window.rst:309
#: ../../pyvista/docs/examples/02-plot/opacity.rst:400
#: ../../pyvista/docs/examples/02-plot/orbit.rst:155
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:195
#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:282
#: ../../pyvista/docs/examples/02-plot/screenshot.rst:117
#: ../../pyvista/docs/examples/02-plot/shading.rst:121
#: ../../pyvista/docs/examples/02-plot/spherical.rst:284
#: ../../pyvista/docs/examples/02-plot/texture.rst:532
#: ../../pyvista/docs/examples/02-plot/themes.rst:256
#: ../../pyvista/docs/examples/02-plot/topo-map.rst:243
#: ../../pyvista/docs/examples/02-plot/volume.rst:495
#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:369
#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:345
#: ../../pyvista/docs/examples/index.rst:1544
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr "`Sphinx-Galleryによるギャラリー <https://sphinx-gallery.github.io>`_"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-parametric-"
"geometric-objects.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-parametric-geometric-"
"objects.py>`     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:15
msgid "Parametric Geometric Objects"
msgstr "パラメトリックジオメトリオブジェクト"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:17
msgid "Creating parametric objects"
msgstr "パラメトリックオブジェクトを作成する"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:34
msgid "This example demonstrates how to plot parametric objects using pyvista"
msgstr "この例では、pyvistaを使用してパラメトリックオブジェクトをプロットする方法を示します。"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:37
msgid "Supertoroid"
msgstr "スーパートロイド"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:68
msgid "Parametric Ellipsoid"
msgstr "パラメトリック楕円体"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:101
msgid "Partial Parametric Ellipsoid"
msgstr "部分パラメトリック楕円体"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:142
msgid "Pseudosphere"
msgstr "Pseudosphere"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:173
msgid "Bohemian Dome"
msgstr "Bohemianドーム"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:205
msgid "Bour"
msgstr "Bour"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:236
msgid "Boy's Surface"
msgstr "Boyの表面"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:267
msgid "Catalan Minimal"
msgstr "Catalan最小"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:298
msgid "Conic Spiral"
msgstr "円錐スパイラル"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:329
msgid "Cross Cap"
msgstr "クロスキャップ"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:360
msgid "Dini"
msgstr "ディーニ"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:391
msgid "Enneper"
msgstr "Enneper"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:422
msgid "Figure-8 Klein"
msgstr "字形-8 Klein"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:453
msgid "Henneberg"
msgstr "Henneberg"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:484
msgid "Klein"
msgstr "Klein"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:515
msgid "Kuen"
msgstr "Kuen"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:546
msgid "Mobius"
msgstr "Mobius"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:577
msgid "Plucker Conoid"
msgstr "Plucker Conoid"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:609
msgid "Random Hills"
msgstr "ランダムな丘"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:640
msgid "Roman"
msgstr "ローマン"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:671
msgid "Super Ellipsoid"
msgstr "スーパー楕円体"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:702
msgid "Torus"
msgstr "トーラス"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:733
msgid "Circular Arc"
msgstr "円弧"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:775
msgid "Extruded Half Arc"
msgstr "押し出し半円弧"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:813
msgid "**Total running time of the script:** ( 0 minutes  23.264 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:828
msgid ""
":download:`Download Python source code: create-parametric-geometric-"
"objects.py <create-parametric-geometric-objects.py>`"
msgstr ""
":download:`Python source code: create-parametric-geometric-objects.py "
"<create-parametric-geometric-objects.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-parametric-geometric-objects.rst:834
msgid ""
":download:`Download Jupyter notebook: create-parametric-geometric-"
"objects.ipynb <create-parametric-geometric-objects.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-parametric-geometric-objects.ipynb "
"<create-parametric-geometric-objects.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-point-cloud.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-point-cloud.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:15
msgid "Create Point Cloud"
msgstr "点群を作成"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:17
msgid ""
"Create a :class:`pyvista.PolyData` object from a point cloud of vertices and"
" scalar arrays for those points."
msgstr "頂点のポイントクラウドとそれらのポイントのスカラー配列から :class:`pyvista.PolyData` オブジェクトを作成します。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:37
msgid ""
"Point clouds are generally constructed in the :class:`pyvista.PolyData` "
"class and can easiy have scalar/vector data arrays associated with the point"
" cloud. In this example, we'll work a bit backwards using a point cloud that"
" that is available from our ``examples`` module. This however is no "
"different than creating a PyVista mesh with your own NumPy arrays of vertice"
" locations."
msgstr ""
"点群は一般に :class:`pyvista.PolyData` "
"クラスで構成され、点群に関連付けられたスカラー/ベクトルデータ配列を簡単に持つことができます。この例では、 ``examples`` "
"モジュールから使用可能な点群を使用して、少し逆方向に作業します。ただし、これは独自の頂点位置のNumPy配列を使用してPyVistaメッシュを作成するのと同じです。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:80
msgid ""
"Now that you have a NumPy array of points/vertices either from our sample "
"data or your own project, creating a PyVista mesh of those points is simply:"
msgstr ""
"サンプルデータまたは独自のプロジェクトからポイント/頂点のNumPy配列を取得したので、これらのポイントのPyVistaメッシュを作成するのは簡単です。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:111
msgid "And we can even do a sanity check"
msgstr "健全性のチェックもできます"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:133
msgid ""
"And now that we have a PyVista mesh, we can plot it. Note that we add an "
"option to use eye dome lighting - this is a shading technique to improve "
"depth perception with point clouds (learn more in :ref:`ref_edl`)."
msgstr ""
"これでPyVistaメッシュができたので、プロットすることができます。ここでは、eye "
"domeライティングを使用するオプションを追加します。これは、ポイントクラウド( :ref:`ref_edl` "
"についてもっと学ぶ)を使用してデプスの認識を向上させるシェーディング技法です。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:163
msgid ""
"Now what if you have data attributes (scalar/vector arrays) that you'd like "
"to associate with every node of your mesh? You can easily add NumPy data "
"arrays that have a length equal to the number of points in the mesh along "
"the first axis. For example, lets add a few arrays to this new "
"``point_cloud`` mesh."
msgstr ""
"ここで、メッシュのすべてのノードに関連付けるデータアトリビュート(スカラー/ベクトル配列)があるとします。最初の軸に沿ったメッシュ内の点の数と同じ長さのNumPyデータ配列を簡単に追加できます。例えば、この新しい"
" ``point_cloud`` メッシュにいくつかの配列を追加しましょう。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:169
msgid ""
"Make an array of scalar values with the same length as the points array. "
"Each element in this array will correspond to points at the same index:"
msgstr "points配列と同じ長さのスカラ値の配列を作成します。この配列の各要素は、同じインデックスのポイントに対応します。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:189
msgid ""
"And now we can plot the point cloud with that random data. PyVista is smart "
"enough to plot the scalar array you added by default. Note that this time, "
"we specify to render every point as its own sphere."
msgstr ""
"これで、ランダムデータを使用して点群をプロットできます。PyVistaは、デフォルトで追加したスカラー配列をプロットするのに十分な性能を持っています。ここでは、すべてのポイントを独自の球としてレンダリングするように指定します。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:219
msgid ""
"That data is kind of boring, right? You can also add data arrays with more "
"than one scalar value - perhaps a vector with three elements? Let's make a "
"little function that will compute vectors for every node in the point cloud "
"and add those vectors to the mesh."
msgstr ""
"そのデータは退屈ですよね?複数のスカラ値を持つデータ配列、例えば3つの要素を持つベクトルを追加することもできます。ポイントクラウド内のすべてのノードのベクトルを計算し、それらのベクトルをメッシュに追加する簡単な関数を作成します。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:224
msgid "This time, we're going to create a totally new, random point cloud."
msgstr ""
"そのデータは退屈ですよね?複数のスカラ値を持つデータ配列、例えば3つの要素を持つベクトルを追加することもできます。ポイントクラウド内のすべてのノードのベクトルを計算し、それらのベクトルをメッシュに追加する簡単な関数を作成します。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:277
msgid ""
"Now we can make arrows using those vectors using the glyph filter (see "
":ref:`glyph_example` for more details)."
msgstr ""
"今度は、グリフフィルター(詳細は :ref:`glyph_example` を参照)を使って、これらのベクトルを使って矢印を作ることができます。"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:319
msgid "**Total running time of the script:** ( 0 minutes  8.976 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:334
msgid ""
":download:`Download Python source code: create-point-cloud.py <create-point-"
"cloud.py>`"
msgstr ""
":download:`Python source code: create-point-cloud.py <create-point-cloud.py>"
" をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-point-cloud.rst:340
msgid ""
":download:`Download Jupyter notebook: create-point-cloud.ipynb <create-"
"point-cloud.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-point-cloud.ipynb <create-point-"
"cloud.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-poly.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-poly.py>`     to"
" download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-poly.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-poly.rst:15
msgid "Create PolyData"
msgstr "PolyDataを作成"

#: ../../pyvista/docs/examples/00-load/create-poly.rst:17
msgid ""
"Creating a PolyData (triangulated surface) object from NumPy arrays of the "
"vertices and faces."
msgstr "頂点と面のNumPy配列からPolyData (三角面)オブジェクトを作成する。"

#: ../../pyvista/docs/examples/00-load/create-poly.rst:35
msgid ""
"A PolyData object can be created quickly from numpy arrays.  The vertex "
"array contains the locations of the points in the mesh and the face array "
"contains the number of points of each face and the indices of the vertices "
"which comprise that face."
msgstr ""
"PolyDataオブジェクトは、多数の配列からすばやく作成できます。頂点配列にはメッシュ内の点の位置が含まれ、面配列には各面の点の数とその面を構成する頂点のインデックスが含まれます。"

#: ../../pyvista/docs/examples/00-load/create-poly.rst:83
msgid "**Total running time of the script:** ( 0 minutes  0.524 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-poly.rst:98
msgid ""
":download:`Download Python source code: create-poly.py <create-poly.py>`"
msgstr ""
":download:`Python source code: create-poly.py <create-poly.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-poly.rst:104
msgid ""
":download:`Download Jupyter notebook: create-poly.ipynb <create-poly.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-poly.ipynb <create-poly.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-spline.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-spline.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:15
msgid "Creating a Spline"
msgstr "スプラインの作成"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:17
msgid "Create a spline/polyline from a numpy array of XYZ vertices"
msgstr "XYZ頂点の数の多い配列からスプライン/ポリラインを作成します"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:35
msgid "Create a dataset to plot"
msgstr "プロットするデータセットを作成する"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:72
msgid ""
"Now let's make a function that can create line cells on a "
":class:`pyvista.PolyData` mesh given that the points are in order for the "
"segments they make."
msgstr "ここで、 :class:`pyvista.PolyData` メッシュ上にラインセルを作成できる関数を作成しましょう。"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:145
msgid ""
"That tube has sharp edges at each line segment. This can be mitigated by "
"creating a single PolyLine cell for all of the points"
msgstr "そのチューブは、各線分セグメントに鋭いエッジを持っています。これは、すべての点に対して単一のポリラインセルを作成することで緩和できます。"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:187
msgid "You could also interpolate those points onto a parametric spline"
msgstr "これらの点をパラメトリックスプライン上に補間することもできます。"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:203
msgid "Plot spline as a tube"
msgstr "スプラインをチューブとしてプロットします"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:235
msgid "The spline can also be plotted as a plain line"
msgstr "スプラインは、プレーンラインとしてプロットすることもできます。"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:270
msgid "Ribbons"
msgstr "リボン"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:272
msgid ""
"Ayy of the lines from the examples above can be used to create ribbons. Take"
" a look at the :func:`pyvista.PolyDataFilters.ribbon` filter."
msgstr ""
"上記の例の線のAyyを使用してリボンを作成できます。 :func:`pyvista.PolyDataFilters.ribbon` "
"フィルタを見てください。"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:305
msgid "**Total running time of the script:** ( 0 minutes  3.688 seconds)"
msgstr "**Total running time of the script:** ( 0 minutes  3.688 seconds)"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:320
msgid ""
":download:`Download Python source code: create-spline.py <create-spline.py>`"
msgstr ""
":download:`Python source code: create-spline.py <create-spline.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-spline.rst:326
msgid ""
":download:`Download Jupyter notebook: create-spline.ipynb <create-"
"spline.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-spline.ipynb <create-spline.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-structured-"
"surface.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-structured-surface.py>`"
"     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:15
msgid "Creating a Structured Surface"
msgstr "構造化サーフェスを作成する"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:17
msgid "Create a StructuredGrid surface from NumPy arrays"
msgstr "NumPy配列からStructuredGrid表面を作成します"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:37
msgid "From NumPy Meshgrid"
msgstr "NumPyメッシュグリッドから"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:39
msgid "Create a simple meshgrid using NumPy"
msgstr "NumPyを使用した単純なメッシュグリッドの作成"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:59
msgid "Now pass the NumPy meshgrid to PyVista"
msgstr "ここでNumPyメッシュグリッドをPyVistaに渡します。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:118
msgid ""
"Generating a structured grid is a one liner in this module, and the points "
"from the resulting surface can be accessed as a NumPy array:"
msgstr "このモジュールでは、構造化されたグリッドの生成を1行で行い、生成されたサーフェスのポイントにNumPy配列としてアクセスできます:"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:150
msgid "From XYZ Points"
msgstr "XYZ点から"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:152
msgid ""
"Quite often, you might be given a set of coordinates (XYZ points) in a "
"simple tabular format where there exists some structure such that grid could"
" be built between the nodes you have. A great example is found in `pyvista-"
"support#16`_ where a structured grid that is rotated from the cartesian "
"reference frame is given as just XYZ points. In these cases, all that is "
"needed to recover the grid is the dimensions of the grid (`nx` by `ny` by "
"`nz`) and that the coordinates are ordered appropriately."
msgstr ""
"多くの場合、単純な表形式で座標(XYZ点)のセットが与えられ、その中には、所有するノード間にグリッドを構築できるような構造が存在します。すばらしい例は、"
" `pyvista-support#16`_ "
"にあり、デカルト参照フレームから回転される構造化グリッドは、単にXYZ点として与えられる。このような場合、グリッドを復元するために必要なものは、グリッドの寸法(`nx`"
" x `ny` x `nz`)と、座標が適切に順序付けられていることだけです。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:162
msgid ""
"For this example, we will create a small dataset and rotate the coordinates "
"such that they are not on orthogonal to cartesian reference frame."
msgstr "この例では、小さなデータセットを作成し、デカルト参照フレームに直交しないように座標を回転します。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:209
msgid ""
"Now pretend that the (n by 3) NumPy array above are coordinates that you "
"have, possibly from a file with three columns of XYZ points."
msgstr "ここで、上記の(n x 3インチ) NumPy配列がXYZ点の3列のファイルから取得した座標であると仮定します。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:212
msgid ""
"We simply need to recover the dimensions of the grid that these points make "
"and then we can generate a :class:`pyvista.StructuredGrid` mesh."
msgstr ""
"単にこれらの点が作るグリッドの寸法を回復する必要があり、それから :class:`pyvista.StructuredGrid` "
"メッシュを生成することができます。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:215
msgid "Let's preview the points to see what we are dealing with:"
msgstr "ポイントをプレビューして、処理対象を確認します:"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:240
msgid ""
"In the figure above, we can see some inherit structure to the points and "
"thus we could connect the points as a structured grid. All we need to know "
"are the dimensions of the grid present. In this case, we know (because we "
"made this dataset) the dimensions are ``[29, 32, 1]``, but you might not "
"know the dimensions of your pointset. There are a few ways to figure out the"
" dimensionality of structured grid including:"
msgstr ""
"上の図では、点への継承構造を確認できるため、点を構造化グリッドとして接続できます。私たちが知る必要があるのは、存在するグリッドの寸法だけです。この場合、(このデータセットは)寸法が"
" ``[29, 32, 1]`` "
"であることはわかっていますが、あなたはポイントセットの寸法を知らないかもしれません。構造化グリッドの次元性を確認するには、次のような方法があります:"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:247
msgid "manually counting the nodes along the edges of the pointset"
msgstr "点セットのエッジに沿った節点の手動カウント"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:248
msgid ""
"using a technique like principle component analysis to strip the rotation "
"from the dataset and count the unique values along each axis for the new;y "
"projected dataset."
msgstr "主成分分析のような手法を用いてデータセットから回転を取り除き、新しいデータの各軸に沿った固有の値をカウントする;y投影データセット。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:289
msgid "Extending a 2D StructuredGrid to 3D"
msgstr "2 D構造グリッドを3 Dに拡張します"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:291
msgid ""
"A 2D :class:`pyvista.StructuredGrid` mesh can be extended into a 3D mesh. "
"This is highly applicable when wanting to create a terrain following mesh in"
" earth science research applications."
msgstr ""
"A 2 D :class:`pyvista.StructuredGrid` のメッシュは、3 "
"Dメッシュに拡張できます。これは、地球科学の研究アプリケーションでメッシュに沿った地形を作成する場合に非常に適しています。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:295
msgid ""
"For example, we could have a :class:`pyvista.StructuredGrid` of a topography"
" surface and extend that surface to a few different levels and connect each "
"\"level\" to create the 3D terrain following mesh."
msgstr ""
"たとえば、地形サーフェスの :class:`pyvista.StructuredGrid` "
"を作成し、そのサーフェスをいくつかの異なるレベルまで延長し、各 \"レベル\" を接続して、メッシュに沿って3 D地形を作成できます。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:299
msgid "Let's start with a simple example by extending the wave mesh to 3D"
msgstr "まず簡単な例として、ウェーブメッシュを3 Dに拡張します。"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:363
msgid "**Total running time of the script:** ( 0 minutes  7.067 seconds)"
msgstr "**Total running time of the script:** ( 0 minutes  7.067 seconds)"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:378
msgid ""
":download:`Download Python source code: create-structured-surface.py "
"<create-structured-surface.py>`"
msgstr ""
":download:`Python source code: create-structured-surface.py <create-"
"structured-surface.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-structured-surface.rst:384
msgid ""
":download:`Download Jupyter notebook: create-structured-surface.ipynb "
"<create-structured-surface.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-structured-surface.ipynb <create-"
"structured-surface.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-tri-surface.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-tri-surface.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:13
msgid "Create Triangulated Surface"
msgstr "三角形サーフェスを作成"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:15
msgid ""
"Create a surface from a set of points through a Delaunay triangulation."
msgstr "一連のポイントからDelaunay三角形分割を介してサーフェスを作成します。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:33
msgid "Simple Traingulations"
msgstr "単純な軌道"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:35
msgid "First, create some points for the surface."
msgstr "まず、表面のポイントをいくつか作成します。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:72
msgid ""
"Now use those points to create a point cloud PyVista data object. This will "
"be encompassed in a :class:`pyvista.PolyData` object."
msgstr ""
"これらのポイントを使用して、ポイントクラウドPyVistaデータオブジェクトを作成します。これは :class:`pyvista.PolyData` "
"オブジェクトに含まれます。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:104
msgid ""
"Now that we have a PyVista data structure of the points, we can perform a "
"triangulation to turn those boring discrete points into a connected surface."
msgstr ""
"ポイントのPyVistaデータ構造ができたので、三角形分割を実行して、これらの退屈な個別のポイントを接続されたサーフェスに変えることができます。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:137
msgid "Masked Triangulations"
msgstr "マスクされた三角形"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:178
msgid "Run the triangulation on these points"
msgstr "これらの点で三角形分割を実行します"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:208
msgid ""
"Note that some of the outer edges are unconstrained and the triangulation "
"added unwanted triangles. We cn mitigate that with the ``alpha`` parameter."
msgstr ""
"外側のエッジの一部は拘束されておらず、三角形分割によって不要な三角形が追加されていることに注意してください。私たちは ``alpha`` "
"パラメータでそれを緩和します。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:239
msgid ""
"We could also add a polygon to ignore during the triangulation via the "
"``edge_source`` parameter."
msgstr "また、 ``edge_source`` パラメータを使用して、三角形分割中に無視するポリゴンを追加することもできます。"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:286
msgid "**Total running time of the script:** ( 0 minutes  3.727 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:301
msgid ""
":download:`Download Python source code: create-tri-surface.py <create-tri-"
"surface.py>`"
msgstr ""
":download:`Python source code: create-tri-surface.py <create-tri-surface.py>"
" をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-tri-surface.rst:307
msgid ""
":download:`Download Jupyter notebook: create-tri-surface.ipynb <create-tri-"
"surface.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-tri-surface.ipynb <create-tri-"
"surface.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-uniform-"
"grid.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-uniform-grid.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:13
msgid "Creating a Uniform Grid"
msgstr "統合グリッドを作成"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:15
msgid "Create a simple uniform grid from a 3D NumPy array of values."
msgstr "値の3D NumPy配列から単純な均一グリッドを作成します。"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:32
msgid ""
"Take a 3D NumPy array of data values that holds some spatial data where each"
" axis corresponds to the XYZ cartesian axes. This example will create a "
":class:`pyvista.UniformGrid` object that will hold the spatial reference for"
" a 3D grid which a 3D NumPy array of values can be plotted against."
msgstr ""
"各軸がXYZデカルト軸に対応する空間データを保持するデータ値の3 D NumPy配列を取ります。この例では、値の3 D NumPy配列をプロットできる3"
" Dグリッドの空間参照を保持する :class:`pyvista.UniformGrid` オブジェクトを作成します。"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:37
msgid ""
"Create the 3D NumPy array of spatially referenced data. This is spatially "
"referenced such that the grid is 20 by 5 by 10 (nx by ny by nz)"
msgstr ""
"空間的に参照されるデータの3 D NumPy配列を作成します。これは、グリッドが20×5×10 (nx × ny × "
"nz)であるように空間的に参照さます"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:86
msgid ""
"Don't like cell data? You could also add the NumPy array to the point data "
"of a :class:`pyvista.UniformGrid`. Take note of the subtle difference when "
"setting the grid dimensions upon initialization."
msgstr ""
"セルデータは好きではありませんか? :class:`pyvista.UniformGrid` "
"のポイントデータにNumPy配列を追加することもできます。初期化時にグリッドの寸法を設定する際には、微妙な違いに注意してください。"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:140
msgid "**Total running time of the script:** ( 0 minutes  2.602 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:155
msgid ""
":download:`Download Python source code: create-uniform-grid.py <create-"
"uniform-grid.py>`"
msgstr ""
":download:`Python source code: create-uniform-grid.py <create-uniform-"
"grid.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-uniform-grid.rst:161
msgid ""
":download:`Download Jupyter notebook: create-uniform-grid.ipynb <create-"
"uniform-grid.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-uniform-grid.ipynb <create-uniform-"
"grid.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-unstructured-"
"surface.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_create-unstructured-"
"surface.py>`     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:15
msgid "Creating an Unstructured Grid"
msgstr "非構造化グリッドの作成"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:17
msgid "Create an irregular, unstructured grid from NumPy arrays."
msgstr "NumPy配列から不規則な非構造化グリッドを作成します。"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:34
msgid ""
"An unstructured grid can be created directly from NumPy arrays. This is "
"useful when creating a grid from scratch or copying it from another format."
"  See `vtkUnstructuredGrid "
"<https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html>`_ for "
"available cell types and their descriptions."
msgstr ""
"非構造化グリッドは、NumPy配列から直接作成できます。これは、グリッドを最初から作成する場合や、別の形式からコピーする場合に便利です。使用可能なセルタイプとその説明については、"
" `vtkUnstructuredGrid "
"<https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html>`_ "
"を参照してください。"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:113
msgid "UnstructuredGrid with Shared Points"
msgstr "共有ポイントを持つ非構造化グリッド"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:115
msgid ""
"The next example again creates an unstructured grid containing hexahedral "
"cells, but using common points between the cells."
msgstr "次の例でも、6面体セルを含み、セル間の共通点を使用する非構造グリッドを作成します。"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:199
msgid "Finally, create the unstructured grid and plot it"
msgstr "最後に、非構造化グリッドを作成してプロットします。"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:236
msgid "**Total running time of the script:** ( 0 minutes  1.423 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:251
msgid ""
":download:`Download Python source code: create-unstructured-surface.py "
"<create-unstructured-surface.py>`"
msgstr ""
":download:`Python source code: create-unstructured-surface.py <create-"
"unstructured-surface.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/create-unstructured-surface.rst:257
msgid ""
":download:`Download Jupyter notebook: create-unstructured-surface.ipynb "
"<create-unstructured-surface.ipynb>`"
msgstr ""
":download:`Jupyter notebook: create-unstructured-surface.ipynb <create-"
"unstructured-surface.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-dolfin.py>`     to"
" download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_read-dolfin.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:13
msgid "Read FEniCS/Dolfin Meshes"
msgstr "FEniCS/Dolfinメッシュを確認。"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:15
msgid ""
"PyVista leverages `meshio`_ to read many mesh formats not natively supported"
" by VTK including the `FEniCS/Dolfin`_ XML format."
msgstr ""
"PyVistaは `meshio`_ を活用して、 `FEniCS/Dolfin`_  "
"XMLフォーマットを含む、VTKがネイティブにサポートしていない多くのメッシュフォーマットを読み込みます。"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:34
msgid ""
"Let's download an example FEniCS/Dolfin mesh from our example data "
"repository. This will download an XML Dolfin mesh and save it to PyVista's "
"data directory."
msgstr ""
"サンプルデータリポジトリからFEniCS/Dolfinメッシュのサンプルをダウンロードしましょう。これにより、XML "
"Dolfinメッシュがダウンロードされ、PyVistaのデータディレクトリに保存されます。"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:59
msgid ""
"As shown, we now have an XML Dolfin mesh save locally. This filename can be "
"passed directly to PyVista's :func:`pyvista.read` method to be read into a "
"PyVista mesh."
msgstr ""
"これで、XML Dolfinメッシュをローカルに保存できました。このファイル名は、PyVistaの :func:`pyvista.read` "
"メソッドに直接渡して、PyVistaメッシュに読み込むことができます。"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:92
msgid "Now we can do stuff with that Dolfin mesh!"
msgstr "Dolfinメッシュで何かできるようになりました!"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:123
msgid "**Total running time of the script:** ( 0 minutes  2.034 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:138
msgid ""
":download:`Download Python source code: read-dolfin.py <read-dolfin.py>`"
msgstr ""
":download:`Python source code: read-dolfin.py <read-dolfin.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-dolfin.rst:144
msgid ""
":download:`Download Jupyter notebook: read-dolfin.ipynb <read-dolfin.ipynb>`"
msgstr ""
":download:`Jupyter notebook: read-dolfin.ipynb <read-dolfin.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-file.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-file.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_read-file.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:13
msgid "Load and Plot from a File"
msgstr "ファイルからロードおよびプロットする"

#: ../../pyvista/docs/examples/00-load/read-file.rst:15
msgid "Read a dataset from a known file type."
msgstr "既知のファイルタイプからデータセットを読み取ります。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:18
msgid ""
"Loading a mesh is trivial - if your data is in one of the many supported "
"file formats, simply use :func:`pyvista.read` to load your spatially "
"referenced dataset into a PyVista mesh object."
msgstr ""
"メッシュのロードは簡単です。- データが多くのサポートされているファイルフォーマットの1つである場合は、 :func:`pyvista.read` "
"を使用して空間的に参照されるデータセットをPyVistaメッシュオブジェクトにロードします。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:22
msgid ""
"The following code block uses a built-in example file and displays an "
"airplane mesh."
msgstr "次のコードブロックでは、組み込みのサンプルファイルを使用して、飛行機のメッシュを表示します。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:40
msgid ""
"The following code block uses a built-in example file, displays an airplane "
"mesh and returns the camera's position:"
msgstr "次のコードブロックでは、組み込みのサンプルファイルを使用して、飛行機のメッシュを表示し、カメラの位置を返します。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:66
msgid ""
"Note the above filename, it's a ``.ply`` file - one of the many supported "
"formats in PyVista."
msgstr "上記のファイル名に注意してください。これは ``.ply`` ファイルで、PyVistaでサポートされている多くのフォーマットの1つです。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:87
msgid ""
"You can also take a screenshot without creating an interactive plot window "
"using the ``Plotter``:"
msgstr "``Plotter`` を使用して、インタラクティブなプロットウィンドウを作成せずにスクリーンショットを撮ることもできます。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:120
msgid "The points from the mesh are directly accessible as a NumPy array:"
msgstr "メッシュのポイントは、NumPy配列として直接アクセスできます。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:149
msgid "The faces from the mesh are also directly accessible as a NumPy array:"
msgstr "メッシュの面は、NumPy配列として直接アクセスできます。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:179
msgid ""
"Loading other files types is just as easy! Simply pass your file path to the"
" :func:`pyvista.read` function and that's it!"
msgstr "他のファイルタイプのロードも同じくらい簡単です。ファイルパスを :func:`pyvista.read` 関数に渡すだけです。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:182
msgid ""
"Here are a few other examples - siply replace ``examples.download_*`` in the"
" examples below with ``pyvista.read('path/to/you/file.ext')``"
msgstr ""
"その他の例をいくつか紹介します -  ``examples.download_*`` を "
"``pyvista.read('path/to/you/file.ext')`` で置き換えています。"

#: ../../pyvista/docs/examples/00-load/read-file.rst:185
msgid "Example STL file:"
msgstr "STLファイルの例:"

#: ../../pyvista/docs/examples/00-load/read-file.rst:215
msgid "Example OBJ file"
msgstr "OBJファイルの例:"

#: ../../pyvista/docs/examples/00-load/read-file.rst:245
msgid "Example BYU file"
msgstr "BYUファイルの例:"

#: ../../pyvista/docs/examples/00-load/read-file.rst:275
msgid "Example VTK file"
msgstr "VTKファイルの例:"

#: ../../pyvista/docs/examples/00-load/read-file.rst:307
msgid "**Total running time of the script:** ( 0 minutes  6.699 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-file.rst:322
msgid ":download:`Download Python source code: read-file.py <read-file.py>`"
msgstr ":download:`Python source code: read-file.py <read-file.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-file.rst:328
msgid ""
":download:`Download Jupyter notebook: read-file.ipynb <read-file.ipynb>`"
msgstr ""
":download:`Jupyter notebook: read-file.ipynb <read-file.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-image.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-image.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_read-image.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/read-image.rst:13
msgid "Read Image Files"
msgstr "イメージファイルの読み込み"

#: ../../pyvista/docs/examples/00-load/read-image.rst:15
msgid "Read and plot image files (JPEG, TIFF, PNG, etc)."
msgstr "イメージファイル(JPEG、TIFF、PNGなど)の読み込みとプロットを行います。"

#: ../../pyvista/docs/examples/00-load/read-image.rst:30
msgid ""
"PyVista fully supportes reading images into their own spatially referenced "
"data objects (this example) as well as supports texture mapping of images "
"onto datasets (see :ref:`ref_texture_example`)."
msgstr ""
"PyVistaでは、イメージを空間的に参照されるデータオブジェクト(この例)に読み込むことが完全にサポートされており、イメージをデータセット( "
":ref:`ref_texture_example` を参照)にテクスチャマッピングすることもサポートされています。"

#: ../../pyvista/docs/examples/00-load/read-image.rst:34
msgid ""
"Download a JPEG image of a puppy and load it to "
":class:`pyvista.UniformGrid`. This could similarly be implemented with any "
"image file by using the :func:`pyvista.read` function and passing the path "
"to the image file."
msgstr ""
"子犬のJPEG画像をダウンロードし、 :class:`pyvista.UniformGrid` にロードします。これは "
":func:`pyvista.read` 関数を使用し、画像ファイルへのパスを渡すことで、どんな画像ファイルにも同様に実装できます。"

#: ../../pyvista/docs/examples/00-load/read-image.rst:53
msgid ""
"When plotting images stored in :class:`pyvista.UniformGrid` objects, it is "
"important to specify using the `rgb` option when plotting to ensure that the"
" image's true colors are used and not mapped."
msgstr ""
" :class:`pyvista.UniformGrid` オブジェクトに保存されたイメージを印刷する場合、イメージのTrue "
"Colorが使用され、マップされないことを確認するために、プロット時に `rgb` オプションを使用して指定することが重要です。"

#: ../../pyvista/docs/examples/00-load/read-image.rst:115
msgid "**Total running time of the script:** ( 0 minutes  12.371 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-image.rst:130
msgid ":download:`Download Python source code: read-image.py <read-image.py>`"
msgstr ":download:`Python source code: read-image.py <read-image.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-image.rst:136
msgid ""
":download:`Download Jupyter notebook: read-image.ipynb <read-image.ipynb>`"
msgstr ""
":download:`Jupyter notebook: read-image.ipynb <read-image.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-parallel.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_read-parallel.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:13
msgid "Parallel Files"
msgstr "並列フィルタ"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:15
msgid ""
"The VTK library supports parallel file formats. Reading meshes broken up "
"into several files is natively supported by VTK and PyVista."
msgstr ""
"VTKライブラリーは並列ファイル・フォーマットをサポートしています。複数のファイルに分割されたメッシュの読み込みは、VTKおよびPyVistaでネイティブにサポートされています。"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:33
msgid ""
"Let's go ahead and download the sample dataset containing an "
":class:`pyvista.UnstructuredGrid` broken up into several files."
msgstr ""
"いくつかのファイルに分割された :class:`pyvista.UnstructuredGrid` "
"を含むサンプルデータセットをダウンロードしてみましょう。"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:75
msgid ""
"The above code downloaded a dataset containing a set of parallel files for a"
" blood vessel mesh and returned an :class:`pyvista.UnstructuredGrid` - we "
"did not grab that UnstructuredGrid, so that we could demo how to use these "
"types of files."
msgstr ""
"上記のコードは、血管メッシュの並列ファイルのセットを含むデータセットをダウンロードし、 "
":class:`pyvista.UnstructuredGrid` を返しました - "
"私たちは、これらのタイプのファイルの使用方法をデモできるように、そのUnstructuredGridを取得しませんでした。"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:80
msgid "Let's inspect where this downloaded our dataset:"
msgstr "これがデータセットをダウンロードした場所を調べてみましょう:"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:123
msgid ""
"Note that a ``.pvtu`` file is available along side a directory. This "
"directory contains all the parallel files or pieces that make the whole "
"mesh. We can simply read the ``.pvtu`` file and VTK will handle putting the "
"mesh together."
msgstr ""
"``.pvtu`` "
"ファイルはディレクトリの横にあるので注意してください。このディレクトリには、メッシュ全体を構成するすべての並列ファイルまたはピースが含まれています。 "
"``.pvtu`` ファイルを読み取るだけで、VTKがメッシュをまとめます。"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:167
msgid "Plot the pieced together mesh"
msgstr "つなぎ合わせたメッシュをプロットします"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:224
msgid "**Total running time of the script:** ( 0 minutes  3.289 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:239
msgid ""
":download:`Download Python source code: read-parallel.py <read-parallel.py>`"
msgstr ""
":download:`Python source code: read-parallel.py <read-parallel.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/read-parallel.rst:245
msgid ""
":download:`Download Jupyter notebook: read-parallel.ipynb <read-"
"parallel.ipynb>`"
msgstr ""
":download:`Jupyter notebook: read-parallel.ipynb <read-parallel.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:7
#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:7
msgid "Computation times"
msgstr "計算時間"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:8
msgid "**01:25.924** total execution time for **examples_00-load** files:"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:11
msgid ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py` "
"(``create-parametric-geometric-objects.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py` "
"(``create-parametric-geometric-objects.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:11
msgid "00:23.264"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:27
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:29
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:31
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:33
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:35
#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:37
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:27
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:29
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:31
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:33
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:35
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:37
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:39
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:41
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:43
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:45
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:47
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:49
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:51
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:53
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:55
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:57
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:59
#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:61
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:13
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:15
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:17
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:19
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:21
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:23
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:25
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:27
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:29
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:31
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:33
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:35
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:37
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:39
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:41
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:43
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:45
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:47
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:49
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:51
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:53
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:55
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:57
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:59
#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:61
#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:11
#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:13
msgid "0.0 MB"
msgstr "0.0 MB"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_00-load_read-image.py` (``read-image.py``)"
msgstr ":ref:`sphx_glr_examples_00-load_read-image.py` (``read-image.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:13
msgid "00:12.371"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_00-load_create-point-cloud.py` (``create-point-"
"cloud.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-point-cloud.py` (``create-point-"
"cloud.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:15
msgid "00:08.976"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py` (``terrain-mesh.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_terrain-mesh.py` (``terrain-mesh.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:17
msgid "00:07.813"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:19
msgid ""
":ref:`sphx_glr_examples_00-load_create-structured-surface.py` (``create-"
"structured-surface.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-structured-surface.py` (``create-"
"structured-surface.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:19
msgid "00:07.067"
msgstr "00:07.067"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_00-load_read-file.py` (``read-file.py``)"
msgstr ":ref:`sphx_glr_examples_00-load_read-file.py` (``read-file.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:21
msgid "00:06.699"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_00-load_create-tri-surface.py` (``create-tri-"
"surface.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-tri-surface.py` (``create-tri-"
"surface.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:23
msgid "00:03.727"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:25
msgid ""
":ref:`sphx_glr_examples_00-load_create-spline.py` (``create-spline.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-spline.py` (``create-spline.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:25
msgid "00:03.688"
msgstr "00:03.688"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:27
msgid ""
":ref:`sphx_glr_examples_00-load_read-parallel.py` (``read-parallel.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_read-parallel.py` (``read-parallel.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:27
msgid "00:03.289"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:29
msgid ""
":ref:`sphx_glr_examples_00-load_create-uniform-grid.py` (``create-uniform-"
"grid.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-uniform-grid.py` (``create-uniform-"
"grid.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:29
msgid "00:02.602"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:31
msgid ""
":ref:`sphx_glr_examples_00-load_create-geometric-objects.py` (``create-"
"geometric-objects.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-geometric-objects.py` (``create-"
"geometric-objects.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:31
msgid "00:02.447"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:33
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py` (``read-dolfin.py``)"
msgstr ":ref:`sphx_glr_examples_00-load_read-dolfin.py` (``read-dolfin.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:33
msgid "00:02.034"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py` (``create-"
"unstructured-surface.py``)"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py` (``create-"
"unstructured-surface.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:35
msgid "00:01.423"
msgstr ""

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:37
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py` (``create-poly.py``)"
msgstr ":ref:`sphx_glr_examples_00-load_create-poly.py` (``create-poly.py``)"

#: ../../pyvista/docs/examples/00-load/sg_execution_times.rst:37
msgid "00:00.524"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_terrain-mesh.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_00-load_terrain-mesh.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:13
msgid "Terrain Following Mesh"
msgstr "メッシュ後の地形"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:15
msgid "Use a topographic surface to create a 3D terrain-following mesh."
msgstr "地形サーフェスを使用して、3 D地形フォローメッシュを作成します。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:17
msgid ""
"Terrain following meshes are common in the environmental sciences, for "
"instance in hydrological modelling (see `Maxwell 2013 "
"<https://www.sciencedirect.com/science/article/abs/pii/S0309170812002564>`_ "
"and `ParFlow <https://parflow.org>`_)."
msgstr ""
"メッシュに続く地形は、環境科学、例えば水文モデリング( `Maxwell 2013 "
"<https://www.sciencedirect.com/science/article/abs/pii/S0309170812002564>`_ "
"と `ParFlow <https://parflow.org>`_ を参照)において一般的である。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:23
msgid ""
"In this example, we domonstrate a simple way to make a 3D grid/mesh that "
"follows a given topographic surface. In this example, it is important to "
"note that the given digital elevation model (DEM) is structured (gridded and"
" not triangulated): this is common for DEMs."
msgstr ""
"この例では、特定の地形サーフェスに従う3 Dグリッド/メッシュを作成する簡単な方法を適用します。この例では、指定した数値標高モデル (DEM) "
"が構造化されていることに注意してください(グリッド付きで三角形でない): これはDEMでは一般的です。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:44
msgid "Download a gridded topography surface (DEM)"
msgstr "グリッド地形サーフェス (DEM) をダウンロードします"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:82
msgid ""
"Now let's subsample and extract an area of interest to make this example "
"simple (also the DEM we just load is pretty big). Since the DEM we loaded is"
" a :class:`pyvista.UniformGrid` mesh, we can use the "
":func:`pyvista.UniformGridFilters.extract_subset` filter:"
msgstr ""
"ここで、対象となる領域をサブサンプルして抽出し、この例を単純にしましょう(ロードしたばかりのDEMもかなり大きいです。)。ロードしたDEMは "
":class:`pyvista.UniformGrid` メッシュなので、 "
":func:`pyvista.UniformGridFilters.extract_subset` filter: フィルタを使用できます。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:115
msgid ""
"Now that we have a region of interest for our terrain following mesh, lets "
"make a 3D surface of that DEM:"
msgstr "メッシュに沿って地表の関心領域ができたので、DEMの3 Dサーフェスを作成します。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:180
msgid ""
"And now we have a 3D structured surface of the terrain! We can now extend "
"that structured surface into a 3D mesh to form a terrain following grid. To "
"do this, we first our cell spacings in the z-direction (these start from the"
" terrain surface). Then we repeat the XYZ structured coordinates of the "
"terrain mesh and decrease each Z level by our Z cell spacing. Once we have "
"those structured coordinates, we can create a "
":class:`pyvista.StructuredGrid`."
msgstr ""
"これで、地形の3 D構造サーフェスが作成されました。構造化されたサーフェスを3 "
"Dメッシュに拡張して、グリッドに沿った地形を形成できるようになりました。これを行うには、まずz方向(これらは地表から始まり)のセル間隔を設定します。次に、地表メッシュのXYZ構造化座標を繰り返し、各ZレベルをZセル間隔だけ下げます。これらの構造化された座標が得られたら、"
" :class:`pyvista.StructuredGrid` を作成できます。"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:263
msgid "**Total running time of the script:** ( 0 minutes  7.813 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:278
msgid ""
":download:`Download Python source code: terrain-mesh.py <terrain-mesh.py>`"
msgstr ""
":download:`Python source code: terrain-mesh.py <terrain-mesh.py> をダウンロード`"

#: ../../pyvista/docs/examples/00-load/terrain-mesh.rst:284
msgid ""
":download:`Download Jupyter notebook: terrain-mesh.ipynb <terrain-"
"mesh.ipynb>`"
msgstr ""
":download:`Jupyter notebook: terrain-mesh.ipynb <terrain-mesh.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_boolean-"
"operations.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_boolean-operations.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:13
msgid "Boolean Operations"
msgstr "ブール演算"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:15
msgid ""
"Perform boolean operations with closed surfaces (intersect, cut, etc.)."
msgstr "閉じたサーフェスで(交差、切断などの)ブーリアン演算を実行します。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:17
msgid ""
"Boolean/topological operations (intersect, cut, etc.) methods are "
"implemented for :class:`pyvista.PolyData` mesh types only and are accessible"
" directly from any :class:`pyvista.PolyData` mesh. Check out "
":class:`pyvista.PolyDataFilters` and take a look at the following filters:"
msgstr ""
"ブール/位相演算(交差、切断)法は、  :class:`pyvista.PolyData` メッシュタイプに対してのみ実装され、任意の "
":class:`pyvista.PolyData` メッシュから直接アクセス可能である。 "
":class:`pyvista.PolyDataFilters` をチェックして、次のフィルタを確認してください。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:22
msgid ":func:`pyvista.PolyDataFilters.boolean_add`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_add`"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:23
msgid ":func:`pyvista.PolyDataFilters.boolean_cut`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_cut`"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:24
msgid ":func:`pyvista.PolyDataFilters.boolean_difference`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_difference`"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:25
msgid ":func:`pyvista.PolyDataFilters.boolean_union`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_union`"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:27
msgid ""
"For merging, the ``+`` operator can be used between any two meshes in "
"PyVista which simply calls the ``.merge()`` filter to combine any two "
"meshes. Similarly, the ``-`` operator can be used between any two "
":class:`pyvista.PolyData` meshes in PyVista to cut the first mesh by the "
"second."
msgstr ""
"マージでは、 ``+`` 演算子をPyVistaの任意の2つのメッシュ間で使用できます。この演算子は、任意の2つのメッシュを結合するために "
"``.merge()`` フィルタを呼び出すだけです。同様に、 ``-`` オペレータをPyVistaの任意の2つの "
":class:`pyvista.PolyData` メッシュ間で使用して、最初のメッシュを2番目のメッシュで切断することができます。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:76
msgid "Boolean Add"
msgstr "ブール加算"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:78
msgid ""
"Add all of the two meshes together using the "
":func:`pyvista.PolyDataFilters.boolean_add` filter or the ``+`` operator."
msgstr ""
":func:`pyvista.PolyDataFilters.boolean_add` フィルタまたは ``+`` "
"操作を使用して、2つのメッシュをすべて追加します。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:81
msgid ""
"Order of operations does not matter for boolean add as the entirety of both "
"meshes are appended together."
msgstr ""
"Order of operations does not matter for boolean add as the entirety of both "
"meshes are appended together."

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:114
msgid "Boolean Cut"
msgstr "ブール切断"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:116
msgid ""
"Perform a boolean cut of ``a`` using ``b`` with the "
":func:`pyvista.PolyDataFilters.boolean_cut` filter or the ``-`` operator "
"since both meshes are :class:`pyvista.PolyData`."
msgstr ""
"両方のメッシュが :class:`pyvista.PolyData` であるため、 "
":func:`pyvista.PolyDataFilters.boolean_cut` フィルタまたは ``-`` 演算子付きの ``b`` を使用して"
" ``a`` のブーリアンカットを実行します。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:120
msgid "Order of operations does not matter for boolean cut."
msgstr "ブーリアンカットでは、操作の順序は関係ありません。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:155
msgid "Boolean Difference"
msgstr "論理差"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:157
msgid ""
"Combine two meshes and retains only the volume in common between the meshes "
"using the :func:`pyvista.PolyDataFilters.boolean_difference` method."
msgstr ""
":func:`pyvista.PolyDataFilters.boolean_difference` "
"法を使用して、2つのメッシュを結合し、メッシュ間で共通の体積のみを保持します。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:160
msgid ""
"Note that the order of operations for a boolean difference will affect the "
"results."
msgstr "ブール差の演算順序が結果に影響することに注意してください。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:227
msgid "Boolean Union"
msgstr "ブール演算和"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:229
msgid ""
"Combine two meshes and attempts to create a manifold mesh using the "
":func:`pyvista.PolyDataFilters.boolean_union` method."
msgstr ""
"2つのメッシュを結合し、 :func:`pyvista.PolyDataFilters.boolean_union` "
"方法を使用して多様体メッシュの作成を試みます。"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:232
msgid "Order of operations does not matter for boolean union."
msgstr "Order of operations does not matter for boolean union."

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:267
msgid "**Total running time of the script:** ( 0 minutes  19.202 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:282
msgid ""
":download:`Download Python source code: boolean-operations.py <boolean-"
"operations.py>`"
msgstr ""
":download:`Python source code: boolean-operations.py <boolean-operations.py>"
" をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/boolean-operations.rst:288
msgid ""
":download:`Download Jupyter notebook: boolean-operations.ipynb <boolean-"
"operations.ipynb>`"
msgstr ""
":download:`Jupyter notebook: boolean-operations.ipynb <boolean-"
"operations.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_cell-centers.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_cell-centers.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:13
msgid "Extract Cell Centers"
msgstr "セルの中心を抽出"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:15
msgid "Extract the coordinates of the centers of all cells/faces in a mesh."
msgstr "メッシュ内のすべてのセル/面の中心の座標を抽出します。"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:17
msgid "Here we use :func:`pyvista.DataSetFilters.cell_centers`"
msgstr "ここでは :func:`pyvista.DataSetFilters.cell_centers` を使います。"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:33
msgid "First let's fetch the centers of a mesh with 2D geometries (a surface)"
msgstr "最初に、2 Dジオメトリ(表面)を使用してメッシュの中心を取得します。"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:73
msgid "We can also do this for full 3D meshes."
msgstr "これは、フル3 Dメッシュに対しても実行できます。"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:146
msgid "**Total running time of the script:** ( 0 minutes  6.439 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:161
msgid ""
":download:`Download Python source code: cell-centers.py <cell-centers.py>`"
msgstr ""
":download:`Python source code: cell-centers.py <cell-centers.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/cell-centers.rst:167
msgid ""
":download:`Download Jupyter notebook: cell-centers.ipynb <cell-"
"centers.ipynb>`"
msgstr ""
":download:`Jupyter notebook: cell-centers.ipynb <cell-centers.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_clipping.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_clipping.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:13
msgid "Clipping with Planes & Boxes"
msgstr "平面とボックスでクリップします"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:15
msgid "Clip/cut any dataset using using planes or boxes."
msgstr "平面またはボックスを使用してデータセットをクリップ/カットします。"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:32
msgid "Clip with Plane"
msgstr "平面付きクリップ"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:34
msgid ""
"Clip any dataset by a user defined plane using the "
":func:`pyvista.DataSetFilters.clip` filter"
msgstr ":func:`pyvista.DataSetFilters.clip` フィルタを使用したユーザ定義平面によるデータセットのクリップ"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:75
msgid "Clip with Bounds"
msgstr "境界付きクリップ"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:77
msgid ""
"Clip any dataset by a set of XYZ bounds using the "
":func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""
":func:`pyvista.DataSetFilters.clip_box` "
"フィルタを使用して、XYZ境界のセットによってデータセットをクリップします。"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:117
msgid "Clip with Rotated Box"
msgstr "回転ボックス付きクリップ"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:119
msgid ""
"Clip any dataset by an arbitrarily rotated solid box using the "
":func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""
":func:`pyvista.DataSetFilters.clip_box` "
"フィルタを使用して任意に回転したソリッドボックスでデータセットをクリップします。"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:158
msgid "Run the box clipping algorithm"
msgstr "ボックスクリッピングアルゴリズムを実行します"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:198
msgid "**Total running time of the script:** ( 0 minutes  6.099 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping.rst:213
msgid ":download:`Download Python source code: clipping.py <clipping.py>`"
msgstr ":download:`Python source code: clipping.py <clipping.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/clipping.rst:219
msgid ":download:`Download Jupyter notebook: clipping.ipynb <clipping.ipynb>`"
msgstr ":download:`Jupyter notebook: clipping.ipynb <clipping.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_clipping-with-"
"surface.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_clipping-with-surface.py>`"
"     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:13
msgid "Clipping with a Surface"
msgstr "サーフェスを使用したクリップ"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:15
msgid ""
"Clip any PyVista dataset by a :class:`pyvista.PolyData` surface mesh using "
"the :func:`pyvista.DataSet.Filters.clip_surface` filter."
msgstr ""
":func:`pyvista.DataSet.Filters.clip_surface` フィルタを使用して "
":class:`pyvista.PolyData` サーフェスメッシュによってPyVistaデータセットをクリップします。"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:18
msgid ""
"Note that we first demonstrate how the clipping is performed by computing an"
" implicit distance and thresholding the mesh. This thresholding is one "
"approach to clip by a surface, and preserve the original geometry of the "
"given mesh, but many folks leverage the ``clip_surface`` filter to "
"triangulate/tessellate the mesh geometries along the clip."
msgstr ""
"最初に、暗黙的な距離を計算してメッシュを閾値設定することにより、クリッピングを実行する方法を説明します。このしきい値設定は、サーフェスでクリップし、指定されたメッシュの元のジオメトリを保持する1つの方法ですが、多くのユーザは"
" ``clip_surface`` フィルタを利用して、クリップに沿ってメッシュジオメトリを三角形化/面分割します。"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:81
msgid ""
"Take a look at the implicit function used to perform the surface clipping by"
" using the :func:`pyvista.DataSetFilters.compute_implicit_distance` filter. "
"The clipping operation field is performed where the ``implicit_distance`` "
"field is zero and the ``invert`` flag controls which sides of zero to "
"preserve."
msgstr ""
":func:`pyvista.DataSetFilters.compute_implicit_distance` "
"フィルタを使用してサーフェスクリッピングを実行する際に使用される暗黙的な関数を確認してください。 ``implicit_distance`` "
"フィールドが0であるクリッピング操作フィールドが実行され、 ``invert`` フラグが0のどちら側を保持するかを制御します。"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:158
msgid ""
"Clip the rectilinear grid dataset using the :class:`pyvista.PolyData` "
"surface mesh via the :func:`pyvista.DataSet.Filters.clip_surface` filter. "
"This will triangulate/tessellate the mesh geometries along the clip."
msgstr ""
":func:`pyvista.DataSet.Filters.clip_surface` フィルタを介して "
":class:`pyvista.PolyData` "
"サーフェスメッシュを使用して、直線グリッドデータセットをクリップします。これにより、クリップに沿ってメッシュジオメトリが三角形化/面分割されます。"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:197
msgid ""
"Here is another example of clipping a mesh by a surface. This time, we'll "
"generate a :class:`pyvista.UniformGrid` around a topography surface and then"
" clip that grid using the surface to create a closed 3D model of the surface"
msgstr ""
"次に、サーフェスでメッシュをクリップする別の例を示します。今回は、地形サーフェスの周囲に :class:`pyvista.UniformGrid` "
"を生成し、サーフェスを使用してグリッドをクリップして、サーフェスの閉じた3 Dモデルを作成します。"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:238
msgid "**Total running time of the script:** ( 0 minutes  59.244 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:253
msgid ""
":download:`Download Python source code: clipping-with-surface.py <clipping-"
"with-surface.py>`"
msgstr ""
":download:`Python source code: clipping-with-surface.py <clipping-with-"
"surface.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/clipping-with-surface.rst:259
msgid ""
":download:`Download Jupyter notebook: clipping-with-surface.ipynb <clipping-"
"with-surface.ipynb>`"
msgstr ""
":download:`Jupyter notebook: clipping-with-surface.ipynb <clipping-with-"
"surface.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_compute-normals.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_compute-normals.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:13
msgid "Computing Surface Normals"
msgstr "表面の法線を計算します"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:16
msgid "Compute normals on a surface."
msgstr "表面上の法線を計算します。"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:33
msgid ""
"Computing the normals of a surace is quite easy using "
":class:`pyvista.PolyData`'s :func:`pyvista.PolyDataFilters.compute_normals` "
"method."
msgstr ""
"サーフェスの法線を計算するには、 :class:`pyvista.PolyData` の "
":func:`pyvista.PolyDataFilters.compute_normals` メソッドを使うと非常に簡単です。"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:65
msgid ""
"Now we have a surface dataset of the globe loaded - unfortunately, the "
"dataset shows the globe with a uniform radius which hides topographic "
"relief. Using :func:`pyvista.PolyData.compute_normals`, we can compute the "
"normal vectors on the globe at all points in the dataset, then use the "
"values given in the dataset to warp the surface in the normals direction to "
"create some exaggerated topographic relief."
msgstr ""
"これで地球のサーフェスデータセットがロードされました。残念ながら、データセットには地形起伏を隠す均一な半径の地球が表示されます。 "
":func:`pyvista.PolyData.compute_normals` "
"を使用して、データセット内のすべてのポイントで地球上の法線ベクトルを計算し、データセットで指定された値を使用してサーフェスを法線方向にワープし、誇張された地形レリーフを作成します。"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:107
msgid ""
"We could also use face/cell normals to extract a all the faces of a mesh "
"facing a general direction. In the following snippet, we take a mesh, "
"compute the normals along its cell faces, and extract the faces that face "
"upward."
msgstr ""
"面/セル法線を使用して、一般的な方向を向いているメッシュのすべての面を抽出することもできます。次のスニペットでは、メッシュを取得し、そのセル面に沿って法線を計算し、上向きの面を抽出します。"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:154
msgid "**Total running time of the script:** ( 0 minutes  27.992 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:169
msgid ""
":download:`Download Python source code: compute-normals.py <compute-"
"normals.py>`"
msgstr ""
":download:`Python source code: compute-normals.py <compute-normals.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/compute-normals.rst:175
msgid ""
":download:`Download Jupyter notebook: compute-normals.ipynb <compute-"
"normals.ipynb>`"
msgstr ""
":download:`Jupyter notebook: compute-normals.ipynb <compute-normals.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_compute-volume.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_compute-volume.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:13
msgid "Volumetric Analysis"
msgstr "ボリューム分析"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:16
msgid "Calculate mass properties such as the volume or area of datasets"
msgstr "データセットの体積や面積などのマスプロパティを計算します"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:33
msgid ""
"Computing mass properties such as the volume or area of datasets in PyVista "
"is quite easy using the :func:`pyvista.DataSetFilters.compute_cell_sizes` "
"filter and the :attr:`pyvista.Common.volume` property on all PyVista meshes."
msgstr ""
"PyVistaでデータセットの体積や面積などの質量特性を計算するには、すべてのPyVistaメッシュで "
":func:`pyvista.DataSetFilters.compute_cell_sizes` フィルタと "
":attr:`pyvista.Common.volume` プロパティを使用すると非常に簡単です。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:37
msgid "Let's get started with a simple gridded mesh:"
msgstr "簡単なグリッドメッシュから始めましょう。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:54
msgid ""
"We can then calculate the volume of every cell in the array using the "
"``.compute_cell_sizes`` filter which will add arrays to the cell data of the"
" mesh core the volume and area by default."
msgstr ""
"次に、 ``.compute_cell_sizes`` フィルタを使用して、配列内のすべてのセルの体積を計算できます。 "
"``.compute_cell_sizes`` フィルタは、メッシュコアのセルデータに配列を追加します。既定では、体積と面積です。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:75
msgid ""
"We can also compute the total volume of the mesh using the ``.volume`` "
"property:"
msgstr "また、 ``.volume`` プロパティを使用してメッシュの総体積を計算することもできます。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:92
msgid ""
"Okay awesome! But what if we have have a dataset that we threshold with two "
"volumetric bodies left over in one dataset? Take this for example:"
msgstr ""
"わかったわ!しかし、1つのデータセットに2つのボリュームボディを残したまま閾値を設定したデータセットがあるとしたらどうでしょうか。たとえば、次のようになります。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:124
msgid ""
"We could then assign a classification array for the two bodies, compute the "
"cell sizes, then extract the volumes of each body. Note that there is a "
"simpler implementation of this below in :ref:`split_vol_ref`."
msgstr ""
"次に、2つのボディの分類配列を割り当て、セルサイズを計算し、各ボディの体積を抽出します。以下の :ref:`split_vol_ref` "
"でより簡単な実装があることに注意してください。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:168
msgid ""
"Or better yet, you could simply extract the largest volume from your "
"thresholded dataset by passing ``largest=True`` to the ``connectivity`` "
"filter or by using ``extract_largest`` filter (both are equivalent)."
msgstr ""
"あるいはもっと良い方法として、 ``largest=True`` を ``connectivity`` フィルタに渡すか、 "
"``extract_largest`` "
"フィルタ(どちらも同じ)を使用することで、閾値を設定したデータセットから最大のボリュームを単純に抽出することもできます。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:213
msgid "Splitting Volumes"
msgstr "ボリュームの分割"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:215
msgid ""
"What if instead, we wanted to split all the different connected bodies / "
"volumes in a dataset like the one above? We could use the "
":func:`pyvista.DataSetFilters.split_bodies` filter to extract all the "
"different connected volumes in a dataset into blocks in a "
":class:`pyvista.MultiBlock` dataset. For example, lets split the thresholded"
" volume in the example above:"
msgstr ""
"その代わりに、上記のようなデータセットで、接続されているすべてのボディ/ボリュームを分割したいとしたらどうでしょうか。 "
":func:`pyvista.DataSetFilters.split_bodies` "
"フィルタを使用して、データセット内のすべての異なる接続ボリュームを :class:`pyvista.MultiBlock` "
"データセット内のブロックに抽出することができます。たとえば、上記の例で、しきい値設定されたボリュームを分割します。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:284
msgid "A Real Dataset"
msgstr "実際のデータセット"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:286
msgid ""
"Here is a realistic training dataset of fluvial channels in the subsurface. "
"This will threshold the channels from the dataset then separate each "
"significantly large body and compute the volumes for each!"
msgstr ""
"これは、地下の河道の現実的なトレーニングデータセットです。これにより、データセットのチャネルがしきい値に設定され、非常に大きなボディのそれぞれが分離され、それぞれのボリュームが計算されます。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:290
msgid "Load up the data and threshold the channels:"
msgstr "データをロードし、チャンネルを閾値に設定します。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:306
msgid "Now extract all the different bodies and compute their volumes:"
msgstr "ここで、すべての異なるボディを抽出し、それらのボリュームを計算します。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:330
msgid "Print out the volumes for each body:"
msgstr "各ボディの体積をプリントします。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:374
msgid "And visualize all the different volumes:"
msgstr "そして、あらゆるボリュームを視覚化します。"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:405
msgid "**Total running time of the script:** ( 0 minutes  16.046 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:420
msgid ""
":download:`Download Python source code: compute-volume.py <compute-"
"volume.py>`"
msgstr ""
":download:`Python source code: compute-volume.py <compute-volume.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/compute-volume.rst:426
msgid ""
":download:`Download Jupyter notebook: compute-volume.ipynb <compute-"
"volume.ipynb>`"
msgstr ""
":download:`Jupyter notebook: compute-volume.ipynb <compute-volume.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_connectivity.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_connectivity.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:13
msgid "Connectivity"
msgstr "接続性"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:15
msgid "Use the connectivity filter to remove noisy isosurfaces."
msgstr "ノイズの多い等値面を削除するには、接続フィルタを使用します。"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:17
msgid ""
"This example is very similar to `this VTK example "
"<https://lorensen.github.io/VTKExamples/site/Python/VisualizationAlgorithms/PineRootConnectivity/>`__"
msgstr ""
"この例は `この VTK の例 "
"<https://lorensen.github.io/VTKExamples/site/Python/VisualizationAlgorithms/PineRootConnectivity/>`__"
" に非常によく似ています。"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:33
msgid "Load a dataset that has noisy isosurfaces"
msgstr "ノイズの多い等値面を持つデータセットをロードします"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:71
msgid ""
"The mesh plotted above is very noisy. We can extract the largest connected "
"isosurface in that mesh using the "
":func:`pyvista.DataSetFilters.connectivity` filter and passing "
"``largest=True`` to the ``connectivity`` filter or by using the "
":func:`pyvista.DataSetFilters.extract_largest` filter (both are equivalent)."
msgstr ""
"上にプロットしたメッシュは非常にノイズが多い。 :func:`pyvista.DataSetFilters.connectivity` "
"フィルタを使用し、 ``connectivity`` フィルタに ``largest=True`` を渡すか、または "
":func:`pyvista.DataSetFilters.extract_largest` "
"フィルタ(どちらも同じ)を使用することで、そのメッシュ内の最大接続等値面を抽出できます。"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:114
msgid "**Total running time of the script:** ( 0 minutes  4.774 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:129
msgid ""
":download:`Download Python source code: connectivity.py <connectivity.py>`"
msgstr ""
":download:`Python source code: connectivity.py <connectivity.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/connectivity.rst:135
msgid ""
":download:`Download Jupyter notebook: connectivity.ipynb "
"<connectivity.ipynb>`"
msgstr ""
":download:`Jupyter notebook: connectivity.ipynb <connectivity.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_contouring.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_contouring.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:13
msgid "Contouring"
msgstr "コンタリング"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:15
msgid ""
"Generate iso-lines or -surfaces for the scalars of a surface or volume."
msgstr "サーフェスまたはボリュームのスカラー用にアイソラインまたはサーフェスを生成します。"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:17
msgid ""
"3D meshes can have 2D iso-surfaces of a scalarr field extracted and 2D "
"surface meshes can have 1D iso-lines of a scalar field eextracted."
msgstr ""
"3 Dメッシュはスカラーフィールドの2 D等値面を抽出することができ、2 Dサーフェスメッシュはスカラーフィールドの1 "
"D等値線を抽出することができます。"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:37
msgid "Iso-Lines"
msgstr "等値線"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:39
msgid "Let's extract 1D iso-lines of a scalar field from a 2D surface mesh."
msgstr "2 Dサーフェスメッシュからスカラーフィールドの1 D等値線を抽出します。"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:76
msgid "Iso-Surfaces"
msgstr "等値面"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:78
msgid "Let's extract 2D iso-surfaces of a scalar field from a 3D mesh."
msgstr "3 Dメッシュからスカラーフィールドの2 D等値面を抽出してみましょう。"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:118
msgid "**Total running time of the script:** ( 0 minutes  12.166 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/contouring.rst:133
msgid ":download:`Download Python source code: contouring.py <contouring.py>`"
msgstr ":download:`Python source code: contouring.py <contouring.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/contouring.rst:139
msgid ""
":download:`Download Jupyter notebook: contouring.ipynb <contouring.ipynb>`"
msgstr ""
":download:`Jupyter notebook: contouring.ipynb <contouring.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_decimate.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_decimate.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:13
msgid "Decimation"
msgstr "間引き"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:15
msgid "Decimate a mesh"
msgstr "メッシュを縮小する"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:55
msgid ""
"Now let's define a target reduction and compare the "
":func:`pyvista.PolyData.decimate` and :func:`pyvista.PolyData.decimate_pro` "
"filters."
msgstr ""
"ここで、削減目標を定義し、 :func:`pyvista.PolyData.decimate` フィルタと "
":func:`pyvista.PolyData.decimate_pro` フィルタを比較してみましょう。"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:138
msgid "Side by side comparison:"
msgstr "並べて比較:"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:185
msgid "**Total running time of the script:** ( 0 minutes  4.893 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/decimate.rst:200
msgid ":download:`Download Python source code: decimate.py <decimate.py>`"
msgstr ":download:`Python source code: decimate.py <decimate.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/decimate.rst:206
msgid ":download:`Download Jupyter notebook: decimate.ipynb <decimate.ipynb>`"
msgstr ":download:`Jupyter notebook: decimate.ipynb <decimate.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_distance-between-"
"surfaces.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_distance-between-"
"surfaces.py>`     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:13
msgid "Distance Between Two Surfaces"
msgstr "2つのサーフェス間の距離"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:15
msgid "Compute the average thickness between two surfaces."
msgstr "2つのサーフェス間の平均厚みを計算します。"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:17
msgid ""
"For example, you might have two surfaces that represent the boundaries of "
"lithological layers in a subsurface geological model and you want to know "
"the average thickness of a unit between those boundaries."
msgstr "たとえば、地下地質モデルの岩石層の境界を表す2つのサーフェスがあり、それらの境界間の単位の平均厚さを知りたいとします。"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:21
msgid ""
"We can compute the thickness between the two surfaces using a few different "
"methods. First, we will demo a method where we compute the normals of the "
"bottom surface, and then project a ray to the top surface to compute the "
"distance along the surface normals. Second, we will use a KDTree to compute "
"the distance from eevery point in the bottom mesh to it's closest point in "
"the top mesh."
msgstr ""
"2つのサーフェス間の厚みは、いくつかの異なる方法を使用して計算できます。最初に、底面サーフェスの法線を計算し、次に上面サーフェスに光線を投影してサーフェス法線に沿った距離を計算する方法をデモします。次に、KDTreeを使用して、下部メッシュの各ポイントから上部メッシュの最も近いポイントまでの距離を計算します。"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:86
msgid "Ray Tracing Distance"
msgstr "レイトレーシング距離"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:88
msgid "Compute normals of lower surface"
msgstr "下部サーフェスの法線を計算"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:103
msgid ""
"Travel along noramals to the other surface and compute the thickness on each"
" vector."
msgstr "法線に沿って他のサーフェスに移動し、各ベクトルの厚みを計算します。"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:171
msgid "Nearest Neighbor Distance"
msgstr "最近接距離"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:173
msgid ""
"You could also use a KDTree to compare the distance between each point of "
"the upper surface and the nearest neighbor of the lower surface. This won't "
"be the exact surface to surface distance, but it will be noticeably faster "
"than a ray trace, especially for large surfaces."
msgstr ""
"KDTreeを使用して、上部サーフェスの各ポイントと下部サーフェスの最も近い隣接ポイント間の距離を比較することもできます。これはサーフェス間の正確な距離ではありませんが、特に大きなサーフェスでは、レイトレースよりも著しく高速になります。"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:234
msgid "**Total running time of the script:** ( 0 minutes  30.239 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:249
msgid ""
":download:`Download Python source code: distance-between-surfaces.py "
"<distance-between-surfaces.py>`"
msgstr ""
":download:`Python source code: distance-between-surfaces.py <distance-"
"between-surfaces.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/distance-between-surfaces.rst:255
msgid ""
":download:`Download Jupyter notebook: distance-between-surfaces.ipynb "
"<distance-between-surfaces.ipynb>`"
msgstr ""
":download:`Jupyter notebook: distance-between-surfaces.ipynb <distance-"
"between-surfaces.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_extract-cells-inside-"
"surface.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_extract-cells-inside-"
"surface.py>`     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:13
msgid "Extract Cells Inside Surface"
msgstr "サーフェス内のセルを抽出"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:15
msgid ""
"Extract the cells in a mesh that exist inside or outside a closed surface of"
" another mesh"
msgstr "別のメッシュの閉じたサーフェスの内側または外側に存在するメッシュ内のセルを抽出する"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:63
msgid "Mark points inside with 1 and outside with a 0"
msgstr "内側の点を1、外側の点を0でマークします。"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:99
msgid ""
"Extract two meshes, one completely inside and one completely outside the "
"enclosing surface."
msgstr "2つのメッシュ、1つは完全に内側、もう1つは完全に外側を抽出します。"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:116
msgid "display the results"
msgstr "結果を表示する"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:153
msgid "**Total running time of the script:** ( 0 minutes  4.219 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:168
msgid ""
":download:`Download Python source code: extract-cells-inside-surface.py "
"<extract-cells-inside-surface.py>`"
msgstr ""
":download:`Python source code: extract-cells-inside-surface.py <extract-"
"cells-inside-surface.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/extract-cells-inside-surface.rst:174
msgid ""
":download:`Download Jupyter notebook: extract-cells-inside-surface.ipynb "
"<extract-cells-inside-surface.ipynb>`"
msgstr ""
":download:`Jupyter notebook: extract-cells-inside-surface.ipynb <extract-"
"cells-inside-surface.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_extract-edges.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_extract-edges.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:13
msgid "Extract Edges"
msgstr "エッジを抽出"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:15
msgid "Extracts edges from a surface."
msgstr "サーフェスからエッジを抽出します。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:32
msgid "From vtk documentation, the edges of a mesh are one of the following:"
msgstr "vtkのマニュアルによると、メッシュのエッジは次のいずれかです。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:34
msgid "boundary (used by one polygon) or a line cell"
msgstr "境界(1つのポリゴンで使用)またはラインセル"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:35
msgid "non-manifold (used by three or more polygons)"
msgstr "非多様体(3つ以上の多角形によって使用されます)"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:36
msgid ""
"feature edges (edges used by two triangles and whose dihedral angle > "
"feature_angle)"
msgstr "フィーチャエッジ(2つの三角形で使用され、二面角がfeature_angleより大きいエッジ)"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:37
msgid "manifold edges (edges used by exactly two polygons)."
msgstr "多様体のエッジ(ちょうど2つのポリゴンで使用されるエッジ)。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:39
msgid ""
"This filter will extract those edges given a feature angle and return a "
"datset with lines that represent the edges of the original mesh. To "
"demonstrate, we will first extract the edges around Queen Nefertiti's eyes:"
msgstr ""
"このフィルタは、フィーチャ角度が指定されたエッジを抽出し、元のメッシュのエッジを表す線分のデータセットを返します。デモンストレーションでは、まずNefertiti女王の目の周りのエッジを抽出します。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:82
msgid ""
"We can do this anaylsis for any :class:`pyvista.PolyData` object. Let's try "
"the cow mesh example:"
msgstr "この解析は :class:`pyvista.PolyData` オブジェクトに対して行うことができます。牛のメッシュの例を見てみましょう。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:121
msgid ""
"We can leverage the :any:`pyvista.PolyData.n_open_edges` property and "
":func:`pyvista.PolyDataFilters.extract_feature_edges` filter to count and "
"extract the open edges on a :class:`pyvista.PolyData` mesh."
msgstr ""
":any:`pyvista.PolyData.n_open_edges` プロパティと "
":func:`pyvista.PolyDataFilters.extract_feature_edges` フィルタを利用して、 "
":class:`pyvista.PolyData` メッシュの開いたエッジをカウントおよび抽出できます。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:139
msgid "We can get a count of the open edges with:"
msgstr "次のコマンドを使用すると、開いたエッジの数を取得できます:"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:162
msgid ""
"And we can extract those edges with the ``boundary_edges`` option of "
":func:`pyvista.PolyDataFilters.extract_feature_edges`:"
msgstr ""
":func:`pyvista.PolyDataFilters.extract_feature_edges` の ``boundary_edges`` "
"オプションを使用すると、これらのエッジを抽出できます。"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:201
msgid "**Total running time of the script:** ( 0 minutes  15.709 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:216
msgid ""
":download:`Download Python source code: extract-edges.py <extract-edges.py>`"
msgstr ""
":download:`Python source code: extract-edges.py <extract-edges.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/extract-edges.rst:222
msgid ""
":download:`Download Jupyter notebook: extract-edges.ipynb <extract-"
"edges.ipynb>`"
msgstr ""
":download:`Jupyter notebook: extract-edges.ipynb <extract-edges.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_gaussian-"
"smoothing.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_gaussian-smoothing.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:13
msgid "Gaussian Smoothing"
msgstr "Gaussianスムージング"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:15
msgid "Perform a Gaussian convolution on a uniformly gridded data set."
msgstr "均一グリッドデータセットでGauss畳み込みを実行します。"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:17
msgid ""
":class:`pyvista.UniformGrid` data sets (a.k.a. images) a can be smoothed by "
"convolving the  image data set with a Gaussian for one- to three-dimensional"
" inputs. This is commonly referred to as Gaussian blurring and typically "
"used to reduce noise or decrease the detail of an image dataset"
msgstr ""
":class:`pyvista.UniformGrid` データ集合(a.k.a. イメージ) "
"aは、画像データ集合を1次元から3次元入力に対してガウス関数で畳み込むことによって平滑化することができる。これは、一般にガウスぼかしと呼ばれ、通常、ノイズを低減するか、または画像データセットの詳細を低減するために使用される。"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:47
msgid ""
"Let's apply the gaussian smoothing with different values of standard "
"deviation."
msgstr "異なる値の標準偏差でGaussスムージングを適用します。"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:98
msgid "Now let's see an example on a 3D dataset with volume rendering:"
msgstr "次に、ボリュームレンダリングを使用した3Dデータセットの例を見てみましょう:"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:151
msgid "**Total running time of the script:** ( 0 minutes  29.393 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:166
msgid ""
":download:`Download Python source code: gaussian-smoothing.py <gaussian-"
"smoothing.py>`"
msgstr ""
":download:`Python source code: gaussian-smoothing.py <gaussian-smoothing.py>"
" をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/gaussian-smoothing.rst:172
msgid ""
":download:`Download Jupyter notebook: gaussian-smoothing.ipynb <gaussian-"
"smoothing.ipynb>`"
msgstr ""
":download:`Jupyter notebook: gaussian-smoothing.ipynb <gaussian-"
"smoothing.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_geodesic.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_geodesic.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:13
msgid "Geodesic Paths"
msgstr "測地パス"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:15
msgid ""
"Calculates the geodesic path between two vertices using Dijkstra's algorithm"
msgstr "Dijkstraのアルゴリズムを使用して2つの頂点間の測地パスを計算します"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:34
msgid "Get the geodesic path as a new :class:`pyvista.PolyData` object:"
msgstr "測地線パスを新しい :class:`pyvista.PolyData` オブジェクトとして取得します。"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:55
msgid "Render the path along the land surface"
msgstr "ランドサーフェスに沿ってパスをレンダリングします"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:92
msgid "How long is that path?"
msgstr "その道はどのくらいの長さですか。"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:117
msgid "**Total running time of the script:** ( 0 minutes  16.264 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:132
msgid ":download:`Download Python source code: geodesic.py <geodesic.py>`"
msgstr ":download:`Python source code: geodesic.py <geodesic.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/geodesic.rst:138
msgid ":download:`Download Jupyter notebook: geodesic.ipynb <geodesic.ipynb>`"
msgstr ":download:`Jupyter notebook: geodesic.ipynb <geodesic.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_glyphs.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_glyphs.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:15
msgid "Plotting Glyphs (Vectors)"
msgstr "字形のプロット (ベクトル)"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:17
msgid "Use vectors in a dataset to plot and orient glyphs/geometric objects."
msgstr "データセット内のベクトルを使用して、記号/ジオメトリオブジェクトを印刷したり方向を設定します。"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:35
msgid ""
"Glyphying can be done via the :func:`pyvista.DataSetFilters.glyph` filter"
msgstr "グリフィイングは :func:`pyvista.DataSetFilters.glyph` フィルターを介して行うことができる"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:81
msgid ""
"Another approach is to load the vectors directly to the mesh object and then"
" access the :attr:`pyvista.Common.arrows` property."
msgstr ""
"もう1つの方法は、ベクトルを直接メッシュオブジェクトにロードし、 :attr:`pyvista.Common.arrows` "
"プロパティにアクセスすることです。"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:159
msgid "Subset of Glyphs"
msgstr "字形のサブセット"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:161
msgid ""
"Sometimes you might not want glyphs for every node in the input dataset. In "
"this case, you can choose to build glyphs for a subset of the input dataset "
"by using a merging tolerance. Here we specify a merging tolerance of five "
"percent which equates to five percent of the bounding box's length."
msgstr ""
"入力データセットのすべてのノードにグリフが必要ない場合があります。この場合、マージ許容値を使用して、入力データセットのサブセットのグリフを作成することを選択できます。ここでは、5パーセントのマージ許容値を指定します。これは、バウンディングボックスの長さの5パーセントに相当します。"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:204
msgid "**Total running time of the script:** ( 0 minutes  10.876 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:219
msgid ":download:`Download Python source code: glyphs.py <glyphs.py>`"
msgstr ":download:`Python source code: glyphs.py <glyphs.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/glyphs.rst:225
msgid ":download:`Download Jupyter notebook: glyphs.ipynb <glyphs.ipynb>`"
msgstr ":download:`Jupyter notebook: glyphs.ipynb <glyphs.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_gradients.py>`     to"
" download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_gradients.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:13
msgid "Compute Gradients of a Field"
msgstr "フィールドの勾配を計算する"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:15
msgid "Estimate the gradient of a scalar or vector field in a data set."
msgstr "Estimate the gradient of a scalar or vector field in a data set."

#: ../../pyvista/docs/examples/01-filter/gradients.rst:17
msgid ""
"The ordering for the output gradient tuple will be {du/dx, du/dy, du/dz, "
"dv/dx, dv/dy, dv/dz, dw/dx, dw/dy, dw/dz} for an input array {u, v, w}."
msgstr ""
"入力配列 {u, v, w} の場合、出力グラディエントタプルの順序は {du/dx, du/dy, du/dz, dv/dx, dv/dy, "
"dv/dz, dw/dx, dw/dy, dw/dz} になります。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:21
msgid "Showing the :func:`pyvista.DataSetFilters.compute_derivative` filter."
msgstr ":func:`pyvista.DataSetFilters.compute_derivative` フィルタを表示します。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:67
msgid ""
"Now compute the gradients of the ``vectors`` vector field in the point data "
"of that mesh. This is as simple as calling "
":func:`pyvista.DataSetFilters.compute_derivative`."
msgstr ""
"ここで、そのメッシュの点データにおける ``vectors`` ベクトルフィールドの勾配を計算する。これは "
":func:`pyvista.DataSetFilters.compute_derivative` を呼び出すのと同じくらい簡単です。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:104
msgid ""
"You can also use :func:`pyvista.DataSetFilters.compute_derivative` for "
"computing other derivative based quantities, such as divergence, vorticity, "
"and Q-criterion. See function documentation for options."
msgstr ""
"また、 :func:`pyvista.DataSetFilters.compute_derivative` "
"を使用して、発散、渦度、Q基準など、他の導関数ベースの量を計算することもできます。オプションについては、関数のマニュアルを参照してください。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:108
msgid ""
"``mesh_g[\"gradient\"]`` is an ``N`` by 9 NumPy array of the gradients, so "
"we could make a dictionary of NumPy arrays of the gradients like:"
msgstr ""
"``mesh_g[\"gradient\"]`` は勾配の 9 NumPy 配列による ``N`` "
"なので、勾配のNumPy配列の辞書を作ることができます:"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:148
msgid ""
"And we can add all of those components as individual arrays back to the mesh"
" by:"
msgstr "これらのコンポーネントを個別の配列としてメッシュに追加するには、次のようにします。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:238
msgid ""
"And there you have it, the gradients for a vector field! We could also do "
"this for a scalar  field like for the ``scalars`` field in the given "
"dataset."
msgstr ""
"これがベクトル場の勾配です!また、与えられたデータセットの ``scalars`` "
"フィールドのようなスカラーフィールドに対してもこれを行うことができます。"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:308
msgid "**Total running time of the script:** ( 0 minutes  5.761 seconds)"
msgstr "**Total running time of the script:** ( 0 minutes  5.761 seconds)"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:323
msgid ":download:`Download Python source code: gradients.py <gradients.py>`"
msgstr ":download:`Python source code: gradients.py <gradients.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/gradients.rst:329
msgid ""
":download:`Download Jupyter notebook: gradients.ipynb <gradients.ipynb>`"
msgstr ""
":download:`Jupyter notebook: gradients.ipynb <gradients.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_poly-ray-trace.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_poly-ray-trace.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:13
msgid "Ray Tracing"
msgstr "レイトレーシング"

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:15
msgid "Single line segment ray tracing for PolyData objects."
msgstr "PolyDataオブジェクトの単一線分セグメントのレイトレーシング。"

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:75
msgid "**Total running time of the script:** ( 0 minutes  1.281 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:90
msgid ""
":download:`Download Python source code: poly-ray-trace.py <poly-ray-"
"trace.py>`"
msgstr ""
":download:`Python source code: poly-ray-trace.py <poly-ray-trace.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/poly-ray-trace.rst:96
msgid ""
":download:`Download Jupyter notebook: poly-ray-trace.ipynb <poly-ray-"
"trace.ipynb>`"
msgstr ""
":download:`Jupyter notebook: poly-ray-trace.ipynb <poly-ray-trace.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_project-plane.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_project-plane.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:13
msgid "Project to a Plane"
msgstr "平面に投影"

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:15
msgid ""
":class:`pyvista.PolyData` surfaces and pointsets can easily be projected to "
"a plane defined by a normal and origin"
msgstr ":class:`pyvista.PolyData` サーフェスとポイントセットは、法線と原点によって定義される平面に簡単に投影できます。"

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:51
msgid "Project that surface to a plane underneath the surface"
msgstr "そのサーフェスをサーフェスの下の平面に投影します。"

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:89
msgid "**Total running time of the script:** ( 0 minutes  4.956 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:104
msgid ""
":download:`Download Python source code: project-plane.py <project-plane.py>`"
msgstr ""
":download:`Python source code: project-plane.py <project-plane.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/project-plane.rst:110
msgid ""
":download:`Download Jupyter notebook: project-plane.ipynb <project-"
"plane.ipynb>`"
msgstr ""
":download:`Jupyter notebook: project-plane.ipynb <project-plane.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/resample.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_resample.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_resample.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/resample.rst:13
msgid "Resampling & Interpolating"
msgstr "再サンプリングと補間"

#: ../../pyvista/docs/examples/01-filter/resample.rst:15
msgid "Resample one mesh's point/cell arrays onto another meshes nodes."
msgstr "1つのメッシュのポイント/セル配列を別のメッシュノードにリサンプルします。"

#: ../../pyvista/docs/examples/01-filter/resample.rst:17
msgid ""
"This example will resample a volumetric mesh's  scalar data onto the surface"
" of a sphere contained in that volume."
msgstr "この例では、ボリュームメッシュのスカラーデータを、そのボリュームに含まれる球体の表面にリサンプルします。"

#: ../../pyvista/docs/examples/01-filter/resample.rst:35
msgid "Query a grids points onto a sphere"
msgstr "球上のグリッドポイントを照会する"

#: ../../pyvista/docs/examples/01-filter/resample.rst:50
msgid "Plot the two datasets"
msgstr "2つのデータセットをプロットする"

#: ../../pyvista/docs/examples/01-filter/resample.rst:81
msgid "Run the algorithm and plot the result"
msgstr "アルゴリズムを実行し、結果をプロットします。"

#: ../../pyvista/docs/examples/01-filter/resample.rst:115
msgid "Interpolate"
msgstr "補間"

#: ../../pyvista/docs/examples/01-filter/resample.rst:117
msgid ""
"Resample the points' arrays onto a surface using an interpolation from a "
"Gaussian Kernel"
msgstr "Gaussカーネルからの補間を使用してサーフェス上にポイントの配列をリサンプルする"

#: ../../pyvista/docs/examples/01-filter/resample.rst:154
msgid "Run the interpolation"
msgstr "補間を実行します"

#: ../../pyvista/docs/examples/01-filter/resample.rst:191
msgid "**Total running time of the script:** ( 0 minutes  7.114 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/resample.rst:206
msgid ":download:`Download Python source code: resample.py <resample.py>`"
msgstr ":download:`Python source code: resample.py <resample.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/resample.rst:212
msgid ":download:`Download Jupyter notebook: resample.ipynb <resample.ipynb>`"
msgstr ":download:`Jupyter notebook: resample.ipynb <resample.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:8
msgid "**06:07.289** total execution time for **examples_01-filter** files:"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:11
msgid ""
":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py` (``clipping-"
"with-surface.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py` (``clipping-"
"with-surface.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:11
msgid "00:59.244"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py` (``slicing.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_slicing.py` (``slicing.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:13
msgid "00:31.284"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py` (``distance-"
"between-surfaces.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py` (``distance-"
"between-surfaces.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:15
msgid "00:30.239"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:17
msgid ""
":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py` (``gaussian-"
"smoothing.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py` (``gaussian-"
"smoothing.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:17
msgid "00:29.393"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:19
msgid ""
":ref:`sphx_glr_examples_01-filter_compute-normals.py` (``compute-"
"normals.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_compute-normals.py` (``compute-"
"normals.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:19
msgid "00:27.992"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py` (``voxelize.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_voxelize.py` (``voxelize.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:21
msgid "00:19.993"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_01-filter_boolean-operations.py` (``boolean-"
"operations.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_boolean-operations.py` (``boolean-"
"operations.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:23
msgid "00:19.202"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py` (``geodesic.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_geodesic.py` (``geodesic.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:25
msgid "00:16.264"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:27
msgid ""
":ref:`sphx_glr_examples_01-filter_compute-volume.py` (``compute-volume.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_compute-volume.py` (``compute-volume.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:27
msgid "00:16.046"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:29
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-edges.py` (``extract-edges.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_extract-edges.py` (``extract-edges.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:29
msgid "00:15.709"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py` (``streamlines.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_streamlines.py` (``streamlines.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:31
msgid "00:14.632"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:33
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py` (``contouring.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_contouring.py` (``contouring.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:33
msgid "00:12.166"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py` (``glyphs.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_glyphs.py` (``glyphs.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:35
msgid "00:10.876"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:37
msgid ""
":ref:`sphx_glr_examples_01-filter_surface-smoothing.py` (``surface-"
"smoothing.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_surface-smoothing.py` (``surface-"
"smoothing.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:37
msgid "00:07.152"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:39
msgid ":ref:`sphx_glr_examples_01-filter_resample.py` (``resample.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_resample.py` (``resample.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:39
msgid "00:07.114"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_01-filter_cell-centers.py` (``cell-centers.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_cell-centers.py` (``cell-centers.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:41
msgid "00:06.439"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:43
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py` (``clipping.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_clipping.py` (``clipping.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:43
msgid "00:06.099"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:45
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py` (``gradients.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_gradients.py` (``gradients.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:45
msgid "00:05.761"
msgstr "00:05.761"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_01-filter_project-plane.py` (``project-plane.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_project-plane.py` (``project-plane.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:47
msgid "00:04.956"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:49
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py` (``decimate.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_decimate.py` (``decimate.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:49
msgid "00:04.893"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:51
msgid ""
":ref:`sphx_glr_examples_01-filter_using-filters.py` (``using-filters.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_using-filters.py` (``using-filters.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:51
msgid "00:04.809"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_examples_01-filter_connectivity.py` (``connectivity.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_connectivity.py` (``connectivity.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:53
msgid "00:04.774"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:55
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py` "
"(``extract-cells-inside-surface.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py` "
"(``extract-cells-inside-surface.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:55
msgid "00:04.219"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:57
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py` (``subdivide.py``)"
msgstr ":ref:`sphx_glr_examples_01-filter_subdivide.py` (``subdivide.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:57
msgid "00:03.555"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_01-filter_warp-by-vector.py` (``warp-by-vector.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_warp-by-vector.py` (``warp-by-vector.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:59
msgid "00:03.198"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:61
msgid ""
":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py` (``poly-ray-trace.py``)"
msgstr ""
":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py` (``poly-ray-trace.py``)"

#: ../../pyvista/docs/examples/01-filter/sg_execution_times.rst:61
msgid "00:01.281"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_slicing.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_slicing.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:13
msgid "Slicing"
msgstr "スライシング"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:15
msgid "Extract thin planar slices from a volume"
msgstr "ボリュームから薄い平面スライスを抽出します"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:33
msgid ""
"PyVista meshes have several slicing filters bound directly to all datasets. "
"These filters allow you to slice through a volumetric dataset to extract and"
" view sections through the volume of data."
msgstr ""
"PyVistaメッシュには、すべてのデータセットに直接バインドされた複数のスライシングフィルタがあります。これらのフィルタを使用すると、ボリュームデータセットをスライスして、データのボリュームからセクションを抽出して表示できます。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:37
msgid ""
"One of the most common slicing filters used in PyVista is the "
":func:`pyvista.DataSetFilters.slice_orthogonal` filter which creates three "
"orthogonal slices through the dataset parallel to the three Cartesian "
"planes. For example, let's slice through the sample geostatistical training "
"image volume. First, load up the volume and preview it:"
msgstr ""
"PyVistaで使用される最も一般的なスライシングフィルタの1つは、 3つの直交面に平行なデータセットを通して3つの直交スライスを生成する "
":func:`pyvista.DataSetFilters.slice_orthogonal` "
"フィルタです。たとえば、サンプルの地理統計トレーニングイメージボリュームをスライスしてみましょう。まず、ボリュームをロードしてプレビューします。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:75
msgid ""
"Note that this dataset is a 3D volume and there might be regions within this"
" volume that we would like to inspect. We can create slices through the mesh"
" to gain further insight about the internals of the volume."
msgstr ""
"このデータセットは3 "
"Dボリュームであり、このボリューム内に検査したい領域がある場合があります。メッシュを使用してスライスを作成し、ボリュームの内部についてさらに詳しく調べることができます。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:109
msgid "The orthogonal slices can be easily translated throughout the volume:"
msgstr "直交スライスは、ボリューム全体で簡単に変換できます:"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:138
msgid ""
"We can also add just a single slice of the volume by specifying the origin "
"and normal of the slicing plane with the "
":func:`pyvista.DataSetFilters.slice` filter:"
msgstr ""
":func:`pyvista.DataSetFilters.slice`  "
"フィルタでスライス平面の原点と法線を指定することで、ボリュームの単一スライスを追加することもできます。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:174
msgid ""
"Adding slicing planes uniformly across an axial direction can also be "
"automated with the :func:`pyvista.DataSetFilters.slice_along_axis` filter:"
msgstr ""
"軸方向に均一にスライス平面を追加することも、 :func:`pyvista.DataSetFilters.slice_along_axis` "
"フィルタを使用して自動化できます。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:208
msgid "Slice Along Line"
msgstr "線分に沿ってスライス"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:210
msgid ""
"We can also slice a dataset along a :func:`pyvista.Spline` or "
":func:`pyvista.Line` using the :func:`DataSetFilters.slice_along_line` "
"filter."
msgstr ""
":func:`DataSetFilters.slice_along_line` フィルタを用いて :func:`pyvista.Spline` または "
":func:`pyvista.Line` に沿ってデータセットをスライスすることもできる。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:213
msgid ""
"First, define a line source through the dataset of interest. Please note "
"that this type of slicing is computationally expensive and might take a "
"while if there are a lot of points in the line - try to keep the resolution "
"of the line low."
msgstr ""
"最初に、対象のデータセットを使用して線のソースを定義します。このタイプのスライスは計算コストが高く、線に多くの点がある場合は時間がかかることに注意してください。線の解像度を低くしてください。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:267
msgid "Then run the filter"
msgstr "次に、フィルタを実行します。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:335
msgid "Multiple Slices in Vector Direction"
msgstr "ベクトル方向の複数のスライス"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:337
msgid "Slice a mesh perpendicularly along a vector direction perpendicularly."
msgstr "ベクトル方向に沿って垂直にメッシュをスライスします。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:404
msgid "Slice At Different Bearings"
msgstr "異なる軸受でスライス"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:406
msgid ""
"From `pyvista-support#23 <https://github.com/pyvista/pyvista-"
"support/issues/23>`_"
msgstr ""
"`pyvista-support#23 <https://github.com/pyvista/pyvista-support/issues/23>`_"
" から"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:408
msgid ""
"An example of how to get many slices at different bearings all centered "
"around a user-chosen location."
msgstr "ユーザーが選択した位置を中心にして、さまざまな方位のスライスを多数作成する方法の例。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:411
msgid "Create a point to orient slices around"
msgstr "スライスを方向付けるポイントの作成"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:426
msgid ""
"Now generate a few normal vectors to rotate a slice around the z-axis. Use "
"equation for circle since its about the Z-axis."
msgstr "ここで、Z軸を中心にスライスを回転させる法線ベクトルをいくつか生成します。円はZ軸を中心としているため、円の計算式を使用します。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:472
msgid "And now display it!"
msgstr "これを表示します。"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:505
msgid "**Total running time of the script:** ( 0 minutes  31.284 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/slicing.rst:520
msgid ":download:`Download Python source code: slicing.py <slicing.py>`"
msgstr ":download:`Python source code: slicing.py <slicing.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/slicing.rst:526
msgid ":download:`Download Jupyter notebook: slicing.ipynb <slicing.ipynb>`"
msgstr ":download:`Jupyter notebook: slicing.ipynb <slicing.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_streamlines.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_streamlines.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:13
msgid "Streamlines"
msgstr "流線"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:15
msgid "Integrate a vector field to generate streamlines."
msgstr "ベクトルフィールドを積分して、流線を生成します。"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:17
msgid ""
"This example generates streamlines of blood velocity. An isosurface of speed"
" provides context. The starting positions for the streamtubes were "
"determined by experimenting with the data."
msgstr "この例では、血流速度の流線を生成します。速度の等値面がコンテキストを提供します。流管の開始位置はデータを実験して決定しました。"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:38
msgid "Carotid"
msgstr "頸動脈"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:39
msgid ""
"Download a sample dataset containing a vector field that can be integrated."
msgstr "統合可能なベクトルフィールドを含むサンプルデータセットをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:54
msgid "Run the stream line filtering algorithm."
msgstr "流線フィルタリングアルゴリズムを実行します。"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:77
msgid ""
"Display the results! Please note that because this dataset's velocity field "
"was measured with low resolution, many streamlines travel outside the "
"artery."
msgstr "結果を表示します。このデータセットの速度場は低分解能で測定されたため、多くの流線が動脈の外側を通過することに注意してください。"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:115
msgid "Blood Vessels"
msgstr "血管"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:116
msgid "Here is another example of blood flow:"
msgstr "血流の別の例を次に示します:"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:171
msgid "Kitchen"
msgstr "キッチン"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:234
msgid "Custom 3D Vector Field"
msgstr "カスタム3 Dベクトルフィールド"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:306
msgid "**Total running time of the script:** ( 0 minutes  14.632 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:321
msgid ""
":download:`Download Python source code: streamlines.py <streamlines.py>`"
msgstr ""
":download:`Python source code: streamlines.py <streamlines.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/streamlines.rst:327
msgid ""
":download:`Download Jupyter notebook: streamlines.ipynb <streamlines.ipynb>`"
msgstr ""
":download:`Jupyter notebook: streamlines.ipynb <streamlines.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_subdivide.py>`     to"
" download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_subdivide.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:13
msgid "Subdivide Cells"
msgstr "セルのサブディバイド"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:15
msgid ""
"Increase the number of triangles in a single, connected triangular mesh."
msgstr "単一の接続された三角形メッシュ内の三角形の数を増やします。"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:17
msgid ""
"The :func:`pyvista.PolyDataFilters.subdivide` filter utilitizes three "
"different subdivision algorithms to subdivide a mesh's cells: `butterfly`, "
"`loop`, or `linear`."
msgstr ""
":func:`pyvista.PolyDataFilters.subdivide` フィルタは、 `butterfly` 、 `loop` 、 "
"`linear` の3つの異なるサブディビジョンアルゴリズムを使用してメッシュのセルをサブディバイドします。"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:34
msgid ""
"First, let's load a **triangulated** mesh to subdivide. We can use the "
":func:`pyvista.DataSetFilters.triangulate` filter to ensure the mesh we are "
"using is purely triangles."
msgstr ""
"まず、 **triangulated** メッシュをロードして再分割しましょう。 "
":func:`pyvista.DataSetFilters.triangulate` "
"フィルタを使用して、使用しているメッシュが純粋な三角形であることを確認できます。"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:54
msgid ""
"Now, lets do a few subdivisions with the mesh and compare the results. Below"
" is a helper function to make a comparison plot of thee different "
"subdivisions."
msgstr "ここで、メッシュをいくつか分割して、結果を比較してみましょう。以下は、さまざまな小区分の比較プロットを作成するヘルパー関数です。"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:92
msgid "Run the subdivisions for 1 and 3 levels."
msgstr "1レベルと3レベルの区画を実行します。"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:125
msgid "**Total running time of the script:** ( 0 minutes  3.555 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:140
msgid ":download:`Download Python source code: subdivide.py <subdivide.py>`"
msgstr ":download:`Python source code: subdivide.py <subdivide.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/subdivide.rst:146
msgid ""
":download:`Download Jupyter notebook: subdivide.ipynb <subdivide.ipynb>`"
msgstr ""
":download:`Jupyter notebook: subdivide.ipynb <subdivide.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_surface-"
"smoothing.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_surface-smoothing.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:13
msgid "Surface Smoothing"
msgstr "サーフェイススムージング"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:15
msgid "Smoothing rough edges of a surface mesh"
msgstr "サーフェスメッシュの粗いエッジをスムージングする"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:31
msgid ""
"Suppose you extract a volumetric subset of a dataset that has roughly "
"defined edges. Perhaps you'd like a smooth representation of that model "
"region. This can be achieved by extracting the bounding surface of the "
"volume and applying a :func:`pyvista.PolyData.smooth` filter."
msgstr ""
"大まかに定義されたエッジを持つデータセットのボリュームサブセットを抽出するとします。おそらく、そのモデル領域をスムーズに表現する必要があります。これは、ボリュームの境界サーフェスを抽出し、"
" :func:`pyvista.PolyData.smooth` フィルタを適用することで実現できます。"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:36
msgid ""
"The below code snippet loads a sample roughly edged volumetric dataset:"
msgstr "次のコードスニペットは、サンプルの大まかなエッジのボリュームデータセットをロードします。"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:72
msgid ""
"Extract the outer surface of the volume using the "
":func:`pyvista.DataSetFilters.extract_geometry` filter and then apply the "
"smoothing filter:"
msgstr ""
":func:`pyvista.DataSetFilters.extract_geometry` "
"フィルタを使用してボリュームの外側サーフェスを抽出し、次にスムージングフィルタを適用します。"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:107
msgid ""
"Not smooth enough? Try increasing the number of iterations for the Laplacian"
" smoothing algorithm:"
msgstr "滑らかさが足りませんか?Laplacianスムージングアルゴリズムの反復回数を増やしてみます。"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:139
msgid ""
"Still not smooth enough? Increase the number of iterations for the Laplacian"
" smoothing algorithm to a crazy high value:"
msgstr "まだ滑らかではありませんか?ラプラシアン平滑化アルゴリズムの反復回数を非常に高い値に増やします。"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:173
msgid "**Total running time of the script:** ( 0 minutes  7.152 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:188
msgid ""
":download:`Download Python source code: surface-smoothing.py <surface-"
"smoothing.py>`"
msgstr ""
":download:`Python source code: surface-smoothing.py <surface-smoothing.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/surface-smoothing.rst:194
msgid ""
":download:`Download Jupyter notebook: surface-smoothing.ipynb <surface-"
"smoothing.ipynb>`"
msgstr ""
":download:`Jupyter notebook: surface-smoothing.ipynb <surface-"
"smoothing.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_using-filters.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_using-filters.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:13
msgid "Using Common Filters"
msgstr "共通フィルタの使用"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:15
msgid "Using common filters like thresholding and clipping"
msgstr "閾値設定やクリッピングなどの一般的なフィルタの使用"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:32
msgid ""
"PyVista wrapped data objects have a suite of common filters ready for "
"immediate use directly on the object. These filters include the following "
"(see :ref:`filters_ref` for a complete list):"
msgstr ""
"PyVistaラップされたデータオブジェクトには、オブジェクト上で直接使用できるように、一連の共通フィルタが用意されています。これらのフィルタには、次のものがあります(完全なリストについては"
" :ref:`filters_ref` を参照)。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:36
msgid ""
"``slice``: creates a single slice through the input dataset on a user "
"defined plane"
msgstr "``slice``: ユーザ定義平面上の入力データセットから単一のスライスを作成します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:37
msgid ""
"``slice_orthogonal``: creates a ``MultiBlock`` dataset of three orthogonal "
"slices"
msgstr "``slice_orthogonal``: 3つの直交スライスの ``MultiBlock`` データセットを作成する"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:38
msgid ""
"``slice_along_axis``: creates a ``MultiBlock`` dataset of many slices along "
"a specified axis"
msgstr ""
"``slice_along_axis``: creates a ``MultiBlock`` dataset of many slices along "
"a specified axis"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:39
msgid ""
"``threshold``: Thresholds a dataset by a single value or range of values"
msgstr "``threshold``: 単一の値または値の範囲によるデータセットの閾値"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:40
msgid "``threshold_percent``: Threshold by percentages of the scalar range"
msgstr "``threshold_percent``: スカラー範囲のパーセンテージによる閾値"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:41
msgid "``clip``: Clips the dataset by a user defined plane"
msgstr "``clip``: ユーザ定義平面によってデータセットをクリップします"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:42
msgid "``outline_corners``: Outlines the corners of the data extent"
msgstr "``outline_corners``: データ範囲の隅のアウトラインを表示します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:43
msgid "``extract_geometry``: Extract surface geometry"
msgstr "``extract_geometry``: サーフェスジオメトリを抽出する"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:45
msgid ""
"To use these filters, call the method of your choice directly on your data "
"object:"
msgstr "これらのフィルタを使用するには、データ・オブジェクトで選択したメソッドを直接呼び出します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:67
msgid ""
"And now there is a thresholded version of the input dataset in the new "
"``threshed`` object. To learn more about what keyword arguments are "
"available to alter how filters are executed, print the docstring for any "
"filter attached to PyVista objects with either ``help(dataset.threshold)`` "
"or using ``shift+tab`` in an IPython environment."
msgstr ""
"これで、新しい ``threshed`` "
"オブジェクトに入力データセットのしきい値が設定されたバージョンがあります。フィルタの実行方法を変更するためにどのようなキーワード引数を使用できるかを調べるには、"
" ``help(dataset.threshold)`` またはIPython環境で ``shift+tab`` "
"を使用してPyVistaオブジェクトに付加されたフィルタのdocstringを出力します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:73
msgid ""
"We can now plot this filtered dataset along side an outline of the original "
"dataset"
msgstr "このフィルタ処理されたデータセットを、元のデータセットのアウトラインに沿ってプロットできるようになりました。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:108
msgid ""
"What about other filters? Let's collect a few filter results and compare "
"them:"
msgstr "他のフィルターはどうですか?いくつかのフィルタ結果を収集して比較してみましょう。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:164
msgid "Filter Pipeline"
msgstr "フィルタパイプライン"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:166
msgid ""
"In VTK, filters are often used in a pipeline where each algorithm passes its"
" output to the next filtering algorithm. In PyVista, we can mimic the "
"filtering pipeline through a chain; attaching each filter to the last "
"filter. In the following example, several filters are chained together:"
msgstr ""
"VTKでは、フィルタがパイプラインで使用されることが多く、各アルゴリズムはその出力を次のフィルタリング・アルゴリズムに渡します。PyVistaでは、次のようにしてフィルタリングパイプラインを模倣できます。各フィルタを最後のフィルタにアタッチします。次の例では、複数のフィルタが連結されています。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:171
msgid "First, and empty ``threshold`` filter to clean out any ``NaN`` values."
msgstr "まず、 ``threshold`` フィルタを空にして、 ``NaN`` 値をすべて消去します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:172
msgid ""
"Use an ``elevation`` filter to generate scalar values corresponding to "
"height."
msgstr "``elevation`` フィルタを使用して、高さに対応するスカラー値を生成します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:173
msgid "Use the ``clip`` filter to cut the dataset in half."
msgstr "``clip`` フィルタを使用して、データセットを半分にカットします。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:174
msgid ""
"Create three slices along each axial plane using the ``slice_orthogonal`` "
"filter."
msgstr "``slice_orthogonal`` フィルタを使用して、各軸平面に沿ってスライスを3つ作成します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:190
msgid ""
"And to view this filtered data, simply call the ``plot`` method "
"(``result.plot()``) or create a rendering scene:"
msgstr ""
"フィルタリングされたデータを表示するには、 ``plot`` メソッド (``result.plot()``) "
"を呼び出すか、レンダリングシーンを作成します。"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:226
msgid "**Total running time of the script:** ( 0 minutes  4.809 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:241
msgid ""
":download:`Download Python source code: using-filters.py <using-filters.py>`"
msgstr ""
":download:`Python source code: using-filters.py <using-filters.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/using-filters.rst:247
msgid ""
":download:`Download Jupyter notebook: using-filters.ipynb <using-"
"filters.ipynb>`"
msgstr ""
":download:`Jupyter notebook: using-filters.ipynb <using-filters.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_voxelize.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_voxelize.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:13
msgid "Voxelize a Surface Mesh"
msgstr "サーフェスメッシュをボクセル化する"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:15
msgid ""
"Create a voxel model (like legos) of a closed surface or volumetric mesh."
msgstr "閉じたサーフェスまたはボリュームメッシュのボクセルモデル(レゴのように)を作成します。"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:17
msgid ""
"This example also demonstrates how to compute an implicit distance from a "
"bounding :class:`pyvista.PolyData` surface."
msgstr "この例はまた、境界 :class:`pyvista.PolyData` 表面からの陰的距離を計算する方法を示す。"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:86
msgid "Create a voxel model of the bounding surface"
msgstr "境界面のボクセルモデルを作成する"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:120
msgid ""
"We could even add a scalar field to that new voxel model in case we wanted "
"to create grids for modelling. In this case, let's add a scalar field for "
"bone density noting:"
msgstr ""
"モデリング用のグリッドを作成する場合に備えて、新しいボクセルモデルにスカラーフィールドを追加することもできます。ここでは、ボーン密度のスカラーフィールドを追加します。"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:187
msgid ""
"A constant scalar field is kind of boring, so let's get a little fancier by "
"added a scalar field that varies by the distance from the bounding surface."
msgstr ""
"一定のスカラーフィールドは退屈なので、バウンディングサーフェスからの距離によって変化するスカラーフィールドを追加して少しおしゃれにしましょう。"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:260
msgid "**Total running time of the script:** ( 0 minutes  19.993 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:275
msgid ":download:`Download Python source code: voxelize.py <voxelize.py>`"
msgstr ":download:`Python source code: voxelize.py <voxelize.py> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/voxelize.rst:281
msgid ":download:`Download Jupyter notebook: voxelize.ipynb <voxelize.ipynb>`"
msgstr ":download:`Jupyter notebook: voxelize.ipynb <voxelize.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_warp-by-vector.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_01-filter_warp-by-vector.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:13
msgid "Warping by Vectors"
msgstr "ベクトルによるワープ"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:15
msgid ""
"This example applies the ``warp_by_vector`` filter to a sphere mesh that has"
" 3D displacement vectors defined at each node."
msgstr ""
"この例では、 ``warp_by_vector`` フィルタを、各ノードで定義された3 Dディスプレイスメントベクトルを持つ球メッシュに適用します。"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:18
msgid "We first compare the unwarped sphere to the warped sphere."
msgstr "まず、ワープしていない球体とワープしている球体を比較します。"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:57
msgid ""
"We then use several values for the scale factor applied to the warp "
"operation. Applying a warping factor that is too high can often lead to "
"unrealistic results."
msgstr ""
"次に、ワープ操作に適用されるスケール係数にいくつかの値を使用します。過度に高いワープ係数を適用すると、非現実的な結果になることがよくあります。"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:98
msgid "**Total running time of the script:** ( 0 minutes  3.198 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:113
msgid ""
":download:`Download Python source code: warp-by-vector.py <warp-by-"
"vector.py>`"
msgstr ""
":download:`Python source code: warp-by-vector.py <warp-by-vector.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/01-filter/warp-by-vector.rst:119
msgid ""
":download:`Download Jupyter notebook: warp-by-vector.ipynb <warp-by-"
"vector.ipynb>`"
msgstr ""
":download:`Jupyter notebook: warp-by-vector.ipynb <warp-by-vector.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_background_image.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_background_image.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:13
msgid "Background Image"
msgstr "背景イメージ"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:15
msgid "Add a background image with ``add_background_image``"
msgstr "``add_background_image`` で背景画像を追加する"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:32
msgid "Plot an airplane with the map of the earth in the background"
msgstr "地球の地図を背景に飛行機を配置する"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:66
msgid "Plot several earth related plots"
msgstr "複数の地球関連プロットをプロットする"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:117
msgid "**Total running time of the script:** ( 0 minutes  8.549 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/background_image.rst:132
msgid ""
":download:`Download Python source code: background_image.py "
"<background_image.py>`"
msgstr ""
":download:`Python source code: background_image.py <background_image.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/background_image.rst:138
msgid ""
":download:`Download Jupyter notebook: background_image.ipynb "
"<background_image.ipynb>`"
msgstr ""
":download:`Jupyter notebook: background_image.ipynb <background_image.ipynb>"
" をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/clear.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_clear.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_clear.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/clear.rst:13
msgid "Clearing a Mesh or the Entire Plot"
msgstr "メッシュまたはプロット全体の消去"

#: ../../pyvista/docs/examples/02-plot/clear.rst:15
msgid "This example demonstrates how to remove elements from a scene."
msgstr "この例では、シーンから要素を削除する方法を示します。"

#: ../../pyvista/docs/examples/02-plot/clear.rst:63
msgid "Clearing the entire plotting window:"
msgstr "プロットウィンドウ全体をクリアする:"

#: ../../pyvista/docs/examples/02-plot/clear.rst:97
msgid ""
"Or you can give any actor a ``name`` when adding it and if an actor is added"
" with that same name at a later time, it will replace the previous actor:"
msgstr "または、追加するときに任意のアクターに ``name`` を指定し、アクターが後で同じ名前で追加された場合に、前のアクターを置き換えます:"

#: ../../pyvista/docs/examples/02-plot/clear.rst:133
msgid "**Total running time of the script:** ( 0 minutes  1.472 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/clear.rst:148
msgid ":download:`Download Python source code: clear.py <clear.py>`"
msgstr ":download:`Python source code: clear.py <clear.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/clear.rst:154
msgid ":download:`Download Jupyter notebook: clear.ipynb <clear.ipynb>`"
msgstr ":download:`Jupyter notebook: clear.ipynb <clear.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_cmap.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_cmap.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:13
msgid "Colormap Choices"
msgstr "カラーマップの選択肢"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:15
msgid ""
"Use a Matplotlib, Colorcet, cmocean, or custom colormap when plotting scalar"
" values."
msgstr "スカラー値をプロットする場合は、Matplotlib、Colorcet、cmocean、またはカスタムカラーマップを使用します。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:35
msgid ""
"Any colormap built for ``matplotlib``, ``colorcet``, or ``cmocean`` is fully"
" compatible with PyVista. Colormaps are typically specified by passing the "
"string name of the colormap to the plotting routine via the ``cmap`` "
"argument."
msgstr ""
"``matplotlib`` 、 ``colorcet`` 、 ``cmocean`` "
"用に作成されたカラーマップはすべてPyVistaと完全に互換性があります。カラーマップは通常、 ``cmap`` "
"引数によってカラーマップの文字列名をプロットルーチンに渡すことで指定します。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:40
msgid ""
"See `Matplotlib's complete list of available colormaps`_, `Colorcet's "
"complete list`_, and `cmocean's complete list`_."
msgstr ""
"`Matplotlib's complete list of available colormaps`_ 、 `Colorcet's complete "
"list`_ および `cmocean's complete list`_ を参照。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:48
msgid "Custom Made Colormaps"
msgstr "カスタムメイドのカラーマップ"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:50
msgid ""
"To get started using a custom colormap, download some data with scalar "
"values to plot."
msgstr "カスタムのカラーマップを使い始めるには、スカラー値を含むデータをダウンロードしてプロットします。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:68
msgid ""
"Build a custom colormap - here we make a colormap with 5 discrete colors and"
" we specify the ranges where those colors fall:"
msgstr "独自のカラーマップを作成します。ここでは、5つの個別の色を持つカラーマップを作成し、それらの色の範囲を指定します:"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:100
msgid "Simply pass the colormap to the plotting routine!"
msgstr "単にカラーマップを描画ルーチンに渡すだけです!"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:128
msgid ""
"Or you could make a simple colormap... any Matplotlib colormap can be passed"
" to PyVista!"
msgstr "あるいは、簡単なカラーマップを作ることもできます...どんなMatplotlibカラーマップでもPyVistaに渡すことができます!"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:158
msgid ""
"You can also pass a list of color strings to the color map.  This approach "
"divides up the colormap into 5 equal parts."
msgstr "カラー文字列のリストをカラーマップに渡すこともできます。この方法では、カラーマップは5等分されます。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:187
msgid ""
"If you still wish to have control of the separation of values, you can do "
"this by creating a scalar array and passing that to the plotter along with "
"the the colormap"
msgstr "値の分離を制御したい場合は、スカラー配列を作成し、それをカラーマップとともにプロッタに渡すことで制御できます。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:225
msgid "Matplotlib vs. Colorcet"
msgstr "Matplotlib対Colorcet"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:227
msgid ""
"Let's compare Colorcet's perceptually uniform \"fire\" colormap to "
"Matplotlib's \"hot\" colormap much like the example on the `first page of "
"Colorcet's docs`_."
msgstr ""
"Colorcetの知覚的に一様な \"fire\" カラーマップとMatplotlibの \"hot\" カラーマップを `first page of "
"Colorcet's docs`_ の例のように比較してみましょう。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:232
msgid ""
"The \"hot\" version washes out detail at the high end, as if the image is "
"overexposed, while \"fire\" makes detail visible throughout the data range."
msgstr ""
"\"hot\" バージョンは、画像が露出オーバーであるかのようにハイエンドのディテールを洗い流しますが、 \"fire\" "
"バージョンは、データ範囲を通してディテールを可視化します。"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:235
msgid ""
"Please note that in order to use Colorcet's colormaps including \"fire\", "
"you must have Colorcet installed in your Python environment: ``pip install "
"colorcet``"
msgstr ""
"\"fire\" "
"を含むColorcetのカラーマップを使用するには、Python環境にColorcetをインストールしておく必要があることに注意してください: "
"``pip install colorcet``"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:285
msgid "**Total running time of the script:** ( 0 minutes  14.248 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/cmap.rst:300
msgid ":download:`Download Python source code: cmap.py <cmap.py>`"
msgstr ":download:`Python source code: cmap.py <cmap.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/cmap.rst:306
msgid ":download:`Download Jupyter notebook: cmap.ipynb <cmap.ipynb>`"
msgstr ":download:`Jupyter notebook: cmap.ipynb <cmap.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_depth-peeling.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_depth-peeling.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:13
msgid "Depth Peeling"
msgstr "深度ピーリング"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:15
msgid ""
"Depth peeling is a technique to correctly render translucent geometry. This "
"is not enabled by default in :any:`pyvista.rcParams` as some operating "
"systems and versions of VTK have issues with this routine."
msgstr ""
"デプスのピーリングは、半透明のジオメトリを正しくレンダーするテクニックです。いくつかのオペレーティングシステムとVTKのバージョンはこのルーチンで問題があるので、"
" :any:`pyvista.rcParams` ではデフォルトで有効になっていません。"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:19
msgid ""
"For this example, we will showcase the difference that depth peeling "
"provides."
msgstr "この例では、深度ピーリングによって得られる違いを示します。"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:97
msgid ""
"The following room surfaces example mesh, provided courtesy of `Sam Potter "
"<https://github.com/sampotter>`_ has coincident topology and depth rendering"
" helps correctly render those geometries when a global opacity value is "
"used."
msgstr ""
"次の部屋のサーフェスの例では、 `Sam Potter <https://github.com/sampotter>`_ "
"によって提供されたメッシュは、トポロジが一致しており、グローバル不透明度値が使用されている場合に、深度レンダリングがこれらのジオメトリを正しくレンダリングするのに役立ちます。"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:147
msgid ""
"And here is another example wheen rendering many translucent contour "
"surfaces."
msgstr "次に、多くの半透明のコンタサーフェスをレンダリングする別の例を示します。"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:196
msgid "**Total running time of the script:** ( 2 minutes  8.483 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:211
msgid ""
":download:`Download Python source code: depth-peeling.py <depth-peeling.py>`"
msgstr ""
":download:`Python source code: depth-peeling.py <depth-peeling.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/depth-peeling.rst:217
msgid ""
":download:`Download Jupyter notebook: depth-peeling.ipynb <depth-"
"peeling.ipynb>`"
msgstr ""
":download:`Jupyter notebook: depth-peeling.ipynb <depth-peeling.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/edges.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_edges.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_edges.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/edges.rst:13
msgid "Show Edges"
msgstr "エッジを表示"

#: ../../pyvista/docs/examples/02-plot/edges.rst:15
msgid "Show the edges of all geometries within a mesh"
msgstr "メッシュ内のすべてのジオメトリのエッジを表示"

#: ../../pyvista/docs/examples/02-plot/edges.rst:17
msgid ""
"Sometimes it can be useful to show all of the edges of a mesh when rendering"
" to communicate aspects of the dataset like resolution."
msgstr "レンダリング時にメッシュのすべてのエッジを表示して、解像度などのデータセットの側面を伝えると便利な場合があります。"

#: ../../pyvista/docs/examples/02-plot/edges.rst:20
msgid ""
"Showing the edges for any rendered dataset is as simple as specifying the "
"the ``show_edges`` keyword argument to ``True`` when plotting a dataset."
msgstr ""
"レンダリングされたデータセットのエッジを表示するには、データセットをプロットするときに ``True`` に ``show_edges`` "
"キーワード引数を指定するだけです。"

#: ../../pyvista/docs/examples/02-plot/edges.rst:65
msgid "**Total running time of the script:** ( 0 minutes  14.834 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edges.rst:80
msgid ":download:`Download Python source code: edges.py <edges.py>`"
msgstr ":download:`Python source code: edges.py <edges.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/edges.rst:86
msgid ":download:`Download Jupyter notebook: edges.ipynb <edges.ipynb>`"
msgstr ":download:`Jupyter notebook: edges.ipynb <edges.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/edl.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_edl.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_edl.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:15
msgid "Eye Dome Lighting"
msgstr "Eye Dome Lighting"

#: ../../pyvista/docs/examples/02-plot/edl.rst:17
msgid ""
"Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading "
"technique designed to improve depth perception in scientific visualization "
"images. To learn more, please see `this blog post`_."
msgstr ""
"Eye‐Dome Lighting (EDL) "
"は、科学的可視化画像における奥行き知覚を改善するために設計された非フォトリアリスティック、画像ベースシェーディングテクニックである。詳しくは `this"
" blog post`_ をご覧ください。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:43
msgid "Statue"
msgstr "像"

#: ../../pyvista/docs/examples/02-plot/edl.rst:45
msgid ""
"Eye-Dome Lighting can dramatically improve depth perception when plotting "
"incredibly sophisticated meshes like the creative commons Queen Nefertiti "
"statue:"
msgstr ""
"Eye-Dome "
"Lightingは、クリエイティブ・コモンズのNefertiti女王像のような非常に洗練されたメッシュを描画するときに、奥行きの知覚を劇的に向上させることができます。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:77
msgid "Here we will compare a EDL shading side by side with normal shading"
msgstr "ここでは、EDLシェーディングと通常のシェーディングを並べて比較します。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:122
msgid "Point Cloud"
msgstr "点群"

#: ../../pyvista/docs/examples/02-plot/edl.rst:124
msgid ""
"When plotting a simple point cloud, it can be difficult to perceive depth. "
"Take this Lidar point cloud for example:"
msgstr "単純な点群を印刷する場合、深さを認識するのが難しいことがあります。このライダーポイントクラウドを例にとってみましょう。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:141
msgid "And now plot this point cloud as-is:"
msgstr "次に、この点群をそのままプロットします:"

#: ../../pyvista/docs/examples/02-plot/edl.rst:174
msgid ""
"We can improve the depth mapping by enabling eye dome lighting on the "
"renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`."
msgstr ""
":func:`pyvista.Renderer.enable_eye_dome_lighting` "
"を使用してレンダラーで目のドーム照明を有効にすることで、深度マッピングを改善できます。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:209
msgid "The eye dome lighting mode can also handle plotting scalar arrays:"
msgstr "Eye Dome Lightingモードでは、スカラー配列のプロットも処理できます。"

#: ../../pyvista/docs/examples/02-plot/edl.rst:244
msgid "**Total running time of the script:** ( 0 minutes  46.531 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/edl.rst:259
msgid ":download:`Download Python source code: edl.py <edl.py>`"
msgstr ":download:`Python source code: edl.py <edl.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/edl.rst:265
msgid ":download:`Download Jupyter notebook: edl.ipynb <edl.ipynb>`"
msgstr ":download:`Jupyter notebook: edl.ipynb <edl.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/floors.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_floors.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_floors.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/floors.rst:13
msgid "Plot with Floors"
msgstr "床を使用してプロットする"

#: ../../pyvista/docs/examples/02-plot/floors.rst:15
msgid "Add a floor/wall at the boundary of the rendering scene."
msgstr "レンダリングシーンの境界に床/壁を追加します。"

#: ../../pyvista/docs/examples/02-plot/floors.rst:59
msgid "**Total running time of the script:** ( 0 minutes  5.195 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/floors.rst:74
msgid ":download:`Download Python source code: floors.py <floors.py>`"
msgstr ":download:`Python source code: floors.py <floors.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/floors.rst:80
msgid ":download:`Download Jupyter notebook: floors.ipynb <floors.ipynb>`"
msgstr ":download:`Jupyter notebook: floors.ipynb <floors.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/gif.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_gif.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_gif.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/gif.rst:13
msgid "Create a GIF Movie"
msgstr "GIFムービーの作成"

#: ../../pyvista/docs/examples/02-plot/gif.rst:15
msgid "Generate a moving gif from an active plotter"
msgstr "アクティブなプロッタから動くgifを生成する"

#: ../../pyvista/docs/examples/02-plot/gif.rst:90
msgid "**Total running time of the script:** ( 0 minutes  7.144 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/gif.rst:105
msgid ":download:`Download Python source code: gif.py <gif.py>`"
msgstr ":download:`Python source code: gif.py <gif.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/gif.rst:111
msgid ":download:`Download Jupyter notebook: gif.ipynb <gif.ipynb>`"
msgstr ":download:`Jupyter notebook: gif.ipynb <gif.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_image_depth.py>`     to"
" download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_image_depth.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:13
msgid "Render a depth image"
msgstr "デプスイメージをレンダーする"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:15
msgid ""
"Plot a depth image as viewed from a camera overlooking the \"hills\" example"
" mesh."
msgstr "\"丘\"メッシュの例を見ながら、カメラから見た深度イメージをプロットします。"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:54
msgid "Record depth image without and with a custom fill value"
msgstr "Record depth image without and with a custom fill value"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:69
msgid "Visualize depth images"
msgstr "Visualize depth images"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:117
msgid "**Total running time of the script:** ( 0 minutes  2.028 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:132
msgid ""
":download:`Download Python source code: image_depth.py <image_depth.py>`"
msgstr ""
":download:`Python source code: image_depth.py <image_depth.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/image_depth.rst:138
msgid ""
":download:`Download Jupyter notebook: image_depth.ipynb <image_depth.ipynb>`"
msgstr ""
":download:`Jupyter notebook: image_depth.ipynb <image_depth.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_interpolate-before-"
"map.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_interpolate-before-map.py>`"
"     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:13
msgid "Interpolate Before Mapping"
msgstr "マッピング前に補間"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:15
msgid ""
"The ``add_mesh`` function has an ``interpolate_before_map`` argument - this "
"affects the way scalar data is visualized with colors. The effect can of "
"this can vary depending on the dataset's topology and the chosen colormap."
msgstr ""
"``add_mesh`` 関数には ``interpolate_before_map`` 引数があります-"
"これはスカラーデータを色で視覚化する方法に影響します。この効果は、データセットのトポロジと選択したカラーマップによって異なります。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:20
msgid ""
"This example serves to demo the difference and why we've chosen to enable "
"this by default."
msgstr "この例では、この違いと、この機能をデフォルトで有効にした理由を説明します。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:23
msgid ""
"For more details, please see `this blog post <https://blog.kitware.com/what-"
"is-interpolatescalarsbeforemapping-in-vtk/>`_"
msgstr ""
"詳しくは `このブログポスト <https://blog.kitware.com/what-is-"
"interpolatescalarsbeforemapping-in-vtk/>`_ をご覧ください。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:38
msgid ""
"Meshes are colored by the data on their nodes or cells - when coloring a "
"mesh by data on its nodes, the values must be interpolated across the faces "
"of cells. The process by which those scalars are interpolated is critical. "
"If the ``interpolate_before_map`` is left off, the color mapping occurs at "
"polygon points and  colors are interpolated, which is generally less "
"accurate whereas if the ``interpolate_before_map`` is on, then the scalars "
"will be interpolated across the topology of the dataset which is more "
"accurate."
msgstr ""
"メッシュは、ノードまたはセルのデータによって色付けされます。ノードのデータによってメッシュを色付けする場合は、値をセルの面全体に補間する必要があります。これらのスカラーを補間するプロセスは重要です。"
" ``interpolate_before_map`` "
"を省略すると、カラーマッピングはポリゴンポイントで行われ、カラーは補間されますが、一般的には精度が低くなります。一方、 "
"``interpolate_before_map`` がオンの場合は、スカラはデータセットのトポロジ全体にわたって補間され、より精度が高くなります。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:46
msgid ""
"To summarize, when ``interpolate_before_map`` is off, the colors are "
"interpolated after rendering and when ``interpolate_before_map`` is on, the "
"scalars are interpolated across the mesh and those values are mapped to "
"colors."
msgstr ""
"To summarize, when ``interpolate_before_map`` is off, the colors are "
"interpolated after rendering and when ``interpolate_before_map`` is on, the "
"scalars are interpolated across the mesh and those values are mapped to "
"colors."

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:51
msgid "So lets take a look at the difference:"
msgstr "違いを見てみましょう"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:96
msgid ""
"Shown in the figure above, when not interpolating the scalars before "
"mapping, the colors (RGB values, not scalars) are interpolated between the "
"vertices by the underlying graphics library (OpenGL), and the colors shown "
"are not accurate."
msgstr ""
"上の図に示すように、マッピング前にスカラーを補間しない場合、基本のグラフィックライブラリ (OpenGL) "
"によって頂点間でカラー(スカラーではなくRGB値)が補間され、表示されるカラーは正確ではありません。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:101
msgid "The same interpolation effect occurs for wireframe visualization too:"
msgstr "ワイヤフレームの表示でも、同じ補間効果が得られます。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:144
msgid ""
"The cylider mesh above is a great example dataset for this as it has a wide "
"spread between the vertices (points are only at the top and bottom of the "
"cylinder) which means high surface are of the mesh has to be interpolated."
msgstr ""
"上のcyliderメッシュは、頂点間に広いスプレッドがあり(点は円柱の上部と下部のみにあります)、メッシュの高いサーフェスを補間する必要があるため、これに関する優れたサンプルデータセットです。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:148
msgid ""
"However, most meshes don't have such a wide spread and the effects of color "
"interpolating are harder to notice. Let's take a look at a wavelet example "
"and try to figure out how the ``interpolate_before_map`` option affects its "
"rendering."
msgstr ""
"ただし、ほとんどのメッシュではそのような広がりはなく、カラー補間の効果を確認するのは困難です。waveletの例を見て、 "
"``interpolate_before_map`` オプションがレンダリングにどのように影響するかを調べてみましょう。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:194
msgid ""
"This time is pretty difficult to notice the differences - they are there, "
"subtle, but present. The differences become more apperant when we decrease "
"the number of colors in colormap. Let's take a look at the differences when "
"using eight discrete colors via the ``n_colors`` argument:"
msgstr ""
"今回は違いに気付くのがかなり難しいです-違いはそこにあり、微妙ですが、存在しています。カラーマップ内の色の数を減らすと、違いがより顕著になります。 "
"``n_colors`` 引数によって8つの個別の色を使用する場合の違いを見てみましょう。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:239
msgid ""
"Left, ``interpolate_before_map`` OFF.  Right, ``interpolate_before_map`` ON."
msgstr "左 ``interpolate_before_map`` OFF。右, ``interpolate_before_map``  ON。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:241
msgid ""
"Now that is much more compelling! On the right, the contours of the scalar "
"field are visible, but on the left, the contours are obscured due to the "
"color interpolation by OpenGL. In both cases, the colors at the vertices are"
" the same, the difference is how color is assigned between the vertices."
msgstr ""
"これで、さらに説得力が増しました。右側ではスカラーフィールドの輪郭が表示されていますが、左側ではOpenGLによるカラー補間のために輪郭が不明瞭になっています。どちらの場合も頂点のカラーは同じで、頂点間のカラーの割り当て方法が異なります。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:246
msgid ""
"In our opinion, color interpolation is not a preferred default for "
"scientific visualization and is why we have chosen to set the "
"``interpolate_before_map`` flag to ``True``."
msgstr ""
"私たちの意見では、色補間は科学的可視化のための好ましいデフォルトではなく、 ``interpolate_before_map`` フラグを "
"``True`` に設定することを選んだ理由です。"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:253
msgid "**Total running time of the script:** ( 0 minutes  11.202 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:268
msgid ""
":download:`Download Python source code: interpolate-before-map.py "
"<interpolate-before-map.py>`"
msgstr ""
":download:`Python source code: interpolate-before-map.py <interpolate-"
"before-map.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/interpolate-before-map.rst:274
msgid ""
":download:`Download Jupyter notebook: interpolate-before-map.ipynb "
"<interpolate-before-map.ipynb>`"
msgstr ""
":download:`Jupyter notebook: interpolate-before-map.ipynb <interpolate-"
"before-map.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/labels.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_labels.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_labels.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/labels.rst:13
msgid "Label Points"
msgstr "ラベルポイント"

#: ../../pyvista/docs/examples/02-plot/labels.rst:15
msgid "Use string arrays in a point set to label points"
msgstr "ポイントセットで文字列配列を使用してポイントにラベルを付ける"

#: ../../pyvista/docs/examples/02-plot/labels.rst:36
msgid "Label String Array"
msgstr "ラベル文字列配列"

#: ../../pyvista/docs/examples/02-plot/labels.rst:38
msgid ""
"This example will label the nodes of a mesh with a given array of string "
"labels for each of the nodes."
msgstr "この例では、各ノードの文字列ラベルの配列を使用して、メッシュのノードにラベルを付けます。"

#: ../../pyvista/docs/examples/02-plot/labels.rst:55
msgid ""
"Add string labels to the point data - this associates a label with every "
"node:"
msgstr "文字列ラベルをポイントデータに追加します。これにより、各ノードにラベルが関連付けられます。"

#: ../../pyvista/docs/examples/02-plot/labels.rst:93
msgid "Now plot the points with labels:"
msgstr "次に、点をラベル付きでプロットします:"

#: ../../pyvista/docs/examples/02-plot/labels.rst:126
msgid "Label Node Locations"
msgstr "ラベルノードの位置"

#: ../../pyvista/docs/examples/02-plot/labels.rst:128
msgid ""
"This example will label the nodes of a mesh with their coordinate locations"
msgstr "この例では、メッシュの節点に座標位置のラベルを付けます。"

#: ../../pyvista/docs/examples/02-plot/labels.rst:145
msgid "Create plotting class and add the unstructured grid"
msgstr "プロッティングクラスを作成し、非構造化グリッドを追加します"

#: ../../pyvista/docs/examples/02-plot/labels.rst:190
msgid "Label Scalar Values"
msgstr "ラベルスカラー値"

#: ../../pyvista/docs/examples/02-plot/labels.rst:192
msgid "This example will label each point with their scalar values"
msgstr "この例では、各ポイントにスカラー値のラベルを付けます。"

#: ../../pyvista/docs/examples/02-plot/labels.rst:245
msgid "**Total running time of the script:** ( 0 minutes  3.075 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/labels.rst:260
msgid ":download:`Download Python source code: labels.py <labels.py>`"
msgstr ":download:`Python source code: labels.py <labels.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/labels.rst:266
msgid ":download:`Download Jupyter notebook: labels.ipynb <labels.ipynb>`"
msgstr ":download:`Jupyter notebook: labels.ipynb <labels.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_lighting.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_lighting.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:13
msgid "Lighting Controls"
msgstr "照明コントロール"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:15
msgid ""
"Control aspects of the rendered mesh's lighting such as Ambient, Diffuse, "
"and Specular. These options only work if the ``lighting`` argument to "
"``add_mesh`` is ``True`` (it's true by default)."
msgstr ""
"周囲光 、拡散反射光 、 鏡面反射光など、レンダリングされたメッシュのライティングを制御します。これらのオプションは、 ``add_mesh`` への "
"``lighting`` 引数が ``True``  (デフォルトではtrueです。)の場合にのみ動作します。"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:19
msgid ""
"You can turn off all lighting by passing ``lighting=False`` to ``add_mesh``."
msgstr "``lighting=False`` を ``add_mesh`` に渡すことで、すべての照明を消すことができます。"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:41
msgid "First, lets take a look at the mesh with default lighting conditions"
msgstr "まず、デフォルトのライティング条件を持つメッシュを見てみましょう。"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:69
msgid "What about with no lighting"
msgstr "照明なしではどうですか"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:97
msgid "Demonstration of the specular property"
msgstr "鏡面特性の実証"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:138
msgid "Just specular"
msgstr "鏡面反射のみ"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:166
msgid "Specular power"
msgstr "スペキュラパワー"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:195
msgid "Demonstration of all three in use"
msgstr "3機種の使用実績"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:226
msgid "**Total running time of the script:** ( 0 minutes  18.404 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/lighting.rst:241
msgid ":download:`Download Python source code: lighting.py <lighting.py>`"
msgstr ":download:`Python source code: lighting.py <lighting.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/lighting.rst:247
msgid ":download:`Download Jupyter notebook: lighting.ipynb <lighting.ipynb>`"
msgstr ":download:`Jupyter notebook: lighting.ipynb <lighting.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/linked.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_linked.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_linked.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/linked.rst:13
msgid "Linked Views in Subplots"
msgstr "サブプロットのリンクビュー"

#: ../../pyvista/docs/examples/02-plot/linked.rst:72
msgid "**Total running time of the script:** ( 0 minutes  7.692 seconds)"
msgstr "**Total running time of the script:** ( 0 minutes  7.692 seconds)"

#: ../../pyvista/docs/examples/02-plot/linked.rst:87
msgid ":download:`Download Python source code: linked.py <linked.py>`"
msgstr ":download:`Python source code: linked.py <linked.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/linked.rst:93
msgid ":download:`Download Jupyter notebook: linked.ipynb <linked.ipynb>`"
msgstr ":download:`Jupyter notebook: linked.ipynb <linked.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/movie.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_movie.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_movie.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/movie.rst:13
msgid "Create a MP4 Movie"
msgstr "MP 4ムービーを作成する"

#: ../../pyvista/docs/examples/02-plot/movie.rst:15
msgid "Create an animated MP4 movie of a rendering scene"
msgstr "レンダリングシーンのアニメーションMP 4ムービーを作成する"

#: ../../pyvista/docs/examples/02-plot/movie.rst:82
msgid "**Total running time of the script:** ( 0 minutes  9.373 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/movie.rst:97
msgid ":download:`Download Python source code: movie.py <movie.py>`"
msgstr ":download:`Python source code: movie.py <movie.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/movie.rst:103
msgid ":download:`Download Jupyter notebook: movie.ipynb <movie.ipynb>`"
msgstr ":download:`Jupyter notebook: movie.ipynb <movie.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_multi-window.py>`     "
"to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_multi-window.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:13
msgid "Multi-Window Plot"
msgstr "マルチウィンドウプロット"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:16
msgid "Subplotting: having multiple scenes in a single window"
msgstr "サブプロット:1つのウィンドウに複数のシーンを表示"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:32
msgid ""
"This example shows how to create a multi-window plotter by specifying the "
"``shape`` parameter.  The window generated is a two by two window by setting"
" ``shape=(2, 2)``. Use the :func:`pyvista.BasePlotter.subplot` function to "
"select the subplot you wish to be the active subplot."
msgstr ""
"この例では、 ``shape`` パラメータを指定してマルチウィンドウプロッタを作成する方法を示します。 ``shape=(2, 2)`` "
"を設定すると、生成されるウィンドウは2×2ウィンドウになります。アクティブなサブプロットにするサブプロットを選択するには、 "
":func:`pyvista.BasePlotter.subplot` 関数を使用します。"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:129
msgid ""
"Split the rendering window in half and subdivide it in a nr. of vertical or "
"horizontal subplots."
msgstr "レンダリングウィンドウを半分に分割し、垂直サブプロットまたは水平サブプロットに分割します。"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:186
msgid ""
"To get full flexibility over the layout grid, you can define the relative "
"weighting of rows and columns and register groups that can span over "
"multiple rows and columns. A group is defined through a tuple "
"``(rows,cols)`` of row and column indices or slices. The group always spans "
"from the smallest to the largest (row or column) id that is passed through "
"the list or slice."
msgstr ""
"レイアウトグリッド上で完全な柔軟性を得るには、行と列の相対的な重み付けを定義し、複数の行と列にまたがるレジスタグループを定義します。グループは、行と列のインデックスかスライスの組"
" ``(行,列)`` を通して定義されます。グループは常に、リストまたはスライスを通過する最小のIDから最大のID (行または列)までの範囲になります。"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:281
msgid "**Total running time of the script:** ( 0 minutes  6.791 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:296
msgid ""
":download:`Download Python source code: multi-window.py <multi-window.py>`"
msgstr ""
":download:`Python source code: multi-window.py <multi-window.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/multi-window.rst:302
msgid ""
":download:`Download Jupyter notebook: multi-window.ipynb <multi-"
"window.ipynb>`"
msgstr ""
":download:`Jupyter notebook: multi-window.ipynb <multi-window.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_opacity.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_opacity.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:13
msgid "Plot with Opacity"
msgstr "不透明度を指定してプロット"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:15
msgid ""
"Plot a mesh's scalar array with an opacity transfer function or opacity "
"mapping based on a scalar array."
msgstr "不透明度伝達関数またはスカラー配列に基づく不透明度マッピングを使用して、メッシュのスカラー配列をプロットします。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:38
msgid "Global Value"
msgstr "グローバル値"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:40
msgid ""
"You can also apply a global opacity value to the mesh by passing a single "
"float between 0 and 1 which would enable you to see objects behind the mesh:"
msgstr ""
"また、0から1の範囲で1つのfloat値を渡すことにより、グローバル不透明度値をメッシュに適用し、メッシュの背後にあるオブジェクトを表示することもできます。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:73
msgid ""
"Note that you can specify ``use_transparency=True`` to convert opacities to "
"transparencies in any of the following examples."
msgstr "次の例では、 ``use_transparency=True`` を指定して不透明度を透明度に変換できます。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:77
msgid "Transfer Functions"
msgstr "転送機能"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:79
msgid ""
"It's possible to apply an opacity mapping to any scalar array plotted. You "
"can specify either a single static value to make the mesh transparent on all"
" cells, or use a transfer function where the scalar array plotted is mapped "
"to the opacity. We have several predefined transfer functions."
msgstr ""
"プロットされた任意のスカラー配列に不透明度マッピングを適用することができます。単一の静的な値を指定してすべてのセルでメッシュを透明にするか、またはプロットされたスカラー配列が不透明度にマップされる伝達関数を使用できます。いくつかの伝達関数があらかじめ定義されています。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:84
msgid "Opacity transfer functions are:"
msgstr "不透明度転送関数は次のとおりです。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:86
msgid ""
"``'linear'``: linearly vary (increase) opacity across the plotted scalar "
"range from low to high"
msgstr "``'linear'``: プロットされたスカラー範囲の不透明度を低い値から高い値まで直線的に変化 (増加) させます"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:87
msgid ""
"``'linear_r'``: linearly vary (increase) opacity across the plotted scalar "
"range from high to low"
msgstr "``'linear_r'``: プロットされたスカラー範囲全体の不透明度を高い値から低い値まで直線的に変化 (増加) させる"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:88
msgid ""
"``'geom'``: on a log scale, vary (increase) opacity across the plotted "
"scalar range from low to high"
msgstr "``'geom'``: 対数スケールで、プロットされたスカラー範囲全体の不透明度を低から高まで変化 (増加) させます"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:89
msgid ""
"``'geom_r'``: on a log scale, vary (increase) opacity across the plotted "
"scalar range from high to low"
msgstr "``'geom_r'``: 対数スケールで、プロットされたスカラー範囲全体の不透明度を高から低まで変化 (増加) させます"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:90
msgid ""
"``'sigmoid'``: vary (increase) opacity on a sigmoidal s-curve across the "
"plotted scalar range from low to high"
msgstr "``'sigmoid'``: S字曲線上の不透明度を低い値から高い値までプロットされたスカラー範囲にわたって変化させる (増加させる)"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:91
msgid ""
"``'sigmoid_r'``: vary (increase) opacity on a sigmoidal s-curve across the "
"plotted scalar range from high to low"
msgstr "``'sigmoid_r'``: S字曲線上の不透明度を、プロットされたスカラー範囲の高低で変化 (増加) させる"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:149
msgid ""
"It's also possible to use your own transfer function that will be linearly "
"mapped to the scalar array plotted. For example, we can create an opacity "
"mapping as:"
msgstr ""
"また、プロットされたスカラー配列に線形にマップされる独自の伝達関数を使用することもできます。たとえば、次のように不透明度マッピングを作成できます。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:165
msgid ""
"When given a minimized opacity mapping like that above, PyVista interpolates"
" it across a range of how many colors are shown when mapping the scalars. If"
" ``scipy`` is available, then a quadratic interpolation is used - otherwise,"
" a simple linear interpolation is used. Curious what that opacity transfer "
"function looks like? You can fetch it:"
msgstr ""
"上記のように最小化された不透明度マッピングが与えられると、PyVistaはスカラーをマッピングするときに表示される色の数の範囲にわたって不透明度マッピングを補間します。"
" ``scipy`` が利用可能なら、二次補間が使用されます-"
"そうでなければ、単純な線形補間が使用されます。不透明度伝達関数がどのようなものか知りたいですか?次のようにして取得できます。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:196
msgid ""
"That opacity mapping will have an opacity of 0.0 at the minimum scalar "
"range, a value or 0.9 at the middle of the scalar range, and a value of 0.3 "
"at the maximum of the scalar range:"
msgstr "不透明度マッピングの不透明度は、最小スカラー範囲で0.0、値はスカラー範囲の中央で0.9、値はスカラー範囲の最大で0.3になります。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:227
msgid ""
"Opacity mapping is often useful when plotting DICOM images. For example, "
"download the sample knee DICOM image:"
msgstr ""
"不透明度マッピングは、 DICOM画像をプロットするときにしばしば有用である。たとえば、サンプルのknee DICOMイメージをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:242
msgid ""
"And here we inspect the DICOM image with a few different opacity mappings:"
msgstr "ここでは、いくつかの異なる不透明度マッピングを使用してDICOM画像を検査します。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:288
msgid "Opacity by Array"
msgstr "配列による不透明度"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:290
msgid ""
"You can also use a scalar array associated with the mesh to give each cell "
"its own opacity/transparency value derived from a scalar field. For example,"
" an uncertainty array from a modelling result could be used to hide regions "
"of a mesh that are uncertain and highlight regions that are well resolved."
msgstr ""
"メッシュに関連付けられたスカラー配列を使用して、スカラーフィールドから得られた独自の不透明度/透明度値を各セルに与えることもできます。たとえば、モデリング結果の不確実性配列を使用して、不確実性のあるメッシュ領域を非表示にし、適切に解決された領域をハイライト表示することができます。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:295
msgid ""
"The following is a demonstration of plotting a mesh with colored values and "
"using a second array to control the transparency of the mesh"
msgstr "次に、カラー値を使用してメッシュをプロットし、2番目の配列を使用してメッシュの透明度を制御する例を示します。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:321
msgid ""
"Make sure to flag ``use_transparency=True`` since we want areas of high "
"variance to have high transparency."
msgstr "分散の大きい領域に高い透明度を持たせたいので、必ず ``use_transparency=True`` にフラグを立ててください。"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:324
msgid ""
"Also, since the opacity array must be between 0 and 1, we normalize the "
"temperature variance array by the maximum value.  That way high variance "
"will be completely transparent."
msgstr ""
"Also, since the opacity array must be between 0 and 1, we normalize the "
"temperature variance array by the maximum value.  That way high variance "
"will be completely transparent."

#: ../../pyvista/docs/examples/02-plot/opacity.rst:372
msgid "**Total running time of the script:** ( 0 minutes  26.135 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/opacity.rst:387
msgid ":download:`Download Python source code: opacity.py <opacity.py>`"
msgstr ":download:`Python source code: opacity.py <opacity.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/opacity.rst:393
msgid ":download:`Download Jupyter notebook: opacity.ipynb <opacity.ipynb>`"
msgstr ":download:`Jupyter notebook: opacity.ipynb <opacity.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_orbit.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_orbit.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:13
msgid "Orbiting"
msgstr "オービット"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:15
msgid "Orbit around a scene."
msgstr "シーンを周回します。"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:17
msgid ""
"NOTE: using ``p.open_movie('orbit.mp4')`` is better than "
"``p.open_gif('orbit.gif')``"
msgstr ""
"NOTE: ``p.open_movie('orbit.mp4')`` を使ったほうが ``p.open_gif('orbit.gif')`` よりいい"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:20
msgid ""
"For orbiting to work you first have to show the scene and leave the plotter "
"open with ``.show(auto_close=False)``."
msgstr ""
"オービットを機能させるには、まずシーンを表示し、 ``.show(auto_close=False)`` "
"でプロッタを開いたままにしておく必要があります。"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:127
msgid "**Total running time of the script:** ( 3 minutes  25.459 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/orbit.rst:142
msgid ":download:`Download Python source code: orbit.py <orbit.py>`"
msgstr ":download:`Python source code: orbit.py <orbit.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/orbit.rst:148
msgid ":download:`Download Jupyter notebook: orbit.ipynb <orbit.ipynb>`"
msgstr ":download:`Jupyter notebook: orbit.ipynb <orbit.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_plot-over-line.py>`"
"     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_plot-over-line.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:13
msgid "Plot Over Line"
msgstr "線の上にプロット"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:15
msgid "Plot the values of a dataset over a line through that dataset"
msgstr "データセットの値をそのデータセットの行にプロットする"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:33
msgid "Volumetric Mesh"
msgstr "ボリュームメッシュ"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:35
msgid "First a 3D mesh example to demonstrate"
msgstr "最初に説明する3 Dメッシュの例"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:75
#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:140
msgid "Run the filter and produce a line plot"
msgstr "フィルタを実行し、ラインプロットを作成する"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:95
msgid "Flat Surface"
msgstr "フラットサーフェス"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:97
msgid "We could also plot the values of a mesh that lies on a flat surface"
msgstr "平面上にあるメッシュの値をプロットすることもできます。"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:167
msgid "**Total running time of the script:** ( 0 minutes  4.033 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:182
msgid ""
":download:`Download Python source code: plot-over-line.py <plot-over-"
"line.py>`"
msgstr ""
":download:`Python source code: plot-over-line.py <plot-over-line.py> "
"をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/plot-over-line.rst:188
msgid ""
":download:`Download Jupyter notebook: plot-over-line.ipynb <plot-over-"
"line.ipynb>`"
msgstr ""
":download:`Jupyter notebook: plot-over-line.ipynb <plot-over-line.ipynb> "
"をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_scalar-bars.py>`     to"
" download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_scalar-bars.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:13
msgid "Customize Scalar Bars"
msgstr "スカラバーをカスタマイズ"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:15
msgid ""
"Walk through of all the different capabilities of scalar bars and how a user"
" can customize scalar bars."
msgstr "スカラーバーのさまざまな機能と、ユーザーによるスカラーバーのカスタマイズ方法について説明します。"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:34
msgid ""
"By default, when plotting a dataset with a scalar array, a scalar bar for "
"that array is added. To turn off this behavior, a user could specify "
"``show_scalar_bar=False`` when calling ``.add_mesh()``. Let's start with a "
"sample dataset provide via PyVista to demonstrate the default behavior of "
"scalar bar plotting:"
msgstr ""
"デフォルトでは、スカラー配列を使用してデータセットをプロットすると、その配列のスカラーバーが追加されます。この動作を無効にするには、ユーザが "
"``.add_mesh()`` を呼び出すときに ``show_scalar_bar=False`` "
"を指定します。PyVistaで提供されるサンプルデータセットから始めて、スカラーバープロットのデフォルトの動作を説明しましょう。"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:75
msgid ""
"We could also plot the scene with an interactive scalar bar to move around "
"and place where we like by specifying passing keyword arguments to control "
"the scalar bar via the ``scalar_bar_args`` parameter in "
":func:`pyvista.BasePlotter.add_mesh`. The keyword arguments to control the "
"scalar bar are defined in :func:`pyvista.BasePlotter.add_scalar_bar`."
msgstr ""
":func:`pyvista.BasePlotter.add_mesh` の ``scalar_bar_args`` "
"パラメータを介してスカラバーを制御するキーワード引数を渡すことにより、インタラクティブなスカラバーでシーンをプロットして好きな場所に移動することもできます。スカラバーを制御するキーワード引数は"
" :func:`pyvista.BasePlotter.add_scalar_bar` で定義されます。"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:104
msgid "Or manually define the scalar bar's location:"
msgstr "または、スカラーバーの位置を手動で定義します:"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:138
msgid "The text properties of the scalar bar can also be controlled:"
msgstr "スカラーバーのテキストプロパティも制御できます:"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:181
msgid "Labelling values outside of the scalar range"
msgstr "スカラー範囲外の値のラベル付け"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:214
msgid ""
"Annotate values of interest using a dictionary. The key of the dictionary "
"must be the value to annotate, and the value must be the string label."
msgstr "辞書を使用して目的の値に注釈を付けます。ディクショナリのキーは注釈を付ける値で、値は文字列ラベルである必要があります。"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:254
msgid "**Total running time of the script:** ( 0 minutes  13.683 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:269
msgid ""
":download:`Download Python source code: scalar-bars.py <scalar-bars.py>`"
msgstr ""
":download:`Python source code: scalar-bars.py <scalar-bars.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/scalar-bars.rst:275
msgid ""
":download:`Download Jupyter notebook: scalar-bars.ipynb <scalar-bars.ipynb>`"
msgstr ""
":download:`Jupyter notebook: scalar-bars.ipynb <scalar-bars.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_screenshot.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_screenshot.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:13
msgid "Saving Screenshots"
msgstr "スクリーンショットを保存する"

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:35
msgid ""
"You can also take a screenshot without creating an interactive plot window "
"using the :class:`pyvista.Plotter`:"
msgstr ""
":class:`pyvista.Plotter` を使用して、インタラクティブなプロットウィンドウを作成せずにスクリーンショットを撮ることもできます。"

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:67
msgid ""
"The ``img`` array can be used to plot the screenshot in ``matplotlib``:"
msgstr "``img`` 配列を使用して、スクリーンショットを ``matplotlib`` にプロットすることができます。"

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:89
msgid "**Total running time of the script:** ( 0 minutes  1.085 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:104
msgid ":download:`Download Python source code: screenshot.py <screenshot.py>`"
msgstr ":download:`Python source code: screenshot.py <screenshot.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/screenshot.rst:110
msgid ""
":download:`Download Jupyter notebook: screenshot.ipynb <screenshot.ipynb>`"
msgstr ""
":download:`Jupyter notebook: screenshot.ipynb <screenshot.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:8
msgid "**10:52.571** total execution time for **examples_02-plot** files:"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py` (``orbit.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_orbit.py` (``orbit.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:11
msgid "03:25.459"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_02-plot_depth-peeling.py` (``depth-peeling.py``)"
msgstr ""
":ref:`sphx_glr_examples_02-plot_depth-peeling.py` (``depth-peeling.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:13
msgid "02:08.483"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_02-plot_volume.py` (``volume.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_volume.py` (``volume.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:15
msgid "01:10.148"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_02-plot_edl.py` (``edl.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_edl.py` (``edl.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:17
msgid "00:46.531"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py` (``opacity.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_opacity.py` (``opacity.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:19
msgid "00:26.135"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py` (``topo-map.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_topo-map.py` (``topo-map.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:21
msgid "00:19.310"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_examples_02-plot_lighting.py` (``lighting.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_lighting.py` (``lighting.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:23
msgid "00:18.404"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_examples_02-plot_texture.py` (``texture.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_texture.py` (``texture.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:25
msgid "00:16.461"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:27
msgid ":ref:`sphx_glr_examples_02-plot_edges.py` (``edges.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_edges.py` (``edges.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:27
msgid "00:14.834"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py` (``cmap.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_cmap.py` (``cmap.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:29
msgid "00:14.248"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py` (``scalar-bars.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_scalar-bars.py` (``scalar-bars.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:31
msgid "00:13.683"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:33
msgid ""
":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py` (``interpolate-"
"before-map.py``)"
msgstr ""
":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py` (``interpolate-"
"before-map.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:33
msgid "00:11.202"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_02-plot_movie.py` (``movie.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_movie.py` (``movie.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:35
msgid "00:09.373"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:37
msgid ""
":ref:`sphx_glr_examples_02-plot_background_image.py` "
"(``background_image.py``)"
msgstr ""
":ref:`sphx_glr_examples_02-plot_background_image.py` "
"(``background_image.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:37
msgid "00:08.549"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:39
msgid ":ref:`sphx_glr_examples_02-plot_linked.py` (``linked.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_linked.py` (``linked.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:39
msgid "00:07.692"
msgstr "00:07.692"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_02-plot_gif.py` (``gif.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_gif.py` (``gif.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:41
msgid "00:07.144"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:43
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py` (``multi-window.py``)"
msgstr ""
":ref:`sphx_glr_examples_02-plot_multi-window.py` (``multi-window.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:43
msgid "00:06.791"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:45
msgid ":ref:`sphx_glr_examples_02-plot_themes.py` (``themes.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_themes.py` (``themes.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:45
msgid "00:05.288"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_02-plot_floors.py` (``floors.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_floors.py` (``floors.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:47
msgid "00:05.195"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:49
msgid ""
":ref:`sphx_glr_examples_02-plot_plot-over-line.py` (``plot-over-line.py``)"
msgstr ""
":ref:`sphx_glr_examples_02-plot_plot-over-line.py` (``plot-over-line.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:49
msgid "00:04.033"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:51
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py` (``spherical.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_spherical.py` (``spherical.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:51
msgid "00:03.775"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_02-plot_labels.py` (``labels.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_labels.py` (``labels.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:53
msgid "00:03.075"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:55
msgid ":ref:`sphx_glr_examples_02-plot_shading.py` (``shading.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_shading.py` (``shading.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:55
msgid "00:02.173"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:57
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py` (``image_depth.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_image_depth.py` (``image_depth.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:57
msgid "00:02.028"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_02-plot_clear.py` (``clear.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_clear.py` (``clear.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:59
msgid "00:01.472"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:61
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py` (``screenshot.py``)"
msgstr ":ref:`sphx_glr_examples_02-plot_screenshot.py` (``screenshot.py``)"

#: ../../pyvista/docs/examples/02-plot/sg_execution_times.rst:61
msgid "00:01.085"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_shading.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_shading.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/shading.rst:13
msgid "Types of Shading"
msgstr "シェーディングのタイプ"

#: ../../pyvista/docs/examples/02-plot/shading.rst:15
msgid "Comparison of default, flat shading vs. smooth shading."
msgstr "デフォルトのフラットシェーディングとスムーズシェーディングの比較。"

#: ../../pyvista/docs/examples/02-plot/shading.rst:31
msgid ""
"PyVista supports two types of shading, flat and smooth shading that uses "
"VTK's Phong shading algorithm."
msgstr ""
"PyVistaでは、VTKのPhongシェーディングアルゴリズムを使用したフラットシェーディングとスムーズシェーディングの2種類のシェーディングがサポートされています。"

#: ../../pyvista/docs/examples/02-plot/shading.rst:34
msgid "This is a plot with the default flat shading:"
msgstr "これは、デフォルトのフラットシェーディングを使用したプロットです。"

#: ../../pyvista/docs/examples/02-plot/shading.rst:63
msgid "Here's the same sphere with smooth shading:"
msgstr "次に、スムーズシェーディングを適用した同じ球を示します。"

#: ../../pyvista/docs/examples/02-plot/shading.rst:93
msgid "**Total running time of the script:** ( 0 minutes  2.173 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/shading.rst:108
msgid ":download:`Download Python source code: shading.py <shading.py>`"
msgstr ":download:`Python source code: shading.py <shading.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/shading.rst:114
msgid ":download:`Download Jupyter notebook: shading.ipynb <shading.ipynb>`"
msgstr ":download:`Jupyter notebook: shading.ipynb <shading.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_spherical.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_spherical.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:13
msgid "Plot data in spherical coordinates"
msgstr "球座標でデータをプロットする"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:15
msgid ""
"Generate and visualize meshes from data in longitude-latitude coordinates."
msgstr "緯度-経度座標のデータからメッシュを生成および表示します。"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:91
msgid "Create a structured grid"
msgstr "構造化グリッドの作成"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:129
msgid "Visualize vectors in spherical coordinates Vertical wind"
msgstr "球座標でのベクトルの視覚化垂直風"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:197
msgid "Isurfaces of 3D data in spherical coordinates"
msgstr "球座標の3 Dデータのサーフェス"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:256
msgid "**Total running time of the script:** ( 0 minutes  3.775 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/spherical.rst:271
msgid ":download:`Download Python source code: spherical.py <spherical.py>`"
msgstr ":download:`Python source code: spherical.py <spherical.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/spherical.rst:277
msgid ""
":download:`Download Jupyter notebook: spherical.ipynb <spherical.ipynb>`"
msgstr ""
":download:`Jupyter notebook: spherical.ipynb <spherical.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/texture.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_texture.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_texture.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:15
msgid "Applying Textures"
msgstr "テクスチャを適用する"

#: ../../pyvista/docs/examples/02-plot/texture.rst:17
msgid "Plot a mesh with an image projected onto it as a texture."
msgstr "イメージをテクスチャとして投影したメッシュをプロットします。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:35
msgid ""
"Texture mapping is easily implemented using PyVista. Many of the geometric "
"objects come preloaded with texture coordinates, so quickly creating a "
"surface and displaying an image is simply:"
msgstr ""
"テクスチャマッピングは、PyVistaを使用して簡単に実装できます。多くのジオメトリックオブジェクトには、テクスチャ座標があらかじめロードされているため、サーフェスをすばやく作成してイメージを表示するのは、次のように簡単です:"

#: ../../pyvista/docs/examples/02-plot/texture.rst:73
msgid ""
"But what if your dataset doesn't have texture coordinates? Then you can "
"harness the :func:`pyvista.DataSetFilters.texture_map_to_plane` filter to "
"properly map an image to a dataset's surface. For example, let's map that "
"same image of bricks to a curvey surface:"
msgstr ""
"しかし、データセットにテクスチャ座標がない場合はどうでしょうか。その後、 "
":func:`pyvista.DataSetFilters.texture_map_to_plane` "
"フィルタを利用して、イメージをデータセットのサーフェスに適切にマッピングできます。たとえば、同じレンガのイメージをカーブサーフェスにマップします。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:116
msgid ""
"Display scalar data along with a texture by ensuring the "
"``interpolate_before_map`` setting is ``False`` and specifying both the "
"``texture`` and ``scalars`` arguments."
msgstr ""
" ``interpolate_before_map`` 設定が ``False`` であることを確認し、 ``texture`` 引数と "
"``scalars`` 引数の両方を指定することによって、テクスチャとともにスカラデータを表示します。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:153
msgid "Note that this process can be completed with any image texture!"
msgstr "このプロセスは任意のイメージテクスチャで完了できることに注意してください!"

#: ../../pyvista/docs/examples/02-plot/texture.rst:186
msgid "Textures from Files"
msgstr "ファイルからのテクスチャ"

#: ../../pyvista/docs/examples/02-plot/texture.rst:188
msgid ""
"What about loading your own texture from an image? This is often most easily"
" done using the :func:`pyvista.read_texture` function - simply pass an image"
" file's path, and this function with handle making a ``vtkTexture`` for you "
"to use."
msgstr ""
"イメージから独自のテクスチャをロードするのはどうでしょうか。これは多くの場合、 :func:`pyvista.read_texture` "
"関数を使用して最も簡単に行うことができます-単に画像ファイルのパスを渡すだけで、この関数はあなたが使用するために ``vtkTexture`` "
"を作るハンドルを持っています。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:224
msgid "NumPy Arrays as Textures"
msgstr "テクスチャとしてのNumPy配列"

#: ../../pyvista/docs/examples/02-plot/texture.rst:226
msgid ""
"Want to use a programmatically built image? :class:`pyvista.UniformGrid` "
"objects can be converted to textures using :func:`pyvista.image_to_texture` "
"and 3D NumPy (X by Y by RGB) arrays can be converted to textures using "
":func:`pyvista.numpy_to_texture`."
msgstr ""
"プログラムで作成されたイメージを使用したい場合? :class:`pyvista.UniformGrid` オブジェクトは "
":func:`pyvista.image_to_texture` を使用してテクスチャに変換でき、3 D NumPy (X x Y、RGB)配列は "
":func:`pyvista.numpy_to_texture`  を使用してテクスチャに変換できます。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:275
msgid "Textures with Transparency"
msgstr "透明度のあるテクスチャ"

#: ../../pyvista/docs/examples/02-plot/texture.rst:277
msgid ""
"Textures can also specify per-pixel opacity values. The image must contain a"
" 4th channel specifying the opacity value from 0 [transparent] to 255 [fully"
" visible]. To enable this feature just pass the opacity array as the 4th "
"channel of the image as a 3 dimensional matrix with shape [nrows, ncols, 4] "
":func:`pyvista.numpy_to_texture`."
msgstr ""
"テクスチャでは、ピクセル単位の不透明度値も指定できます。画像は0 [透明]から255 "
"[不透明]までの不透明度値を指定する第4チャンネルを含まなければなりません。この機能を有効にするためには、画像の第4チャンネルとして不透明度配列を形[行,例,"
" 4]   :func:`pyvista.numpy_to_texture` の3次元マトリックスとして渡すだけです。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:283
msgid "Here we can download an image that has an alpha channel:"
msgstr "ここでは、アルファチャンネルを含むイメージをダウンロードできます:"

#: ../../pyvista/docs/examples/02-plot/texture.rst:336
msgid "Repeating Textures"
msgstr "テクスチャを繰り返す"

#: ../../pyvista/docs/examples/02-plot/texture.rst:338
msgid ""
"What if you have a single texture that you'd like to repeat across a mesh? "
"Simply define the texture coordinates for all nodes explicitly."
msgstr "単一のテクスチャをメッシュ全体で繰り返したい場合はどうすればよいですか。すべてのノードのテクスチャ座標を明示的に定義するだけです。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:341
msgid ""
"Here we create the texture coordinates to fill up the grid with several "
"mappings of a single texture. In order to do this we must define texture "
"coordinates outside of the typical ``(0, 1)`` range:"
msgstr ""
"ここでは、テクスチャ座標を作成して、1つのテクスチャの複数のマッピングでグリッドを埋めます。これを行うには、一般的な ``(0, 1)`` "
"範囲外のテクスチャ座標を定義する必要があります。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:363
msgid ""
"By defining texture coordinates that range ``(0, 4)`` on each axis, we will "
"produce 4 repetitions of the same texture on this mesh."
msgstr "各軸で ``(0, 4)`` の範囲のテクスチャ座標を定義することにより、このメッシュ上に同じテクスチャの4つの反復を生成します。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:366
msgid ""
"Then we must associate those texture coordinates with the mesh through the "
":attr:`pyvista.Common.t_coords` property."
msgstr ""
"次に、 :attr:`pyvista.Common.t_coords` "
"プロパティを使用して、これらのテクスチャ座標をメッシュに関連付ける必要があります。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:382
msgid "Now display all the puppies!"
msgstr "今子犬を全部展示しています!"

#: ../../pyvista/docs/examples/02-plot/texture.rst:415
msgid "Spherical Texture Coordinates"
msgstr "球状テクスチャ座標"

#: ../../pyvista/docs/examples/02-plot/texture.rst:416
msgid ""
"We have a built in convienance method for mapping textures to spherical "
"coordinate systems much like the planar mapping demoed above."
msgstr "上でデモした平面マッピングのように、テクスチャを球座標系にマッピングするための組み込みの方法があります。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:451
msgid ""
"The helper method above does not always produce the desired texture "
"coordinates, so sometimes it must be done manually. Here is a great, user "
"contributed example from `this support issue <https://github.com/pyvista"
"/pyvista-support/issues/257>`_"
msgstr ""
"上記のヘルパーメソッドは、必ずしも目的のテクスチャ座標を生成するわけではないため、手動で行う必要がある場合があります。これは `このサポートイシュー "
"<https://github.com/pyvista/pyvista-support/issues/257>`_ からの素晴らしいユーザ投稿の例です。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:455
msgid ""
"Manually create the texture coordinates for a globe map. First, we create "
"the mesh that will be used as the globe. Note the `start_theta` for a slight"
" overlappig"
msgstr ""
"地球マップのテクスチャ座標を手動で作成します。まず、地球として使用するメッシュを作成します。 `start_theta` "
"に若干の重複があることに注意してください。"

#: ../../pyvista/docs/examples/02-plot/texture.rst:504
msgid "**Total running time of the script:** ( 0 minutes  16.461 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/texture.rst:519
msgid ":download:`Download Python source code: texture.py <texture.py>`"
msgstr ":download:`Python source code: texture.py <texture.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/texture.rst:525
msgid ":download:`Download Jupyter notebook: texture.ipynb <texture.ipynb>`"
msgstr ":download:`Jupyter notebook: texture.ipynb <texture.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/themes.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_themes.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_themes.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:13
msgid "Change the Theme"
msgstr "テーマの変更"

#: ../../pyvista/docs/examples/02-plot/themes.rst:15
msgid "PyVista has a few coloring themes for you to choose!"
msgstr "PyVistaには選べるカラーテーマがいくつかあります!"

#: ../../pyvista/docs/examples/02-plot/themes.rst:30
msgid "Define a simple plotting routine for comparing the themes"
msgstr "主題を比較するための単純なプロットルーチンを定義する"

#: ../../pyvista/docs/examples/02-plot/themes.rst:53
msgid ""
"PyVista's default color theme is chosen to be generally easy on your eyes "
"and is best used when working long hours on your visualization project. The "
"grey background and warm colormaps are chosen to make sure 3D renderings do "
"not drastically change the brightness of your screen when working in dark "
"environments."
msgstr ""
"PyVistaのデフォルトのカラーテーマは、一般的に見やすいように選択されており、視覚化プロジェクトで長時間作業する場合に最適です。グレーの背景と暖色のカラーマップは、暗い環境で作業しているときに3"
" Dレンダリングによって画面の明るさが大幅に変化しないように選択されています。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:59
msgid ""
"Here's an example of our default plotting theme - this is what you would see"
" by default after running any of our examnples."
msgstr "デフォルトのプロットテーマの例を次に示します。 - これは、サンプルを実行した後にデフォルトで表示されるテーマです。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:91
msgid "PyVista also ships with a few plotting themes:"
msgstr "PyVistaにはいくつかのプロットテーマも付属しています。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:93
msgid ""
"``'ParaView'``: this is designed to mimic ParaView's default plotting theme"
msgstr "``'ParaView'``: これは、ParaViewの既定のプロットテーマを模倣するように設計されています"

#: ../../pyvista/docs/examples/02-plot/themes.rst:94
msgid ""
"``'night'``: this is designed to be night-mode friendly with dark "
"backgrounds and color schemes"
msgstr "``'night'``: 暗い背景とカラースキームを使用して、夜間モードに適した設計になっています。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:95
msgid ""
"``'document'``: this is built for use in document style plotting and making "
"publication quality figures"
msgstr "``'document'``: これは、文書スタイルのプロットおよび文書品質図の作成に使用するために作成されています。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:97
msgid "Demo the ``'ParaView'`` theme"
msgstr "``'ParaView'`` テーマのデモ"

#: ../../pyvista/docs/examples/02-plot/themes.rst:129
msgid "Demo the ``'night'`` theme"
msgstr "``'night'`` テーマのデモ"

#: ../../pyvista/docs/examples/02-plot/themes.rst:160
msgid "Demo the ``'document'`` theme"
msgstr "``'document'`` テーマのデモ"

#: ../../pyvista/docs/examples/02-plot/themes.rst:192
msgid ""
"Note that you can also use color gradients for the background of the "
"plotting window!"
msgstr "プロットウィンドウの背景には、カラーグラデーションを使用することもできます。"

#: ../../pyvista/docs/examples/02-plot/themes.rst:228
msgid "**Total running time of the script:** ( 0 minutes  5.288 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/themes.rst:243
msgid ":download:`Download Python source code: themes.py <themes.py>`"
msgstr ":download:`Python source code: themes.py <themes.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/themes.rst:249
msgid ":download:`Download Jupyter notebook: themes.ipynb <themes.ipynb>`"
msgstr ":download:`Jupyter notebook: themes.ipynb <themes.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_topo-map.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_topo-map.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:13
msgid "Topographic Map"
msgstr "地形図"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:15
msgid ""
"This is very similar to the :ref:`ref_texture_example` example except it is "
"focused on plotting aerial imagery from a GeoTIFF on top of some topography "
"mesh."
msgstr ""
"これは :ref:`ref_texture_example` "
"の例と非常に似ていますが、地形メッシュの上にGeoTIFFからの航空画像をプロットすることに焦点を当てています。"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:63
msgid "Let's inspect the imagery that we just loaded"
msgstr "ロードしたばかりの画像を"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:93
msgid ""
"Once you have a topography mesh loaded as a surface mesh (we use a "
":class:`pyvista.StructuredGrid` here) and an image loaded as a "
":class:`pyvista.Texture` object using the :func:`pyvista.read_texture` "
"method, then you can map that imagery to the surface mesh as follows:"
msgstr ""
"サーフェスメッシュ(ここでは :class:`pyvista.StructuredGrid` を使います)として地形メッシュをロードし、 "
":func:`pyvista.read_texture` メソッドを使用して:class:`pyvista.Texture` "
"オブジェクトとしてイメージをロードしたら、次のようにイメージをサーフェスメッシュにマッピングできます。"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:116
msgid "Now display it! Note that the imagery is aligned as we expect."
msgstr "表示します!イメージが予想どおりに調整されていることに注意してください。"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:144
msgid "And here is a 3D perspective!"
msgstr "これが3 D遠近法です!"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:172
msgid ""
"We could also display the entire region by extracting the surrounding region"
" and plotting the texture mapped local topography and the outside area"
msgstr "また、周辺領域を抽出し、テクスチャマッピングされた局所的な地形と外部領域をプロットすることによって、領域全体を表示することもできます。"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:215
msgid "**Total running time of the script:** ( 0 minutes  19.310 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:230
msgid ":download:`Download Python source code: topo-map.py <topo-map.py>`"
msgstr ":download:`Python source code: topo-map.py <topo-map.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/topo-map.rst:236
msgid ":download:`Download Jupyter notebook: topo-map.ipynb <topo-map.ipynb>`"
msgstr ":download:`Jupyter notebook: topo-map.ipynb <topo-map.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/volume.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_volume.py>`     to "
"download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_02-plot_volume.py>`     "
"をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:13
msgid "Volume Rendering"
msgstr "ボリュームレンダリング"

#: ../../pyvista/docs/examples/02-plot/volume.rst:15
msgid ""
"Volume render uniform mesh types like :class:`pyvista.UniformGrid` or 3D "
"NumPy arrays."
msgstr ":class:`pyvista.UniformGrid` または3 D NumPy配列のようなボリュームレンダリングの均一メッシュタイプ。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:18
msgid ""
"This also explores how to extract a volume of interest (VOI) from a "
":class:`pyvista.UniformGrid` using the "
":func:`pyvista.UniformGridFilters.extract_subset` filter."
msgstr ""
"これはまた :func:`pyvista.UniformGridFilters.extract_subset` フィルタを使用して "
":class:`pyvista.UniformGrid` から関心領域 (VOI) を抽出する方法を探求する。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:68
msgid "Simple Volume Render"
msgstr "シンプルボリュームレンダー"

#: ../../pyvista/docs/examples/02-plot/volume.rst:103
msgid "Opacity Mappings"
msgstr "不透明度マッピング"

#: ../../pyvista/docs/examples/02-plot/volume.rst:105
msgid ""
"Or use the :func:`pyvista.BasePlotter.add_volume` method like below. Note "
"that here we use a non-default opacity mapping to a sigmoid:"
msgstr ""
"または、以下のように :func:`pyvista.BasePlotter.add_volume` "
"メソッドを使用します。ここでは、シグモイドへのデフォルト以外の不透明度マッピングを使用することに注意してください。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:138
msgid "You can also use a custom opacity mapping"
msgstr "カスタム不透明度マッピングを使用することもできます。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:171
msgid ""
"We can also use a shading technique when volume rendering with the ``shade``"
" option"
msgstr "``shade`` オプションを使用してボリュームレンダリングを行う場合は、シェーディングテクニックを使用することもできます。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:209
msgid "Cool Volume Examples"
msgstr "かっこいい体積の例"

#: ../../pyvista/docs/examples/02-plot/volume.rst:211
msgid "Here are a few more cool volume rendering examples"
msgstr "ここでは、クールなボリュームレンダリングの例をいくつか紹介します。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:313
msgid "Extracting a VOI"
msgstr "VOIの抽出"

#: ../../pyvista/docs/examples/02-plot/volume.rst:315
msgid ""
"Use the :func:`pyvista.UniformGridFilters.extract_subset` filter to extract "
"a volume of interest/subset volume to volume render. This is ideal when "
"dealing with particularly large volumes and you want to volume render only a"
" specific region."
msgstr ""
":func:`pyvista.UniformGridFilters.extract_subset` "
"フィルタを使用して、ボリュームレンダリングの対象となるボリューム/サブセットボリュームを抽出します。これは、特に大きなボリュームを処理し、特定の領域のみをボリュームレンダーする場合に理想的です。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:391
msgid ""
"Woah, that's a big volume! We probably don't want to volume render the whole"
" thing. So let's extract a region of interest under the volcano."
msgstr "わあ、すごいボリュームだ!全体をボリュームレンダリングしたくはないでしょう。火山の下の興味深い地域を抽出してみましょう。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:394
msgid ""
"The region we will extract will be between nodes 175 and 200 on the x-axis, "
"between nodes 105 and 132 on the y-axis, and between nodes 98 and 170 on the"
" z-axis."
msgstr "抽出する領域は、x軸上の節点175と200の間、y軸上の節点105と132の間、およびz軸上の節点98と170の間になります。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:430
msgid "Ah, much better. Let's now volume render that region of interest!"
msgstr "ああ、だいぶよくなりました。次に、その対象領域をボリュームレンダリングします。"

#: ../../pyvista/docs/examples/02-plot/volume.rst:467
msgid "**Total running time of the script:** ( 1 minutes  10.148 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/02-plot/volume.rst:482
msgid ":download:`Download Python source code: volume.py <volume.py>`"
msgstr ":download:`Python source code: volume.py <volume.py> をダウンロード`"

#: ../../pyvista/docs/examples/02-plot/volume.rst:488
msgid ":download:`Download Jupyter notebook: volume.ipynb <volume.ipynb>`"
msgstr ":download:`Jupyter notebook: volume.ipynb <volume.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-advanced_antarctica-"
"compare.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_03-advanced_antarctica-compare.py>`"
"     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:13
msgid "Compare Field Across Mesh Regions"
msgstr "メッシュ領域間でフィールドを比較"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:15
msgid ""
"Here is some velocity data from a glacier modelling simulation that is "
"compared across nodes in the simulation. We have simplified the mesh to have"
" the simulation node value already on the mesh."
msgstr ""
"氷河モデリングシミュレーションの速度データをシミュレーションのノード間で比較したものです。メッシュを簡略化して、シミュレーションノードの値がすでにメッシュ上にあるようにしました。"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:19
msgid ""
"This was originally posted to `pyvista/pyvista-support#83 "
"<https://github.com/pyvista/pyvista-support/issues/83>`_."
msgstr ""
"これは元々 `pyvista/pyvista-support#83 <https://github.com/pyvista/pyvista-"
"support/issues/83>`_ に投稿されました。"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:21
msgid ""
"The modeling results are courtesy of `Urruty Benoit "
"<https://github.com/BenoitURRUTY>`_ and  are from the `Elmer/Ice "
"<http://elmerice.elmerfem.org>`_ simulation software."
msgstr ""
"モデリング結果は`Urruty Benoit <https://github.com/BenoitURRUTY>`_ の好意により `Elmer/Ice"
" <http://elmerice.elmerfem.org>`_ シミュレーションソフトウェアから得たものである。"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:70
msgid ""
"Here is a helper to extract regions of the mesh based on the simulation "
"node."
msgstr "ここには、シミュレーションノードに基づいてメッシュの領域を抽出するヘルパーがあります。"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:194
msgid "plot vectors without mesh"
msgstr "メッシュなしでベクトルをプロット"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:230
msgid ""
"Compare directions. Normalize them so we can get a reasonable direction "
"comparison."
msgstr "方向を比較します。適切な方向比較ができるように正規化します。"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:275
msgid "flow_a that agrees with the mean flow path of flow_b"
msgstr "flow_b の平均流路と一致する flow_a"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:341
msgid "**Total running time of the script:** ( 0 minutes  13.920 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:356
msgid ""
":download:`Download Python source code: antarctica-compare.py <antarctica-"
"compare.py>`"
msgstr ""
":download:`Python source code: antarctica-compare.py <antarctica-compare.py>"
" をダウンロード`"

#: ../../pyvista/docs/examples/03-advanced/antarctica-compare.rst:362
msgid ""
":download:`Download Jupyter notebook: antarctica-compare.ipynb <antarctica-"
"compare.ipynb>`"
msgstr ""
":download:`Jupyter notebook: antarctica-compare.ipynb <antarctica-"
"compare.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:8
msgid "**00:30.196** total execution time for **examples_03-advanced** files:"
msgstr ""

#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:11
msgid ""
":ref:`sphx_glr_examples_03-advanced_warp-by-vector-eigenmodes.py` (``warp-"
"by-vector-eigenmodes.py``)"
msgstr ""
":ref:`sphx_glr_examples_03-advanced_warp-by-vector-eigenmodes.py` (``warp-"
"by-vector-eigenmodes.py``)"

#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:11
msgid "00:16.276"
msgstr ""

#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_03-advanced_antarctica-compare.py` (``antarctica-"
"compare.py``)"
msgstr ""
":ref:`sphx_glr_examples_03-advanced_antarctica-compare.py` (``antarctica-"
"compare.py``)"

#: ../../pyvista/docs/examples/03-advanced/sg_execution_times.rst:13
msgid "00:13.920"
msgstr ""

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:6
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-advanced_warp-by-vector-"
"eigenmodes.py>`     to download the full example code"
msgstr ""
":ref:`ここ <sphx_glr_download_examples_03-advanced_warp-by-vector-"
"eigenmodes.py>`     をクリックして完全なサンプルコードをダウンロードします。"

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:13
msgid "Displaying eigenmodes of vibration using ``warp_by_vector``"
msgstr "``warp_by_vector`` を用いた振動固有モードの表示"

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:15
msgid ""
"This example applies the ``warp_by_vector`` filter to a cube whose "
"eigenmodes have been computed using the Ritz method, as outlined in "
"Visscher, William M., Albert Migliori, Thomas M. Bell, et Robert A. Reinert."
" « On the normal modes of free vibration of inhomogeneous and anisotropic "
"elastic objects ». The Journal of the Acoustical Society of America 90, nᵒ 4"
" (october 1991): 2154‑62. https://doi.org/10.1121/1.401643."
msgstr ""
"この例は、Visscher, William M., Albert Migliori, Thomas M.Bell, et Robert "
"A.Reinertで概説されているように、固有モードがRitz法を使用して計算された立方体に ``warp_by_vector`` "
"フィルタを適用します。« On the normal modes of free vibration of inhomogeneous and "
"anisotropic elastic objects ». The Journal of the Acoustical Society of "
"America 90, nᵒ 4 (october 1991): 2154‑62. https://doi.org/10.1121/1.401643."

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:23
msgid ""
"First, let's solve the eigenvalue problem for a vibrating cube. We use a "
"crude approximation (by choosing a low max polynomial order) to get a fast "
"computation."
msgstr "まず、振動する立方体の固有値問題を解く。高速計算を得るために(低い最大多項式次数を選択した)粗近似を用いました。"

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:208
msgid "Now, let's display a mode on a mesh of the cube."
msgstr "次に、立方体のメッシュにモードを表示します。"

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:274
msgid "Finally, let's make a gallery of the first 8 unique eigenmodes."
msgstr "最後に、最初の8つの固有モードのギャラリーを作成します。"

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:317
msgid "**Total running time of the script:** ( 0 minutes  16.276 seconds)"
msgstr ""

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:332
msgid ""
":download:`Download Python source code: warp-by-vector-eigenmodes.py <warp-"
"by-vector-eigenmodes.py>`"
msgstr ""
":download:`Python source code: warp-by-vector-eigenmodes.py <warp-by-vector-"
"eigenmodes.py> をダウンロード`"

#: ../../pyvista/docs/examples/03-advanced/warp-by-vector-eigenmodes.rst:338
msgid ""
":download:`Download Jupyter notebook: warp-by-vector-eigenmodes.ipynb <warp-"
"by-vector-eigenmodes.ipynb>`"
msgstr ""
":download:`Jupyter notebook: warp-by-vector-eigenmodes.ipynb <warp-by-"
"vector-eigenmodes.ipynb> をダウンロード`"

#: ../../pyvista/docs/examples/index.rst:10
msgid "Quick Examples"
msgstr "簡単な例"

#: ../../pyvista/docs/examples/index.rst:12
msgid ""
"Here is a gallery of all the quick examples demonstrating what PyVista can "
"do!"
msgstr "ここにPyVistaができることを示す簡単な例のギャラリーがあります!"

#: ../../pyvista/docs/examples/index.rst:14
msgid "All of these examples are live and available on MyBinder!"
msgstr "これらの例はすべて、MyBinderでライブで入手できます!"

#: ../../pyvista/docs/examples/index.rst:30
msgid "Mesh Creation"
msgstr "メッシュ作成"

#: ../../pyvista/docs/examples/index.rst:32
msgid ""
"These examples demo how to read various file types into PyVista mesh "
"objects, create meshes from NumPy arrays, and how to create primitive "
"geometric objects like spheres, arrows, cubes, ellipsoids and more! Once a "
"mesh is loaded, it is ready for plotting with just a few lines of code - "
"explore these examples to get started with using PyVista for your data."
msgstr ""
"これらのサンプルでは、さまざまなファイルタイプをPyVistaメッシュオブジェクトに読み込んだり、NumPy配列からメッシュを作成したりする方法や、球、矢印、立方体、楕円体などのプリミティブジオメトリオブジェクトを作成する方法をデモしています。メッシュがロードされると、数行のコードでプロットできるようになります。データにPyVistaを使用する場合は、これらの例を参照してください。"

#: ../../pyvista/docs/examples/index.rst:50
msgid ":ref:`sphx_glr_examples_00-load_create-geometric-objects.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-geometric-objects.py`"

#: ../../pyvista/docs/examples/index.rst:71
msgid ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py`"
msgstr ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py`"

#: ../../pyvista/docs/examples/index.rst:92
msgid ":ref:`sphx_glr_examples_00-load_create-point-cloud.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-point-cloud.py`"

#: ../../pyvista/docs/examples/index.rst:113
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-poly.py`"

#: ../../pyvista/docs/examples/index.rst:134
msgid ":ref:`sphx_glr_examples_00-load_create-spline.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-spline.py`"

#: ../../pyvista/docs/examples/index.rst:155
msgid ":ref:`sphx_glr_examples_00-load_create-structured-surface.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-structured-surface.py`"

#: ../../pyvista/docs/examples/index.rst:176
msgid ":ref:`sphx_glr_examples_00-load_create-tri-surface.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-tri-surface.py`"

#: ../../pyvista/docs/examples/index.rst:197
msgid ":ref:`sphx_glr_examples_00-load_create-uniform-grid.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-uniform-grid.py`"

#: ../../pyvista/docs/examples/index.rst:218
msgid ":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py`"
msgstr ":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py`"

#: ../../pyvista/docs/examples/index.rst:239
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py`"
msgstr ":ref:`sphx_glr_examples_00-load_read-dolfin.py`"

#: ../../pyvista/docs/examples/index.rst:260
msgid ":ref:`sphx_glr_examples_00-load_read-file.py`"
msgstr ":ref:`sphx_glr_examples_00-load_read-file.py`"

#: ../../pyvista/docs/examples/index.rst:281
msgid ":ref:`sphx_glr_examples_00-load_read-image.py`"
msgstr ":ref:`sphx_glr_examples_00-load_read-image.py`"

#: ../../pyvista/docs/examples/index.rst:302
msgid ":ref:`sphx_glr_examples_00-load_read-parallel.py`"
msgstr ":ref:`sphx_glr_examples_00-load_read-parallel.py`"

#: ../../pyvista/docs/examples/index.rst:323
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py`"
msgstr ":ref:`sphx_glr_examples_00-load_terrain-mesh.py`"

#: ../../pyvista/docs/examples/index.rst:343
msgid "Filtering"
msgstr "フィルタリング"

#: ../../pyvista/docs/examples/index.rst:345
msgid ""
"These examples show case various mesh analysis and filtering routines "
"present in the :ref:`filters_ref` module. Explore these demos to perform "
"tasks such as:"
msgstr ""
"これらの例は :ref:`filters_ref` "
"モジュールに存在する様々なメッシュ解析とフィルタリングルーチンの事例を示します。次のようなタスクを実行するには、これらのデモを参照してください。"

#: ../../pyvista/docs/examples/index.rst:348
msgid "Slicing and cutting meshes"
msgstr "メッシュのスライスとカット"

#: ../../pyvista/docs/examples/index.rst:349
msgid "Computing mesh properties like volume, area, and surface normals"
msgstr "ボリューム、領域、サーフェス法線などのメッシュプロパティの計算"

#: ../../pyvista/docs/examples/index.rst:350
msgid "Mesh decimation"
msgstr "メッシュ間引き"

#: ../../pyvista/docs/examples/index.rst:351
msgid "Extract regions of one mesh using another mesh's surface"
msgstr "別のメッシュのサーフェスを使用して1つのメッシュの領域を抽出します"

#: ../../pyvista/docs/examples/index.rst:352
msgid "Ray tracing through surface meshes"
msgstr "サーフェスメッシュを使用したレイトレーシング"

#: ../../pyvista/docs/examples/index.rst:353
msgid "Resampling and interpolating scalar/vector values across meshes"
msgstr "メッシュ間のスカラー/ベクトル値のリサンプリングと補間"

#: ../../pyvista/docs/examples/index.rst:354
msgid "Integrating a vector field to generate streamlines"
msgstr "ベクトルフィールドを積分して、流線を生成します。"

#: ../../pyvista/docs/examples/index.rst:355
msgid "Smoothing surfaces"
msgstr "サーフェスをスムージングする"

#: ../../pyvista/docs/examples/index.rst:368
msgid ":ref:`sphx_glr_examples_01-filter_boolean-operations.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_boolean-operations.py`"

#: ../../pyvista/docs/examples/index.rst:389
msgid ":ref:`sphx_glr_examples_01-filter_cell-centers.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_cell-centers.py`"

#: ../../pyvista/docs/examples/index.rst:410
msgid ":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py`"

#: ../../pyvista/docs/examples/index.rst:431
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_clipping.py`"

#: ../../pyvista/docs/examples/index.rst:452
msgid ":ref:`sphx_glr_examples_01-filter_compute-normals.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_compute-normals.py`"

#: ../../pyvista/docs/examples/index.rst:473
msgid ":ref:`sphx_glr_examples_01-filter_compute-volume.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_compute-volume.py`"

#: ../../pyvista/docs/examples/index.rst:494
msgid ":ref:`sphx_glr_examples_01-filter_connectivity.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_connectivity.py`"

#: ../../pyvista/docs/examples/index.rst:515
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_contouring.py`"

#: ../../pyvista/docs/examples/index.rst:536
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_decimate.py`"

#: ../../pyvista/docs/examples/index.rst:557
msgid ":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py`"

#: ../../pyvista/docs/examples/index.rst:578
msgid ":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py`"

#: ../../pyvista/docs/examples/index.rst:599
msgid ":ref:`sphx_glr_examples_01-filter_extract-edges.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_extract-edges.py`"

#: ../../pyvista/docs/examples/index.rst:620
msgid ":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py`"

#: ../../pyvista/docs/examples/index.rst:641
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_geodesic.py`"

#: ../../pyvista/docs/examples/index.rst:662
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_glyphs.py`"

#: ../../pyvista/docs/examples/index.rst:683
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_gradients.py`"

#: ../../pyvista/docs/examples/index.rst:704
msgid ":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py`"

#: ../../pyvista/docs/examples/index.rst:725
msgid ":ref:`sphx_glr_examples_01-filter_project-plane.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_project-plane.py`"

#: ../../pyvista/docs/examples/index.rst:746
msgid ":ref:`sphx_glr_examples_01-filter_resample.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_resample.py`"

#: ../../pyvista/docs/examples/index.rst:767
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_slicing.py`"

#: ../../pyvista/docs/examples/index.rst:788
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_streamlines.py`"

#: ../../pyvista/docs/examples/index.rst:809
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_subdivide.py`"

#: ../../pyvista/docs/examples/index.rst:830
msgid ":ref:`sphx_glr_examples_01-filter_surface-smoothing.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_surface-smoothing.py`"

#: ../../pyvista/docs/examples/index.rst:851
msgid ":ref:`sphx_glr_examples_01-filter_using-filters.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_using-filters.py`"

#: ../../pyvista/docs/examples/index.rst:872
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_voxelize.py`"

#: ../../pyvista/docs/examples/index.rst:893
msgid ":ref:`sphx_glr_examples_01-filter_warp-by-vector.py`"
msgstr ":ref:`sphx_glr_examples_01-filter_warp-by-vector.py`"

#: ../../pyvista/docs/examples/index.rst:913
msgid "Plotting"
msgstr "プロット"

#: ../../pyvista/docs/examples/index.rst:915
msgid ""
"These examples show case many of the possibilities for altering how you "
"display spatial data. Explore these examples to learn how to leverage our "
"powerful 3D plotting routines to perform tasks like:"
msgstr ""
"これらの例は、空間データの表示方法を変更する可能性の多くを示しています。次のようなタスクを実行するために、強力な3 "
"Dプロットルーチンを活用する方法については、これらの例を参照してください。"

#: ../../pyvista/docs/examples/index.rst:919
msgid "Color mapping scalar values with ``matplotlib`` colormaps"
msgstr "``matplotlib`` カラーマップを持つカラーマッピングスカラー値"

#: ../../pyvista/docs/examples/index.rst:920
msgid "Creating animations as GIFs or movie files"
msgstr "GIFまたはムービーファイルとしてアニメーションを作成します"

#: ../../pyvista/docs/examples/index.rst:921
msgid "Showing the edges and nodes of different mesh types"
msgstr "異なるメッシュタイプのエッジとノードを表示する"

#: ../../pyvista/docs/examples/index.rst:922
msgid ""
"Use sophisticated lighting techniques like smooth shading or Eye Dome "
"Lighting"
msgstr "スムースシェーディングやアイドームライティングなどの洗練されたライティングテクニックを使用する"

#: ../../pyvista/docs/examples/index.rst:923
msgid ""
"Glyph a vector or scalar field on a mesh (place/orient a mesh on anther "
"mesh's nodes and scale/orient based on data values)"
msgstr ""
"メッシュ上のベクトルフィールドまたはスカラーフィールドをグリフします(別のメッシュのノードにメッシュを配置/方向設定し、データ値に基づいてスケール/方向設定します。)"

#: ../../pyvista/docs/examples/index.rst:924
msgid "Label points in 3D space along side your meshes"
msgstr "メッシュの側面に沿って3 D空間でポイントにラベルを付けます"

#: ../../pyvista/docs/examples/index.rst:925
msgid "Creating side-by-side comparisons"
msgstr "並列比較の作成"

#: ../../pyvista/docs/examples/index.rst:926
msgid "Making a dataset transparent or using a scalar value to map opacity"
msgstr "データセットを透明にする、またはスカラー値を使用して不透明度をマップします"

#: ../../pyvista/docs/examples/index.rst:927
msgid "Adding textures/images draped over a mesh (texture mapping)"
msgstr "メッシュ上にまとったテクスチャ/イメージを追加する(テクスチャマッピング)"

#: ../../pyvista/docs/examples/index.rst:928
msgid "Rendering a depth image"
msgstr "デプスイメージをレンダーする"

#: ../../pyvista/docs/examples/index.rst:941
msgid ":ref:`sphx_glr_examples_02-plot_background_image.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_background_image.py`"

#: ../../pyvista/docs/examples/index.rst:962
msgid ":ref:`sphx_glr_examples_02-plot_clear.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_clear.py`"

#: ../../pyvista/docs/examples/index.rst:983
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_cmap.py`"

#: ../../pyvista/docs/examples/index.rst:1004
msgid ":ref:`sphx_glr_examples_02-plot_depth-peeling.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_depth-peeling.py`"

#: ../../pyvista/docs/examples/index.rst:1025
msgid ":ref:`sphx_glr_examples_02-plot_edges.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_edges.py`"

#: ../../pyvista/docs/examples/index.rst:1046
msgid ":ref:`sphx_glr_examples_02-plot_edl.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_edl.py`"

#: ../../pyvista/docs/examples/index.rst:1067
msgid ":ref:`sphx_glr_examples_02-plot_floors.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_floors.py`"

#: ../../pyvista/docs/examples/index.rst:1088
msgid ":ref:`sphx_glr_examples_02-plot_gif.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_gif.py`"

#: ../../pyvista/docs/examples/index.rst:1109
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_image_depth.py`"

#: ../../pyvista/docs/examples/index.rst:1130
msgid ":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py`"

#: ../../pyvista/docs/examples/index.rst:1151
msgid ":ref:`sphx_glr_examples_02-plot_labels.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_labels.py`"

#: ../../pyvista/docs/examples/index.rst:1172
msgid ":ref:`sphx_glr_examples_02-plot_lighting.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_lighting.py`"

#: ../../pyvista/docs/examples/index.rst:1193
msgid ":ref:`sphx_glr_examples_02-plot_linked.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_linked.py`"

#: ../../pyvista/docs/examples/index.rst:1214
msgid ":ref:`sphx_glr_examples_02-plot_movie.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_movie.py`"

#: ../../pyvista/docs/examples/index.rst:1235
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_multi-window.py`"

#: ../../pyvista/docs/examples/index.rst:1256
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_opacity.py`"

#: ../../pyvista/docs/examples/index.rst:1277
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_orbit.py`"

#: ../../pyvista/docs/examples/index.rst:1298
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-line.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_plot-over-line.py`"

#: ../../pyvista/docs/examples/index.rst:1319
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_scalar-bars.py`"

#: ../../pyvista/docs/examples/index.rst:1340
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_screenshot.py`"

#: ../../pyvista/docs/examples/index.rst:1361
msgid ":ref:`sphx_glr_examples_02-plot_shading.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_shading.py`"

#: ../../pyvista/docs/examples/index.rst:1382
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_spherical.py`"

#: ../../pyvista/docs/examples/index.rst:1403
msgid ":ref:`sphx_glr_examples_02-plot_texture.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_texture.py`"

#: ../../pyvista/docs/examples/index.rst:1424
msgid ":ref:`sphx_glr_examples_02-plot_themes.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_themes.py`"

#: ../../pyvista/docs/examples/index.rst:1445
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_topo-map.py`"

#: ../../pyvista/docs/examples/index.rst:1466
msgid ":ref:`sphx_glr_examples_02-plot_volume.py`"
msgstr ":ref:`sphx_glr_examples_02-plot_volume.py`"

#: ../../pyvista/docs/examples/index.rst:1486
msgid "Advanced"
msgstr "詳細設定"

#: ../../pyvista/docs/examples/index.rst:1488
msgid ""
"Include here are few longer, more advanced examples from our users and "
"developers."
msgstr "ここでは、ユーザと開発者による、より長く、より高度な例をいくつか紹介します。"

#: ../../pyvista/docs/examples/index.rst:1502
msgid ":ref:`sphx_glr_examples_03-advanced_antarctica-compare.py`"
msgstr ":ref:`sphx_glr_examples_03-advanced_antarctica-compare.py`"

#: ../../pyvista/docs/examples/index.rst:1523
msgid ":ref:`sphx_glr_examples_03-advanced_warp-by-vector-eigenmodes.py`"
msgstr ":ref:`sphx_glr_examples_03-advanced_warp-by-vector-eigenmodes.py`"
