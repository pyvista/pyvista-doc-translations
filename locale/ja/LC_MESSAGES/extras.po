# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2025, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.46.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-19 02:44+0000\n"
"PO-Revision-Date: 2021-01-06 02:34+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/112279/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pyvista/doc/source/extras/building_vtk.rst:4
msgid "Building VTK"
msgstr "VTKの構築"

#: ../../pyvista/doc/source/extras/building_vtk.rst:5
msgid ""
"Kitware provides Python wheels for VTK at `PyPI VTK "
"<https://pypi.org/project/vtk/>`_, but there are situations where you may "
"need to build VTK from source (for example, a new release of Python, EGL "
"rendering, additional features, etc). As ``pyvista`` does not provide "
"``vtk``, you will have to either build it manually or install the default "
"wheel from PyPI."
msgstr ""
"Kitwareは `PyPI VTK <https://pypi.org/project/vtk/>`_ "
"でVTK用のPythonホイールを提供していますが，場合によってはソースからVTKをビルドする必要があります(たとえば，Pythonの新リリース，EGLレンダリング，追加機能など)．"
" ``pyvista`` は ``vtk`` を提供しないため，手動でビルドするか，PyPIからデフォルトのホイールをインストールする必要があります．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:13
msgid ""
"Should you need a prebuilt wheel, a variety of prebuilt wheels can be found "
"at `pyvista-wheels <https://github.com/pyvista/pyvista-wheels>`_, but you "
"may be better off building your own. These are not \"official\" wheels and "
"will soon be removed in favor of more \"official\" wheel variants from VTK "
"directly."
msgstr ""
"既成のホイールが必要な場合は，`pyvista-wheels <https://github.com/pyvista/pyvista-wheels>`_"
" にさまざまな既成のホイールがありますが，自分で作った方がよいかもしれません．これらは \"公式\" なホイールではなく，VTK が直接提供する "
"\"公式\" なホイールの変種を優先して，すぐに削除される予定です．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:18
msgid ""
"Reference the official directions for `Building VTK "
"<https://gitlab.kitware.com/vtk/vtk/-/blob/master/Documentation/dev/build.md>`_."
" The following directions assume you want to build a Python wheel non-"
"standard situations like EGL."
msgstr ""
"`VTKのビルド方法 "
"<https://gitlab.kitware.com/vtk/vtk/-/blob/master/Documentation/dev/build.md>`_"
" を参照してください．以下の説明は，EGLのような非標準的な状況でPythonホイールをビルドしたい場合を想定しています．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:25
msgid "Building Wheels"
msgstr "ホイールを作る"

#: ../../pyvista/doc/source/extras/building_vtk.rst:26
msgid ""
"Building VTK from source is fairly straightforward. Using the default build "
"settings, build a Python wheel of VTK using ``ninja`` using the following "
"script. This script uses system python3, but you can use any modern Python "
"version. For some additional useful options, see the `conda-forge recipe "
"<https://github.com/conda-forge/vtk-feedstock/blob/main/recipe/build-"
"base.sh>`__. Most of the ones below are designed to reduce the build time "
"and resulting wheel size."
msgstr ""
"ソースからVTKを構築するのはかなりストレートです．デフォルトのビルド設定を使用し，次のスクリプトを使用して ``ninja`` "
"を使用し，VTKのPythonホイールをビルドします．このスクリプトはpython "
"3を使用していますが，最新のPythonバージョンを使用することができます．その他の便利なオプションについては， `conda-forge recipe"
" <https://github.com/conda-forge/vtk-feedstock/blob/main/recipe/build-"
"base.sh>`__ を参照してください．以下のほとんどのオプションは，構築時間を短縮し，ホイールサイズを小さくするように設計されています．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:35
msgid ""
"We have also published some convenient CMake configurations files that you "
"can adopt from `banesullivan/vtk-cmake <https://github.com/banesullivan/vtk-"
"cmake>`_. These configurations cover the build variants described here and "
"make the process of reproducibly building VTK wheel variants more "
"straightforward."
msgstr ""
"また，便利な CMake 設定ファイルをいくつか公開しましたので， `banesullivan/vtk-cmake "
"<https://github.com/banesullivan/vtk-cmake>`_ "
"から採用することができます．これらの設定は，ここで説明したビルドのバリエーションをカバーし，VTKホイールのバリエーションを再現性よくビルドするプロセスをより簡単にします．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:89
msgid "Off-Screen Plotting GPU Support"
msgstr "オフスクリーンプロットのGPUサポート"

#: ../../pyvista/doc/source/extras/building_vtk.rst:90
msgid ""
"VTK supports rendering with EGL, enabling rapid off-screen rendering using "
"GPU hardware acceleration without installing a virtual framebuffer. The "
"default VTK wheels are not built with this feature, but you can build VTK "
"for off-screen plotting using GPU support by modifying the above ``cmake`` "
"command with:"
msgstr ""
"VTKはEGLを使用したレンダリングをサポートしており，仮想フレームバッファをインストールせずにGPUハードウェアアクセラレーションを使用して迅速なオフスクリーンレンダリングを可能にします．デフォルトのVTKホイールにはこの機能はありませんが，上記の"
" ``cmake`` コマンドを次のように変更することで，GPUサポートを使用したオフスクリーンVTKを作成できます．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:134
msgid ""
"This disables any plotting using the X server, so be prepared to use this "
"module only on a headless display where you either intend to save static "
"images or stream the render window to another computer with a display (e.g "
"using ``pyvista.set_jupyter_backend('server')`` and jupyterlab). In other "
"words, this wheel will make VTK unusable outside of an off-screen "
"environment, so only plan on installing it on a headless system without an X"
" server."
msgstr ""
"これにより，Xサーバを使用したすべてのプロットが無効になるため，このモジュールは，静止イメージを保存するか，またはレンダーウィンドウをディスプレイ(例:"
" ``pyvista.set_jupyter_backend('server')`` "
"とjupyterlab)とともに別のコンピュータにストリーミングする予定のあるヘッドレスディスプレイでのみ使用するようにしてください．言い換えれば，このホイールはVTKをスクリーン外の環境では使えなくするので，Xサーバのないヘッドレスシステムにインストールすることだけを計画してください．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:144
msgid "Building OSMesa"
msgstr "OSMesaの構築"

#: ../../pyvista/doc/source/extras/building_vtk.rst:145
msgid ""
"OSMesa provides higher visualization performance on CPU based hosts. Use "
"this instead of ``xvfb``:"
msgstr "OSMesaはCPUベースのホストでより高い可視化性能を提供します．xvfb`` の代わりに，これを使用してください．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:181
msgid "Wheels will be generated in the ``dist`` directory."
msgstr "Wheels は ``dist`` ディレクトリに生成されます．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:185
msgid "Building ManyLinux Wheels"
msgstr "ManyLinux wheel の構築"

#: ../../pyvista/doc/source/extras/building_vtk.rst:186
msgid ""
"The above directions are great for building a local build of VTK, but these "
"wheels are difficult to share outside your local install given issues with "
"ABI compatibility due to the version of Linux they were built on. You can "
"work around this by building your wheels using a `manylinux "
"<https://github.com/pypa/manylinux>`_ docker image."
msgstr ""
"上記の方向性はVTKのローカルビルドを構築するのに適していますが，これらのwheelは，それらが構築されたLinuxのバージョンによるABI互換性の問題を考えると，ローカルインストールの外部で共有することは困難です．これを回避するには，"
" `manylinux <https://github.com/pypa/manylinux>`_ "
"のdockerイメージを使ってwheelをビルドします．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:192
msgid ""
"To do this, create a ``build_wheels.sh`` with the following contents in the "
"``git clone`` d ``vtk`` directory, and give it executable permissions "
"(``chmod +x build_wheels.sh``):"
msgstr ""
"そのためには， ``git clone`` d ``vtk`` ディレクトリに以下の内容の ``build_wheels.sh`` "
"を作成し，実行権限を与えます (``chmod +x build_wheels.sh``):"

#: ../../pyvista/doc/source/extras/building_vtk.rst:249
msgid "This script can then be called with:"
msgstr "このスクリプトは，次のコマンドで呼び出すことができます:"

#: ../../pyvista/doc/source/extras/building_vtk.rst:258
msgid "You should end up with a ``build/wheelhouse/vtk-*.whl``."
msgstr "最終的に ``build/wheelhouse/vtk-*.whl`` ができあがるはずです．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:261
msgid ""
"To build the EGL version of the wheel, follow the directions in the previous"
" section. Add ``mesa-libEGL-devel`` to the installation dependencies."
msgstr ""
"EGLバージョンのwheelを作成するには，前のセクションの指示に従ってください．インストール依存関係に ``mesa-libEGL-devel`` "
"を追加します．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:267
msgid "Building Python VTK Wheel on Raspberry Pi (64-bit)"
msgstr "Raspberry Pi上のPython VTK Wheel(64ビット)構築"

#: ../../pyvista/doc/source/extras/building_vtk.rst:268
msgid ""
"While it's possible to build on 32-bit Raspberry Pi (ARMv7), there are "
"several issues that crop up when building wheels for the 32-bit version (see"
" `manylinux issue 84 <https://github.com/pypa/manylinux/issues/84>`_). "
"Should you attempt to build on 32-bit, try building the wheel using "
"`dockcross <https://github.com/dockcross/dockcross>`_ as you may run into "
"memory limitations otherwise (especially with only 1 GB RAM)."
msgstr ""
"32ビット版Raspberry Pi(ARMv7)で構築することは可能だが，32ビット版のホイールを構築する際にはいくつかの問題が生じます( "
"`manylinux issue 84 <https://github.com/pypa/manylinux/issues/84>`_ "
"を参照)．32ビットで構築しようとする場合は， `dockcross "
"<https://github.com/dockcross/dockcross>`_ "
"を使ってwheelを構築してみてください．そうしないとメモリの制限が生じる可能性があります(特に1GBのRAMしかない場合)．"

#: ../../pyvista/doc/source/extras/building_vtk.rst:276
msgid ""
"Building the ``aarch64`` manylinux wheel can be done via docker with the "
"``quay.io/pypa/manylinux2014_aarch64`` image. Run the following:"
msgstr ""
"``aarch64``  manylinux wheel のビルドは， ``quay.io/pypa/manylinux2014_aarch64`` "
"イメージを使ったDockerで行うことができます．以下を実行します:"

#: ../../pyvista/doc/source/extras/building_vtk.rst:287
msgid "Where ``build_wheels.sh`` is:"
msgstr "ここで， ``build_wheels.sh`` は次のようになります:"

#: ../../pyvista/doc/source/extras/building_vtk.rst:344
msgid ""
"Be sure to either enable or disable ``DVTK_OPENGL_HAS_EGL`` depending on if "
"you want ``EGL`` enabled for your wheel."
msgstr ""
"wheelで ``EGL`` を有効にするかどうかに応じて， ``DVTK_OPENGL_HAS_EGL`` を有効または無効にしてください．"

#: ../../pyvista/CONTRIBUTING.rst:2
msgid "Contributing"
msgstr "貢献"

#: ../../pyvista/CONTRIBUTING.rst:11
msgid "|Contributor Covenant| |codetriage|"
msgstr "|Contributor Covenant| |codetriage|"

#: ../../pyvista/CONTRIBUTING.rst:4
msgid "Contributor Covenant"
msgstr "コントリビューター行動規範"

#: ../../pyvista/CONTRIBUTING.rst:7
msgid "Code Triage"
msgstr "Code Triage"

#: ../../pyvista/CONTRIBUTING.rst:14
msgid ""
"We absolutely welcome contributions and we hope that this guide will "
"facilitate an understanding of the PyVista code repository. It is important "
"to note that the PyVista software package is maintained on a volunteer basis"
" and thus we need to foster a community that can support user questions and "
"develop new features to make this software a useful tool for all users."
msgstr ""
"私たちは貢献を心から歓迎し，このガイドがPyVistaコードリポジトリの理解を促進することを願っています．PyVistaソフトウェアパッケージはボランティアベースでメンテナンスされていることに注意してください．したがって，このソフトウェアをすべてのユーザにとって有用なツールにするために，ユーザの質問をサポートし，新しい機能を開発できるコミュニティを育成する必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:21
msgid ""
"This page is dedicated to outline where you should start with your question,"
" concern, feature request, or desire to contribute."
msgstr "このページでは，質問，懸念，機能のリクエスト，または貢献したいことから始めるべき概要を説明します．"

#: ../../pyvista/CONTRIBUTING.rst:25
msgid "Being Respectful"
msgstr "尊敬の念を抱くこと"

#: ../../pyvista/CONTRIBUTING.rst:27
msgid ""
"Please demonstrate empathy and kindness toward other people, other software,"
" and the communities who have worked diligently to build (un)related tools."
msgstr "他の人々，他のソフトウェア，そして（関連性のない）ツールを作るために熱心に働いてきたコミュニティに対して，共感と優しさを示してください．"

#: ../../pyvista/CONTRIBUTING.rst:30
msgid ""
"Please do not talk down in Pull Requests, Issues, or otherwise in a way that"
" portrays other people or their works in a negative light."
msgstr "Pull RequestsやIssuesなどで，他人やその作品を否定するような言い方をしないでください．"

#: ../../pyvista/CONTRIBUTING.rst:34
msgid "Cloning the Source Repository"
msgstr "ソースリポジトリのクローン作成"

#: ../../pyvista/CONTRIBUTING.rst:36
msgid ""
"You can clone the source repository from "
"`<https://github.com/pyvista/pyvista>`_ and install the latest version by "
"running:"
msgstr ""
"次のコマンドを実行して， `<https://github.com/pyvista/pyvista>`_ "
"からソースリポジトリをクローンし，最新バージョンをインストールできます．"

#: ../../pyvista/CONTRIBUTING.rst:48
msgid ""
"Use ``python -m pip install -e . --group dev`` to also install all of the "
"packages required for development."
msgstr ""
"``python -m pip install -e . --group dev`` を使って、開発に必要なパッケージもすべてインストールします。"

#: ../../pyvista/CONTRIBUTING.rst:52
msgid "Quick Start Development with Codespaces"
msgstr "Codespacesを使ったクイックスタート開発"

#: ../../pyvista/CONTRIBUTING.rst:58
msgid "|Open in GitHub Codespaces|"
msgstr "|Open in GitHub Codespaces|"

#: ../../pyvista/CONTRIBUTING.rst:54
msgid "Open in GitHub Codespaces"
msgstr "Open in GitHub Codespaces"

#: ../../pyvista/CONTRIBUTING.rst:60
msgid ""
"A dev container is provided to quickly get started. The default container "
"comes with the repository code checked out on a branch of your choice and "
"all pyvista dependencies including test dependencies pre-installed. In "
"addition, it uses the `desktop-lite feature "
"<https://github.com/devcontainers/features/tree/main/src/desktop-lite>`_ to "
"provide live interaction windows.  Follow directions `Connecting to the "
"desktop <https://github.com/devcontainers/features/tree/main/src/desktop-"
"lite#connecting-to-the-desktop>`_ to use the live interaction."
msgstr ""
"開発用コンテナが提供されており，すぐに使い始めることができます。デフォルトのコンテナには，リポジトリコードがお好みのブランチでチェックアウトされ，テスト依存関係を含むすべてのpyvista依存関係がプリインストールされています．さらに，"
" `desktop-lite feature "
"<https://github.com/devcontainers/features/tree/main/src/desktop-lite>`_ "
"を使用してライブインタラクションウィンドウを提供します．ライブインタラクションを使うには `Connecting to the desktop "
"<https://github.com/devcontainers/features/tree/main/src/desktop-"
"lite#connecting-to-the-desktop>`_ の指示に従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:69
msgid ""
"Alternatively, an offscreen version using OSMesa libraries and ``vtk-"
"osmesa`` is available."
msgstr "また，OSMesaライブラリと ``vtk-osmesa`` を使用したオフスクリーンバージョンも利用できます．"

#: ../../pyvista/CONTRIBUTING.rst:72
msgid "Questions"
msgstr "質問"

#: ../../pyvista/CONTRIBUTING.rst:74
msgid ""
"For general questions about the project, its applications, or about software"
" usage, please create a discussion in the `Discussions "
"<https://github.com/pyvista/pyvista/discussions>`_ repository where the "
"community can collectively address your questions."
msgstr ""
"プロジェクト，そのアプリケーション，またはソフトウェアの使用に関する一般的な質問については，コミュニティが共同であなたの質問に対処できる "
"`Discussions <https://github.com/pyvista/pyvista/discussions>`_ "
"リポジトリにdiscussionを作成してください．"

#: ../../pyvista/CONTRIBUTING.rst:79
msgid ""
"You are also welcome to join us on `Slack "
"<https://communityinviter.com/apps/pyvista/pyvista>`_, but Slack should be "
"reserved for ad hoc conversations and community engagement rather than "
"technical discussions."
msgstr ""
"`Slack <https://communityinviter.com/apps/pyvista/pyvista>`_ "
"に参加することも歓迎しますが，Slack は技術的な議論ではなく，その場限りの会話やコミュニティへの参加に使うべきです．"

#: ../../pyvista/CONTRIBUTING.rst:83
msgid ""
"For critical, high-level project support and engagement, please email "
"info@pyvista.org - but please do not use this email for technical support."
msgstr "重要でハイレベルなプロジェクトサポートや関与については， info@pyvista.org まで電子メールをお送りください．"

#: ../../pyvista/CONTRIBUTING.rst:86
msgid ""
"For all technical conversations, you are welcome to create an issue on the "
"`Discussions page <https://github.com/pyvista/pyvista/discussions>`_ which "
"we will address promptly. Through posting on the Discussions page, your "
"question can be addressed by community members with the needed expertise and"
" the information gained will remain available for other users to find."
msgstr ""
"全ての技術的な会話については， `issues ページ "
"<https://github.com/pyvista/pyvista/discussions>`_ "
"で議論を作成していただければ，すぐに対処いたします．ディスカッションのページに投稿することで，必要な専門知識を持つコミュニティメンバーが問題に対処でき，得られた情報は他のユーザーが見つけるのに引き続き利用できます．"

#: ../../pyvista/CONTRIBUTING.rst:94
msgid "Reporting Bugs"
msgstr "バグの報告"

#: ../../pyvista/CONTRIBUTING.rst:96
msgid ""
"If you stumble across any bugs, crashes, or concerning quirks while using "
"code distributed here, please report it on the `issues page "
"<https://github.com/pyvista/pyvista/issues>`_ with an appropriate label so "
"we can promptly address it. When reporting an issue, please be overly "
"descriptive so that we may reproduce it. Whenever possible, please provide "
"tracebacks, screenshots, and sample files to help us address the issue."
msgstr ""
"ここで配布されているコードの使用中にバグ，クラッシュ，または奇妙な点に遭遇した場合は，すぐに対処できるよう適切なラベルを付けて `issues ページ "
"<https://github.com/pyvista/pyvista/issues>`_ "
"に報告してください．問題を報告する際は，再現できるように，過度に記述してください．可能な限り，トレースバック，スクリーンショット，およびサンプルファイルを提供してください．"

#: ../../pyvista/CONTRIBUTING.rst:105
msgid "Feature Requests"
msgstr "機能の要望"

#: ../../pyvista/CONTRIBUTING.rst:107
msgid ""
"We encourage users to submit ideas for improvements to PyVista code base. "
"Please create an issue on the `issues page "
"<https://github.com/pyvista/pyvista/issues>`_ with a *Feature Request* label"
" to suggest an improvement. Please use a descriptive title and provide ample"
" background information to help the community implement that functionality. "
"For example, if you would like a reader for a specific file format, please "
"provide a link to documentation of that file format and possibly provide "
"some sample files with screenshots to work with. We will use the issue "
"thread as a place to discuss and provide feedback."
msgstr ""
"PyVistaのコードベースを改善するためのアイデアを投稿することを推奨します． `issuesページ "
"<https://github.com/pyvista/pyvista/issues>`_ に *Feature Request* "
"ラベルをつけて改善を提案してください．説明的なタイトルを使用し，コミュニティがその機能を実装するのに役立つ十分な背景情報を提供してください．たとえば，特定のファイル形式のリーダーが必要な場合は，そのファイル形式のドキュメントへのリンクを提供し，操作するスクリーンショットを含むサンプルファイルを提供してください．問題のスレッドをディスカッションの場として使用し，フィードバックを提供します．"

#: ../../pyvista/CONTRIBUTING.rst:119
msgid "Contributing New Code"
msgstr "新しいコードの提供"

#: ../../pyvista/CONTRIBUTING.rst:121
msgid ""
"If you have an idea for how to improve PyVista, please first create an issue"
" as a feature request which we can use as a discussion thread to work "
"through how to implement the contribution."
msgstr ""
"PyVistaを改善する方法についてアイデアがある場合は，まず機能リクエストとして問題を作成してください．これは，コントリビューションの実装方法を検討するためのスレッドとして使用できます．"

#: ../../pyvista/CONTRIBUTING.rst:125
msgid ""
"Once you are ready to start coding and develop for PyVista, please see the "
"`Development Practices <#development-practices>`_ section for more details."
msgstr ""
"PyVista用のコーディングと開発を始める準備ができたら，詳細については `Development Practices <#development-"
"practices>`_ セクションを参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:130
msgid "Licensing"
msgstr "ライセンス"

#: ../../pyvista/CONTRIBUTING.rst:132
msgid ""
"All contributed code will be licensed under The MIT License found in the "
"repository. If you did not write the code yourself, it is your "
"responsibility to ensure that the existing license is compatible and "
"included in the contributed files or you can obtain permission from the "
"original author to relicense the code."
msgstr ""
"コントリビュートされたコードはすべて，リポジトリーにあるMITライセンスの下でライセンスされます．自分でコードを作成しなかった場合は，既存のライセンスに互換性があり，コントリビュートされたファイルに含まれていることを確認するか，元の作成者からコードを再ライセンスする許可を得る必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:141
msgid "Development Practices"
msgstr "開発手法"

#: ../../pyvista/CONTRIBUTING.rst:143
msgid ""
"This section provides a guide to how we conduct development in the PyVista "
"repository. Please follow the practices outlined here when contributing "
"directly to this repository."
msgstr ""
"この節では，PyVistaリポジトリで開発を行う方法について説明します．このリポジトリに直接コントリビュートする場合は，ここで説明するプラクティスに従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:148
msgid "Guidelines"
msgstr "ガイドライン"

#: ../../pyvista/CONTRIBUTING.rst:150
msgid ""
"Through direct access to the Visualization Toolkit (VTK) via direct array "
"access and intuitive Python properties, we hope to make the entire VTK "
"library easily accessible to researchers of all disciplines. To further "
"PyVista towards being a valuable Python interface to VTK, we need your help "
"to make it even better."
msgstr ""
"配列への直接アクセスと直感的なPythonプロパティを介したVisualization Toolkit (VTK) "
"への直接アクセスにより，VTKライブラリ全体をあらゆる分野の研究者が容易にアクセスできるようにしたいと考えています．PyVistaをVTKの価値あるPythonインターフェースにするためには，さらに改善するために皆さんの助けが必要です．"

#: ../../pyvista/CONTRIBUTING.rst:156
msgid ""
"If you want to add one or two interesting analysis algorithms as filters, "
"implement a new plotting routine, or just fix 1-2 typos - your efforts are "
"welcome."
msgstr ""
"1つか2つの興味深い解析アルゴリズムをフィルタとして追加したい場合，新しいプロットルーチンを実装したい場合，あるいは1-2のタイプミスを修正したい場合，あなたの努力は大歓迎です．"

#: ../../pyvista/CONTRIBUTING.rst:160
msgid "There are three general coding paradigms that we believe in:"
msgstr "私たちが信じている3つの一般的なコーディングパラダイムがあります．"

#: ../../pyvista/CONTRIBUTING.rst:162
msgid ""
"**Make it intuitive**. PyVista’s goal is to create an intuitive and easy to "
"use interface back to the VTK library. Any new features should have "
"intuitive naming conventions and explicit keyword arguments for users to "
"make the bulk of the library accessible to novice users."
msgstr ""
"**直感的な操作**． "
"PyVistaの目標は，直感的で使いやすいインターフェースをVTKライブラリーに戻すことです．すべての新機能には，初心者ユーザがライブラリの大部分にアクセスできるように，直感的な命名規則と明示的なキーワード引数が必要です．"

#: ../../pyvista/CONTRIBUTING.rst:168
msgid ""
"**Document everything**. At the least, include a docstring for any method or"
" class added. Do not describe what you are doing but why you are doing it "
"and provide a simple example for the new features."
msgstr ""
"**すべてをドキュメント化します** "
"．少なくとも，追加されたメソッドまたはクラスのdocstringを含めます．何をしているのかを説明するのではなく，なぜそうしているのかを説明し，新しい機能の簡単な例を示します．"

#: ../../pyvista/CONTRIBUTING.rst:172
msgid ""
"**Keep it tested**. We aim for a high test coverage. See testing for more "
"details."
msgstr "**テストを続ける**． 高いテストカバレッジを目指します．詳細については， テストを参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:175
msgid "There are two important copyright guidelines:"
msgstr "著作権に関する2つの重要なガイドラインがあります．"

#: ../../pyvista/CONTRIBUTING.rst:177
msgid ""
"Please do not include any data sets for which a license is not available or "
"commercial use is prohibited. Those can undermine the license of the whole "
"projects."
msgstr ""
"ライセンスが利用できない，または商用使用が禁止されているデータセットは含めないでください．それらはすべてのプロジェクトのライセンスを損なう可能性があります．"

#: ../../pyvista/CONTRIBUTING.rst:181
msgid ""
"Do not use code snippets for which a license is not available (for example "
"from Stack Overflow) or commercial use is prohibited. Those can undermine "
"the license of the whole projects."
msgstr ""
"ライセンスが利用できないコードスニペット(Stack "
"Overflowなど )や商用使用が禁止されているコードスニペットは使用しないでください．それらはすべてのプロジェクトのライセンスを損なう可能性があります．"

#: ../../pyvista/CONTRIBUTING.rst:185
msgid ""
"Please also take a look at our `Code of Conduct "
"<https://github.com/pyvista/pyvista/blob/main/CODE_OF_CONDUCT.md>`_."
msgstr ""
"私達の `Code of Conduct "
"<https://github.com/pyvista/pyvista/blob/main/CODE_OF_CONDUCT.md>`_ もご覧ください．"

#: ../../pyvista/CONTRIBUTING.rst:189
msgid "Contributing to PyVista through GitHub"
msgstr "GitHub経由でPyVistaにコントリビュートする"

#: ../../pyvista/CONTRIBUTING.rst:191
msgid ""
"To submit new code to pyvista, first fork the `pyvista GitHub Repository "
"<https://github.com/pyvista/pyvista>`_ and then clone the forked repository "
"to your computer. Then, create a new branch based on the `Branch Naming "
"Conventions Section <#branch-naming-conventions>`_ in your local repository."
msgstr ""
"新しいコードをpyvistaに送信するには，まず `pyvista GitHub リポジトリ "
"<https://github.com/pyvista/pyvista>`_ "
"をフォークし，フォークしたリポジトリをあなたのコンピュータにクローンします．次に，ローカルリポジトリの `Branch Naming "
"Conventions Section <#branch-naming-conventions>`_ に基づいて新しいブランチを作成します．"

#: ../../pyvista/CONTRIBUTING.rst:197
msgid ""
"Next, add your new feature and commit it locally. Be sure to commit "
"frequently as it is often helpful to revert to past commits, especially if "
"your change is complex. Also, be sure to test often. See the `Testing "
"Section <#testing>`_ below for automating testing."
msgstr ""
"次に，新しい機能を追加し，ローカルでコミットします．特に変更が複雑な場合は，過去のコミットに戻すことが役立つことが多いので，頻繁にコミットするようにしてください．また，頻繁に検査をしてください．テストの自動化については，以下の"
" `テストのセクション <#testing>`_ を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:202
msgid ""
"When you are ready to submit your code, create a pull request by following "
"the steps in the `Creating a New Pull Request section <#creating-a-new-pull-"
"request>`_."
msgstr ""
"コードをサブミットする準備ができたら， `Creating a New Pull Request section <#creating-a-new-"
"pull-request>`_ の手順に従ってプルリクエストを作成します．"

#: ../../pyvista/CONTRIBUTING.rst:207
msgid "Coding Style"
msgstr "コーディングスタイル"

#: ../../pyvista/CONTRIBUTING.rst:209
msgid ""
"We adhere to `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_ wherever "
"possible, except that line widths are permitted to go beyond 79 characters "
"to a max of 99 characters for code. This should tend to be the exception "
"rather than the norm. A uniform code style is enforced by `ruff format "
"<https://docs.astral.sh/ruff/formatter/#the-ruff-formatter>`_ to prevent "
"energy wasted on style disagreements."
msgstr ""
"行幅が79文字を超えて99文字コードまで許されることを除き，可能な限り `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`_ "
"に準拠します．これは標準ではなく，むしろ例外となる傾向があるはずです．スタイルの不一致によるエネルギーの浪費を防ぐために， `ruff format "
"<https://docs.astral.sh/ruff/formatter/#the-ruff-formatter>`_ "
"によって統一されたコードスタイルが強制されます．"

#: ../../pyvista/CONTRIBUTING.rst:216
msgid ""
"Keyword-only arguments are generally preferred over positional keywords in "
"function signatures (see `PEP 3102 <https://peps.python.org/pep-3102/>`_), "
"and positional arguments should be limited to just one or two where "
"possible. Boolean-type arguments should always be keyword-only. This is also"
" enforced by ``ruff``."
msgstr ""

#: ../../pyvista/CONTRIBUTING.rst:222
msgid ""
"As for docstrings, PyVista follows the ``numpydoc`` style for its "
"docstrings. Please also take a look at `Docstrings <#docstrings>`_."
msgstr ""
"docstringに関しては，PyVistaは ``numpydoc`` スタイルに従っています． `Docstrings "
"<#docstrings>`_ を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:225
msgid ""
"Outside of PEP 8, when coding please consider `PEP 20 - The Zen of Python "
"<https://www.python.org/dev/peps/pep-0020/>`_. When in doubt:"
msgstr ""
"PEP 8以外でコーディングする場合は， `PEP 20 - The Zen of Python "
"<https://www.python.org/dev/peps/pep-0020/>`_ を考慮してください．"

#: ../../pyvista/CONTRIBUTING.rst:232
msgid ""
"PyVista uses `pre-commit`_ to enforce PEP8 and other styles automatically. "
"Please see the `Style Checking section <#style-checking>`_ for further "
"details."
msgstr ""
"PyVistaは `pre-commit`_ を使用して，PEP8やその他のスタイルを自動的に強制します．詳しくは `スタイルチェックのセクション "
"<#style-checking>`_ を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:237
msgid "Documentation Style"
msgstr "ドキュメンテーションスタイル"

#: ../../pyvista/CONTRIBUTING.rst:239
msgid ""
"PyVista follows the `Google Developer Documentation Style "
"<https://developers.google.com/style>`_ with the following exceptions:"
msgstr ""
"PyVistaは，以下の例外を除き， `Google Developer Documentation Style "
"<https://developers.google.com/style>`_ に従っています．"

#: ../../pyvista/CONTRIBUTING.rst:242
msgid ""
"Allow first person pronouns. These pronouns (for example, \"We\") refer to "
"\"PyVista Developers\", which can be anyone who contributes to PyVista."
msgstr ""
"一人称の代名詞を許可します．これらの代名詞（例えば \"We\"）は \"PyVista Developers\" "
"を指し，PyVistaに貢献するすべての人を指すことができます．"

#: ../../pyvista/CONTRIBUTING.rst:244
msgid "Future tense is permitted."
msgstr "未来形も可．"

#: ../../pyvista/CONTRIBUTING.rst:246
msgid ""
"These rules are enforced for all text files (for example, ``*.md``, "
"``*.rst``) and partially enforced for Python source files."
msgstr ""
"これらのルールはすべてのテキストファイル（例えば ``*.md``, ``*.rst`` "
"）に適用され，Pythonのソースファイルには部分的に適用されます．"

#: ../../pyvista/CONTRIBUTING.rst:249
msgid ""
"These rules are enforced through the use of `Vale <https://vale.sh/>`_ via "
"our GitHub Actions, and you can run Vale locally with:"
msgstr ""
"これらのルールは，GitHub Actionsを介して `Vale <https://vale.sh/>`_ "
"を使用することで強制され，Valeをローカルで実行することができます．"

#: ../../pyvista/CONTRIBUTING.rst:257
msgid "If you are on Linux or macOS, you can run:"
msgstr "LinuxやmacOSであれば，実行可能です:"

#: ../../pyvista/CONTRIBUTING.rst:265
msgid "Docstrings"
msgstr "Docstrings"

#: ../../pyvista/CONTRIBUTING.rst:267
msgid ""
"PyVista uses Python docstrings to create reference documentation for our "
"Python APIs. Docstrings are read by developers, interactive Python users, "
"and readers of our online documentation. This section describes how to write"
" these docstrings for PyVista."
msgstr ""
"PyVistaでは，Python docstringsを使用して，Python "
"APIのリファレンスドキュメントを作成しています．Docstringsは，開発者や対話型のPythonユーザー，そしてオンラインドキュメントの読者に読まれます．このセクションでは，PyVista用のdocstringの書き方について説明します．"

#: ../../pyvista/CONTRIBUTING.rst:272
msgid ""
"PyVista follows the ``numpydoc`` style for its docstrings. Please follow the"
" `numpydoc Style Guide`_ in all ways except for the following:"
msgstr ""
"PyVistaはdocstringのスタイルとして ``numpydoc`` に従っています．以下を除き，すべて `numpydoc Style "
"Guide`_ に従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:275
msgid ""
"Be sure to describe all ``Parameters`` and ``Returns`` for all public "
"methods."
msgstr "すべてのパブリックメソッドの ``Parameters`` と ``Returns`` を必ず記述してください．"

#: ../../pyvista/CONTRIBUTING.rst:277
msgid ""
"We strongly encourage you to add an example section. PyVista is a visual "
"library, so adding examples that show a plot will really help users figure "
"out what individual methods do."
msgstr ""
"Exampleのセクションを追加することを強くお勧めします．PyVistaは，ビジュアルなライブラリなので，プロットを示す例を追加することは，ユーザーが個々のメソッドが何を行うかを理解するのにとても役立ちます．"

#: ../../pyvista/CONTRIBUTING.rst:280
msgid ""
"With optional parameters, use ``default: <value>`` instead of ``optional`` "
"when the parameter has a default value instead of ``None``."
msgstr ""
"オプションのパラメータで， ``None`` の代わりにデフォルト値がある場合は， ``optional`` の代わりに ``default: "
"<value>`` を使用します．"

#: ../../pyvista/CONTRIBUTING.rst:283
msgid "Sample docstring follows:"
msgstr "サンプル docstring は以下の通りです:"

#: ../../pyvista/CONTRIBUTING.rst:320
msgid "Note the following:"
msgstr "以下のことに注意してください:"

#: ../../pyvista/CONTRIBUTING.rst:322
msgid ""
"The parameter definition of ``generate_triangles`` uses ``default: False``, "
"and does not include the default in the docstring's \"description\" section."
msgstr ""
"``generate_triangles`` のパラメータ定義では， ``default: False`` を使用し， docstring の "
"\"description\" セクションにデフォルトを含めません．"

#: ../../pyvista/CONTRIBUTING.rst:324
msgid ""
"There is a newline between each parameter. This is different than "
"``numpydoc``'s documentation where there are no empty lines between "
"parameter docstrings."
msgstr ""
"各パラメータの間には改行が入ります．これは ``numpydoc`` のドキュメントで，パラメータの docstring "
"の間に空白行がないのとは異なります．"

#: ../../pyvista/CONTRIBUTING.rst:327
msgid ""
"This docstring also contains a returns section and an examples section."
msgstr "この docstring には，リターンセクションとサンプルセクションも含まれています．"

#: ../../pyvista/CONTRIBUTING.rst:328
msgid ""
"The returns section does not include the parameter name if the function has "
"a single return value. Multiple return values (not shown) should have "
"descriptive parameter names for each returned value, in the same format as "
"the input parameters."
msgstr ""
"関数の戻り値が1つの場合，リターンセクションにはパラメータ名を含めません．複数の戻り値(図示せず)には，入力パラメータと同じ形式で，各戻り値に対して説明的なパラメータ名を付ける必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:332
msgid ""
"The examples section references the \"full example\" in the gallery if it "
"exists."
msgstr "サンプルセクションは，ギャラリーの \"完全なサンプル\" が存在する場合，それを参照します．"

#: ../../pyvista/CONTRIBUTING.rst:335
msgid ""
"In addition, docstring examples which make use of randomly-generated data "
"should be reproducible. See `Generating Random Data`_ for details."
msgstr ""
"さらに、ランダムに生成されたデータを使用するdocstringの例は、再現可能でなければなりません。 詳しくは `ランダムデータの生成`_ "
"を参照のこと。"

#: ../../pyvista/CONTRIBUTING.rst:338
msgid ""
"These standards will be enforced using ``pre-commit`` using ``numpydoc-"
"validate``, with errors being reported as:"
msgstr ""
"これらの標準は ``numpydoc-validate`` を使って ``pre-commit`` で実施され，エラーは次のように報告されます:"

#: ../../pyvista/CONTRIBUTING.rst:354
msgid ""
"If for whatever reason you feel that your function should have an exception "
"to any of the rules, add an exception to the function either in the "
"``[tool.numpydoc_validation]`` section in ``pyproject.toml`` or add an "
"inline comment to exclude a certain check. For example, we can omit the "
"``Return`` section from docstrings and skip the RT01 check for magic methods"
" like ``__init__``."
msgstr ""
"もし，何らかの理由で関数のルールに例外を設ける必要がある場合は， ``pyproject.toml`` の "
"``[tool.numpydoc_validation]`` "
"セクションに例外を追加するか，インラインコメントを追加して特定のチェックを除外してください．例えば、docstringから ``Return`` "
"セクションを省略したり，　``__init__`` のようなマジックメソッドのRT01チェックをスキップすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:367
msgid ""
"See the available validation checks in `numpydoc Validation "
"<https://numpydoc.readthedocs.io/en/latest/validation.html>`_."
msgstr ""
"`numpydoc Validation "
"<https://numpydoc.readthedocs.io/en/latest/validation.html>`_ "
"で利用可能なバリデーションチェックを参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:372
msgid "Deprecating Features or other Backwards-Breaking Changes"
msgstr "非推奨の機能またはその他の後方互換性のない変更"

#: ../../pyvista/CONTRIBUTING.rst:373
msgid ""
"When implementing backwards-breaking changes within PyVista, care must be "
"taken to give users the chance to adjust to any new changes. Any non-"
"backwards compatible modifications should proceed through the following "
"steps:"
msgstr ""
"PyVistaで後方互換性のない変更を実装するときは，ユーザーに新しい変更に適応する機会を与えるよう注意する必要があります．後方互換性のない変更は，次の手順で進める必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:377
msgid ""
"Retain the old behavior and issue a ``PyVistaDeprecationWarning`` indicating"
" the new interface you should use."
msgstr "古い動作を保持し，使用すべき新しいインターフェイスを示す ``PyVistaDeprecationWarning`` を発行します．"

#: ../../pyvista/CONTRIBUTING.rst:379
msgid ""
"Retain the old behavior but raise a ``pyvista.core.errors.DeprecationError``"
" indicating the new interface you must use."
msgstr ""
"古い動作を保持しますが，使用しなければならない新しいインターフェイスを示す "
"``pyvista.core.errors.DeprecationError`` を発行します．"

#: ../../pyvista/CONTRIBUTING.rst:381
msgid "Remove the old behavior."
msgstr "古い動作を削除します．"

#: ../../pyvista/CONTRIBUTING.rst:383
msgid ""
"Whenever possible, PyVista developers should seek to have at least three "
"minor versions of backwards compatibility to give users the ability to "
"update their software and scripts."
msgstr ""
"可能な限り，PyVistaの開発者は，ユーザーがソフトウェアやスクリプトを更新できるように，少なくとも3つのマイナーバージョンの後方互換性を確保するように努めるべきです．"

#: ../../pyvista/CONTRIBUTING.rst:387
msgid ""
"Here's an example of a soft deprecation of a function. Note the usage of "
"both the ``PyVistaDeprecationWarning`` warning and the ``.. deprecated`` "
"Sphinx directive."
msgstr ""
"これはある関数のソフト非推奨の例です． ``PyVistaDeprecationWarning`` の警告と ``.. deprecated`` "
"のSphinxディレクティブの両方を使用していることに注意してください．"

#: ../../pyvista/CONTRIBUTING.rst:430
msgid ""
"In the above code example, note how a comment is made to convert to an error"
" in three minor releases and completely remove in the following minor "
"release. For significant changes, this can be made longer, and for trivial "
"ones this can be kept short."
msgstr ""
"上記のコード例では，3つのマイナーリリースでエラーに変換し，次のマイナーリリースで完全に削除するためにコメントが作られていることに注目してください．重要な変更の場合はこれを長くし，些細な変更の場合は短くすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:435
msgid ""
"Here's an example of adding error test codes that raise deprecation warning "
"messages."
msgstr "以下は，非推奨の警告メッセージを出すエラーテストコードを追加する例です．"

#: ../../pyvista/CONTRIBUTING.rst:446
msgid ""
"In the above code example, the old test code raises an error in v0.40 and "
"v0.41. This will prevent us from forgetting to remove deprecations on "
"version upgrades."
msgstr ""
"上記のコード例では，古いテストコードはv0.40とv0.41でエラーを発生させます．これによって，バージョンアップ時に非推奨を削除し忘れることを防ぐことができます．"

#: ../../pyvista/CONTRIBUTING.rst:451
msgid ""
"When releasing a new version, we need to update the version number to the "
"next development version. For example, if we are releasing version 0.37.0, "
"the next development version should be 0.38.0.dev0 which is greater than "
"0.37.0. This is why we need to check if the version is greater than 0.40.0 "
"and 0.41.0 in the test code."
msgstr ""
"新しいバージョンをリリースする際には、バージョン番号を次の開発バージョンに更新する必要があります。 "
"例えば、バージョン0.37.0をリリースする場合、次の開発バージョンは0.37.0より大きい0.38.0.dev0でなければなりません。 "
"このため、テストコードではバージョンが0.40.0や0.41.0より大きいかどうかをチェックする必要があります。"

#: ../../pyvista/CONTRIBUTING.rst:457
msgid ""
"When adding an additional parameter to an existing method or function, you "
"are encouraged to use the ``.. versionadded`` sphinx directive. For example:"
msgstr ""
"既存のメソッドや関数に追加のパラメータを追加する場合には， ``.. versionadded`` "
"というsphinxディレクティブを使用することが推奨されます．例えば:"

#: ../../pyvista/CONTRIBUTING.rst:475
msgid "Branch Naming Conventions"
msgstr "ブランチの命名規則"

#: ../../pyvista/CONTRIBUTING.rst:477
msgid ""
"To streamline development, we have the following requirements for naming "
"branches. These requirements help the core developers know what kind of "
"changes any given branch is introducing before looking at the code."
msgstr ""
"開発を効率化するために，ブランチの命名には次の要件があります．これらの要件は，コア開発者がコードを調べる前に，あるブランチがどのような種類の変更を導入しているかを知るのに役立ちます．"

#: ../../pyvista/CONTRIBUTING.rst:481
msgid ""
"``fix/``, ``patch/`` and ``bug/``: any bug fixes, patches, or experimental "
"changes that are minor"
msgstr "``fix/`` ， ``patch/`` ， ``bug/`` : マイナーなバグ修正，パッチ，または実験的な変更"

#: ../../pyvista/CONTRIBUTING.rst:483
msgid ""
"``feat/``: any changes that introduce a new feature or significant addition"
msgstr "``feat/``: 新しい特徴または重要な追加を導入する変更"

#: ../../pyvista/CONTRIBUTING.rst:485
msgid ""
"``junk/``: for any experimental changes that can be deleted if gone stale"
msgstr "``junk/``: 古くなったら削除できる実験的な変更について"

#: ../../pyvista/CONTRIBUTING.rst:487
msgid ""
"``maint/`` and ``ci/``: for general maintenance of the repository or CI "
"routines"
msgstr "``maint/`` と ``ci/``: リポジトリまたはCIルーチンの一般的な保守用"

#: ../../pyvista/CONTRIBUTING.rst:488
msgid "``doc/``: for any changes only pertaining to documentation"
msgstr "``doc/``: 文書のみに関連する変更の場合"

#: ../../pyvista/CONTRIBUTING.rst:489
msgid ""
"``no-ci/``: for low impact activity that should NOT trigger the CI routines"
msgstr "``no-ci/``: CIルーチンをトリガーしてはならない影響の少ないアクティビティの場合"

#: ../../pyvista/CONTRIBUTING.rst:491
msgid "``testing/``: improvements or changes to testing"
msgstr "``testing/``: テストの改善または変更"

#: ../../pyvista/CONTRIBUTING.rst:492
msgid "``release/``: releases (see below)"
msgstr "``release/``: リリース(下記参照)"

#: ../../pyvista/CONTRIBUTING.rst:493
msgid "``breaking-change/``: Changes that break backward compatibility"
msgstr "``breaking-change/``: 後方互換性を破壊する変更"

#: ../../pyvista/CONTRIBUTING.rst:496
msgid "Testing"
msgstr "テスト"

#: ../../pyvista/CONTRIBUTING.rst:498
msgid ""
"After making changes, please test changes locally before creating a pull "
"request. The following tests will be executed after any commit or pull "
"request, so we ask that you perform the following sequence locally to track "
"down any new issues from your changes."
msgstr ""
"変更を行った後，プルリクエストを作成する前にローカルで変更をテストしてください．コミットまたはプルリクエストの後に次のテストが実行されます．変更から新しい問題を追跡するには，ローカルで次の手順を実行してください．"

#: ../../pyvista/CONTRIBUTING.rst:503
msgid ""
"To run our comprehensive suite of unit tests, install PyVista with all test "
"dependencies:"
msgstr "PyVistaの包括的なユニットテスト群を実行するには、PyVistaをすべてのテスト依存パッケージとともにインストールします:"

#: ../../pyvista/CONTRIBUTING.rst:510
msgid ""
"Then, if you have everything installed, you can run the various test suites."
msgstr "すべてをインストールしたら，さまざまなテストスイートを実行できます．"

#: ../../pyvista/CONTRIBUTING.rst:514
msgid "Unit Testing"
msgstr "ユニットテスト"

#: ../../pyvista/CONTRIBUTING.rst:515
msgid "Run the primary test suite and generate coverage report:"
msgstr "プライマリテストスイートを実行し，カバレッジレポートを生成します．"

#: ../../pyvista/CONTRIBUTING.rst:521
msgid ""
"Unit testing can take some time, if you wish to speed it up, set the number "
"of processors with the ``-n`` flag. This uses ``pytest-xdist`` to leverage "
"multiple processes. Example usage:"
msgstr ""
"ユニットテストには時間がかかることがあります．高速化したい場合は， ``n`` フラグでプロセッサの数を設定してください．これは ``pytest-"
"xdist`` を使用して，複数のプロセスを利用するものです．使用例です．"

#: ../../pyvista/CONTRIBUTING.rst:529
msgid ""
"When submitting a PR, it is highly recommended that all modifications are "
"thoroughly tested. This is further enforced in the CI by the `codecov GitHub"
" action <https://app.codecov.io/gh/pyvista/pyvista>`_ which has a 90% "
"target, ie. it ensures that 90% of the code modified in the PR is tested. It"
" should be mentioned that branch coverage is measured on the CI, meaning for"
" examples that both values of an ``if`` clause must be tested to ensure full"
" coverage. For more details on branch coverage, please refer to the "
"`coverage documentation "
"<https://coverage.readthedocs.io/en/latest/branch.html>`_."
msgstr ""
"PRを投稿する際には、すべての修正を徹底的にテストすることを強く推奨します。 これは、 `codecov GitHub action "
"<https://app.codecov.io/gh/pyvista/pyvista>`_ が 90% という目標を設定することで、CI "
"でさらに徹底されます。つまり、PR で修正されたコードの 90% がテストされるようになります。 ブランチカバレッジは CI "
"上で測定され、フルカバレッジを保証するためには ``if`` 節の両方の値をテストしなければならないことを意味します。 "
"ブランチカバレッジの詳細については、 `coverage documentation "
"<https://coverage.readthedocs.io/en/latest/branch.html>`_ を参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:536
msgid ""
"If needed, code coverage can be deactivated for specific lines by adding the"
" ``# pragma: no cover`` or ``# pragma: no branch`` comments. See the "
"documentation `excluding code "
"<https://coverage.readthedocs.io/en/latest/branch.html#excluding-code>`__ "
"for more details. However, code coverage exclusion should rarely be used and"
" has to be carefully justified in the PR thread if no simple alternative "
"solution has been found."
msgstr ""
"必要であれば、 ``# pragma: no cover`` または ``# pragma: no branch`` "
"のコメントを追加することで、特定の行のコードカバレッジを無効にすることができます。詳しくは `excluding code "
"<https://coverage.readthedocs.io/en/latest/branch.html#excluding-code>`__ "
"を参照してください。しかし、コードカバレッジの除外はめったに使うべきでなく、簡単な代替案が見つからない場合は、PRスレッドで注意深く正当化しなければなりません。"

#: ../../pyvista/CONTRIBUTING.rst:542
msgid ""
"The CI is configured to test multiple vtk versions to ensure sufficient "
"compatibility with vtk. If needed, the minimum and/or maximum vtk version "
"needed by a specific test can be controlled with a custom pytest marker "
"``needs_vtk_version``, enabling the following usage (note the inclusive and "
"exclusive signs):"
msgstr ""
"CIは、vtkとの十分な互換性を確保するために、複数のvtkバージョンをテストするように構成されています。必要であれば、特定のテストが必要とする vtk"
" の最小および/または最大のバージョンをカスタム pytest marker ``needs_vtk_version`` で制御することができます "
"(包括的および排他的符号に注意):"

#: ../../pyvista/CONTRIBUTING.rst:579
msgid "VTK Dev Wheel Testing"
msgstr "VTK Dev Wheelのテスト"

#: ../../pyvista/CONTRIBUTING.rst:580
msgid ""
"Most unit testing is run with stable VTK releases. However, it is sometimes "
"useful to run tests with the latest VTK dev wheels. To install these "
"locally, run"
msgstr ""
"ほとんどのユニットテストは、安定したVTKリリースで実行されます。 しかし、最新のVTK開発用ホイールでテストを実行することは、時として有益です。 "
"これらをローカルにインストールするには"

#: ../../pyvista/CONTRIBUTING.rst:587
msgid ""
"For CI on GitHub, the ``vtk-dev-testing`` label can be used to enable unit "
"testing with the VTK dev wheels. The tests only run when the label is "
"applied."
msgstr ""
"GitHub 上の CI では、``vtk-dev-testing`` ラベルを使用することで、VTK dev wheel "
"によるユニットテストを有効にすることができます。テストはラベルが貼られているときにのみ実行されます。"

#: ../../pyvista/CONTRIBUTING.rst:592
msgid ""
"The PR either needs a new commit, e.g. updating the branch from ``main``, or"
" to be closed/re-opened to rerun the CI with the label applied."
msgstr ""
"PRは、 ``main`` "
"からブランチを更新するなどの新しいコミットが必要か、ラベルを適用してCIを再実行するためにクローズ/再オープンする必要があります。"

#: ../../pyvista/CONTRIBUTING.rst:596
msgid "Docstring Testing"
msgstr "Docstringテスト"

#: ../../pyvista/CONTRIBUTING.rst:597
msgid "Run all code examples in the docstrings with:"
msgstr "docstring内のすべてのコード例を実行します．"

#: ../../pyvista/CONTRIBUTING.rst:605
msgid ""
"Additional testing is also performed on any images generated by the "
"docstring. See `Documentation Image Regression Testing`_."
msgstr ""
"また、docstringによって生成された画像に対しても追加のテストが行われる。 詳しくは `ドキュメント画像の回帰テスト`_ を参照のこと。"

#: ../../pyvista/CONTRIBUTING.rst:610
msgid "Style Checking"
msgstr "スタイルチェック"

#: ../../pyvista/CONTRIBUTING.rst:611
msgid ""
"PyVista follows PEP8 standard as outlined in the `Coding Style section "
"<#coding-style>`_ and implements style checking using `pre-commit`_."
msgstr ""
"PyVistaは， `コーディングスタイルのセクション <#coding-style>`_ で説明されているようにPEP8標準に従っており， `pre-"
"commit`_ を使ってスタイルチェックを実装しています．"

#: ../../pyvista/CONTRIBUTING.rst:614
msgid "To ensure your code meets minimum code styling standards, run::"
msgstr "コードが最小限のコードスタイリング基準に適合していることを確認するために，以下を実行してください．"

#: ../../pyvista/CONTRIBUTING.rst:619
msgid ""
"If you have issues related to ``setuptools`` when installing ``pre-commit``,"
" see `pre-commit Issue #2178 comment <https://github.com/pre-commit/pre-"
"commit/issues/2178#issuecomment-1002163763>`_ for a potential resolution."
msgstr ""
"もし ``pre-commit`` をインストールする際に ``setuptools`` に関連する問題が発生した場合は， `pre-commit "
"Issue #2178 comment <https://github.com/pre-commit/pre-"
"commit/issues/2178#issuecomment-1002163763>`_ で解決できる可能性がありますので参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:623
msgid "You can also install this as a pre-commit hook by running::"
msgstr "また，pre-commit hookとして次のように実行することでインストールすることもできます．"

#: ../../pyvista/CONTRIBUTING.rst:627
msgid ""
"This way, it's not possible for you to push code that fails the style "
"checks. For example, each commit automatically checks that you meet the "
"style requirements::"
msgstr ""
"こうすれば，スタイルチェックに失敗したコードをプッシュすることは不可能になります．例えば，各コミットでスタイル要件を満たしているかどうかが自動的にチェックされます::"

#: ../../pyvista/CONTRIBUTING.rst:636
msgid ""
"The actual installation of the environment happens before the first commit "
"following ``pre-commit install``. This will take a bit longer, but "
"subsequent commits will only trigger the actual style checks."
msgstr ""
"実際の環境のインストールは， ``pre-commit install`` "
"に続く最初のコミットの前に行われます．これは少し時間がかかりますが，それ以降のコミットでは実際のスタイルチェックが行われるだけです．"

#: ../../pyvista/CONTRIBUTING.rst:640
msgid ""
"Even if you are not in a situation where you are not performing or able to "
"perform the above tasks, you can comment ``pre-commit.ci autofix`` on a pull"
" request to manually trigger auto-fixing."
msgstr ""
"上記の作業を実施していない，または実施できる状況であっても，プルリクエストに ``pre-commit.ci autofix`` "
"とコメントすることで，手動で自動修正をトリガーすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:645
msgid "Notes Regarding Image Regression Testing"
msgstr "イメージ回帰テストに関する注意事項"

#: ../../pyvista/CONTRIBUTING.rst:647
msgid ""
"Since PyVista is primarily a plotting module, it’s imperative we actually "
"check the images that we generate in some sort of regression testing. In "
"practice, this ends up being quite a bit of work because:"
msgstr ""
"PyVista "
"は基本的に描画モジュールなので，何らかの回帰テストで生成した画像を実際にチェックする必要があります．実際には，これはかなりの作業になります．"

#: ../../pyvista/CONTRIBUTING.rst:651
msgid ""
"OpenGL software vs. hardware rending causes slightly different images to be "
"rendered."
msgstr "OpenGLソフトウェアとハードウェアレンダリングでは，レンダリングされるイメージがわずかに異なります．"

#: ../../pyvista/CONTRIBUTING.rst:653
msgid ""
"We want our CI (which uses a virtual frame buffer) to match our desktop "
"images (uses hardware acceleration)."
msgstr ""
"CI (仮想フレームバッファを使用します)をデスクトップイメージ(ハードウェアアクセラレーションを使用します)と一致させたいと考えています．"

#: ../../pyvista/CONTRIBUTING.rst:655
msgid "Different OSes render different images."
msgstr "OSによってレンダリングされるイメージは異なります．"

#: ../../pyvista/CONTRIBUTING.rst:657
msgid ""
"As each platform and environment renders different slightly images relative "
"to Linux (which these images were built from), so running these tests across"
" all OSes isn’t optimal. We need to know if something fundamental changed "
"with our plotting without actually looking at the plots (like the docs at "
"dev.pyvista.com)"
msgstr ""
"各プラットフォームと環境では，Linuxと比較してわずかに異なるイメージをレンダリングするため(これらの画像は)，すべてのOSでこれらのテストを実行するのは最適ではありません．プロットを実際に見ることなく，プロットによって何か根本的な変化があったかどうかを知る必要があります(dev.pyvista.comのドキュメントのように)．"

#: ../../pyvista/CONTRIBUTING.rst:663
msgid ""
"Based on these points, image regression testing only occurs on Linux CI, and"
" multi-sampling is disabled as that seems to be one of the biggest "
"difference between software and hardware based rendering."
msgstr ""
"これらの点に基づいて，イメージ回帰テストはLinux "
"CIでのみ行われ，マルチサンプリングは，ソフトウェアベースのレンダリングとハードウェアベースのレンダリングの最大の違いの1つと思われるため，無効になっています．"

#: ../../pyvista/CONTRIBUTING.rst:667
msgid "Image cache is stored here as ``./tests/plotting/image_cache``."
msgstr "画像キャッシュは ``./tests/plotting/image_cache`` としてここに保存されます．"

#: ../../pyvista/CONTRIBUTING.rst:669
msgid ""
"Image resolution is kept low at 400x400 as we don’t want to pollute git with"
" large images. Small variations between versions and environments are to be "
"expected, so error < ``IMAGE_REGRESSION_ERROR`` is allowable (and will be "
"logged as a warning) while values over that amount will trigger an error."
msgstr ""
"大きな画像でgitを汚したくないので，画像解像度は400x400で低く保たれます．バージョンや環境によって多少の違いがあることが予想されるため， "
"error < ``IMAGE_REGRESSION_ERROR`` "
"は許容されます(警告としてログに記録されます．)が，この値を超えるとエラーが発生します．"

#: ../../pyvista/CONTRIBUTING.rst:675
msgid ""
"There are two mechanisms within ``pytest`` to control image regression "
"testing, ``--reset_image_cache`` and ``--ignore_image_cache``. For example:"
msgstr ""
"``pytest`` には，画像リグレッションテストを制御する2つのメカニズム， ``--reset_image_cache`` と "
"``--ignore_image_cache`` があります．"

#: ../../pyvista/CONTRIBUTING.rst:683
msgid ""
"Running ``--reset_image_cache`` creates a new image for each test in "
"``tests/plotting/test_plotting.py`` and is not recommended except for "
"testing or for potentially a major or minor release. You can use "
"``--ignore_image_cache`` if you’re running on Linux and want to temporarily "
"ignore regression testing. Realize that regression testing will still occur "
"on our CI testing."
msgstr ""
"``--reset_image_cache`` を実行すると， ``tests/plotting/test_plotting.py`` "
"の各テストに対して新しいイメージが作成されます．テストや，メジャーまたはマイナーリリースの可能性がある場合を除き，推奨されません．Linux上で実行していて，リグレッションテストを一時的に無視したい場合は，"
" ``--ignore_image_cache`` を使用することができます．CIテストでは，回帰テストが引き続き行われることを理解してください．"

#: ../../pyvista/CONTRIBUTING.rst:690
msgid ""
"Images are currently only cached from tests in "
"``tests/plotting/test_plotting.py``. By default, any test that uses "
"``Plotter.show`` will cache images automatically. To skip image caching, the"
" ``verify_image_cache`` fixture can be utilized:"
msgstr ""
"現在のところ，画像は ``tests/plotting/test_plotting.py`` にあるテストからのみキャッシュされます． デフォルトでは，"
" ``Plotter.show`` を使用するテストは，自動的に画像をキャッシュします． 画像のキャッシュをスキップするには， "
"``verify_image_cache`` フィクスチャを使用します．"

#: ../../pyvista/CONTRIBUTING.rst:706
msgid ""
"This ensures that immediately before the plotter is closed, the current "
"render window will be verified against the image in CI. If no image exists, "
"be sure to add the resulting image with"
msgstr ""
"これにより，プロッタを閉じる直前に，現在のレンダリングウィンドウがCI内のイメージに対して検証されます．イメージが存在しない場合は，必ず次を使用して結果のイメージを追加してください．"

#: ../../pyvista/CONTRIBUTING.rst:714
msgid ""
"During unit testing, if you get image regression failures and would like to "
"compare the images generated locally to the regression test suite, allow "
"`pytest-pyvista`_ to write all new generated images to a local directory "
"using the ``--generated_image_dir`` flag."
msgstr ""
"ユニットテスト中に，画像のリグレッションに失敗して，ローカルに生成された画像をリグレッションテストスイートと比較したい場合， `pytest-"
"pyvista`_ が ``--generated_image_dir`` "
"フラグを使って新しい生成画像をすべてローカルディレクトリに書き込めるようにします．"

#: ../../pyvista/CONTRIBUTING.rst:721
msgid ""
"For example, the following writes all images generated by ``pytest`` to "
"``debug_images/`` for any tests in ``tests/plotting`` whose function name "
"has ``volume`` in it."
msgstr ""
"例えば，以下は ``tests/plotting`` にある，関数名に ``volume`` が含まれるテストについて， ``pytest`` "
"が生成したすべての画像を ``debug_images/`` に書き込むものです．"

#: ../../pyvista/CONTRIBUTING.rst:729
msgid "See `pytest-pyvista`_ for more details."
msgstr "詳しくは `pytest-pyvista`_ を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:733
msgid ""
"Additional regression testing is also performed on the documentation images."
" See `Documentation Image Regression Testing`_."
msgstr "追加の回帰テストもドキュメント画像に対して行われます。 詳しくは `ドキュメント画像回帰テスト`_ を参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:737
msgid "Notes Regarding Input Validation Testing"
msgstr "入力検証テストに関する注意事項"

#: ../../pyvista/CONTRIBUTING.rst:738
msgid ""
"The ``pyvista.core.validation`` package has two distinct test suites which "
"are executed with ``pytest``:"
msgstr ""
"``pyvista.core.validation`` パッケージには2つの異なるテストスイートがあり、 ``pytest`` で実行されます:"

#: ../../pyvista/CONTRIBUTING.rst:741
msgid "Regular unit tests in ``tests/core/test_validation.py``"
msgstr "通常のユニットテストは ``tests/core/test_validation.py`` で行う。"

#: ../../pyvista/CONTRIBUTING.rst:742
msgid "Customized unit tests in ``tests/core/typing`` for testing type hints"
msgstr "``tests/core/typing`` のユニットテストをカスタマイズして、タイプヒントをテストできるようにしました。"

#: ../../pyvista/CONTRIBUTING.rst:744
msgid ""
"The custom unit tests check that the type hints for the validation package "
"are correct both statically and dynamically. This is mainly used to check "
"complex and overloaded function signatures, such as the type hints for "
"``validate_array`` or related functions."
msgstr ""
"カスタムユニットテストは、検証パッケージのタイプヒントが静的にも動的にも正しいことをチェックします。 これは主に ``validate_array`` "
"や関連する関数の型ヒントのような、複雑でオーバーロードされた関数のシグネチャをチェックするために使用されます。"

#: ../../pyvista/CONTRIBUTING.rst:749
msgid ""
"Individual test cases are written as a single line of Python code with the "
"format:"
msgstr "個々のテストケースは、1行のPythonコードとして記述されます:"

#: ../../pyvista/CONTRIBUTING.rst:755
msgid ""
"where ``arg`` is any argument you want mypy to analyze, and ``\"<T>\"`` is "
"the expected revealed type returned by ``Mypy``."
msgstr "ここで ``arg`` は mypy に解析させたい引数で、``\"<T>\"`` は ``Mypy`` が返すと予想される型です。"

#: ../../pyvista/CONTRIBUTING.rst:758
msgid ""
"For example, the ``validate_array`` function, by default, returns a list of "
"floats when a list of floats is provided at the input. The type hint should "
"reflect this. To test this, we can write a test case for the function call "
"``validate_array([1.0])`` as follows:"
msgstr ""
"例えば、 ``validate_array`` "
"関数は、デフォルトでは、入力に浮動小数点数のリストが与えられると、浮動小数点数のリストを返します。型ヒントはこれを反映する必要がある。 "
"これをテストするために、 ``validate_array([1.0])`` という関数呼び出しのテストケースを次のように書くことができます:"

#: ../../pyvista/CONTRIBUTING.rst:767
msgid ""
"The actual revealed type returned by ``Mypy`` for this test can be generated"
" with the following command. Note that ``grep`` is needed to only return the"
" output from the input string. Otherwise, all ``Mypy`` errors for the "
"``pyvista`` package are reported."
msgstr ""
"このテストで ``Mypy`` が返す実際の型は、以下のコマンドで生成できます。 ``grep`` "
"は入力文字列からの出力のみを返す必要があることに注意してください。そうでない場合は、 ``pyvista`` パッケージのすべての ``Mypy`` "
"エラーが報告されます。"

#: ../../pyvista/CONTRIBUTING.rst:776
msgid "For this test case, the revealed type by ``Mypy`` is:"
msgstr "このテストケースでは、 ``Mypy`` によって明らかにされた型は次のとおりです:"

#: ../../pyvista/CONTRIBUTING.rst:782
msgid ""
"Notice that the revealed type is fully qualified, i.e. includes "
"``builtins``. For brevity, the custom test suite omits this and requires "
"that only ``list`` be included in the expected type. Therefore, for this "
"test case, the ``EXPECTED_TYPE`` type is ``\"list[float]\"``, not "
"``\"builtins.list[builtins.float]\"``. (Similarly, the package name "
"``numpy`` should also be omitted for tests where a ``numpy.ndarray`` is "
"expected.)"
msgstr ""
"明らかにされた型は完全修飾されています、つまり ``builtins`` を含んでいることに注意してください。 "
"簡潔にするために、カスタムテストスイートではこれを省略し、 ``list`` だけが期待される型に含まれることを要求しています。 "
"したがって、このテストケースでは ``EXPECTED_TYPE`` 型は ``\"list[float]\"`` であり、 "
"``\"builtins.list[builtins.float]\"`` ではありません。 (同様に、 ``numpy.ndarray`` "
"が期待されるテストでは、パッケージ名 ``numpy`` も省略する必要があります。)"

#: ../../pyvista/CONTRIBUTING.rst:789
msgid ""
"Any number of related test cases (one test case per line) may be written and"
" included in a single ``.py`` file. The test cases are all stored in "
"``tests/core/typing/validation_cases``."
msgstr ""
"任意の数の関連するテストケース(1行に1つのテストケース)を記述し、1つの ``.py`` ファイルに含めることができます。 テストケースは全て "
"``tests/core/typing/validation_cases`` に格納されます。"

#: ../../pyvista/CONTRIBUTING.rst:793
msgid "The tests can be executed with:"
msgstr "テストは次のようにして実行することができます:"

#: ../../pyvista/CONTRIBUTING.rst:799
msgid ""
"When executed, a single instance of ``Mypy`` will statically analyze all the"
" test cases. The actual revealed types by ``Mypy`` are compared against the "
"``EXPECTED_TYPE`` is defined by each test case."
msgstr ""
"実行されると ``Mypy`` のインスタンスが全てのテストケースを静的に解析します。 実際に ``Mypy`` "
"によって明らかにされた型は、各テストケースで定義された ``EXPECTED_TYPE`` と比較されます。"

#: ../../pyvista/CONTRIBUTING.rst:803
msgid ""
"In addition, the ``pyanalyze`` package tests the actual returned type at "
"runtime to match the statically-revealed type. The "
"`pyanalyze.runtime.get_compatibility_error "
"<https://pyanalyze.readthedocs.io/en/latest/reference/runtime.html#pyanalyze.runtime.get_compatibility_error>`_"
" method is used for this. If new typing test cases are added for a new "
"validation function, the new function must be added to the list of imports "
"in ``tests/core/typing/test_validation_typing.py`` so that the runtime test "
"can call the function."
msgstr ""
"さらに、 ``pyanalyze`` パッケージは、実行時に実際に返される型が静的に公開された型と一致するかどうかをテストします。 これには "
"`pyanalyze.runtime.get_compatibility_error "
"<https://pyanalyze.readthedocs.io/en/latest/reference/runtime.html#pyanalyze.runtime.get_compatibility_error>`_"
" メソッドが使用されます。 新しい検証関数のために新しいタイピングテストケースが追加された場合、新しい関数は "
"``tests/core/typing/test_validation_typing.py`` のインポートリストに追加されなければなりません。"

#: ../../pyvista/CONTRIBUTING.rst:812
msgid "Building the Documentation"
msgstr "ドキュメントの作成"

#: ../../pyvista/CONTRIBUTING.rst:813
msgid "Install documentation dependencies with:"
msgstr "ドキュメントの依存関係をインストールします:"

#: ../../pyvista/CONTRIBUTING.rst:819
msgid "Build the documentation on Linux or Mac OS with:"
msgstr "LinuxまたはMac OSでドキュメントをビルドします．"

#: ../../pyvista/CONTRIBUTING.rst:825
msgid "Build the documentation on Windows with:"
msgstr "Windows でドキュメントをビルドします．"

#: ../../pyvista/CONTRIBUTING.rst:833
msgid ""
"The generated documentation can be found in the ``doc/_build/html`` "
"directory."
msgstr "生成されたドキュメントは ``doc/_build/html`` ディレクトリにあります．"

#: ../../pyvista/CONTRIBUTING.rst:836
msgid ""
"The first time you build the documentation locally will take a while as all "
"the examples need to be built. After the first build, the documentation "
"should take a fraction of the time."
msgstr ""
"最初にローカルでドキュメントをビルドするときは，すべてのサンプルをビルドする必要があるため，しばらく時間がかかるでしょう．最初のビルドの後は，ドキュメントの作成にかかる時間はほんのわずかなものになるはずです．"

#: ../../pyvista/CONTRIBUTING.rst:840
msgid ""
"To test this locally you need to run a http server in the html directory "
"with:"
msgstr "これをローカルでテストするには、httpサーバーをのhtmlディレクトリで実行する必要があります:"

#: ../../pyvista/CONTRIBUTING.rst:847
msgid "Clearing the Local Build"
msgstr "ローカルビルドのクリア"

#: ../../pyvista/CONTRIBUTING.rst:849
msgid "If you need to clear the locally built documentation, run:"
msgstr "ローカルにビルドしたドキュメントをクリアする必要がある場合は，実行してください．"

#: ../../pyvista/CONTRIBUTING.rst:855
msgid ""
"This will clear out everything, including the examples gallery. If you only "
"want to clear everything except the gallery examples, run:"
msgstr "これは，ギャラリーの例を含むすべてをクリアします．もしギャラリーのサンプル以外をクリアしたいだけなら，実行します．"

#: ../../pyvista/CONTRIBUTING.rst:862
msgid ""
"This will clear out the cache without forcing you to rebuild all the "
"examples."
msgstr "これにより，すべてのサンプルを強制的に再構築することなく，キャッシュをクリアすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:866
msgid "Parallel Documentation Build"
msgstr "ドキュメントの並列ビルド"

#: ../../pyvista/CONTRIBUTING.rst:867
msgid ""
"You can improve your documentation build time on Linux and Mac OS with:"
msgstr "以下でLinuxやMac OSでのドキュメントのビルド時間を改善することができます．"

#: ../../pyvista/CONTRIBUTING.rst:873
msgid ""
"This effectively invokes ``SPHINXOPTS=-j`` and can be especially useful for "
"multi-core computers."
msgstr "これは効果的に ``SPHINXOPTS=-j`` を呼び出し，特にマルチコアコンピュータで有用です．"

#: ../../pyvista/CONTRIBUTING.rst:877
msgid "Documentation Image Regression Testing"
msgstr "ドキュメント画像回帰テスト"

#: ../../pyvista/CONTRIBUTING.rst:879
msgid ""
"Image regression testing is performed on all published documentation images."
" When the documentation is built, all generated images are automatically "
"saved to"
msgstr ""
"画像のリグレッションテストは、公開されているすべてのドキュメント画像に対して実施されます。文書が作成されると、生成された画像はすべて自動的に以下に保存されます"

#: ../../pyvista/CONTRIBUTING.rst:883
msgid "Build Image Directory: ``./doc/_build/html/_images``"
msgstr "ビルド画像ディレクトリ: ``./doc/_build/html/_images``"

#: ../../pyvista/CONTRIBUTING.rst:885
msgid ""
"The regression testing compares these generated images to those stored in"
msgstr "回帰テストでは、生成された画像と以下に保存されている画像を比較します"

#: ../../pyvista/CONTRIBUTING.rst:887
msgid "Doc Image Cache: ``./tests/doc/doc_image_cache``"
msgstr "ドキュメント画像キャッシュ: ``./tests/doc/doc_image_cache``"

#: ../../pyvista/CONTRIBUTING.rst:889
msgid "To test all the images, run ``pytest`` with:"
msgstr "すべての画像をテストするには、``pytest`` を実行します:"

#: ../../pyvista/CONTRIBUTING.rst:895
msgid ""
"The tests must be executed explicitly with this command. The name of the "
"test file is prefixed with ``tst``, and not ``test`` specifically to avoid "
"being automatically executed by ``pytest`` (``pytest`` collects all tests "
"prefixed with ``test`` by default.) This is done since the tests require "
"building the documentation, and are not a primary form of testing."
msgstr ""
"テストはこのコマンドで明示的に実行する必要があります。 テストファイル名の先頭に ``tst`` をつけるのは、特に ``pytest`` "
"によって自動的に実行されないようにするためです (``pytest`` はデフォルトで ``test`` "
"を先頭に持つすべてのテストを収集します)。これはテストがドキュメントのビルドを必要とし、テストの主要な形式ではないからです。"

#: ../../pyvista/CONTRIBUTING.rst:901
msgid ""
"When executed, the test will first pre-process the build images. The images "
"are:"
msgstr "実行されると、テストはまずビルド画像を前処理します。 その画像は:"

#: ../../pyvista/CONTRIBUTING.rst:903
msgid "Collected from the ``Build Image Directory``."
msgstr "``Build Image Directory`` から収集されます。"

#: ../../pyvista/CONTRIBUTING.rst:905
msgid "Resized to a maximum of 400x400 pixels."
msgstr "最大400x400ピクセルにリサイズ。"

#: ../../pyvista/CONTRIBUTING.rst:907
msgid "Saved to a flat directory as JPEG images in ``./_doc_debug_images``."
msgstr "``./_doc_debug_images`` にJPEG画像としてフラットディレクトリに保存されます。"

#: ../../pyvista/CONTRIBUTING.rst:909
msgid ""
"Next, the pre-processed images in ``./_doc_debug_images`` are compared to "
"the cached images in the ``Doc Image Cache`` using "
":func:`pyvista.compare_images`."
msgstr ""
"次に、 ``./_doc_debug_images`` にある前処理済みの画像と ``Doc Image Cache`` にあるキャッシュ画像を "
":func:`pyvista.compare_images` を使って比較します。"

#: ../../pyvista/CONTRIBUTING.rst:912
msgid ""
"The tests can fail in three ways. To make it easy to review images for "
"failed tests, copies of the images are made as follows:"
msgstr "テストは3つの方法で失敗する可能性があります。失敗したテストの画像を簡単に見直せるように、画像のコピーは以下のように作成されます;"

#: ../../pyvista/CONTRIBUTING.rst:915
msgid "If the comparison between the two images fails:"
msgstr "2つの画像の比較に失敗した場合:"

#: ../../pyvista/CONTRIBUTING.rst:917
msgid ""
"The cache image is copied to "
"``./_doc_debug_images_failed/errors/from_cache``"
msgstr "キャッシュ画像は ``./_doc_debug_images_failed/errors/from_cache`` にコピーされます。"

#: ../../pyvista/CONTRIBUTING.rst:918
msgid ""
"The build image is copied to "
"``./_doc_debug_images_failed/errors/from_build``"
msgstr "ビルド画像は ``./_doc_debug_images_failed/errors/from_build`` にコピーされます。"

#: ../../pyvista/CONTRIBUTING.rst:920
msgid "If an image is in the cache but missing from the build:"
msgstr "画像がキャッシュにあるが、ビルドにない場合:"

#: ../../pyvista/CONTRIBUTING.rst:922
msgid ""
"The cache image is copied to  "
"``./_doc_debug_images_failed/errors/from_cache``"
msgstr "キャッシュ画像は ``./_doc_debug_images_failed/errors/from_cache`` にコピーされます。"

#: ../../pyvista/CONTRIBUTING.rst:924
msgid "If an image is in the build but missing from the cache:"
msgstr "画像はビルド内にあるが、キャッシュにない場合:"

#: ../../pyvista/CONTRIBUTING.rst:926
msgid ""
"The build image is copied to  "
"``./_doc_debug_images_failed/errors/from_build``"
msgstr "ビルド画像は ``./_doc_debug_images_failed/errors/from_build`` にコピーされます。"

#: ../../pyvista/CONTRIBUTING.rst:928
msgid ""
"If a warning is generated instead of an error, images are saved to the "
"``warnings`` sub-directory instead of ``errors``."
msgstr "エラーの代わりに警告が発生した場合、画像は ``errors`` の代わりに ``warnings`` サブディレクトリに保存されます。"

#: ../../pyvista/CONTRIBUTING.rst:931
msgid ""
"To resolve failed tests, any images in ``from_build`` or ``from_cache`` may "
"be copied to or removed from the ``Doc Image Cache``. For example, if adding"
" new docstring examples or plots, the test will initially fail, and the "
"images in ``from_build`` may be added to the ``Doc Image Cache``. Similarly,"
" if removing examples, the images in ``from_cache`` may be removed from the "
"``Doc Image Cache``."
msgstr ""
"失敗したテストを解決するために、``from_build`` または ``from_cache`` にある画像を ``Doc Image Cache``"
" にコピーしたり、``Doc Image Cache`` から削除したりすることができます。 "
"例えば、新しいdocstringの例やプロットを追加する場合、最初はテストが失敗し、 ``from_build`` にある画像が ``Doc Image"
" Cache`` に追加されます。 同様に、例題を削除する場合、 ``from_cache`` の画像は ``Doc Image Cache`` "
"から削除されます。"

#: ../../pyvista/CONTRIBUTING.rst:938
msgid ""
"If a test is flaky, e.g. the build sometimes generates different images for "
"the same plot, the multiple versions of the image may be saved to the flaky "
"test directory ``./tests/doc/flaky_tests``. A folder with the same name as "
"the test image should be created, and all versions of the image should be "
"stored in this directory. The test will first compare the build image to the"
" cached image in ``Doc Image Cache`` as normal. If that comparison fails, "
"the build image is then compared to all images in the flaky test directory. "
"The test is successful if one of the comparisons is successful, but a "
"warning will still be issued. If a warning is emitted by a flaky test, "
"images are saved to the ``flaky`` sub-directory instead of ``warnings``."
msgstr ""
"テストが不安定な場合、例えばビルドが同じプロットに対して異なるイメージを生成することがある場合、複数のバージョンのイメージは flaky test "
"ディレクトリ ``./tests/doc/flaky_tests`` に保存することができます。 "
"テストイメージと同じ名前のフォルダを作成し、すべてのバージョンのイメージをこのディレクトリに保存する必要があります。 "
"このテストでは、まずビルドイメージを通常通り ``Doc Image Cache`` にあるキャッシュイメージと比較します。 "
"この比較が失敗した場合、ビルド画像は flaky test ディレクトリのすべての画像と比較されます。 "
"いずれかの比較が成功すればテストは成功です、しかしサブディレクトリに保存されます。 flaky テストによって警告が発せられた場合、画像は "
"``warnings`` の代わりに ``flaky`` サブディレクトリに保存されます。"

#: ../../pyvista/CONTRIBUTING.rst:952
msgid ""
"It is not necessary to build the documentation images locally in order to "
"add to or update the doc image cache. The documentation is automatically "
"built as part of CI testing, and an artifact is generated for (1) all pre-"
"processed build images and (2) failed test cases. These artifacts may simply"
" be downloaded from GitHub for review."
msgstr ""
"docイメージキャッシュに追加したり更新したりするために、ドキュメントイメージをローカルでビルドする必要はありません。 ドキュメントは CI "
"テストの一環として自動的にビルドされ、(1) 前処理済みのビルドイメージと (2) 失敗したテストケースに対して成果物が生成されます。 "
"これらの成果物は、GitHubからダウンロードして確認することができる。"

#: ../../pyvista/CONTRIBUTING.rst:958
msgid ""
"The debug images saved with the artifact can also be used to \"simulate\" "
"building the documentation images locally. If the images are copied to the "
"local ``Build Image Directory``, the tests can then be executed locally for "
"debugging as though the documentation has already been built."
msgstr ""
"アーティファクトと一緒に保存されたデバッグ画像は、ドキュメン画像をローカルでビルドする \"simulate\" にも使用できます。 画像をローカルの "
"``Build Image Directory`` "
"にコピーすれば、あたかもドキュメントがすでにビルドされているかのように、ローカルでテストを実行してデバッグすることができます。"

#: ../../pyvista/CONTRIBUTING.rst:965
msgid ""
"These tests are intended to provide *additional* test coverage to ensure the"
" plots generated by ``pyvista`` are correct, and should not be used as the "
"primary source of testing. See `Docstring Testing`_ and `Notes Regarding "
"Image Regression Testing`_ for testing methods which should be considered "
"first."
msgstr ""
"これらのテストは ``pyvista`` が生成するプロットが正しいことを保証するための *追加的な* "
"テストカバレッジを提供することを意図しており、テストの主要なソースとして使用すべきではありません。 最初に考慮すべきテスト方法については、 "
"`Docstring Testing`_ と `Notes Regarding Image Regression Testing`_ "
"を参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:972
msgid "Interactive Plot Testing"
msgstr "インタラクティブプロットテスト"

#: ../../pyvista/CONTRIBUTING.rst:974
msgid ""
"PyVista's documentation uses a custom ``pyvista-plot`` directive to generate"
" static images as well as interactive plot files. The interactive files have"
" a ``.vtksz`` extension and can be relatively large when plotting high-"
"resolution datasets."
msgstr ""
"PyVista のドキュメントでは、カスタムディレクティブ ``pyvista-plot`` "
"を使って、静的な画像と対話的なプロットファイルを生成しています。 インタラクティブなファイルは ``.vtksz`` "
"という拡張子を持ち、高解像度のデータセットをプロットすると比較的大きくなります。"

#: ../../pyvista/CONTRIBUTING.rst:979
msgid ""
"To ensure that the interactive plots do not unnecessarily inflate the size "
"of the documentation build, a limit is placed on the size of ``.vtksz`` "
"files. To test that interactive plots do not exceed this limit, run:"
msgstr ""
"インタラクティブなプロットが不必要にドキュメントビルドのサイズを大きくしないように、 ``.vtksz`` ファイルのサイズに制限が設けられています。 "
"インタラクティブなプロットがこの制限を超えないことをテストするには、以下を実行してください:"

#: ../../pyvista/CONTRIBUTING.rst:987
msgid ""
"If any of these tests fail, the example(s) which generated the plot should "
"be modified, e.g.:"
msgstr "これらの(複数の)テストのいずれかが失敗した場合、プロットを生成したサンプルを修正する必要があります、例えば:"

#: ../../pyvista/CONTRIBUTING.rst:990
msgid ""
"Simplify any dataset(s) used, e.g. crop, clip, down-sample, decimate, or "
"otherwise reduce the complexity of the plot."
msgstr "使用する(複数の)データセットを単純化します。例えば、クロップ、クリップ、ダウンサンプル、デシメートなど、プロットの複雑さを軽減します。"

#: ../../pyvista/CONTRIBUTING.rst:993
msgid ""
"Force the plot to be static only. In docstrings, use the plot directive with"
" the ``force_static`` option, e.g.:"
msgstr ""
"プロットを強制的に静的なものにします。 docstrings では、plot ディレクティブに ``force_static`` "
"オプションを指定します、例えば:"

#: ../../pyvista/CONTRIBUTING.rst:1007
msgid "In sphinx gallery examples use:"
msgstr "sphinx galleryの使用例:"

#: ../../pyvista/CONTRIBUTING.rst:1015
msgid ""
"to disable all plots in the example or use ``PYVISTA_GALLERY_FORCE_STATIC`` "
"before the call to ``plot()`` or ``show()`` to force static for a single "
"plot. See :ref:`add_example_example` for more information."
msgstr ""
"または ``plot()`` や ``show()`` を呼び出す前に ``PYVISTA_GALLERY_FORCE_STATIC`` "
"を使用すると、1つのプロットに対して静的描画を強制することができます。 詳細は :ref:`add_example_example` "
"を参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:1021
msgid ""
"Reducing the complexity of the plot is preferred as this will also also "
"likely reduce the processing times."
msgstr "プロットの複雑さを減らすことは、処理時間の短縮にもつながるので好ましいです。"

#: ../../pyvista/CONTRIBUTING.rst:1026
msgid ""
"See `Documentation Image Regression Testing`_. for testing performed on the "
"static images generated by the plot directive."
msgstr ""
"plot指示文によって生成された静的画像に対して行われたテストについては、 `Documentation Image Regression "
"Testing`_ を参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:1030
msgid "Controlling Cache for CI Documentation Build"
msgstr "CIドキュメントのビルドでキャッシュを制御する"

#: ../../pyvista/CONTRIBUTING.rst:1032
msgid ""
"To reduce build times of the documentation for PRs, cached sphinx gallery, "
"example data, and sphinx build directories are used in the CI on GitHub.  In"
" some cases, the caching action can cause problems for a specific PR.  To "
"invalidate a cache for a specific PR, one of the following labels can be "
"applied to the PR."
msgstr ""
"PRのドキュメントのビルド時間を短縮するために、GitHub上のCIではキャッシュされたsphinxギャラリー、サンプルデータ、sphinxビルドディレクトリが使用されています。"
" 場合によっては、キャッシュが特定の PR に対して問題を引き起こすことがあります。 "
"特定のPRのキャッシュを無効にするには、以下のラベルのいずれかをPRに適用します。"

#: ../../pyvista/CONTRIBUTING.rst:1036
msgid "``no-example-data-cache``"
msgstr "``no-example-data-cache``"

#: ../../pyvista/CONTRIBUTING.rst:1037
msgid "``no-gallery-cache``"
msgstr "``no-gallery-cache``"

#: ../../pyvista/CONTRIBUTING.rst:1038
msgid "``no-sphinx-build-cache``"
msgstr "``no-sphinx-build-cache``"

#: ../../pyvista/CONTRIBUTING.rst:1040
msgid ""
"The PR either needs a new commit, e.g. updating the branch from ``main``, or"
" to be closed/re-opened to rerun the CI with the labels applied."
msgstr ""
"PRは、 ``main`` "
"からブランチを更新するなどの新しいコミットが必要か、ラベルを適用してCIを再実行するためにクローズ/再オープンする必要があります。"

#: ../../pyvista/CONTRIBUTING.rst:1045
msgid "Contributing to the Documentation"
msgstr "ドキュメンテーションへの貢献"

#: ../../pyvista/CONTRIBUTING.rst:1046
msgid "Documentation for PyVista is generated from three sources:"
msgstr "PyVistaのドキュメントは，3つのソースから作成されています:"

#: ../../pyvista/CONTRIBUTING.rst:1048
msgid ""
"Docstrings from the classes, functions, and modules of ``pyvista`` using "
"`sphinx.ext.autodoc <https://www.sphinx-"
"doc.org/en/master/usage/extensions/autodoc.html>`_."
msgstr ""
"``pyvista`` のクラス，関数，モジュールから， `sphinx.ext.autodoc <https://www.sphinx-"
"doc.org/en/master/usage/extensions/autodoc.html>`_ を使用して，Docstringを取得します．"

#: ../../pyvista/CONTRIBUTING.rst:1051
msgid "Restructured test from ``doc/``"
msgstr "``doc/`` からテストを再構築"

#: ../../pyvista/CONTRIBUTING.rst:1052
msgid "Gallery examples from ``examples/``"
msgstr "``examples/`` からのギャラリー例"

#: ../../pyvista/CONTRIBUTING.rst:1054
msgid ""
"General usage and API descriptions should be placed within ``doc/api`` and "
"the docstrings. Full gallery examples should be placed in ``examples``."
msgstr ""
"一般的な使い方やAPIの説明は ``doc/api`` と docstrings に記述してください． 完全なギャラリーのサンプルは "
"``examples`` に置いてください．"

#: ../../pyvista/CONTRIBUTING.rst:1059
msgid "Generating Random Data"
msgstr "ランダムデータの生成"

#: ../../pyvista/CONTRIBUTING.rst:1060
msgid ""
"All documentation should be reproducible. In particular, any documentation "
"or examples which use random data should be properly seeded so that the same"
" random data is generated every time. This enables users to copy code in the"
" documentation and generate the same results and plots locally."
msgstr ""
"すべての文書は再現可能でなければなりません。特に、ランダムデータを使用する文書や例は、毎回同じランダムデータが生成されるように適切にシードされるべきです。これにより、ユーザーはドキュメントのコードをコピーして、同じ結果とプロットをローカルに生成することができます。"

#: ../../pyvista/CONTRIBUTING.rst:1065
msgid ""
"When using NumPy's random number generator (RNG) you should create an RNG at"
" the beginning of your script and use this RNG in the rest of the script. Be"
" sure to include a seed value. For example:"
msgstr ""
"NumPyの乱数生成器（RNG）を使用する場合は、スクリプトの最初にRNGを作成し、スクリプトの残りの部分でこのRNGを使用する必要があります。必ずシード値を含めてください。例えば、こうです："

#: ../../pyvista/CONTRIBUTING.rst:1076
msgid ""
"See Scientific Python's `Best Practices for Using NumPy's Random Number "
"Generators <https://blog.scientific-python.org/numpy/numpy-rng/>`_ for "
"details."
msgstr ""
"詳細はScientific Pythonの `NumPyの乱数生成器を使用するためのベストプラクティス "
"<https://blog.scientific-python.org/numpy/numpy-rng/>`_ を参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:1080
msgid "Adding a New Example"
msgstr "新しい例の追加"

#: ../../pyvista/CONTRIBUTING.rst:1081
msgid ""
"PyVista's examples come in two formats: basic code snippets demonstrating "
"the functionality of an individual method or a full gallery example "
"displaying one or more concepts. Small code samples and snippets are "
"contained in the ``doc/api`` directory or within our documentation strings, "
"while the full gallery examples, meant to be run as individual downloadable "
"scripts, are contained in the ``examples`` directory at the root of this "
"repository."
msgstr ""
"PyVistaのサンプルには2つの形式があります．個々のメソッドの機能を示す基本的なコードスニペットと，1つまたは複数のコンセプトを表示する完全なギャラリーの例です．"
" 小さなコードサンプルやスニペットは ``doc/api`` "
"ディレクトリやドキュメント文字列に含まれています．一方，完全なギャラリーサンプルは，ダウンロード可能なスクリプトとして実行するために，このリポジトリのルートにある"
" ``examples`` ディレクトリに含まれています．"

#: ../../pyvista/CONTRIBUTING.rst:1088
msgid ""
"To add a fully fledged, standalone example, add your example to the "
"``examples`` directory in the root directory of the `PyVista Repository "
"<https://github.com/pyvista/pyvista/>`_ within one of the applicable "
"subdirectories. Should none of the existing directories match the category "
"of your example, create a new directory with a ``README.txt`` describing the"
" new category. Additionally, as these examples are built using the sphinx "
"gallery extension, follow coding guidelines as established by `Sphinx-"
"Gallery <https://sphinx-gallery.github.io/stable/index.html>`_."
msgstr ""
"本格的なスタンドアロンサンプルを追加するには，`PyVista Repository "
"<https://github.com/pyvista/pyvista/>`_ のルートディレクトリにある ``examples`` "
"ディレクトリに，該当するサブディレクトリのいずれかにあなたのサンプルを追加してください． "
"もし，既存のディレクトリがあなたのサンプルのカテゴリと一致しない場合は，新しいディレクトリを作成し，新しいカテゴリを記述した "
"``README.txt`` を記述してください． さらに，これらのサンプルはsphinx gallery 拡張を使って作成されていますので， "
"`Sphinx-Gallery <https://sphinx-gallery.github.io/stable/index.html>`_ "
"が定めるコーディングガイドラインに従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:1097
msgid "For more details see :ref:`add_example_example`."
msgstr "詳しくは :ref:`add_example_example` を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:1101
msgid "Adding a New Dataset"
msgstr "新しいデータセットの追加"

#: ../../pyvista/CONTRIBUTING.rst:1102
msgid ""
"If you have a dataset that you want to feature or want to include as part of"
" a full gallery example, add it to `pyvista/vtk-data "
"<https://github.com/pyvista/vtk-data/>`_ and follow the directions there. "
"You will then need to add a new function to download the dataset in "
"``pyvista/examples/downloads.py``. This might be as easy as:"
msgstr ""
"もし取り上げたいデータセットがあったり，ギャラリーのサンプルの一部に含めたいデータセットがある場合は，それを `pyvista/vtk-data "
"<https://github.com/pyvista/vtk-data/>`_ に追加し，そこにある指示に従ってください．それから， "
"``pyvista/examples/downloads.py`` "
"にデータセットをダウンロードするための新しい関数を追加する必要があります．これは以下のように簡単です．"

#: ../../pyvista/CONTRIBUTING.rst:1118
msgid ""
"Note that a separate dataset loading object, ``_dataset_my_new_mesh``, "
"should first be defined outside of the function (with module scope), and the"
" new ``download_my_new_mesh`` function should then use this object to "
"facilitate downloading and loading the dataset. The dataset loader variable "
"should start with ``_dataset_``."
msgstr ""
"データセットのロードに使用するオブジェクト ``_dataset_my_new_mesh`` を(モジュールスコープ付き)関数の外側で定義し、新しい "
"``download_my_new_mesh`` "
"関数はこのオブジェクトを使用してデータセットのダウンロードとロードを行う必要があります。データセットローダー変数は ``_dataset_`` "
"で始まる必要がある。"

#: ../../pyvista/CONTRIBUTING.rst:1124
msgid "This will enable:"
msgstr "これにより以下が有効になります:"

#: ../../pyvista/CONTRIBUTING.rst:1131
msgid ""
"For loading complex datasets with multiple files or special processing "
"requirements, see the private ``pyvista/examples/_dataset_loader.py`` module"
" for more details on how to create a suitable dataset loader."
msgstr ""
"複数のファイルを持つ複雑なデータセットをロードする場合や、特別な処理を必要とする場合は、適切なデータセットローダーを作成するための詳細については、プライベートな"
" ``pyvista/examples/_dataset_loader.py`` モジュールを参照してください。"

#: ../../pyvista/CONTRIBUTING.rst:1135
msgid ""
"Using a dataset loader in this way will enable metadata to be collected for "
"the new dataset. A new dataset card titled ``My New Mesh Dataset`` will "
"automatically be generated and included in the :ref:`dataset_gallery`."
msgstr ""
"このようにデータセットローダーを使うことで、新しいデータセットのメタデータを収集することができます。 ``My New Mesh Dataset`` "
"というタイトルの新しいデータセットカードが自動的に生成され、 :ref:`dataset_gallery` に含まれます。"

#: ../../pyvista/CONTRIBUTING.rst:1139
msgid ""
"In the docstring of the new ``download_my_new_mesh`` function, be sure to "
"also include:"
msgstr "新しい ``download_my_new_mesh`` 関数の docstring には、次のように記述してください。"

#: ../../pyvista/CONTRIBUTING.rst:1142
msgid "A sample plot of the dataset in the examples section"
msgstr "examplesセクションにあるデータセットのプロット例 "

#: ../../pyvista/CONTRIBUTING.rst:1144
msgid ""
"A reference link to the dataset's new (auto-generated) gallery card in the "
"see also section"
msgstr "See alsoセクションにあるデータセットの新しい（自動生成された）ギャラリーカードへの参照リンク "

#: ../../pyvista/CONTRIBUTING.rst:1147
msgid "For example:"
msgstr "例えば:"

#: ../../pyvista/CONTRIBUTING.rst:1169
msgid ""
"The rst ``seealso`` directive must be used instead of the ``See Also`` "
"heading due to limitations with how ``numpydoc`` parses explicit references."
msgstr ""
"``numpydoc`` が明示的な参照を解析する方法に制限があるため、 ``See Also`` の代わりに ``seealso`` "
"ディレクティブを使用する必要があります。"

#: ../../pyvista/CONTRIBUTING.rst:1174
msgid "Extending the Dataset Gallery"
msgstr "データセットギャラリーを拡張する"

#: ../../pyvista/CONTRIBUTING.rst:1175
msgid ""
"If you have multiple related datasets to contribute, or would like to group "
"any existing datasets together that share similar properties, the "
":ref:`dataset_gallery` can easily be extended to feature these datasets in a"
" new `card carousel <https://sphinx-"
"design.readthedocs.io/en/latest/cards.html#card-carousels>`_."
msgstr ""
"関連するデータセットが複数ある場合や、似たようなプロパティを持つ既存のデータセットをグループ化したい場合は、 "
":ref:`dataset_gallery` を拡張することで、これらのデータセットを新しい `card carousel "
"<https://sphinx-design.readthedocs.io/en/latest/cards.html#card-carousels>`_"
" に表示することができます。"

#: ../../pyvista/CONTRIBUTING.rst:1180
msgid ""
"For example, to add a new ``Instrument`` dataset category to "
":ref:`dataset_gallery_category` featuring two datasets of musical "
"instruments, e.g."
msgstr ""
"例えば、 :ref:`dataset_gallery_category` に新しい ``Instrument`` "
"データセットカテゴリを追加して、楽器のデータセットを2つ並べるには、次のようにします。"

#: ../../pyvista/CONTRIBUTING.rst:1183
msgid ":func:`pyvista.examples.downloads.download_guitar`"
msgstr ":func:`pyvista.examples.downloads.download_guitar`"

#: ../../pyvista/CONTRIBUTING.rst:1184
msgid ":func:`pyvista.examples.downloads.download_trumpet`"
msgstr ":func:`pyvista.examples.downloads.download_trumpet`"

#: ../../pyvista/CONTRIBUTING.rst:1186
msgid "complete the following steps:"
msgstr "以下のステップを完了します:"

#: ../../pyvista/CONTRIBUTING.rst:1188
msgid "Define a new carousel in ``doc/source/make_tables.py``, e.g.:"
msgstr "``doc/source/make_tables.py`` で新しいカルーセルを定義します、例えば:"

#: ../../pyvista/CONTRIBUTING.rst:1208
msgid "where"
msgstr "ここで"

#: ../../pyvista/CONTRIBUTING.rst:1210
msgid ""
"``name`` is used internally to define the name of the generated ``.rst`` "
"file for the carousel."
msgstr "``name`` はカルーセル用に生成される ``.rst`` ファイルの名前を定義するために内部的に使用される。"

#: ../../pyvista/CONTRIBUTING.rst:1213
msgid ""
"``doc`` is a short text description of the carousel which will appear in the"
" documentation in the header above the carousel."
msgstr "``doc`` はカルーセルの上のヘッダーにあるドキュメントに表示されるカルーセルの短い説明です。"

#: ../../pyvista/CONTRIBUTING.rst:1216
msgid ""
"``badge`` is used to give all datasets in the carousel a reference tag. The "
"``ref`` argument for the badge should be a new reference target (details "
"below)."
msgstr ""
"``badge`` はカルーセル内の全てのデータセットに参照タグを付与します。バッジの引数 ``ref`` "
"には新しい参照先を指定する必要があります（詳細は後述します） 。"

#: ../../pyvista/CONTRIBUTING.rst:1220
msgid ""
"``fetch_dataset_names`` should return a list of any/all dataset names to be "
"included in the carousel. The dataset names should not include any "
"``load_``, ``download_``, or ``dataset_`` prefix."
msgstr ""
"``fetch_dataset_names`` は、カルーセルに含めるデータセット名のリストを返す。データセット名には ``load_`` 、 "
"``download_`` 、 ``dataset_`` の接頭辞をつけてはならない。"

#: ../../pyvista/CONTRIBUTING.rst:1224
msgid ""
"Add the new carousel class to the ``CAROUSEL_LIST`` variable defined in "
"``doc/source/make_tables.py``. This will enable the rst to be auto-generated"
" for the carousel."
msgstr ""
"新しいカルーセルクラスを ``doc/source/make_tables.py`` で定義した ``CAROUSEL_LIST`` "
"変数に追加します。これにより、カルーセルの rst が自動生成されるようになります。"

#: ../../pyvista/CONTRIBUTING.rst:1228
msgid ""
"Update the ``doc/source/api/examples/dataset_gallery.rst`` file to include "
"the new generated ``<name>_carousel.rst`` file. E.g. to add the carousel as "
"a new drop-down item, add the following:"
msgstr ""
"``doc/source/api/examples/dataset_gallery.rst`` ファイルを更新して、新しく生成された "
"``<name>_carousel.rst`` ファイルを含めます。例えば、カルーセルを新しいドロップダウン項目として追加するには、以下を追加します:."

#: ../../pyvista/CONTRIBUTING.rst:1239
msgid "where:"
msgstr "ここで:"

#: ../../pyvista/CONTRIBUTING.rst:1241
msgid ""
"The dropdown name ``:name: <reference>`` should be the badge's ``ref`` "
"variable defined earlier. This will make it so that clicking on the new "
"badge will link to the new dropdown menu."
msgstr ""
"ドロップダウン名 ``:name: <reference>`` は、先ほど定義したバッジの ``ref`` "
"変数でなければなりません。これにより、新しいバッジをクリックすると、新しいドロップダウンメニューにリンクするようになります。"

#: ../../pyvista/CONTRIBUTING.rst:1245
msgid ""
"The name of the included ``.rst`` file should match the ``name`` variable "
"defined in the new ``Carousel`` class."
msgstr ""
"インクルードされた ``.rst`` ファイルの名前は、新しい ``Carousel`` クラスで定義された ``name`` "
"変数と一致する必要があります。"

#: ../../pyvista/CONTRIBUTING.rst:1248
msgid ""
"After building the documentation, the carousel should now be part of the "
"gallery."
msgstr "ドキュメントをビルドしたら、カルーセルがギャラリーの一部になるはずです。"

#: ../../pyvista/CONTRIBUTING.rst:1252
msgid "Creating a New Pull Request"
msgstr "新規Pull Requestの作成"

#: ../../pyvista/CONTRIBUTING.rst:1254
msgid ""
"Once you have tested your branch locally, create a pull request on `pyvista "
"GitHub <https://github.com/pyvista/pyvista>`_ while merging to main. This "
"will automatically run continuous integration (CI) testing and verify your "
"changes will work across several platforms."
msgstr ""
"ブランチをローカルでテストしたら，mainにマージする際に `pyvista GitHub "
"<https://github.com/pyvista/pyvista>`_ でpull "
"requestを作成します．これにより，継続的インテグレーション (CI) "
"テストが自動的に実行され，変更が複数のプラットフォームで機能することが検証されます．"

#: ../../pyvista/CONTRIBUTING.rst:1259
msgid ""
"To ensure someone else reviews your code, at least one other member of the "
"pyvista contributors group must review and verify your code meets our "
"community’s standards. Once approved, if you have write permission you may "
"merge the branch. If you don’t have write permission, the reviewer or "
"someone else with write permission will merge the branch and delete the PR "
"branch."
msgstr ""
"他のユーザーがコードをレビューできるようにするには，pyvistaコントリビュータグループの他の少なくとも1人のメンバーが，コードがコミュニティの標準を満たしているかどうかをレビューして検証する必要があります．承認後，書き込み権限があればブランチをマージすることができます．書き込みパーミッションがない場合，レビュー担当者または書き込みパーミッションを持つ別のユーザーがブランチをマージし，PRブランチを削除します．"

#: ../../pyvista/CONTRIBUTING.rst:1266
msgid ""
"Since it may be necessary to merge your branch with the current release "
"branch (see below), please do not delete your branch if it is a ``fix/`` "
"branch."
msgstr ""
"ブランチをカレントリリースブランチ(下記参照)とマージする必要があるかもしれませんので， ``fix/`` ブランチであれば削除しないでください．"

#: ../../pyvista/CONTRIBUTING.rst:1271
msgid "Preview the Documentation"
msgstr "ドキュメントをプレビューする"

#: ../../pyvista/CONTRIBUTING.rst:1272
msgid ""
"For PRs of branches coming from the main pyvista repository, the "
"documentation is automatically deployed using `Netifly GitHub actions "
"<https://github.com/nwtgck/actions-netlify>`_. However, new contributors "
"that submit PRs from a fork can download a light-weight documentation CI "
"artifact that contains a non-interactive subset of the documentation build. "
"It typically weights 500 Mb and is available from the ``Upload non-"
"interactive HTML documentation`` step of the ``Build Documentation`` CI job."
msgstr ""
"pyvistaのメインリポジトリからのブランチのPRの場合、ドキュメントは自動的に `Netifly GitHub actions "
"<https://github.com/nwtgck/actions-netlify>`_ を使ってデプロイされます。 "
"しかし、フォークからPRを提出する新しい貢献者は、ドキュメントのビルドの非対話的なサブセットを含む軽量のドキュメントCI成果物をダウンロードすることができます。"
" これは通常500Mbの重さで、``Build Documentation`` CIジョブの ``Upload non-interactive HTML"
" documentation`` ステップから利用できます。"

#: ../../pyvista/CONTRIBUTING.rst:1280
msgid "Branching Model"
msgstr "ブランチモデル"

#: ../../pyvista/CONTRIBUTING.rst:1282
msgid ""
"This project has a branching model that enables rapid development of "
"features without sacrificing stability, and closely follows the `Trunk Based"
" Development <https://trunkbaseddevelopment.com/>`_ approach."
msgstr ""
"このプロジェクトは，安定性を犠牲にすることなく機能の迅速な開発を可能にする分岐モデルを持っており， `Trunk Based Development "
"<https://trunkbaseddevelopment.com/>`_  アプローチに厳密に従います．"

#: ../../pyvista/CONTRIBUTING.rst:1286
msgid "The main features of our branching model are:"
msgstr "ブランチモデルの主な特徴は次のとおりです．"

#: ../../pyvista/CONTRIBUTING.rst:1288
msgid ""
"The ``main`` branch is the main development branch. All features, patches, "
"and other branches should be merged here. While all PRs should pass all "
"applicable CI checks, this branch may be functionally unstable as changes "
"might have introduced unintended side-effects or bugs that were not caught "
"through unit testing."
msgstr ""
"``main`` "
"ブランチは主要な開発ブランチです．すべてのフィーチャー，パッチ，およびその他のブランチをここにマージする必要があります．すべてのPRは適用可能なCIチェックをすべてパスする必要がありますが，変更によって予期しない副作用や単体テストで検出されなかったバグが発生する可能性があるため，このブランチは機能的に不安定になる可能性があります．"

#: ../../pyvista/CONTRIBUTING.rst:1293
msgid ""
"There will be one or many ``release/`` branches based on minor releases (for"
" example ``release/0.24``) which contain a stable version of the code base "
"that is also reflected on PyPI/. Hotfixes from ``fix/`` branches should be "
"merged both to main and to these branches. When necessary to create a new "
"patch release these release branches will have their ``pyvista/_version.py``"
" updated and be tagged with a semantic version (for example ``v0.24.1``). "
"This triggers CI to push to PyPI, and allow us to rapidly push hotfixes for "
"past versions of ``pyvista`` without having to worry about untested "
"features."
msgstr ""
"マイナーリリース(例えば ``release/0.24`` )をベースにした ``release/`` ブランチがいくつかあり，そこには PyPI/ "
"にも反映される安定版のコードベースが含まれています． ``fix/`` "
"ブランチの修正パッチは，mainブランチとこれらのブランチの両方にマージする必要があります．新しいパッチリリースを作成する必要がある場合，これらのリリースブランチの"
" ``pyvista/_version.py`` が更新され，セマンティックバージョン(例えば ``v0.24.1`` "
")がタグ付けされます．これによりCIはPyPIにプッシュし，テストされていない機能を気にすることなく，過去のバージョンの ``pyvista`` "
"のホットフィックスを迅速にプッシュすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:1303
msgid ""
"When a minor release candidate is ready, a new ``release`` branch will be "
"created from ``main`` with the next incremented minor version (for example "
"``release/0.25``), which will be thoroughly tested. When deemed stable, the "
"release branch will be tagged with the version (``v0.25.0`` in this case), "
"and if necessary merged with main if any changes were pushed to it. Feature "
"development then continues on ``main`` and any hotfixes will now be merged "
"with this release. Older release branches should not be deleted so they can "
"be patched as needed."
msgstr ""
"マイナーリリース候補が準備できたら， ``main`` から新しい ``release`` ブランチが作成され，次のマイナーバージョン(例えば  "
"``release/0.25`` "
")がインクリメントされ，徹底的にテストされます．安定していると判断された場合，リリースブランチにはバージョン(この場合の ``v0.25.0`` "
")のタグが付けられ，必要に応じて変更が加えられた場合にはmainとマージされます． ``main`` "
"で機能開発が継続され，ホットフィックスはこのリリースに統合されます．必要に応じてパッチを適用できるように，古いリリースブランチは削除しないでください．"

#: ../../pyvista/CONTRIBUTING.rst:1314
msgid "Minor Release Steps"
msgstr "マイナーリリース手順"

#: ../../pyvista/CONTRIBUTING.rst:1316
msgid ""
"Minor releases are feature and bug releases that improve the functionality "
"and stability of ``pyvista``. Before a minor release is created the "
"following will occur:"
msgstr ""
"マイナーリリースは， ``pyvista`` "
"の機能と安定性を改善する機能およびバグリリースです．マイナーリリースが作成される前に，次のことが発生します．"

#: ../../pyvista/CONTRIBUTING.rst:1320
msgid ""
"Create a new branch from the ``main`` branch with name "
"``release/MAJOR.MINOR`` (for example ``release/0.25``)."
msgstr ""
"``main`` ブランチから ``release/MAJOR.MINOR`` "
"という名前の新しいブランチを作成します(例: ``release/0.25`` )．"

#: ../../pyvista/CONTRIBUTING.rst:1323
msgid ""
"Update the development version numbers in ``pyvista/_version.py`` and commit"
" it (for example ``0, 26, 'dev0'``). Push the branch to GitHub and create a "
"new PR for this release that merges it to main. Development to main should "
"be limited at this point while effort is focused on the release."
msgstr ""
"``pyvista/_version.py`` の開発バージョン番号を更新し，コミットします(例: ``0, 26, "
"'dev0'``)．ブランチをGitHubにプッシュし，mainにマージする今回のリリースの新しいPRを作成します．リリースに注力している間は，mainへの開発はこの時点では制限されるべきです．"

#: ../../pyvista/CONTRIBUTING.rst:1329
msgid ""
"Locally run all tests as outlined in the `Testing Section <#testing>`_ and "
"ensure all are passing."
msgstr ""
"`テストのセクション <#testing>`_ で概説されているように，すべてのテストをローカルで実行し，すべてが合格していることを確認します．"

#: ../../pyvista/CONTRIBUTING.rst:1332
msgid ""
"Locally test and build the documentation with link checking to make sure no "
"links are outdated. Be sure to run ``make clean`` to ensure no results are "
"cached."
msgstr ""
"リンクが古くなっていないことを確認するために，リンクチェックを行いながらドキュメントをローカルにテストしてビルドします．また， ``make "
"clean`` を実行して，結果がキャッシュされていないことを確認してください．"

#: ../../pyvista/CONTRIBUTING.rst:1343
msgid ""
"After building the documentation, open the local build and examine the "
"examples gallery for any obvious issues."
msgstr "ドキュメントをビルドしたら，ローカル・ビルドを開き，サンプル・ギャラリーで明らかな問題がないか調べてください．"

#: ../../pyvista/CONTRIBUTING.rst:1346
msgid ""
"It is now the responsibility of the ``pyvista`` community to functionally "
"test the new release. It is best to locally install this branch and use it "
"in production. Any bugs identified should have their hotfixes pushed to this"
" release branch."
msgstr ""
"新しいリリースを機能的にテストするのは ``pyvista`` "
"コミュニティの責任です．このブランチをローカルにインストールして運用環境で使用することをお勧めします．検出されたバグについては，ホットフィックスをこのリリースブランチにプッシュする必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:1351
msgid ""
"When the branch is deemed as stable for public release, the PR will be "
"merged to main. After update the version number in ``release/MAJOR.MINOR`` "
"branch, the ``release/MAJOR.MINOR`` branch will be tagged with a "
"``vMAJOR.MINOR.0`` release. The release branch will not be deleted. Tag the "
"release with:"
msgstr ""
"このブランチが安定版として一般公開されると，PR は main にマージされます． ``release/MAJOR.MINOR`` "
"ブランチのバージョン番号を更新した後， ``release/MAJOR.MINOR`` ブランチは ``vMAJOR.MINOR.0`` "
"リリースというタグが付けられます．リリースブランチは削除されません．次のようにリリースにタグを付けます:"

#: ../../pyvista/CONTRIBUTING.rst:1361
msgid ""
"Please check again that the tag has been created correctly and push the "
"branch and tag."
msgstr "タグが正しく作成されたことを再度確認し，ブランチとタグをプッシュしてください．"

#: ../../pyvista/CONTRIBUTING.rst:1368
msgid ""
"Create a list of all changes for the release. It is often helpful to "
"leverage `GitHub’s compare feature "
"<https://github.com/pyvista/pyvista/compare>`_ to see the differences from "
"the last tag and the ``main`` branch. Be sure to acknowledge new "
"contributors by their GitHub username and place mentions where appropriate "
"if a specific contributor is to thank for a new feature."
msgstr ""
"リリースのすべての変更のリストを作成します． `GitHub's compare feature "
"<https://github.com/pyvista/pyvista/compare>`_ を活用して，最後のタグや ``main`` "
"ブランチとの違いを確認することは，しばしば役に立ちます．特定の貢献者が新機能に感謝したい場合は，GitHubのユーザー名と適切な場所の記載で，新しい貢献者を必ず確認してください．"

#: ../../pyvista/CONTRIBUTING.rst:1376
msgid ""
"Place your release notes from previous step in the description for `the new "
"release on GitHub <https://github.com/pyvista/pyvista/releases/new>`_."
msgstr ""
"前の手順のリリースノートを `GitHubの新リリース "
"<https://github.com/pyvista/pyvista/releases/new>`_ の説明に入れてください．"

#: ../../pyvista/CONTRIBUTING.rst:1380
msgid ""
"Go grab a beer/coffee/water and wait for `@regro-cf-autotick-bot "
"<https://github.com/regro/cf-scripts>`_ to open a pull request on the conda-"
"forge `PyVista feedstock <https://github.com/conda-forge/pyvista-"
"feedstock>`_. Merge that pull request."
msgstr ""
"ビール，コーヒー，水を飲みに行って， `@regro-cf-autotick-bot <https://github.com/regro/cf-"
"scripts>`_ がconda-forge `PyVista feedstock <https://github.com/conda-"
"forge/pyvista-feedstock>`_ のプルリクエストを開くのを待って，そのプルリクエストをマージします．"

#: ../../pyvista/CONTRIBUTING.rst:1386
msgid "Announce the new release in the Discussions page and celebrate."
msgstr "Discussions ページで新リリースを発表し，お祝いしましょう．"

#: ../../pyvista/CONTRIBUTING.rst:1390
msgid "Patch Release Steps"
msgstr "パッチリリース手順"

#: ../../pyvista/CONTRIBUTING.rst:1392
msgid ""
"Patch releases are for critical and important bugfixes that can not or "
"should not wait until a minor release. The steps for a patch release"
msgstr "パッチリリースは重要なバグフィックスのためのもので，マイナーリリースまで待つことはできないものです．パッチリリースの手順は"

#: ../../pyvista/CONTRIBUTING.rst:1395
msgid ""
"Push the necessary bugfix(es) to the applicable release branch. This will "
"generally be the latest release branch (for example ``release/0.25``)."
msgstr ""
"必要な(複数の)バグフィックスを該当するリリースブランチにプッシュします．これは通常，最新のリリースブランチ(例 "
"``release/0.25``)です．"

#: ../../pyvista/CONTRIBUTING.rst:1398
msgid ""
"Update ``pyvista/_version.py`` with the next patch increment (for example "
"``v0.25.1``), commit it, and open a PR that merge with the release branch. "
"This gives the ``pyvista`` community a chance to validate and approve the "
"bugfix release. Any additional hotfixes should be outside of this PR."
msgstr ""
"次のパッチ増分で ``pyvista/_version.py`` を更新し(例: ``v0.25.1`` "
")，コミットし，リリースブランチとマージするPRをオープンします．これにより， ``pyvista`` "
"コミュニティはバグ修正リリースを検証し，承認する機会を得ます．追加のホットフィックスは，このPRの範囲外でなければなりません．"

#: ../../pyvista/CONTRIBUTING.rst:1404
msgid ""
"When approved, merge with the release branch, but not ``main`` as there is "
"no reason to increment the version of the ``main`` branch. Then create a tag"
" from the release branch with the applicable version number (see above for "
"the correct steps)."
msgstr ""
"承認されたら，リリースブランチとマージしますが， ``main`` ブランチのバージョンを増やす理由がないため， ``main`` "
"とはマージしません．次に，リリースブランチから適切なバージョン番号(正しい手順については上記を参照してください．)のタグを作成します．"

#: ../../pyvista/CONTRIBUTING.rst:1409
msgid ""
"If deemed necessary, create a release notes page. Also, open the PR from "
"conda and follow the directions in step 10 in the minor release section."
msgstr "必要に応じて，リリースノートページを作成します．また，condaからPRを開き，マイナーリリースセクションの手順10の指示に従います．"

#: ../../pyvista/CONTRIBUTING.rst:1414
msgid "Dependency version policy"
msgstr "依存バージョンポリシー"

#: ../../pyvista/CONTRIBUTING.rst:1417
msgid "Python and VTK dependencies"
msgstr "PythonとVTKの依存関係"

#: ../../pyvista/CONTRIBUTING.rst:1419
msgid ""
"We support all supported `Python versions`_ and `VTK versions`_ that support"
" those Python versions. As much as we would prefer to follow `SPEC 0`_, we "
"follow VTK versions as an interface library of VTK."
msgstr ""
"私たちは、サポートされているすべての `Python バージョン`_ と、それらの Python バージョンをサポートしている `VTK バージョン`_"
" をサポートしています。私たちは `SPEC 0`_ に従いたいのですが、VTKのインターフェイスライブラリとして、VTKのバージョンに従います。"

#: ../../pyvista/doc/source/extras/docker.rst:1
msgid "!"
msgstr "!"

#: ../../pyvista/doc/source/extras/docker.rst:4
msgid "PyVista within a Docker Container"
msgstr "Dockerコンテナ内のPyVista"

#: ../../pyvista/doc/source/extras/docker.rst:5
msgid ""
"You can use ``pyvista`` from within a docker container with jupyterlab. To "
"launch a local docker container, install ``docker``, then pull and run the "
"image with:"
msgstr ""
"jupyterlabでは，Dockerコンテナから ``pyvista`` を使用することができます． ローカルのDockerコンテナを起動するには， "
"``docker`` をインストールし，イメージをpullして実行する．"

#: ../../pyvista/doc/source/extras/docker.rst:13
msgid ""
"Finally, open the link that shows up from the terminal output and start "
"playing around with pyvista in jupyterlab. For example:"
msgstr "最後に，端末出力に表示されるリンクを開き，jupyterlabのpyvistaを試してみましょう．たとえば，次のようになります．"

#: ../../pyvista/doc/source/extras/docker.rst:27
msgid ""
"You can see the latest tags of `our Docker containers here "
"<https://github.com/pyvista/pyvista/pkgs/container/pyvista>`_. "
"``ghcr.io/pyvista/pyvista:latest`` has JupyterLab set up while "
"``ghcr.io/pyvista/pyvista:latest-slim`` is a lightweight Python environment "
"without Jupyter"
msgstr ""
"`私たちのDockerコンテナの最新のタグは，こちら<https://github.com/pyvista/pyvista/pkgs/container/pyvista>`_"
" で見ることができます． ``ghcr.io/pyvista/pyvista:latest`` には JupyterLab がセットアップされており， "
"``ghcr.io/pyvista/pyvista:latest-slim`` は Jupyter を含まない軽量の Python 環境です．"

#: ../../pyvista/doc/source/extras/docker.rst:34
msgid ""
"You may need to log into the GitHub container registry by following the "
"directions at `Working with the Docker registry "
"<https://docs.github.com/en/enterprise-server@3.0/packages/working-with-a-"
"github-packages-registry/working-with-the-docker-registry>`_)"
msgstr ""
"`Dockerレジストリを利用した作業 <https://docs.github.com/en/enterprise-"
"server@3.0/packages/working-with-a-github-packages-registry/working-with-"
"the-docker-registry>`_ にある指示に従って，GitHubのコンテナレジストリにログインする必要があるかもしれません)"

#: ../../pyvista/doc/source/extras/docker.rst:39
msgid "Create your own Docker Container with PyVista"
msgstr "PyVista で独自のDockerコンテナを作成します"

#: ../../pyvista/doc/source/extras/docker.rst:40
msgid ""
"Clone PyVista and cd into this directory to create your own customized "
"docker image."
msgstr "PyVistaをこのディレクトリにクローンしcdでこのディレクトリに入り，独自のカスタマイズされたDockerイメージを作成します．"

#: ../../pyvista/doc/source/extras/docker.rst:50
msgid ""
"If you wish to have off-screen GPU support when rending on jupyterlab, see "
"the notes about building with EGL at :ref:`building_vtk`, or use the custom,"
" pre-built wheels at `Release 0.27.0 "
"<https://github.com/pyvista/pyvista/releases/tag/0.27.0>`_. Install that "
"customized vtk wheel onto your docker image by modifying the docker image at"
" ``pyvista/docker/jupyter.Dockerfile`` with:"
msgstr ""
"jupyterlabでレンタルする際にオフスクリーンGPUをサポートさせたい場合は， :ref:`building_vtk` "
"のEGLでのビルドに関する注意を参照するか， `Release 0.27.0 "
"<https://github.com/pyvista/pyvista/releases/tag/0.27.0>`_ "
"のカスタムのプリビルドwheelを使用してください． ``pyvista/docker/jupyter.Dockerfile`` "
"のDockerイメージを次のように変更して，カスタマイズしたvtk wheelをdockerイメージにインストールします．"

#: ../../pyvista/doc/source/extras/docker.rst:62
msgid ""
"Additionally, you must install GPU drivers on the docker image of the same "
"version running on the host machine. For example, if you are running on "
"Azure Kubernetes Service and the GPU nodes on the kubernetes cluster are "
"running ``450.51.06``, you must install the same version on your image. "
"Since you will be using the underlying kernel module, there's no reason to "
"build it on the container (and trying will only result in an error)."
msgstr ""
"さらに，ホストマシンで実行されている同じバージョンのDockerイメージにGPUドライバをインストールする必要があります．例えば，Azure "
"Kubernetes Serviceを実行していて，Kubernetesクラスタ上のGPUノードが ``450.51.06`` "
"を実行している場合，同じバージョンをイメージにインストールする必要があります．基礎となるカーネル・モジュールを使用することになるので，コンテナー上にビルドする理由はありません(試行してもエラーになるだけです．)．"

#: ../../pyvista/doc/source/extras/docker.rst:76
msgid ""
"To verify that you're rendering on a GPU, first check the output of "
"``nvidia-smi``. You should get something like:"
msgstr "GPUでレンダリングしているかどうかを確認するには，まず ``nvidia-smi`` の出力をチェックします．"

#: ../../pyvista/doc/source/extras/docker.rst:95
msgid ""
"Note the driver version (which is actually the kernel driver version), and "
"verify it matches the version you installed on your docker image."
msgstr ""
"ドライバのバージョン(これは実際にはカーネルドライバのバージョンです．)をメモし，それがdockerイメージにインストールしたバージョンと一致することを確認します．"

#: ../../pyvista/doc/source/extras/docker.rst:98
msgid ""
"Finally, check that your render window is using NVIDIA by running "
"``ReportCapabilities``:"
msgstr "最後に， ``ReportCapabilities`` を実行して，レンダーウィンドウがNVIDIAを使用していることを確認します．"

#: ../../pyvista/doc/source/extras/docker.rst:117
msgid ""
"If you get ``display id not set``, then your environment is likely not set "
"up correctly."
msgstr "``display id not set`` を受信した場合，環境が正しく設定されていない可能性があります．"

#: ../../pyvista/doc/source/extras/extending_pyvista.rst:2
msgid "Extending PyVista"
msgstr "PyVistaの拡張"

#: ../../pyvista/doc/source/extras/extending_pyvista.rst:4
msgid ""
"PyVista ``DataSets`` can be extended for user defined functionality. See "
":ref:`Extending PyVista Example <extending_pyvista_example>`."
msgstr ""
"PyVistaの ``DataSets`` は，ユーザ定義の機能を拡張することができます．詳しくは :ref:`Extending PyVista "
"Example <extending_pyvista_example>` をご覧ください．"

#: ../../pyvista/doc/source/extras/index.rst:2
msgid "Extras"
msgstr "その他"

#: ../../pyvista/doc/source/extras/index.rst:3
msgid ""
"This section contains resources to expand the usage of PyVista beyond just "
"running it from a Python console or IDE. For example, you can package "
"PyVista in a docker image and build VTK with EGL to enable rich headless "
"plotting on remote servers. You can also package PyVista using "
"`pyinstaller`_ to be used within a standalone application."
msgstr ""
"このセクションには，PythonコンソールまたはIDEからPyVistaを実行するだけでなく，PyVistaの使用方法を拡張するためのリソースが含まれています．例えば，PyVistaをDockerイメージにパッケージ化し，EGLでVTKをビルドして，リモートサーバ上での豊富なヘッドレスプロットを可能にすることができます．"
" `pyinstaller`_ を使用してPyVistaをパッケージ化し，スタンドアロンアプリケーション内で使用することもできます．"

#: ../../pyvista/doc/source/extras/index.rst:10
msgid ""
"See the :ref:`developer_notes` section for details on contributing and how "
"you can help develop PyVista."
msgstr "貢献の詳細とPyVistaの開発方法については， :ref:`developer_notes` のセクションを参照してください．"

#: ../../pyvista/doc/source/extras/plot_directive.rst:4
msgid "Sphinx PyVista Plot Directive"
msgstr "Sphinx PyVista Plot ディレクティブ"

#: ../../pyvista/doc/source/extras/plot_directive.rst:5
msgid ""
"You can generate static and interactive scenes of pyvista plots using the "
"``.. pyvista-plot::`` directive by adding the following to your ``conf.py`` "
"when building your documentation using Sphinx."
msgstr ""
"Sphinxを使ってドキュメントを作成する際に，以下の内容を ``conf.py`` に追加することで， ``.. pyvista-plot::`` "
"ディレクティブを使用して，pyvistaのプロットの静的なシーンとインタラクティブなシーンを生成することができます．"

#: ../../pyvista/doc/source/extras/plot_directive.rst:17
msgid ""
"You can then issue the plotting directive within your sphinx documentation "
"files::"
msgstr "そうすれば，sphinxのドキュメントファイルの中で，plottingディレクティブを発行することができます::"

#: ../../pyvista/doc/source/extras/plot_directive.rst:28
msgid "Which will be rendered as:"
msgstr "以下のように表示されます．"

#: ../../pyvista/doc/source/extras/plot_directive.rst:0
msgid "Static Scene"
msgstr "スタティックシーン"

#: ../../pyvista/doc/source/extras/plot_directive.rst:0
msgid "Interactive Scene"
msgstr "インタラクティブなシーン"

#: ../../pyvista/doc/source/extras/plot_directive.rst:25
msgid "This is a default sphere"
msgstr "これはデフォルトの球体"

#: ../../pyvista/doc/source/extras/plot_directive.rst:40
msgid ""
"You need to install the following packages to build the interactive scene:"
msgstr "インタラクティブシーンをビルドするには、以下のパッケージをインストールする必要があります:"

#: ../../pyvista/doc/source/extras/plot_directive.rst:48
msgid ""
"You need to spin up a local server to view the interactive scene in the "
"documentation."
msgstr "ドキュメントのインタラクティブなシーンを見るには、ローカルサーバーを立ち上げる必要があります。"

#: ../../pyvista/doc/source/extras/plot_directive.rst:55
msgid "Complete Example"
msgstr "完全な例"

#: ../../pyvista/doc/source/extras/plot_directive.rst:57
msgid ""
"The following is a script to build documentation with interactive plots from"
" scratch. The script will:"
msgstr "以下は、インタラクティブなプロットを含むドキュメントをゼロから作成するスクリプトです。このスクリプトは:"

#: ../../pyvista/doc/source/extras/plot_directive.rst:60
msgid "Create a new virtual environment and install dependencies"
msgstr "新しい仮想環境を作成し、依存関係をインストールします"

#: ../../pyvista/doc/source/extras/plot_directive.rst:61
msgid "Create the files required for a simple documentation build:"
msgstr "簡単なドキュメントのビルドに必要なファイルを作成します:"

#: ../../pyvista/doc/source/extras/plot_directive.rst:63
msgid "Sphinx configuration file ``doc/src/conf.py`` with extensions"
msgstr "Sphinx 設定ファイル ``doc/src/conf.py`` と拡張子"

#: ../../pyvista/doc/source/extras/plot_directive.rst:64
msgid ""
"Source file ``doc/src/example.py`` with a simple plot directive example"
msgstr "ソースファイル ``doc/src/example.py`` に簡単なプロットディレクティブの例を示します。"

#: ../../pyvista/doc/source/extras/plot_directive.rst:65
msgid "Index file ``doc/src/index.rst`` for site navigation"
msgstr "サイトナビゲーションのためのインデックスファイル ``doc/src/index.rst``"

#: ../../pyvista/doc/source/extras/plot_directive.rst:67
msgid "Build the documentation"
msgstr "ドキュメントの作成"

#: ../../pyvista/doc/source/extras/plot_directive.rst:68
msgid "Start a local server"
msgstr "ローカルサーバーの起動"

#: ../../pyvista/doc/source/extras/plot_directive.rst:70
msgid ""
"You can copy and paste the script directly into a terminal and execute it. "
"Once the documentation is built, you should be able to view it with a web "
"browser by navigating to ``http://localhost:11000``."
msgstr ""
"スクリプトを直接ターミナルにコピー＆ペーストして実行することができます。 ドキュメントが作成されたら、ウェブブラウザで "
"``http://localhost:11000`` に移動して閲覧することができるはずです。"

#: ../../pyvista/doc/source/extras/plot_directive.rst:137
msgid "API Reference"
msgstr "APIリファレンス"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:1
msgid "Plot directive module."
msgstr "プロットディレクティブモジュール．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:3
msgid "A directive for including a PyVista plot in a Sphinx document."
msgstr "SphinxドキュメントにPyVistaプロットを含めるためのディレクティブ。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:5
msgid ""
"The ``.. pyvista-plot::`` sphinx directive will include an inline ``.png`` "
"image."
msgstr "``.. pyvista-plot::`` ディレクティブは，インラインの ``.png`` イメージを含みます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:8
msgid "The source code for the plot may be included in one of two ways:"
msgstr "プロットのソースコードは，次の2つの方法のいずれかで含まれます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:10
msgid "Using **doctest** syntax::"
msgstr "**doctest** 構文を使用しています．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:18
msgid "**A path to a source file** as the argument to the directive::"
msgstr "**ソースファイルへのパス** を directive の引数として指定します::"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:22
msgid ""
"When a path to a source file is given, the content of the directive may "
"optionally contain a caption for the plot::"
msgstr "ソースファイルへのパスが与えられている場合，ディレクティブの内容には，オプションでプロットのキャプションを含めることができます::"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:29
msgid ""
"Additionally, one may specify the name of a function to call (with no "
"arguments) immediately after importing the module::"
msgstr "さらに，モジュールをインポートした直後に，（引数なしで）呼び出す関数の名前を指定することもできます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:35
msgid "Code blocks containing ``doctest:+SKIP`` will be skipped."
msgstr "``doctest:+SKIP`` を含むコードブロックはスキップされます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:38
msgid "Animations will not be saved, only the last frame will be shown."
msgstr "アニメーションは保存されず，最後のフレームのみが表示されます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:41
msgid ""
"**Options** The ``pyvista-plot`` directive supports the following options:"
msgstr "**Options** ```pyvista-plot`` ディレクティブは，以下のオプションをサポートしています．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:44
msgid "include-source"
msgstr "include-source"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive-1
msgid "bool"
msgstr "bool"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:45
msgid ""
"Whether to display the source code. The default can be changed using the "
"``pyvista_plot_include_source`` variable in :file:`conf.py`."
msgstr ""
"ソースコードを表示するかどうかを指定します．デフォルトは :file:`conf.py` の "
"``pyvista_plot_include_source`` 変数で変更できます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:48
msgid "encoding"
msgstr "encoding"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive-1
msgid "str"
msgstr "str"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:49
msgid ""
"If this source file is in a non-UTF8 or non-ASCII encoding, the encoding "
"must be specified using the ``:encoding:`` option.  The encoding will not be"
" inferred using the ``-*- coding -*-`` metacomment."
msgstr ""
"もし，このソースファイルがUTF8やASCII以外のエンコーディングである場合には， ``:encoding:`` "
"オプションを使ってエンコーディングを指定しなければなりません． このエンコーディングは ``-*- coding -*-`` "
"メタコメントを使って推測されることはありません．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:53
msgid "context"
msgstr "context"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive-1
msgid "None"
msgstr "None"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:54
msgid ""
"If provided, the code will be run in the context of all previous plot "
"directives for which the ``:context:`` option was specified.  This only "
"applies to inline code plot directives, not those run from files."
msgstr ""
"このオプションが指定された場合，コードは ``:context:`` "
"オプションが指定された以前のすべてのプロットディレクティブのコンテクストで実行されます． "
"これはインラインコードのプロットディレクティブにのみ適用され，ファイルから実行されるものには適用されません．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:58
msgid "nofigs"
msgstr "nofigs"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:59
msgid ""
"When setting this flag, the code block will be run but no figures will be "
"inserted.  This is usually useful with the ``:context:`` option."
msgstr ""
"このフラグを設定すると，コードブロックは実行されますが，数字は挿入されません． これは通常 ``:context:`` "
"オプションと一緒に使うと便利です．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:62
msgid "caption"
msgstr "caption"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:63
msgid ""
"If specified, the option's argument will be used as a caption for the "
"figure. This overwrites the caption given in the content, when the plot is "
"generated from a file."
msgstr ""
"指定された場合，オプションの引数が図のキャプションとして使用されます．これは，ファイルからプロットが生成された場合，コンテンツで与えられたキャプションを上書きします．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:67
msgid "force_static"
msgstr "force_static"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:68
msgid ""
"When setting this flag, static images will be used instead of an interactive"
" scene."
msgstr "このフラグを設定すると，インタラクティブシーンの代わりに静止画像が使われます．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:71
msgid "skip"
msgstr "skip"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive-1
msgid "bool, default: True"
msgstr "bool, default: True"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:72
msgid ""
"Whether to skip execution of this directive. If no argument is provided "
"i.e., ``:skip:``, then it defaults to ``:skip: true``.  Default behaviour is"
" controlled by the ``plot_skip`` boolean variable in :file:`conf.py`.  Note "
"that, if specified, this option overrides the ``plot_skip`` configuration."
msgstr ""
"このディレクティブの実行をスキップするかどうか。 引数を指定しない場合、つまり ``:skip:`` の場合、デフォルトは ``:skip: "
"true`` です。 デフォルトの動作は :file:`conf.py` の ``plot_skip`` boolean 変数によって制御されます。 "
"このオプションは ``plot_skip`` の設定を上書きすることに注意してください。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:78
msgid "optional"
msgstr "optional"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:79
msgid ""
"This flag marks the directive for *conditional* execution. Whether the "
"directive is executed is controlled by the ``plot_skip_optional`` boolean "
"variable in :file:`conf.py`."
msgstr ""
"このフラグはディレクティブを *条件付き* で実行することを示します。 ディレクティブが実行されるかどうかは :file:`conf.py` の "
"``plot_skip_optional`` boolean 変数によって制御されます。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:83
msgid ""
"Additionally, this directive supports all the options of the `image` "
"directive, except for *target* (since plot will add its own target).  These "
"include *alt*, *height*, *width*, *scale*, *align*."
msgstr ""
"さらに，このディレクティブは， *target* を除いて， `image` ディレクティブのすべてのオプションをサポートしています (plot "
"が独自のターゲットを追加するため)． これらのオプションには *alt*, *height*, *width*, *scale*, *align* "
"があります．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:88
msgid "**Configuration options**"
msgstr "**設定オプション**"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:90
msgid ""
"Prior to v0.45, these directives conflicted with ``matplotlib``. All "
"directives have been prepended with ``pyvista_``."
msgstr ""
"v0.45以前では、これらのディレクティブは ``matplotlib`` と衝突していました。 すべてのディレクティブの先頭に "
"``pyvista_`` を追加しました。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:94
msgid "The plot directive has the following configuration options:"
msgstr "plotディレクティブには，以下の設定項目があります．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:96
msgid "pyvista_plot_include_source"
msgstr "pyvista_plot_include_source"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:97
msgid ""
"Default value for the ``include-source`` directive option. Default is "
"``True``."
msgstr "``include-source`` ディレクティブオプションのデフォルト値．デフォルトは ``True`` 。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:100
msgid "pyvista_plot_basedir"
msgstr "pyvista_plot_basedir"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:101
msgid ""
"Base directory, to which ``plot::`` file names are relative to.  If ``None``"
" or unset, file names are relative to the directory where the file "
"containing the directive is."
msgstr ""
"ベースとなるディレクトリで， ``plot::`` のファイル名の相対パスを指定します．  ``None`` "
"または未設定の場合には，ファイル名はそのディレクティブを含むファイルがあるディレクトリに相対します．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:105
msgid "pyvista_plot_html_show_formats"
msgstr "pyvista_plot_html_show_formats"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:106
msgid "Whether to show links to the files in HTML. Default ``True``."
msgstr "ファイルへのリンクをHTMLで表示するかどうか．デフォルトは ``True`` ．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:108
msgid "pyvista_plot_template"
msgstr "pyvista_plot_template"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:109
msgid "Provide a customized Jinja2 template for preparing restructured text."
msgstr "再構成されたテキストを作成するためのカスタマイズされた Jinja2 テンプレートを提供します．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:111
msgid "pyvista_plot_setup"
msgstr "pyvista_plot_setup"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:112
msgid "Python code to be run before every plot directive block."
msgstr "各プロットディレクティブブロックの前に実行されるPythonコード．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:114
msgid "pyvista_plot_cleanup"
msgstr "pyvista_plot_cleanup"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:115
msgid "Python code to be run after every plot directive block."
msgstr "各プロットディレクティブブロックの後に実行されるPythonコード．"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:117
msgid "pyvista_plot_skip"
msgstr "pyvista_plot_skip"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive-1
msgid "bool, default: False"
msgstr "bool, default: False"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:118
msgid "Default value for the ``skip`` directive option."
msgstr "ディレクティブオプション ``skip`` のデフォルト値。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:120
msgid "pyvista_plot_skip_optional"
msgstr "pyvista_plot_skip_optional"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:121
msgid "Whether to skip execution of ``optional`` directives."
msgstr "``オプションの`` ディレクティブの実行をスキップするかどうか。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.5/x64/lib/python3.13/site-packages/pyvista/ext/plot_directive.pydocstring
#: of pyvista.ext.plot_directive:123
msgid ""
"These options can be set by defining global variables of the same name in "
":file:`conf.py`."
msgstr "これらのオプションは， :file:`conf.py` で同名のグローバル変数を定義することで設定できます．"

#: ../../pyvista/doc/source/extras/pyinstaller.rst:4
msgid "Freezing PyVista with PyInstaller"
msgstr "PyInstallerを使用したPyVistaのフリーズ"

#: ../../pyvista/doc/source/extras/pyinstaller.rst:5
msgid ""
"You can make some fantastic standalone programs with ``pyinstaller`` and "
"``pyvista``, and you can even make a graphical user interface incorporating "
"``PyQt5`` or ``pyside2``.  Depending on your version of VTK, this requires "
"some extra steps to setup."
msgstr ""
"``pyinstaller`` や ``pyvista`` を使って素晴らしいスタンドアローンのプログラムを作ることができますし， ``PyQt5`` "
"や ``pyside2`` "
"を組み込んだグラフィカルユーザインタフェースを作ることもできます．VTKのバージョンによっては，これをセットアップするために追加のステップが必要です．"

#: ../../pyvista/doc/source/extras/pyinstaller.rst:10
msgid ""
"When running VTK v9, you need to add several additional ``hiddenimports``.  "
"For clarity and completeness, create a spec file (we'll name it "
"``pyvista.spec``) following the directions given at `Using Spec Files "
"<https://pyinstaller.readthedocs.io/en/stable/spec-files.html>`__.  Modify "
"the ``Analysis`` and add the following hidden imports:"
msgstr ""
"VTK v9を実行しているときは，さらにいくつかの ``hiddenimports`` "
"を追加する必要があります．説明をわかりやすく，完全なものにするために， `Specファイルを使う "
"<https://pyinstaller.readthedocs.io/en/stable/spec-files.html>`__ "
"の指示に従ってスペックファイル(私たちは ``pyvista.spec`` と名付けます)を作成してください． ``Analysis`` "
"を修正し，次の非表示のインポートを追加します．"

#: ../../pyvista/doc/source/extras/pyinstaller.rst:32
msgid ""
"From there, you can freeze an application using ``pyvista`` and create a "
"standalone application."
msgstr "そこから， ``pyvista`` を使用してアプリケーションをフリーズし，スタンドアロンアプリケーションを作成できます．"

#: ../../pyvista/doc/source/extras/pytest_plugin.rst:4
msgid "PyVista pytest Plugin"
msgstr "PyVista pytest プラグイン"

#: ../../pyvista/doc/source/extras/pytest_plugin.rst:6
msgid ""
"PyVista provides a pytest plugin `pytest-pyvista "
"<https://pytest.pyvista.org/>`_ for image regression testing."
msgstr ""
"PyVistaは，画像の回帰テストを行うためのpytestプラグイン `pytest-pyvista "
"<https://pytest.pyvista.org/>`_ を提供しています．"

#: ../../pyvista/doc/source/extras/vtk_data.rst:3
msgid "Using Local VTK-Data"
msgstr "ローカルVTKデータの使用"

#: ../../pyvista/doc/source/extras/vtk_data.rst:5
msgid ""
"Normally, the PyVista examples will be downloaded from the `pyvista/vtk-data"
" repository <https://github.com/pyvista/vtk-data>`_. Alternatively, the "
"entire pyvista/vtk-data repository can be supplied as a local folder. If the"
" ``PYVISTA_VTK_DATA`` environment variable is set to the folder path, the "
"examples will instead be copied from the local folder."
msgstr ""
"通常，PyVista のサンプルは， `pyvista/vtk-data リポジトリ <https://github.com/pyvista/vtk-"
"data>`_ からダウンロードします．また，pyvista/vtk-data リポジトリ全体をローカルフォルダとして提供することもできます．環境変数 "
"``PYVISTA_VTK_DATA`` にフォルダパスが設定されている場合は，代わりに例題がローカルフォルダからコピーされます．"

#: ../../pyvista/doc/source/extras/vtk_data.rst:11
msgid "This example uses a cloned vtk-data repository:"
msgstr "この例では，クローンされたvtk-dataリポジトリを使用しています．"

#: ../../pyvista/doc/source/extras/vtk_role.rst:4
msgid "Sphinx VTK Role"
msgstr "Sphinx VTK Role"

#: ../../pyvista/doc/source/extras/vtk_role.rst:8
msgid ""
"PyVista's documentation uses the Sphinx extension "
"https://github.com/pyvista/vtk-xref to link directly to `VTK's documentation"
" <https://vtk.org/doc/nightly/html/index.html>`_."
msgstr ""
"PyVistaのドキュメントでは、 `VTK's documentation "
"<https://vtk.org/doc/nightly/html/index.html>`_ に直接リンクするためにSphinx拡張 "
"https://github.com/pyvista/vtk-xref を使用しています。"

#: ../../pyvista/doc/source/extras/vtk_role.rst:11
msgid ""
"This extension adds the ``:vtk:`` role to allow writing, for example, "
"``:vtk:`vtkImageData``` inside docstrings to link directly to the "
"``vtkImageData`` documentation. This will render as :vtk:`vtkImageData`."
msgstr ""
"この拡張は ``:vtk:`` ロールを追加し、例えば ``:vtk:`vtkImageData`` を docstring の中に記述することで、 "
"``vtkImageData`` ドキュメントに直接リンクできるようにします。 これは :vtk:`vtkImageData` "
"としてレンダリングされます。"

#: ../../pyvista/doc/source/extras/vtk_role.rst:15
msgid ""
"See `vtk-xref's repository <https://github.com/pyvista/vtk-xref>`_ for "
"installation and usage details for adding the ``:vtk:`` role to your "
"project."
msgstr ""
"プロジェクトに ``:vtk:`` ロールを追加するためのインストールと使い方の詳細は `vtk-xref のリポジトリ "
"<https://github.com/pyvista/vtk-xref>`_ を参照してください。"
