# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2023, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.39.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-10 01:20+0000\n"
"PO-Revision-Date: 2021-01-06 02:34+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2023\n"
"Language-Team: Japanese (https://www.transifex.com/tkoyama010/teams/112279/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pyvista/doc/extras/building_vtk.rst:4
msgid "Building VTK"
msgstr "VTKの構築"

#: ../../pyvista/doc/extras/building_vtk.rst:5
msgid ""
"Kitware provides Python wheels for VTK at `PyPI VTK "
"<https://pypi.org/project/vtk/>`_, but there are situations where you may "
"need to build VTK from source (e.g. new release of Python, EGL rendering, "
"additional features, etc).  As ``pyvista`` does not provide ``vtk``, you "
"will have to either build it manually or install the default wheel from "
"PyPI."
msgstr ""
"Kitwareは `PyPI VTK <https://pypi.org/project/vtk/>`_ "
"でVTK用のPythonホイールを提供していますが，場合によってはソースからVTKをビルドする必要があります(たとえば，Pythonの新リリース，EGLレンダリング，追加機能など)．"
" ``pyvista`` は ``vtk`` を提供しないため，手動でビルドするか，PyPIからデフォルトのホイールをインストールする必要があります．"

#: ../../pyvista/doc/extras/building_vtk.rst:13
msgid ""
"Should you need a prebuilt wheel, a variety of prebuilt wheels can be found "
"at `pyvista-wheels <https://github.com/pyvista/pyvista-wheels>`_, but you "
"may be better off building your own. These are not \"official\" wheels and "
"will soon be removed in favor of more \"official\" wheel variants from VTK "
"directly."
msgstr ""
"既成のホイールが必要な場合は，`pyvista-wheels <https://github.com/pyvista/pyvista-wheels>`_"
" にさまざまな既成のホイールがありますが，自分で作った方がよいかもしれません．これらは \"公式\" なホイールではなく、VTK が直接提供する "
"\"公式\" なホイールの変種を優先して、すぐに削除される予定です。"

#: ../../pyvista/doc/extras/building_vtk.rst:18
msgid ""
"Reference the official directions for `Building VTK "
"<https://gitlab.kitware.com/vtk/vtk/-/blob/master/Documentation/dev/build.md>`_."
" The following directions assume you want to build a Python wheel non-"
"standard situations like EGL."
msgstr ""
"`VTKのビルド方法 "
"<https://gitlab.kitware.com/vtk/vtk/-/blob/master/Documentation/dev/build.md>`_"
" を参照してください．以下の説明は，EGLのような非標準的な状況でPythonホイールをビルドしたい場合を想定しています．"

#: ../../pyvista/doc/extras/building_vtk.rst:25
msgid "Building Wheels"
msgstr "ホイールを作る"

#: ../../pyvista/doc/extras/building_vtk.rst:26
msgid ""
"Building VTK from source is fairly straightforward.  Using the default build"
" settings, build a Python wheel of VTK using ``ninja`` using the following "
"script.  This script uses system python3, but you can use any modern Python "
"version.  For some additional useful options, see the `conda-forge recipe "
"<https://github.com/conda-forge/vtk-"
"feedstock/blob/master/recipe/build.sh>`__. Most of the ones below are "
"designed to reduce the build time and resulting wheel size."
msgstr ""
"ソースからVTKを構築するのはかなりストレートです．デフォルトのビルド設定を使用し，次のスクリプトを使用して ``ninja`` "
"を使用し，VTKのPythonホイールをビルドします．このスクリプトはpython "
"3を使用していますが，最新のPythonバージョンを使用することができます．その他の便利なオプションについては， `conda-forge recipe"
" <https://github.com/conda-forge/vtk-"
"feedstock/blob/master/recipe/build.sh>`__ "
"を参照してください．以下のほとんどのオプションは，構築時間を短縮し，ホイールサイズを小さくするように設計されています．"

#: ../../pyvista/doc/extras/building_vtk.rst:35
msgid ""
"We have also published some convenient CMake configurations files that you "
"can adopt from `banesullivan/vtk-cmake <https://github.com/banesullivan/vtk-"
"cmake>`. These configurations cover the build variants described here and "
"make the process of reproducibly building VTK wheel variants more "
"straightforward."
msgstr ""
"また、便利な CMake 設定ファイルをいくつか公開しましたので、 `banesullivan/vtk-cmake "
"<https://github.com/banesullivan/vtk-cmake>` "
"から採用することができます。これらの設定は、ここで説明したビルドのバリエーションをカバーし、VTKホイールのバリエーションを再現性よくビルドするプロセスをより簡単にします。"

#: ../../pyvista/doc/extras/building_vtk.rst:89
msgid "Off-Screen Plotting GPU Support"
msgstr "オフスクリーンプロットのGPUサポート"

#: ../../pyvista/doc/extras/building_vtk.rst:90
msgid ""
"VTK supports rendering with EGL, enabling rapid off-screen rendering using "
"GPU hardware acceleration without installing a virtual framebuffer.  The "
"default VTK wheels are not built with this feature, but you can build VTK "
"for off-screen plotting using GPU support by modifying the above ``cmake`` "
"command with:"
msgstr ""
"VTKはEGLを使用したレンダリングをサポートしており，仮想フレームバッファをインストールせずにGPUハードウェアアクセラレーションを使用して迅速なオフスクリーンレンダリングを可能にします．デフォルトのVTKホイールにはこの機能はありませんが，上記の"
" ``cmake`` コマンドを次のように変更することで，GPUサポートを使用したオフスクリーンVTKを作成できます．"

#: ../../pyvista/doc/extras/building_vtk.rst:134
msgid ""
"This disables any plotting using the X server, so be prepared to use this "
"module only on a headless display where you either intend to save static "
"images or stream the render window to another computer with a display (e.g "
"using ``pyvista.set_jupyter_backend('server')`` and jupyterlab). In other "
"words, this wheel will make VTK unusable outside of an off-screen "
"environment, so only plan on installing it on a headless system without an X"
" server."
msgstr ""
"これにより，Xサーバを使用したすべてのプロットが無効になるため，このモジュールは，静止イメージを保存するか，またはレンダーウィンドウをディスプレイ(例:"
" ``pyvista.set_jupyter_backend('server')`` "
"とjupyterlab)とともに別のコンピュータにストリーミングする予定のあるヘッドレスディスプレイでのみ使用するようにしてください．言い換えれば，このホイールはVTKをスクリーン外の環境では使えなくするので，Xサーバのないヘッドレスシステムにインストールすることだけを計画してください．"

#: ../../pyvista/doc/extras/building_vtk.rst:144
msgid "Building OSMesa"
msgstr "OSMesaの構築"

#: ../../pyvista/doc/extras/building_vtk.rst:145
msgid ""
"OSMesa provides higher visualization performance on CPU based hosts. Use "
"this instead of ``xvfb``:"
msgstr "OSMesaはCPUベースのホストでより高い可視化性能を提供します．xvfb`` の代わりに，これを使用してください．"

#: ../../pyvista/doc/extras/building_vtk.rst:181
msgid "Wheels will be generated in the ``dist`` directory."
msgstr "Wheels は ``dist`` ディレクトリに生成されます．"

#: ../../pyvista/doc/extras/building_vtk.rst:185
msgid "Building ManyLinux Wheels"
msgstr "ManyLinux wheel の構築"

#: ../../pyvista/doc/extras/building_vtk.rst:186
msgid ""
"The above directions are great for building a local build of VTK, but these "
"wheels are difficult to share outside your local install given issues with "
"ABI compatibility due to the version of Linux they were built on.  You can "
"work around this by building your wheels using a `manylinux "
"<https://github.com/pypa/manylinux>`_ docker image."
msgstr ""
"上記の方向性はVTKのローカルビルドを構築するのに適していますが，これらのwheelは，それらが構築されたLinuxのバージョンによるABI互換性の問題を考えると，ローカルインストールの外部で共有することは困難です．これを回避するには，"
" `manylinux <https://github.com/pypa/manylinux>`_ "
"のdockerイメージを使ってwheelをビルドします．"

#: ../../pyvista/doc/extras/building_vtk.rst:192
msgid ""
"To do this, create a ``build_wheels.sh`` with the following contents in the "
"``git clone``d ``vtk`` directory, and give it executable permissions "
"(``chmod +x build_wheels.sh``):"
msgstr ""
"そのためには， ``git clone``d ``vtk`` ディレクトリに以下の内容の ``build_wheels.sh`` "
"を作成し，実行権限を与えます (``chmod +x build_wheels.sh``):"

#: ../../pyvista/doc/extras/building_vtk.rst:252
msgid "This script can then be called with:"
msgstr "このスクリプトは，次のコマンドで呼び出すことができます:"

#: ../../pyvista/doc/extras/building_vtk.rst:261
msgid "You should end up with a ``build/wheelhouse/vtk-*.whl``."
msgstr "最終的に ``build/wheelhouse/vtk-*.whl`` ができあがるはずです．"

#: ../../pyvista/doc/extras/building_vtk.rst:264
msgid ""
"To build the EGL version of the wheel, follow the directions in the previous"
" section.  Add ``mesa-libEGL-devel`` to the installation dependencies."
msgstr "EGLバージョンのwheelを作成するには，前のセクションの指示に従ってください．インストール依存関係にAAAAAを追加します．"

#: ../../pyvista/doc/extras/building_vtk.rst:270
msgid "Building Python VTK Wheel on Raspberry Pi (64-bit)"
msgstr "Raspberry Pi上のPython VTK Wheel(64ビット)構築"

#: ../../pyvista/doc/extras/building_vtk.rst:271
msgid ""
"While it's possible to build on 32-bit Raspberry Pi (ARMv7), there are "
"several issues that crop up when building wheels for the 32-bit version (see"
" `manylinux issue 84 <https://github.com/pypa/manylinux/issues/84>`_).  "
"Should you attempt to build on 32-bit, try building the wheel using "
"`dockcross <https://github.com/dockcross/dockcross>`_ as you may run into "
"memory limitations otherwise (especially with only 1 GB RAM)."
msgstr ""
"32ビット版Raspberry Pi(ARMv7)で構築することは可能だが，32ビット版のホイールを構築する際にはいくつかの問題が生じます( "
"`manylinux issue 84 <https://github.com/pypa/manylinux/issues/84>`_ "
"を参照)．32ビットで構築しようとする場合は， `dockcross "
"<https://github.com/dockcross/dockcross>`_ "
"を使ってwheelを構築してみてください．そうしないとメモリの制限が生じる可能性があります(特に1GBのRAMしかない場合)．"

#: ../../pyvista/doc/extras/building_vtk.rst:279
msgid ""
"Building the ``aarch64`` manylinux wheel can be done via docker with the "
"``quay.io/pypa/manylinux2014_aarch64`` image.  Run the following:"
msgstr ""
"``aarch64``  manylinux wheel のビルドは， ``quay.io/pypa/manylinux2014_aarch64`` "
"イメージを使ったDockerで行うことができます．以下を実行します:"

#: ../../pyvista/doc/extras/building_vtk.rst:290
msgid "Where ``build_wheels.sh`` is:"
msgstr "ここで， ``build_wheels.sh`` は次のようになります:"

#: ../../pyvista/doc/extras/building_vtk.rst:350
msgid ""
"Be sure to either enable or disable ``DVTK_OPENGL_HAS_EGL`` depending on if "
"you want ``EGL`` enabled for your wheel."
msgstr ""
"wheelで ``EGL`` を有効にするかどうかに応じて， ``DVTK_OPENGL_HAS_EGL`` を有効または無効にしてください．"

#: ../../pyvista/CONTRIBUTING.rst:2
msgid "Contributing"
msgstr "貢献"

#: ../../pyvista/CONTRIBUTING.rst:4
msgid ""
"We absolutely welcome contributions and we hope that this guide will "
"facilitate an understanding of the PyVista code repository. It is important "
"to note that the PyVista software package is maintained on a volunteer basis"
" and thus we need to foster a community that can support user questions and "
"develop new features to make this software a useful tool for all users."
msgstr ""
"私たちは貢献を心から歓迎し，このガイドがPyVistaコードリポジトリの理解を促進することを願っています．PyVistaソフトウェアパッケージはボランティアベースでメンテナンスされていることに注意してください．したがって，このソフトウェアをすべてのユーザにとって有用なツールにするために，ユーザの質問をサポートし，新しい機能を開発できるコミュニティを育成する必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:11
msgid ""
"This page is dedicated to outline where you should start with your question,"
" concern, feature request, or desire to contribute."
msgstr "このページでは，質問，懸念，機能のリクエスト，または貢献したいことから始めるべき概要を説明します．"

#: ../../pyvista/CONTRIBUTING.rst:15
msgid "Being Respectful"
msgstr "尊敬の念を抱くこと"

#: ../../pyvista/CONTRIBUTING.rst:17
msgid ""
"Please demonstrate empathy and kindness toward other people, other software,"
" and the communities who have worked diligently to build (un-)related tools."
msgstr "他の人々，他のソフトウェア，そして（関連性のない）ツールを作るために熱心に働いてきたコミュニティに対して，共感と優しさを示してください．"

#: ../../pyvista/CONTRIBUTING.rst:20
msgid ""
"Please do not talk down in Pull Requests, Issues, or otherwise in a way that"
" portrays other people or their works in a negative light."
msgstr "Pull RequestsやIssuesなどで，他人やその作品を否定するような言い方をしないでください．"

#: ../../pyvista/CONTRIBUTING.rst:24
msgid "Cloning the Source Repository"
msgstr "ソースリポジトリのクローン作成"

#: ../../pyvista/CONTRIBUTING.rst:26
msgid ""
"You can clone the source repository from "
"`<https://github.com/pyvista/pyvista>`_ and install the latest version by "
"running:"
msgstr ""
"次のコマンドを実行して， `<https://github.com/pyvista/pyvista>`_ "
"からソースリポジトリをクローンし，最新バージョンをインストールできます．"

#: ../../pyvista/CONTRIBUTING.rst:37
msgid "Questions"
msgstr "質問"

#: ../../pyvista/CONTRIBUTING.rst:39
msgid ""
"For general questions about the project, its applications, or about software"
" usage, please create a discussion in the `Discussions "
"<https://github.com/pyvista/pyvista/discussions>`_ repository where the "
"community can collectively address your questions. You are also welcome to "
"join us on `Slack <http://slack.pyvista.org>`_ or send one of the developers"
" an email. The project support team can be reached at info@pyvista.org"
msgstr ""
"プロジェクト，そのアプリケーション，またはソフトウェアの使用についての一般的な質問については，コミュニティが集合的にあなたの質問に答えることができる "
"`Discussions <https://github.com/pyvista/pyvista/discussions>`_ "
"リポジトリでディスカッションを作成してください．また， `Slack <http://slack.pyvista.org>`_ "
"に参加したり，開発者の一人に電子メールを送ったりすることもできます．プロジェクト・サポート・チームの連絡先はinfo@pyvista.orgです．"

#: ../../pyvista/CONTRIBUTING.rst:47
msgid ""
"For more technical questions, you are welcome to create an issue on the "
"`issues page <https://github.com/pyvista/pyvista/issues>`_ which we will "
"address promptly. Through posting on the issues page, your question can be "
"addressed by community members with the needed expertise and the information"
" gained will remain available on the issues page for other users."
msgstr ""
"より技術的な質問については， `issues ページ <https://github.com/pyvista/pyvista/issues>`_ "
"で問題を作成していただければ，すぐに対処いたします．問題のページに投稿することで，必要な専門知識を持つコミュニティメンバーが問題に対処でき，得られた情報は他のユーザーの問題のページで引き続き利用できます．"

#: ../../pyvista/CONTRIBUTING.rst:55
msgid "Reporting Bugs"
msgstr "バグの報告"

#: ../../pyvista/CONTRIBUTING.rst:57
msgid ""
"If you stumble across any bugs, crashes, or concerning quirks while using "
"code distributed here, please report it on the `issues page "
"<https://github.com/pyvista/pyvista/issues>`_ with an appropriate label so "
"we can promptly address it. When reporting an issue, please be overly "
"descriptive so that we may reproduce it. Whenever possible, please provide "
"tracebacks, screenshots, and sample files to help us address the issue."
msgstr ""
"ここで配布されているコードの使用中にバグ，クラッシュ，または奇妙な点に遭遇した場合は，すぐに対処できるよう適切なラベルを付けて `issues ページ "
"<https://github.com/pyvista/pyvista/issues>`_ "
"に報告してください．問題を報告する際は，再現できるように，過度に記述してください．可能な限り，トレースバック，スクリーンショット，およびサンプルファイルを提供してください．"

#: ../../pyvista/CONTRIBUTING.rst:66
msgid "Feature Requests"
msgstr "機能の要望"

#: ../../pyvista/CONTRIBUTING.rst:68
msgid ""
"We encourage users to submit ideas for improvements to PyVista code base! "
"Please create an issue on the `issues page "
"<https://github.com/pyvista/pyvista/issues>`_ with a *Feature Request* label"
" to suggest an improvement. Please use a descriptive title and provide ample"
" background information to help the community implement that functionality. "
"For example, if you would like a reader for a specific file format, please "
"provide a link to documentation of that file format and possibly provide "
"some sample files with screenshots to work with. We will use the issue "
"thread as a place to discuss and provide feedback."
msgstr ""
"PyVistaのコードベースを改善するためのアイデアを投稿することを推奨します! `issuesページ "
"<https://github.com/pyvista/pyvista/issues>`_ に *Feature Request* "
"ラベルをつけて改善を提案してください．説明的なタイトルを使用し，コミュニティがその機能を実装するのに役立つ十分な背景情報を提供してください．たとえば，特定のファイル形式のリーダーが必要な場合は，そのファイル形式のドキュメントへのリンクを提供し，操作するスクリーンショットを含むサンプルファイルを提供してください．問題のスレッドをディスカッションの場として使用し，フィードバックを提供します．"

#: ../../pyvista/CONTRIBUTING.rst:80
msgid "Contributing New Code"
msgstr "新しいコードの提供"

#: ../../pyvista/CONTRIBUTING.rst:82
msgid ""
"If you have an idea for how to improve PyVista, please first create an issue"
" as a feature request which we can use as a discussion thread to work "
"through how to implement the contribution."
msgstr ""
"PyVistaを改善する方法についてアイデアがある場合は，まず機能リクエストとして問題を作成してください．これは，コントリビューションの実装方法を検討するためのスレッドとして使用できます．"

#: ../../pyvista/CONTRIBUTING.rst:86
msgid ""
"Once you are ready to start coding and develop for PyVista, please see the "
"`Development Practices <#development-practices>`_ section for more details."
msgstr ""
"PyVista用のコーディングと開発を始める準備ができたら，詳細については `Development Practices <#development-"
"practices>`_ セクションを参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:91
msgid "Licensing"
msgstr "ライセンス"

#: ../../pyvista/CONTRIBUTING.rst:93
msgid ""
"All contributed code will be licensed under The MIT License found in the "
"repository. If you did not write the code yourself, it is your "
"responsibility to ensure that the existing license is compatible and "
"included in the contributed files or you can obtain permission from the "
"original author to relicense the code."
msgstr ""
"コントリビュートされたコードはすべて，リポジトリーにあるMITライセンスの下でライセンスされます．自分でコードを作成しなかった場合は，既存のライセンスに互換性があり，コントリビュートされたファイルに含まれていることを確認するか，元の作成者からコードを再ライセンスする許可を得る必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:102
msgid "Development Practices"
msgstr "開発手法"

#: ../../pyvista/CONTRIBUTING.rst:104
msgid ""
"This section provides a guide to how we conduct development in the PyVista "
"repository. Please follow the practices outlined here when contributing "
"directly to this repository."
msgstr ""
"この節では，PyVistaリポジトリで開発を行う方法について説明します．このリポジトリに直接コントリビュートする場合は，ここで説明するプラクティスに従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:109
msgid "Guidelines"
msgstr "ガイドライン"

#: ../../pyvista/CONTRIBUTING.rst:111
msgid ""
"Through direct access to the Visualization Toolkit (VTK) via direct array "
"access and intuitive Python properties, we hope to make the entire VTK "
"library easily accessible to researchers of all disciplines. To further "
"PyVista towards being the de facto Python interface to VTK, we need your "
"help to make it even better!"
msgstr ""
"配列への直接アクセスと直感的なPythonプロパティを介したVisualization Toolkit (VTK) "
"への直接アクセスにより，VTKライブラリ全体をあらゆる分野の研究者が容易にアクセスできるようにしたいと考えています．PyVistaをVTKの事実上のPythonインターフェースにするためには，さらに改善するために皆さんの助けが必要です!"

#: ../../pyvista/CONTRIBUTING.rst:117
msgid ""
"If you want to add one or two interesting analysis algorithms as filters, "
"implement a new plotting routine, or just fix 1-2 typos - your efforts are "
"welcome!"
msgstr ""
"1つか2つの興味深い解析アルゴリズムをフィルタとして追加したい場合，新しいプロットルーチンを実装したい場合，あるいは1-2のタイプミスを修正したい場合，あなたの努力は大歓迎です!"

#: ../../pyvista/CONTRIBUTING.rst:121
msgid "There are three general coding paradigms that we believe in:"
msgstr "私たちが信じている3つの一般的なコーディングパラダイムがあります．"

#: ../../pyvista/CONTRIBUTING.rst:123
msgid ""
"**Make it intuitive**. PyVista’s goal is to create an intuitive and easy to "
"use interface back to the VTK library. Any new features should have "
"intuitive naming conventions and explicit keyword arguments for users to "
"make the bulk of the library accessible to novice users."
msgstr ""
"**直感的な操作**． "
"PyVistaの目標は，直感的で使いやすいインターフェースをVTKライブラリーに戻すことです．すべての新機能には，初心者ユーザがライブラリの大部分にアクセスできるように，直感的な命名規則と明示的なキーワード引数が必要です．"

#: ../../pyvista/CONTRIBUTING.rst:129
msgid ""
"**Document everything!** At the least, include a docstring for any method or"
" class added. Do not describe what you are doing but why you are doing it "
"and provide a simple example for the new features."
msgstr ""
"**すべてをドキュメント化します!** "
"少なくとも，追加されたメソッドまたはクラスのdocstringを含めます．何をしているのかを説明するのではなく，なぜそうしているのかを説明し，新しい機能の簡単な例を示します．"

#: ../../pyvista/CONTRIBUTING.rst:133
msgid ""
"**Keep it tested**. We aim for a high test coverage. See testing for more "
"details."
msgstr "**テストを続ける**． 高いテストカバレッジを目指します．詳細については， テストを参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:136
msgid "There are two important copyright guidelines:"
msgstr "著作権に関する2つの重要なガイドラインがあります．"

#: ../../pyvista/CONTRIBUTING.rst:138
msgid ""
"Please do not include any data sets for which a license is not available or "
"commercial use is prohibited. Those can undermine the license of the whole "
"projects."
msgstr ""
"ライセンスが利用できない，または商用使用が禁止されているデータセットは含めないでください．それらはすべてのプロジェクトのライセンスを損なう可能性がある．"

#: ../../pyvista/CONTRIBUTING.rst:142
msgid ""
"Do not use code snippets for which a license is not available (e.g. from "
"stackoverflow) or commercial use is prohibited. Those can undermine the "
"license of the whole projects."
msgstr ""
"ライセンスが利用できないコードスニペット(stackoverflowなど )や商用使用が禁止されているコードスニペットは使用しないでください．それらはすべてのプロジェクトのライセンスを損なう可能性があります．"

#: ../../pyvista/CONTRIBUTING.rst:146
msgid ""
"Please also take a look at our `Code of Conduct "
"<https://github.com/pyvista/pyvista/blob/main/CODE_OF_CONDUCT.md>`_."
msgstr ""
"私達の `Code of Conduct "
"<https://github.com/pyvista/pyvista/blob/main/CODE_OF_CONDUCT.md>`_ もご覧ください．"

#: ../../pyvista/CONTRIBUTING.rst:150
msgid "Contributing to PyVista through GitHub"
msgstr "GitHub経由でPyVistaにコントリビュートする"

#: ../../pyvista/CONTRIBUTING.rst:152
msgid ""
"To submit new code to pyvista, first fork the `pyvista GitHub Repo "
"<https://github.com/pyvista/pyvista>`_ and then clone the forked repository "
"to your computer. Then, create a new branch based on the `Branch Naming "
"Conventions Section <#branch-naming-conventions>`_ in your local repository."
msgstr ""
"新しいコードをpyvistaに送信するには，まず `pyvista GitHub リポジトリ "
"<https://github.com/pyvista/pyvista>`_ "
"をフォークし，フォークしたリポジトリをあなたのコンピュータにクローンします．次に，ローカルリポジトリの `Branch Naming "
"Conventions Section <#branch-naming-conventions>`_ に基づいて新しいブランチを作成します．"

#: ../../pyvista/CONTRIBUTING.rst:158
msgid ""
"Next, add your new feature and commit it locally. Be sure to commit "
"frequently as it is often helpful to revert to past commits, especially if "
"your change is complex. Also, be sure to test often. See the `Testing "
"Section <#testing>`_ below for automating testing."
msgstr ""
"次に，新しい機能を追加し，ローカルでコミットします．特に変更が複雑な場合は，過去のコミットに戻すことが役立つことが多いので，頻繁にコミットするようにしてください．また，頻繁に検査をしてください．テストの自動化については，以下の"
" `テストのセクション <#testing>`_ を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:163
msgid ""
"When you are ready to submit your code, create a pull request by following "
"the steps in the `Creating a New Pull Request section <#creating-a-new-pull-"
"request>`_."
msgstr ""
"コードをサブミットする準備ができたら， `Creating a New Pull Request section <#creating-a-new-"
"pull-request>`_ の手順に従ってプルリクエストを作成します．"

#: ../../pyvista/CONTRIBUTING.rst:168
msgid "Coding Style"
msgstr "コーディングスタイル"

#: ../../pyvista/CONTRIBUTING.rst:170
msgid ""
"We adhere to `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_ wherever "
"possible, except that line widths are permitted to go beyond 79 characters "
"to a max of 99 characters for code. This should tend to be the exception "
"rather than the norm. A uniform code style is enforced by `black "
"<https://github.com/psf/black>`_ to prevent energy wasted on style "
"disagreements."
msgstr ""
"行幅が79文字を超えて99文字コードまで許されることを除き，可能な限り `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`_ "
"に準拠します．これは標準ではなく，むしろ例外となる傾向があるはずです．スタイルの不一致によるエネルギーの浪費を防ぐために， `black "
"<https://github.com/psf/black>`_ によって統一されたコードスタイルが強制されます．"

#: ../../pyvista/CONTRIBUTING.rst:177
msgid ""
"As for docstrings, follow the guidelines specified in `PEP 8 Maximum Line "
"Length <https://www.python.org/dev/peps/pep-0008/#maximum-line-length>`_ of "
"limiting docstrings to 72 characters per line. This follows the directive:"
msgstr ""
"docstringについては，`PEP 8 Maximum Line Length "
"<https://www.python.org/dev/peps/pep-0008/#maximum-line-length>`_ "
"で規定されているガイドラインに従って，1行あたり72文字に制限してください．これは指令に従います．"

#: ../../pyvista/CONTRIBUTING.rst:183
msgid ""
"Some teams strongly prefer a longer line length. For code maintained "
"exclusively or primarily by a team that can reach agreement on this issue, "
"it is okay to increase the line length limit up to 99 characters, provided "
"that comments and docstrings are still wrapped at 72 characters."
msgstr ""
"チームによっては，より長い行数を強く希望する場合もあります．この問題に関して合意に達することができるチームによってのみ，または主にメンテナンスされているコードについては，コメントとdocstringを72文字で折り返すことを条件に，行の長さの制限を99文字まで増やしてもかまいません．"

#: ../../pyvista/CONTRIBUTING.rst:189
msgid ""
"Outside of PEP 8, when coding please consider `PEP 20 – The Zen of Python "
"<https://www.python.org/dev/peps/pep-0020/>`_. When in doubt:"
msgstr ""
"PEP 8以外でコーディングする場合は， `PEP 20 – The Zen of Python "
"<https://www.python.org/dev/peps/pep-0020/>`_ を考慮してください．"

#: ../../pyvista/CONTRIBUTING.rst:196
msgid ""
"PyVista uses `pre-commit`_ to enforce PEP8 and other styles automatically. "
"Please see the `Style Checking section <#style-checking>`_ for further "
"details."
msgstr ""
"PyVistaは `pre-commit`_ を使用して，PEP8やその他のスタイルを自動的に強制します．詳しくは `スタイルチェックのセクション "
"<#style-checking>`_ を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:202
msgid "Docstrings"
msgstr "Docstrings"

#: ../../pyvista/CONTRIBUTING.rst:204
msgid ""
"PyVista uses Python docstrings to create reference documentation for our "
"Python APIs. Docstrings are read by developers, interactive Python users, "
"and readers of our online documentation. This section describes how to write"
" these docstrings for PyVista."
msgstr ""
"PyVistaでは，Python docstringsを使用して，Python "
"APIのリファレンスドキュメントを作成しています．Docstringsは，開発者や対話型のPythonユーザー，そしてオンラインドキュメントの読者に読まれます．このセクションでは，PyVista用のdocstringの書き方について説明します．"

#: ../../pyvista/CONTRIBUTING.rst:209
msgid ""
"PyVista follows the ``numpydoc`` style for its docstrings. Please follow the"
" `numpydoc Style Guide`_ in all ways except for the following:"
msgstr ""
"PyVistaはdocstringのスタイルとして ``numpydoc`` に従っています．以下を除き，すべて `numpydoc Style "
"Guide`_ に従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:212
msgid ""
"Be sure to describe all ``Parameters`` and ``Returns`` for all public "
"methods."
msgstr "すべてのパブリックメソッドの ``Parameters`` と ``Returns`` を必ず記述してください．"

#: ../../pyvista/CONTRIBUTING.rst:214
msgid ""
"We strongly encourage you to add an example section. PyVista is a visual "
"library, so adding examples that show a plot will really help users figure "
"out what individual methods do."
msgstr ""
"Exampleのセクションを追加することを強くお勧めします．PyVistaは，ジュアルなライブラリなので，プロットを示す例を追加することは，ユーザーが個々のメソッドが何を行うかを理解するのにとても役立ちます．"

#: ../../pyvista/CONTRIBUTING.rst:217
msgid ""
"With optional parameters, use ``default: <value>`` instead of ``optional`` "
"when the parameter has a default value instead of ``None``."
msgstr ""
"オプションのパラメータで， ``None`` の代わりにデフォルト値がある場合は， ``optional`` の代わりに ``default: "
"<value>`` を使用します．"

#: ../../pyvista/CONTRIBUTING.rst:220
msgid "Sample docstring follows:"
msgstr "サンプル docstring は以下の通りです:"

#: ../../pyvista/CONTRIBUTING.rst:257
msgid "Note the following:"
msgstr "以下のことに注意してください:"

#: ../../pyvista/CONTRIBUTING.rst:259
msgid ""
"The parameter definition of ``generate_triangles`` uses ``default: False``, "
"and does not include the default in the docstring's \"description\" section."
msgstr ""
"``generate_triangles`` のパラメータ定義では， ``default: False`` を使用し， docstring の "
"\"description\" セクションにデフォルトを含めません．"

#: ../../pyvista/CONTRIBUTING.rst:261
msgid ""
"There is a newline between each parameter. This is different than "
"``numpydoc``'s documentation where there are no empty lines between "
"parameter docstrings."
msgstr ""
"各パラメータの間には改行が入ります．これは ``numpydoc`` のドキュメントで，パラメータの docstring "
"の間に空白行がないのとは異なります．"

#: ../../pyvista/CONTRIBUTING.rst:264
msgid ""
"This docstring also contains a returns section and an examples section."
msgstr "この docstring には，リターンセクションとサンプルセクションも含まれています．"

#: ../../pyvista/CONTRIBUTING.rst:265
msgid ""
"The returns section does not include the parameter name if the function has "
"a single return value. Multiple return values (not shown) should have "
"descriptive parameter names for each returned value, in the same format as "
"the input parameters."
msgstr ""
"関数の戻り値が1つの場合，リターンセクションにはパラメータ名を含めません．複数の戻り値(図示せず)には，入力パラメータと同じ形式で，各戻り値に対して説明的なパラメータ名を付ける必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:269
msgid ""
"The examples section references the \"full example\" in the gallery if it "
"exists."
msgstr "サンプルセクションは，ギャラリーの \"完全なサンプル\" が存在する場合，それを参照します．"

#: ../../pyvista/CONTRIBUTING.rst:274
msgid "Deprecating Features or other Backwards-Breaking Changes"
msgstr "非推奨の機能またはその他の後方互換性のない変更"

#: ../../pyvista/CONTRIBUTING.rst:275
msgid ""
"When implementing backwards-breaking changes within PyVista, care must be "
"taken to give users the chance to adjust to any new changes. Any non-"
"backwards compatible modifications should proceed through the following "
"steps:"
msgstr ""
"PyVistaで後方互換性のない変更を実装するときは，ユーザーに新しい変更に適応する機会を与えるよう注意する必要があります．後方互換性のない変更は，次の手順で進める必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:279
msgid ""
"Retain the old behavior and issue a ``PyVistaDeprecationWarning`` indicating"
" the new interface you should use."
msgstr "古い動作を保持し，使用すべき新しいインターフェイスを示す ``PyVistaDeprecationWarning`` を発行します．"

#: ../../pyvista/CONTRIBUTING.rst:281
msgid ""
"Retain the old behavior but raise a ``pyvista.core.errors.DeprecationError``"
" indicating the new interface you must use."
msgstr ""
"古い動作を保持しますが，使用しなければならない新しいインターフェイスを示す "
"``pyvista.core.errors.DeprecationError`` を発行します．"

#: ../../pyvista/CONTRIBUTING.rst:283
msgid "Remove the old behavior."
msgstr "古い動作を削除します．"

#: ../../pyvista/CONTRIBUTING.rst:285
msgid ""
"Whenever possible, PyVista developers should seek to have at least three "
"minor versions of backwards compatibility to give users the ability to "
"update their software and scripts."
msgstr ""
"可能な限り，PyVistaの開発者は，ユーザーがソフトウェアやスクリプトを更新できるように，少なくとも3つのマイナーバージョンの後方互換性を確保するように努めるべきです．"

#: ../../pyvista/CONTRIBUTING.rst:289
msgid ""
"Here's an example of a soft deprecation of a function. Note the usage of "
"both the ``PyVistaDeprecationWarning`` warning and the ``.. deprecated`` "
"Sphinx directive."
msgstr ""
"これはある関数のソフト非推奨の例です． ``PyVistaDeprecationWarning`` の警告と ``.. deprecated`` "
"のSphinxディレクティブの両方を使用していることに注意してください．"

#: ../../pyvista/CONTRIBUTING.rst:327
msgid ""
"In the above code example, note how a comment is made to convert to an error"
" in three minor releases and completely remove in the following minor "
"release. For significant changes, this can be made longer, and for trivial "
"ones this can be kept short."
msgstr ""
"上記のコード例では，3つのマイナーリリースでエラーに変換し，次のマイナーリリースで完全に削除するためにコメントが作られていることに注目してください．重要な変更の場合はこれを長くし，些細な変更の場合は短くすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:332
msgid ""
"When adding an additional parameter to an existing method or function, you "
"are encouraged to use the ``.. versionadded`` sphinx directive. For example:"
msgstr ""
"既存のメソッドや関数に追加のパラメータを追加する場合には， ``.. versionadded`` "
"というsphinxディレクティブを使用することが推奨されます．例えば:"

#: ../../pyvista/CONTRIBUTING.rst:350
msgid "Branch Naming Conventions"
msgstr "ブランチの命名規則"

#: ../../pyvista/CONTRIBUTING.rst:352
msgid ""
"To streamline development, we have the following requirements for naming "
"branches. These requirements help the core developers know what kind of "
"changes any given branch is introducing before looking at the code."
msgstr ""
"開発を効率化するために，ブランチの命名には次の要件があります．これらの要件は，コア開発者がコードを調べる前に，あるブランチがどのような種類の変更を導入しているかを知るのに役立ちます．"

#: ../../pyvista/CONTRIBUTING.rst:356
msgid ""
"``fix/``: any bug fixes, patches, or experimental changes that are minor"
msgstr "``fix/``: マイナーなバグ修正，パッチ，または実験的な変更"

#: ../../pyvista/CONTRIBUTING.rst:358
msgid ""
"``feat/``: any changes that introduce a new feature or significant addition"
msgstr "``feat/``: 新しい特徴または重要な追加を導入する変更"

#: ../../pyvista/CONTRIBUTING.rst:360
msgid ""
"``junk/``: for any experimental changes that can be deleted if gone stale"
msgstr "``junk/``: 古くなったら削除できる実験的な変更について"

#: ../../pyvista/CONTRIBUTING.rst:362
msgid "``maint/``: for general maintenance of the repository or CI routines"
msgstr "``maint/``: リポジトリまたはCIルーチンの一般的な保守用"

#: ../../pyvista/CONTRIBUTING.rst:363
msgid "``doc/``: for any changes only pertaining to documentation"
msgstr "``doc/``: 文書のみに関連する変更の場合"

#: ../../pyvista/CONTRIBUTING.rst:364
msgid ""
"``no-ci/``: for low impact activity that should NOT trigger the CI routines"
msgstr "``no-ci/``: CIルーチンをトリガーしてはならない影響の少ないアクティビティの場合"

#: ../../pyvista/CONTRIBUTING.rst:366
msgid "``testing/``: improvements or changes to testing"
msgstr "``testing/``: テストの改善または変更"

#: ../../pyvista/CONTRIBUTING.rst:367
msgid "``release/``: releases (see below)"
msgstr "``release/``: リリース(下記参照)"

#: ../../pyvista/CONTRIBUTING.rst:368
msgid "``breaking-change/``: Changes that break backward compatibility"
msgstr "``breaking-change/``: 後方互換性を破壊する変更"

#: ../../pyvista/CONTRIBUTING.rst:371
msgid "Testing"
msgstr "テスト"

#: ../../pyvista/CONTRIBUTING.rst:373
msgid ""
"After making changes, please test changes locally before creating a pull "
"request. The following tests will be executed after any commit or pull "
"request, so we ask that you perform the following sequence locally to track "
"down any new issues from your changes."
msgstr ""
"変更を行った後，プルリクエストを作成する前にローカルで変更をテストしてください．コミットまたはプルリクエストの後に次のテストが実行されます．変更から新しい問題を追跡するには，ローカルで次の手順を実行してください．"

#: ../../pyvista/CONTRIBUTING.rst:378
msgid ""
"To run our comprehensive suite of unit tests, install all the dependencies "
"listed in ``requirements_test.txt`` and ``requirements_docs.txt``:"
msgstr ""
"総合的な単体テストを実行するには， ``requirements_test.txt`` と ``requirements_docs.txt`` "
"にリストされているすべての依存関係をインストールします:"

#: ../../pyvista/CONTRIBUTING.rst:386
msgid ""
"Then, if you have everything installed, you can run the various test suites."
msgstr "すべてをインストールしたら，さまざまなテストスイートを実行できます．"

#: ../../pyvista/CONTRIBUTING.rst:390
msgid "Using Gitpod workspace"
msgstr "Gitpodワークスペースの使用"

#: ../../pyvista/CONTRIBUTING.rst:392
msgid ""
"A prebuilt gitpod workspace is available for a quick start development "
"environment. To start a workspace from the main branch of pyvista, go to "
"`<https://gitpod.io/#https://github.com/pyvista/pyvista>`_. See `Gitpod "
"Getting Started <https://www.gitpod.io/docs/getting-started>`_ for more "
"details."
msgstr ""
"クイックスタートの開発環境として，ビルド済みのgitpodワークスペースが用意されています．pyvistaのmainブランチからワークスペースを開始するには，"
" `<https://gitpod.io/#https://github.com/pyvista/pyvista>`_ にアクセスしてください．詳しくは"
" `Gitpod Getting Started <https://www.gitpod.io/docs/getting-started>`_ "
"を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:398
msgid ""
"The workspace has vnc capability through the browser for interactive "
"plotting.  The workspace also has prebuilt documentation with a live-viewer."
"  Hit the ``Go Live`` button and browse to ``doc/_build/html``. The "
"workspace is also prebuilt to support pre-commit checks."
msgstr ""
"ワークスペースは，ブラウザを介したvnc機能により，インタラクティブなプロッティングが可能です． "
"また，ワークスペースにはライブビューアーを備えたドキュメントがあらかじめ用意されています． ``Go Live`` ボタンを押して， "
"``doc/_build/html`` "
"をブラウズしてください．また，ワークスペースはプリコミットチェックをサポートするようにあらかじめ構築されています．"

#: ../../pyvista/CONTRIBUTING.rst:404
msgid ""
"Workspaces started from the ``pyvista/pyvista`` repo will often have "
"prebuilt environments with dependencies installed. Workspaces started from "
"forks may not have prebuilt images and will start building when starting a "
"new workspace.  It is safe to stop, e.g. ``Ctrl-C``, the documentation part "
"of the build if unneeded."
msgstr ""
"``pyvista/pyvista`` "
"リポジトリから起動したワークスペースは，多くの場合，依存関係がインストールされたビルド済みの環境を持っています．フォークから起動したワークスペースは，ビルド済みのイメージがない場合があり，新しいワークスペースを起動するときにビルドを開始します．"
" 必要なければ， ``Ctrl-C`` などで，ビルドのドキュメント部分を停止しておくと安全です．"

#: ../../pyvista/CONTRIBUTING.rst:411
msgid "Unit Testing"
msgstr "ユニットテスト"

#: ../../pyvista/CONTRIBUTING.rst:412
msgid "Run the primary test suite and generate coverage report:"
msgstr "プライマリテストスイートを実行し，カバレッジレポートを生成します．"

#: ../../pyvista/CONTRIBUTING.rst:418
msgid ""
"Unit testing can take some time, if you wish to speed it up, set the number "
"of processors with the ``-n`` flag. This uses ``pytest-xdist`` to leverage "
"multiple processes. Example usage:"
msgstr ""
"ユニットテストには時間がかかることがあります．高速化したい場合は， ``n`` フラグでプロセッサの数を設定してください．これは ``pytest-"
"xdist`` を使用して，複数のプロセスを利用するものです．使用例です．"

#: ../../pyvista/CONTRIBUTING.rst:427
msgid "Documentation Testing"
msgstr "ドキュメンテーションテスト"

#: ../../pyvista/CONTRIBUTING.rst:428
msgid "Run all code examples in the docstrings with:"
msgstr "docstring内のすべてのコード例を実行します．"

#: ../../pyvista/CONTRIBUTING.rst:435
msgid "Style Checking"
msgstr "スタイルチェック"

#: ../../pyvista/CONTRIBUTING.rst:436
msgid ""
"PyVista follows PEP8 standard as outlined in the `Coding Style section "
"<#coding-style>`_ and implements style checking using `pre-commit`_."
msgstr ""
"PyVistaは， `コーディングスタイルのセクション <#coding-style>`_ で説明されているようにPEP8標準に従っており， `pre-"
"commit`_ を使ってスタイルチェックを実装しています．"

#: ../../pyvista/CONTRIBUTING.rst:439
msgid "To ensure your code meets minimum code styling standards, run::"
msgstr "コードが最小限のコードスタイリング基準に適合していることを確認するために，以下を実行してください．"

#: ../../pyvista/CONTRIBUTING.rst:444
msgid ""
"If you have issues related to ``setuptools`` when installing ``pre-commit``,"
" see `pre-commit Issue #2178 comment <https://github.com/pre-commit/pre-"
"commit/issues/2178#issuecomment-1002163763>`_ for a potential resolution."
msgstr ""
"もし ``pre-commit`` をインストールする際に ``setuptools`` に関連する問題が発生した場合は， `pre-commit "
"Issue #2178 comment <https://github.com/pre-commit/pre-"
"commit/issues/2178#issuecomment-1002163763>`_ で解決できる可能性がありますので参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:448
msgid "You can also install this as a pre-commit hook by running::"
msgstr "また，pre-commit hookとして次のように実行することでインストールすることもできます．"

#: ../../pyvista/CONTRIBUTING.rst:452
msgid ""
"This way, it's not possible for you to push code that fails the style "
"checks. For example, each commit automatically checks that you meet the "
"style requirements::"
msgstr ""
"こうすれば，スタイルチェックに失敗したコードをプッシュすることは不可能になります．例えば，各コミットでスタイル要件を満たしているかどうかが自動的にチェックされます::"

#: ../../pyvista/CONTRIBUTING.rst:463
msgid ""
"The actual installation of the environment happens before the first commit "
"following ``pre-commit install``. This will take a bit longer, but "
"subsequent commits will only trigger the actual style checks."
msgstr ""
"実際の環境のインストールは， ``pre-commit install`` "
"に続く最初のコミットの前に行われます．これは少し時間がかかりますが，それ以降のコミットでは実際のスタイルチェックが行われるだけです．"

#: ../../pyvista/CONTRIBUTING.rst:468
msgid "Notes Regarding Image Regression Testing"
msgstr "イメージ回帰テストに関する注意事項"

#: ../../pyvista/CONTRIBUTING.rst:470
msgid ""
"Since PyVista is primarily a plotting module, it’s imperative we actually "
"check the images that we generate in some sort of regression testing. In "
"practice, this ends up being quite a bit of work because:"
msgstr ""
"PyVista "
"は基本的に描画モジュールなので，何らかの回帰テストで生成した画像を実際にチェックする必要があります．実際には，これはかなりの作業になります．"

#: ../../pyvista/CONTRIBUTING.rst:474
msgid ""
"OpenGL software vs. hardware rending causes slightly different images to be "
"rendered."
msgstr "OpenGLソフトウェアと ハードウェアレンダリングでは，レンダリングされるイメージがわずかに異なります．"

#: ../../pyvista/CONTRIBUTING.rst:476
msgid ""
"We want our CI (which uses a virtual frame buffer) to match our desktop "
"images (uses hardware acceleration)."
msgstr ""
"CI (仮想フレームバッファを使用します)をデスクトップイメージ(ハードウェアアクセラレーションを使用します)と一致させたいと考えています．"

#: ../../pyvista/CONTRIBUTING.rst:478
msgid "Different OSes render different images."
msgstr "OSによってレンダリングされるイメージは異なります．"

#: ../../pyvista/CONTRIBUTING.rst:480
msgid ""
"As each platform and environment renders different slightly images relative "
"to Linux (which these images were built from), so running these tests across"
" all OSes isn’t optimal. We could generate different images for each OS, but"
" it’s overkill in my opinion; we need to know if something fundamental "
"changed with our plotting without actually looking at the plots (like the "
"docs at dev.pyvista.com)"
msgstr ""
"各プラットフォームと環境では，Linuxと比較してわずかに異なるイメージをレンダリングするため(これらの画像は)，すべてのOSでこれらのテストを実行するのは最適ではありません．OSごとに異なるイメージを生成することもできますが，私の意見ではやり過ぎです．プロットを実際に見ることなく，プロットによって何か根本的な変化があったかどうかを知る必要があります(dev.pyvista.comのドキュメントのように)．"

#: ../../pyvista/CONTRIBUTING.rst:487
msgid ""
"Based on these points, image regression testing only occurs on Linux CI, and"
" multi-sampling is disabled as that seems to be one of the biggest "
"difference between software and hardware based rendering."
msgstr ""
"これらの点に基づいて，イメージ回帰テストはLinux "
"CIでのみ行われ，マルチサンプリングは，ソフトウェアベースのレンダリングとハードウェアベースのレンダリングの最大の違いの1つと思われるため，無効になっています．"

#: ../../pyvista/CONTRIBUTING.rst:491
msgid "Image cache is stored here as ``./tests/plotting/image_cache``."
msgstr "画像キャッシュは ``./tests/plotting/image_cache`` としてここに保存されます．"

#: ../../pyvista/CONTRIBUTING.rst:493
msgid ""
"Image resolution is kept low at 400x400 as we don’t want to pollute git with"
" large images. Small variations between versions and environments are to be "
"expected, so error < ``IMAGE_REGRESSION_ERROR`` is allowable (and will be "
"logged as a warning) while values over that amount will trigger an error."
msgstr ""
"大きな画像でgitを汚したくないので，画像解像度は400x400で低く保たれます．バージョンや環境によって多少の違いがあることが予想されるため， "
"error < ``IMAGE_REGRESSION_ERROR`` "
"は許容されます(警告としてログに記録されます．)が，この値を超えるとエラーが発生します．"

#: ../../pyvista/CONTRIBUTING.rst:499
msgid ""
"There are two mechanisms within ``pytest`` to control image regression "
"testing, ``--reset_image_cache`` and ``--ignore_image_cache``. For example:"
msgstr ""
"``pytest`` には，画像リグレッションテストを制御する2つのメカニズム， ``--reset_image_cache`` と "
"``--ignore_image_cache`` があります．"

#: ../../pyvista/CONTRIBUTING.rst:507
msgid ""
"Running ``--reset_image_cache`` creates a new image for each test in "
"``tests/plotting/test_plotting.py`` and is not recommended except for "
"testing or for potentially a major or minor release. You can use "
"``--ignore_image_cache`` if you’re running on Linux and want to temporarily "
"ignore regression testing. Realize that regression testing will still occur "
"on our CI testing."
msgstr ""
"``--reset_image_cache`` を実行すると， ``tests/plotting/test_plotting.py`` "
"の各テストに対して新しいイメージが作成されます．テストや，メジャーまたはマイナーリリースの可能性がある場合を除き，推奨されません．Linux上で実行していて，リグレッションテストを一時的に無視したい場合は，"
" ``--ignore_image_cache`` を使用することができます．CIテストでは，回帰テストが引き続き行われることを理解してください．"

#: ../../pyvista/CONTRIBUTING.rst:514
msgid ""
"Images are currently only cached from tests in "
"``tests/plotting/test_plotting.py``.  By default, any test that uses "
"``Plotter.show`` will cache images automatically.  To skip image caching, "
"the ``verify_image_cache`` fixture can be utilized:"
msgstr ""
"現在のところ，画像は ``tests/plotting/test_plotting.py`` にあるテストからのみキャッシュされます． デフォルトでは，"
" ``Plotter.show`` を使用するテストは，自動的に画像をキャッシュします． 画像のキャッシュをスキップするには， "
"``verify_image_cache`` フィクスチャを使用します．"

#: ../../pyvista/CONTRIBUTING.rst:532
msgid ""
"This ensures that immediately before the plotter is closed, the current "
"render window will be verified against the image in CI. If no image exists, "
"be sure to add the resulting image with"
msgstr ""
"これにより，プロッタを閉じる直前に，現在のレンダリングウィンドウがCI内のイメージに対して検証されます．イメージが存在しない場合は，必ず次を使用して結果のイメージを追加してください．"

#: ../../pyvista/CONTRIBUTING.rst:540
msgid ""
"During unit testing, if you get image regression failures and would like to "
"compare the images generated locally to the regression test suite, allow "
"`pytest-pyvista <https://github.com/pyvista/pytest-pyvista>`_ to write all "
"new generated images to a local directory using the "
"``--generated_image_dir`` flag."
msgstr ""
"ユニットテスト中に，画像のリグレッションに失敗して，ローカルに生成された画像をリグレッションテストスイートと比較したい場合， `pytest-"
"pyvista <https://github.com/pyvista/pytest-pyvista>`_ が "
"``--generated_image_dir`` フラグを使って新しい生成画像をすべてローカルディレクトリに書き込めるようにします．"

#: ../../pyvista/CONTRIBUTING.rst:545
msgid ""
"For example, the following writes all images generated by ``pytest`` to "
"``debug_images/`` for any tests in ``tests/plotting`` whose function name "
"has ``volume`` in it."
msgstr ""
"例えば，以下は ``tests/plotting`` にある，関数名に ``volume`` が含まれるテストについて， ``pytest`` "
"が生成したすべての画像を ``debug_images/`` に書き込むものです．"

#: ../../pyvista/CONTRIBUTING.rst:555
msgid "Building the Documentation"
msgstr "ドキュメントの作成"

#: ../../pyvista/CONTRIBUTING.rst:556
msgid "Build the documentation on Linux or Mac OS with:"
msgstr "LinuxまたはMac OSでドキュメントをビルドします．"

#: ../../pyvista/CONTRIBUTING.rst:562
msgid "Build the documentation on Windows with:"
msgstr "Windows でドキュメントをビルドします．"

#: ../../pyvista/CONTRIBUTING.rst:564
msgid "cd doc python -msphinx -M html . _build"
msgstr "cd doc python -msphinx -M html . _build"

#: ../../pyvista/CONTRIBUTING.rst:567
msgid ""
"The generated documentation can be found in the ``doc/_build/html`` "
"directory."
msgstr "生成されたドキュメントは ``doc/_build/html`` ディレクトリにあります．"

#: ../../pyvista/CONTRIBUTING.rst:570
msgid ""
"The first time you build the documentation locally will take a while as all "
"the examples need to be built. After the first build, the documentation "
"should take a fraction of the time."
msgstr ""
"最初にローカルでドキュメントをビルドするときは，すべてのサンプルをビルドする必要があるため，しばらく時間がかかるでしょう．最初のビルドの後は，ドキュメントの作成にかかる時間はほんのわずかなものになるはずです．"

#: ../../pyvista/CONTRIBUTING.rst:575
msgid "Clearing the local build"
msgstr "ローカルビルドのクリア"

#: ../../pyvista/CONTRIBUTING.rst:577
msgid "If you need to clear the locally built documentation, run:"
msgstr "ローカルにビルドしたドキュメントをクリアする必要がある場合は，実行してください．"

#: ../../pyvista/CONTRIBUTING.rst:583
msgid ""
"This will clear out everything, including the examples gallery. If you only "
"want to clear everything except the gallery examples, run:"
msgstr "これは，ギャラリーの例を含むすべてをクリアします．もしギャラリーのサンプル以外をクリアしたいだけなら，実行します．"

#: ../../pyvista/CONTRIBUTING.rst:590
msgid ""
"This will clear out the cache without forcing you to rebuild all the "
"examples."
msgstr "これにより，すべてのサンプルを強制的に再構築することなく，キャッシュをクリアすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:594
msgid "Parallel Documentation Build"
msgstr "ドキュメントの並列ビルド"

#: ../../pyvista/CONTRIBUTING.rst:595
msgid ""
"You can improve your documentation build time on Linux and Mac OS with:"
msgstr "以下でLinuxやMac OSでのドキュメントのビルド時間を改善することができます．"

#: ../../pyvista/CONTRIBUTING.rst:601
msgid ""
"This effectively invokes ``SPHINXOPTS=-j`` and can be especially useful for "
"multi-core computers."
msgstr "これは効果的に ``SPHINXOPTS=-j`` を呼び出し，特にマルチコアコンピュータで有用です．"

#: ../../pyvista/CONTRIBUTING.rst:607
msgid "Contributing to the Documentation"
msgstr "ドキュメンテーションへの貢献"

#: ../../pyvista/CONTRIBUTING.rst:608
msgid "Documentation for PyVista is generated from three sources:"
msgstr "PyVistaのドキュメントは，3つのソースから作成されています:"

#: ../../pyvista/CONTRIBUTING.rst:610
msgid ""
"Docstrings from the classes, functions, and modules of ``pyvista`` using "
"`sphinx.ext.autodoc <https://www.sphinx-"
"doc.org/en/master/usage/extensions/autodoc.html>`_."
msgstr ""
"``pyvista`` のクラス，関数，モジュールから， `sphinx.ext.autodoc <https://www.sphinx-"
"doc.org/en/master/usage/extensions/autodoc.html>`_ を使用して，Docstringを取得します．"

#: ../../pyvista/CONTRIBUTING.rst:613
msgid "Restructured test from ``doc/``"
msgstr "``doc/`` からテストを再構築"

#: ../../pyvista/CONTRIBUTING.rst:614
msgid "Gallery examples from ``examples/``"
msgstr "``examples/`` からのギャラリー例"

#: ../../pyvista/CONTRIBUTING.rst:616
msgid ""
"General usage and API descriptions should be placed within ``doc/api`` and "
"the docstrings.  Full gallery examples should be placed in ``examples``."
msgstr ""
"一般的な使い方やAPIの説明は ``doc/api`` と docstrings に記述してください． 完全なギャラリーのサンプルは "
"``examples`` に置いてください．"

#: ../../pyvista/CONTRIBUTING.rst:621
msgid "Adding a New Example"
msgstr "新しい例の追加"

#: ../../pyvista/CONTRIBUTING.rst:622
msgid ""
"PyVista's examples come in two formats: basic code snippets demonstrating "
"the functionality of an individual method or a full gallery example "
"displaying one or more concepts.  Small code samples and snippets are "
"contained in the ``doc/api`` directory or within our documentation strings, "
"while the full gallery examples, meant to be run as individual downloadable "
"scripts, are contained in the ``examples`` directory at the root of this "
"repository."
msgstr ""
"PyVistaのサンプルには2つの形式があります．個々のメソッドの機能を示す基本的なコードスニペットと，1つまたは複数のコンセプトを表示する完全なギャラリーの例です．"
" 小さなコードサンプルやスニペットは ``doc/api`` "
"ディレクトリやドキュメント文字列に含まれています．一方，完全なギャラリーサンプルは，ダウンロード可能なスクリプトとして実行するために，このリポジトリのルートにある"
" ``examples`` ディレクトリに含まれています．"

#: ../../pyvista/CONTRIBUTING.rst:629
msgid ""
"To add a fully fledged, standalone example, add your example to the "
"``examples`` directory in the root directory of the `PyVista Repository "
"<https://github.com/pyvista/pyvista/>`_ within one of the applicable "
"subdirectories.  Should none of the existing directories match the category "
"of your example, create a new directory with a ``README.txt`` describing the"
" new category.  Additionally, as these examples are built using the sphinx "
"gallery extension, follow coding guidelines as established by `Sphinx-"
"Gallery <https://sphinx-gallery.github.io/stable/index.html>`_."
msgstr ""
"本格的なスタンドアロンサンプルを追加するには，`PyVista Repository "
"<https://github.com/pyvista/pyvista/>`_ のルートディレクトリにある ``examples`` "
"ディレクトリに，該当するサブディレクトリのいずれかにあなたのサンプルを追加してください． "
"もし，既存のディレクトリがあなたのサンプルのカテゴリと一致しない場合は，新しいディレクトリを作成し，新しいカテゴリを記述した "
"``README.txt`` を記述してください． さらに，これらのサンプルはsphinx gallery 拡張を使って作成されていますので， "
"`Sphinx-Gallery <https://sphinx-gallery.github.io/stable/index.html>`_ "
"が定めるコーディングガイドラインに従ってください．"

#: ../../pyvista/CONTRIBUTING.rst:638
msgid "For more details see :ref:`add_example_example`."
msgstr "詳しくは :ref:`add_example_example` を参照してください．"

#: ../../pyvista/CONTRIBUTING.rst:642
msgid "Add a new Example File"
msgstr "新しいサンプルファイルの追加"

#: ../../pyvista/CONTRIBUTING.rst:643
msgid ""
"If you have a dataset that you need for your gallery example, add it to "
"`pyvista/vtk-data <https://github.com/pyvista/vtk-data/>`_ and follow the "
"directions there. You will then need to add a new function to download the "
"dataset ``pyvista/examples/downloads.py``. This might be as easy as:"
msgstr ""
"もしギャラリーのサンプルに必要なデータセットがあれば，それを `pyvista/vtk-data "
"<https://github.com/pyvista/vtk-data/>`_ "
"に追加し，そこにある指示に従ってください．それから，データセットをダウンロードする ``pyvista/examples/downloads.py`` "
"ための新しい関数を追加する必要があります．これは以下のように簡単です．"

#: ../../pyvista/CONTRIBUTING.rst:655
msgid "Which enables:"
msgstr "以下を可能にします:"

#: ../../pyvista/CONTRIBUTING.rst:664
msgid "Creating a New Pull Request"
msgstr "新規Pull Requestの作成"

#: ../../pyvista/CONTRIBUTING.rst:666
msgid ""
"Once you have tested your branch locally, create a pull request on `pyvista "
"GitHub <https://github.com/pyvista/pyvista>`_ while merging to main. This "
"will automatically run continuous integration (CI) testing and verify your "
"changes will work across several platforms."
msgstr ""
"ブランチをローカルでテストしたら，mainにマージする際に `pyvista GitHub "
"<https://github.com/pyvista/pyvista>`_ でpull "
"requestを作成します．これにより，継続的インテグレーション (CI) "
"テストが自動的に実行され，変更が複数のプラットフォームで機能することが検証されます．"

#: ../../pyvista/CONTRIBUTING.rst:671
msgid ""
"To ensure someone else reviews your code, at least one other member of the "
"pyvista contributors group must review and verify your code meets our "
"community’s standards. Once approved, if you have write permission you may "
"merge the branch. If you don’t have write permission, the reviewer or "
"someone else with write permission will merge the branch and delete the PR "
"branch."
msgstr ""
"他のユーザーがコードをレビューできるようにするには，pyvistaコントリビュータグループの他の少なくとも1人のメンバーが，コードがコミュニティの標準を満たしているかどうかをレビューして検証する必要があります．承認後，書き込み権限があればブランチをマージすることができます．書き込みパーミッションがない場合，レビュー担当者または書き込みパーミッションを持つ別のユーザーがブランチをマージし，PRブランチを削除します．"

#: ../../pyvista/CONTRIBUTING.rst:678
msgid ""
"Since it may be necessary to merge your branch with the current release "
"branch (see below), please do not delete your branch if it is a ``fix/`` "
"branch."
msgstr ""
"ブランチをカレントリリースブランチ(下記参照)とマージする必要があるかもしれませんので， ``fix/`` ブランチであれば削除しないでください．"

#: ../../pyvista/CONTRIBUTING.rst:683
msgid "Branching Model"
msgstr "ブランチモデル"

#: ../../pyvista/CONTRIBUTING.rst:685
msgid ""
"This project has a branching model that enables rapid development of "
"features without sacrificing stability, and closely follows the `Trunk Based"
" Development <https://trunkbaseddevelopment.com/>`_ approach."
msgstr ""
"このプロジェクトは，安定性を犠牲にすることなく機能の迅速な開発を可能にする分岐モデルを持っており， `Trunk Based Development "
"<https://trunkbaseddevelopment.com/>`_  アプローチに厳密に従います．"

#: ../../pyvista/CONTRIBUTING.rst:689
msgid "The main features of our branching model are:"
msgstr "ブランチモデルの主な特徴は次のとおりです．"

#: ../../pyvista/CONTRIBUTING.rst:691
msgid ""
"The ``main`` branch is the main development branch. All features, patches, "
"and other branches should be merged here. While all PRs should pass all "
"applicable CI checks, this branch may be functionally unstable as changes "
"might have introduced unintended side-effects or bugs that were not caught "
"through unit testing."
msgstr ""
"``main`` "
"ブランチは主要な開発ブランチです．すべてのフィーチャー，パッチ，およびその他のブランチをここにマージする必要があります．すべてのPRは適用可能なCIチェックをすべてパスする必要がありますが，変更によって予期しない副作用や単体テストで検出されなかったバグが発生する可能性があるため，このブランチは機能的に不安定になる可能性があります．"

#: ../../pyvista/CONTRIBUTING.rst:696
msgid ""
"There will be one or many ``release/`` branches based on minor releases (for"
" example ``release/0.24``) which contain a stable version of the code base "
"that is also reflected on PyPI/. Hotfixes from ``fix/`` branches should be "
"merged both to main and to these branches. When necessary to create a new "
"patch release these release branches will have their ``pyvista/_version.py``"
" updated and be tagged with a semantic version (e.g. ``v0.24.1``). This "
"triggers CI to push to PyPI, and allow us to rapidly push hotfixes for past "
"versions of ``pyvista`` without having to worry about untested features."
msgstr ""
"マイナーリリース(例えば ``release/0.24`` )をベースにした ``release/`` ブランチがいくつかあり，そこには PyPI/ "
"にも反映される安定版のコードベースが含まれています． ``fix/`` "
"ブランチの修正パッチは，mainブランチとこれらのブランチの両方にマージする必要があります．新しいパッチリリースを作成する必要がある場合，これらのリリースブランチの"
" ``pyvista/_version.py`` が更新され，セマンティックバージョン(例えば ``v0.24.1`` "
")がタグ付けされます．これによりCIはPyPIにプッシュし，テストされていない機能を気にすることなく，過去のバージョンの ``pyvista`` "
"のホットフィックスを迅速にプッシュすることができます．"

#: ../../pyvista/CONTRIBUTING.rst:706
msgid ""
"When a minor release candidate is ready, a new ``release`` branch will be "
"created from ``main`` with the next incremented minor version "
"(e.g. ``release/0.25``), which will be thoroughly tested. When deemed "
"stable, the release branch will be tagged with the version (``v0.25.0`` in "
"this case), and if necessary merged with main if any changes were pushed to "
"it. Feature development then continues on ``main`` and any hotfixes will now"
" be merged with this release. Older release branches should not be deleted "
"so they can be patched as needed."
msgstr ""
"マイナーリリース候補が準備できたら， ``main`` から新しい ``release`` ブランチが作成され，次のマイナーバージョン(例えば  "
"``release/0.25`` "
")がインクリメントされ，徹底的にテストされます．安定していると判断された場合，リリースブランチにはバージョン(この場合の ``v0.25.0`` "
")のタグが付けられ，必要に応じて変更が加えられた場合にはmainとマージされます． ``main`` "
"で機能開発が継続され，ホットフィックスはこのリリースに統合されます．必要に応じてパッチを適用できるように，古いリリースブランチは削除しないでください．"

#: ../../pyvista/CONTRIBUTING.rst:717
msgid "Minor Release Steps"
msgstr "マイナーリリース手順"

#: ../../pyvista/CONTRIBUTING.rst:719
msgid ""
"Minor releases are feature and bug releases that improve the functionality "
"and stability of ``pyvista``. Before a minor release is created the "
"following will occur:"
msgstr ""
"マイナーリリースは， ``pyvista`` "
"の機能と安定性を改善する機能およびバグリリースです．マイナーリリースが作成される前に，次のことが発生します．"

#: ../../pyvista/CONTRIBUTING.rst:723
msgid ""
"Create a new branch from the ``main`` branch with name "
"``release/MAJOR.MINOR`` (e.g. ``release/0.25``)."
msgstr ""
"``main`` ブランチから ``release/MAJOR.MINOR`` "
"という名前の新しいブランチを作成します(例: ``release/0.25`` )．"

#: ../../pyvista/CONTRIBUTING.rst:726
msgid ""
"Locally run all tests as outlined in the `Testing Section <#testing>`_ and "
"ensure all are passing."
msgstr ""
"`テストのセクション <#testing>`_ で概説されているように，すべてのテストをローカルで実行し，すべてが合格していることを確認します．"

#: ../../pyvista/CONTRIBUTING.rst:729
msgid ""
"Locally test and build the documentation with link checking to make sure no "
"links are outdated. Be sure to run ``make clean`` to ensure no results are "
"cached."
msgstr ""
"リンクが古くなっていないことを確認するために，リンクチェックを行いながらドキュメントをローカルにテストしてビルドします．また， ``make "
"clean`` を実行して，結果がキャッシュされていないことを確認してください．"

#: ../../pyvista/CONTRIBUTING.rst:740
msgid ""
"After building the documentation, open the local build and examine the "
"examples gallery for any obvious issues."
msgstr "ドキュメントをビルドしたら，ローカル・ビルドを開き，サンプル・ギャラリーで明らかな問題がないか調べてください．"

#: ../../pyvista/CONTRIBUTING.rst:743
msgid ""
"Update the development version numbers in ``pyvista/_version.py`` and commit"
" it (e.g. ``0, 26, 'dev0'``). Push the branch to GitHub and create a new PR "
"for this release that merges it to main. Development to main should be "
"limited at this point while effort is focused on the release."
msgstr ""
"``pyvista/_version.py`` の開発バージョン番号を更新し，コミットします(例: ``0, 26, "
"'dev0'``)．ブランチをGitHubにプッシュし，mainにマージする今回のリリースの新しいPRを作成します．リリースに注力している間は，mainへの開発はこの時点では制限されるべきです．"

#: ../../pyvista/CONTRIBUTING.rst:749
msgid ""
"It is now the responsibility of the ``pyvista`` community to functionally "
"test the new release. It is best to locally install this branch and use it "
"in production. Any bugs identified should have their hotfixes pushed to this"
" release branch."
msgstr ""
"新しいリリースを機能的にテストするのは ``pyvista`` "
"コミュニティの責任です．このブランチをローカルにインストールして運用環境で使用することをお勧めします．検出されたバグについては，ホットフィックスをこのリリースブランチにプッシュする必要があります．"

#: ../../pyvista/CONTRIBUTING.rst:754
msgid ""
"When the branch is deemed as stable for public release, the PR will be "
"merged to main. After update the version number in ``release/MAJOR.MINOR`` "
"branch, the ``release/MAJOR.MINOR`` branch will be tagged with a "
"``vMAJOR.MINOR.0`` release. The release branch will not be deleted. Tag the "
"release with:"
msgstr ""
"このブランチが安定版として一般公開されると，PR は main にマージされます． ``release/MAJOR.MINOR`` "
"ブランチのバージョン番号を更新した後， ``release/MAJOR.MINOR`` ブランチは ``vMAJOR.MINOR.0`` "
"リリースというタグが付けられます．リリースブランチは削除されません．次のようにリリースにタグを付けます:"

#: ../../pyvista/CONTRIBUTING.rst:765
msgid ""
"Create a list of all changes for the release. It is often helpful to "
"leverage `GitHub’s compare feature "
"<https://github.com/pyvista/pyvista/compare>`_ to see the differences from "
"the last tag and the ``main`` branch. Be sure to acknowledge new "
"contributors by their GitHub username and place mentions where appropriate "
"if a specific contributor is to thank for a new feature."
msgstr ""
"リリースのすべての変更のリストを作成します． `GitHub's compare feature "
"<https://github.com/pyvista/pyvista/compare>`_ を活用して，最後のタグや ``main`` "
"ブランチとの違いを確認することは，しばしば役に立ちます．特定の貢献者が新機能に感謝したい場合は，GitHubのユーザー名と適切な場所の記載で，新しい貢献者を必ず確認してください．"

#: ../../pyvista/CONTRIBUTING.rst:773
msgid ""
"Place your release notes from step 8 in the description for `the new release"
" on GitHub <https://github.com/pyvista/pyvista/releases/new>`_."
msgstr ""
"手順8のリリースノートを `GitHubの新リリース "
"<https://github.com/pyvista/pyvista/releases/new>`_ の説明に入れてください．"

#: ../../pyvista/CONTRIBUTING.rst:777
msgid ""
"Go grab a beer/coffee/water and wait for `@regro-cf-autotick-bot "
"<https://github.com/regro/cf-scripts>`_ to open a pull request on the conda-"
"forge `PyVista feedstock <https://github.com/conda-forge/pyvista-"
"feedstock>`_. Merge that pull request."
msgstr ""
"ビール，コーヒー，水を飲みに行って， `@regro-cf-autotick-bot <https://github.com/regro/cf-"
"scripts>`_ がconda-forge `PyVista feedstock <https://github.com/conda-"
"forge/pyvista-feedstock>`_ のプルリクエストを開くのを待って，そのプルリクエストをマージします．"

#: ../../pyvista/CONTRIBUTING.rst:783
msgid "Announce the new release in the PyVista Slack workspace and celebrate!"
msgstr "PyVista Slackワークスペースで新リリースを発表し，お祝いしましょう!"

#: ../../pyvista/CONTRIBUTING.rst:787
msgid "Patch Release Steps"
msgstr "パッチリリース手順"

#: ../../pyvista/CONTRIBUTING.rst:789
msgid ""
"Patch releases are for critical and important bugfixes that can not or "
"should not wait until a minor release. The steps for a patch release"
msgstr "パッチリリースは重要なバグフィックスのためのもので，マイナーリリースまで待つことはできないものです．パッチリリースの手順は"

#: ../../pyvista/CONTRIBUTING.rst:792
msgid ""
"Push the necessary bugfix(es) to the applicable release branch. This will "
"generally be the latest release branch (e.g. ``release/0.25``)."
msgstr ""
"必要な(複数の)バグフィックスを該当するリリースブランチにプッシュします．これは通常，最新のリリースブランチ(例  "
"``release/0.25``)です．"

#: ../../pyvista/CONTRIBUTING.rst:795
msgid ""
"Update ``pyvista/_version.py`` with the next patch increment (e.g. "
"``v0.25.1``), commit it, and open a PR that merge with the release branch. "
"This gives the ``pyvista`` community a chance to validate and approve the "
"bugfix release. Any additional hotfixes should be outside of this PR."
msgstr ""
"次のパッチ増分で ``pyvista/_version.py`` を更新し(例: ``v0.25.1`` "
")，コミットし，リリースブランチとマージするPRをオープンします．これにより， ``pyvista`` "
"コミュニティはバグ修正リリースを検証し，承認する機会を得ます．追加のホットフィックスは，このPRの範囲外でなければなりません．"

#: ../../pyvista/CONTRIBUTING.rst:801
msgid ""
"When approved, merge with the release branch, but not ``main`` as there is "
"no reason to increment the version of the ``main`` branch. Then create a tag"
" from the release branch with the applicable version number (see above for "
"the correct steps)."
msgstr ""
"承認されたら，リリースブランチとマージしますが， ``main`` ブランチのバージョンを増やす理由がないため， ``main`` "
"とはマージしません．次に，リリースブランチから適切なバージョン番号(正しい手順については上記を参照してください．)のタグを作成します．"

#: ../../pyvista/CONTRIBUTING.rst:806
msgid ""
"If deemed necessary, create a release notes page. Also, open the PR from "
"conda and follow the directions in step 10 in the minor release section."
msgstr "必要に応じて，リリースノートページを作成します．また，condaからPRを開き，マイナーリリースセクションの手順10の指示に従います．"

#: ../../pyvista/doc/extras/docker.rst:4
msgid "PyVista within a Docker Container"
msgstr "Dockerコンテナ内のPyVista"

#: ../../pyvista/doc/extras/docker.rst:5
msgid ""
"You can use ``pyvista`` from within a docker container with jupyterlab.  To "
"launch a local docker container, install ``docker``, then pull and run the "
"image with:"
msgstr ""
"jupyterlabでは，Dockerコンテナから ``pyvista`` を使用することができます． ローカルのDockerコンテナを起動するには， "
"``docker`` をインストールし，イメージをpullして実行する．"

#: ../../pyvista/doc/extras/docker.rst:13
msgid ""
"Finally, open the link that shows up from the terminal output and start "
"playing around with pyvista in jupyterlab!  For example:"
msgstr "最後に，端末出力から表示されるリンクを開き，jupyterlabのpyvistaを試してみましょう．たとえば，次のようになります．"

#: ../../pyvista/doc/extras/docker.rst:27
msgid ""
"You can see the latest tags of `our Docker containers here "
"<https://github.com/pyvista/pyvista/pkgs/container/pyvista>`_. "
"``ghcr.io/pyvista/pyvista:latest`` has JupyterLab set up while "
"``ghcr.io/pyvista/pyvista:latest-slim`` is a lightweight Python environment "
"without Jupyter"
msgstr ""
"`私たちのDockerコンテナの最新のタグは，こちら<https://github.com/pyvista/pyvista/pkgs/container/pyvista>`_"
" で見ることができます． ``ghcr.io/pyvista/pyvista:latest`` には JupyterLab がセットアップされており， "
"``ghcr.io/pyvista/pyvista:latest-slim`` は Jupyter を含まない軽量の Python 環境です．"

#: ../../pyvista/doc/extras/docker.rst:34
msgid ""
"You may need to log into the GitHub container registry by following the "
"directions at `Working with the Docker registry "
"<https://docs.github.com/en/enterprise-server@3.0/packages/working-with-a-"
"github-packages-registry/working-with-the-docker-registry>`_)"
msgstr ""
"`Dockerレジストリを利用した作業 <https://docs.github.com/en/enterprise-"
"server@3.0/packages/working-with-a-github-packages-registry/working-with-"
"the-docker-registry>`_ にある指示に従って，GitHubのコンテナレジストリにログインする必要があるかもしれません)"

#: ../../pyvista/doc/extras/docker.rst:39
msgid "Create your own Docker Container with `pyvista`"
msgstr "`pyvista` で独自のDockerコンテナを作成します"

#: ../../pyvista/doc/extras/docker.rst:40
msgid ""
"Clone pyvista and cd into this directory to create your own customized "
"docker image."
msgstr "pyvistaとcdをこのディレクトリにクローンし，独自のカスタマイズされたDockerイメージを作成します．"

#: ../../pyvista/doc/extras/docker.rst:50
msgid ""
"If you wish to have off-screen GPU support when rending on jupyterlab, see "
"the the notes about building with EGL at :ref:`ref_building_vtk`, or use the"
" custom, pre-built wheels at `Release 0.27.0 "
"<https://github.com/pyvista/pyvista/releases/tag/0.27.0>`_. Install that "
"customized vtk wheel onto your docker image by modifying the docker image at"
" ``pyvista/docker/jupyter.Dockerfile`` with:"
msgstr ""
"jupyterlabでレンタルする際にオフスクリーンGPUをサポートさせたい場合は， :ref:`ref_building_vtk` "
"のEGLでのビルドに関する注意を参照するか， `Release 0.27.0 "
"<https://github.com/pyvista/pyvista/releases/tag/0.27.0>`_ "
"のカスタムのプリビルドwheelを使用してください． ``pyvista/docker/jupyter.Dockerfile`` "
"のDockerイメージを次のように変更して，カスタマイズしたvtk wheelをdockerイメージにインストールします．"

#: ../../pyvista/doc/extras/docker.rst:62
msgid ""
"Additionally, you must install GPU drivers on the docker image of the same "
"version running on the host machine.  For example, if you are running on "
"Azure Kubernetes Service and the GPU nodes on the kubernetes cluster are "
"running ``450.51.06``, you must install the same version on your image.  "
"Since you will be using the underlying kernel module, there's no reason to "
"build it on the container (and trying will only result in an error)."
msgstr ""
"さらに，ホストマシンで実行されている同じバージョンのDockerイメージにGPUドライバをインストールする必要があります．例えば，Azure "
"Kubernetes Serviceを実行していて，Kubernetesクラスタ上のGPUノードが ``450.51.06`` "
"を実行している場合，同じバージョンをイメージにインストールする必要があります．基礎となるカーネル・モジュールを使用することになるので，コンテナー上にビルドする理由はありません(試行してもエラーになるだけです．)．"

#: ../../pyvista/doc/extras/docker.rst:76
msgid ""
"To verify that you're rendering on a GPU, first check the output of "
"``nvidia-smi``.  You should get something like:"
msgstr "GPUでレンダリングしているかどうかを確認するには，まず ``nvidia-smi`` の出力をチェックします．"

#: ../../pyvista/doc/extras/docker.rst:95
msgid ""
"Note the driver version (which is actually the kernel driver version), and "
"verify it matches the version you installed on your docker image."
msgstr ""
"ドライバのバージョン(これは実際にはカーネルドライバのバージョンです．)をメモし，それがdockerイメージにインストールしたバージョンと一致することを確認します．"

#: ../../pyvista/doc/extras/docker.rst:98
msgid ""
"Finally, check that your render window is using NVIDIA by running "
"``ReportCapabilities``:"
msgstr "最後に， ``ReportCapabilities`` を実行して，レンダーウィンドウがNVIDIAを使用していることを確認します．"

#: ../../pyvista/doc/extras/docker.rst:117
msgid ""
"If you get ``display id not set``, then your environment is likely not set "
"up correctly."
msgstr "``display id not set`` を受信した場合，環境が正しく設定されていない可能性があります．"

#: ../../pyvista/doc/extras/extending_pyvista.rst:2
msgid "Extending PyVista"
msgstr "PyVistaの拡張"

#: ../../pyvista/doc/extras/extending_pyvista.rst:4
msgid ""
"PyVista ``DataSets`` can be extended for user defined functionality. See "
":ref:`Extending PyVista Example <extending_pyvista_example>`."
msgstr ""
"PyVistaの ``DataSets`` は，ユーザ定義の機能を拡張することができます．詳しくは :ref:`Extending PyVista "
"Example <extending_pyvista_example>` をご覧ください．"

#: ../../pyvista/doc/extras/flask.rst:4
msgid "Flask Application"
msgstr "Flaskアプリケーション"

#: ../../pyvista/doc/extras/flask.rst:5
msgid ""
"You can use ``pyvista`` in to make a flask application to display both "
"static and dynamic plots.  See the following examples as well as the source "
"at `Flask Example "
"<https://github.com/pyvista/pyvista/tree/main/examples_flask>`__."
msgstr ""
"``pyvista`` を使用して，静的と動的の両方のプロットを表示するflaskアプリケーションを作成できます．以下の例と `Flask "
"Example <https://github.com/pyvista/pyvista/tree/main/examples_flask>`__ "
"のソースを参照してください．"

#: ../../pyvista/doc/extras/flask.rst:11
msgid "Dynamic Example"
msgstr "動的な例"

#: ../../pyvista/doc/extras/flask.rst:15
msgid "Example Dynamic Flask Webpage"
msgstr "動的なFlaskのWebページの例"

#: ../../pyvista/doc/extras/flask.rst:19 ../../pyvista/doc/extras/flask.rst:45
msgid "Python Application ``app.py``"
msgstr "Pythonアプリケーション ``app.py``"

#: ../../pyvista/doc/extras/flask.rst:25 ../../pyvista/doc/extras/flask.rst:51
msgid "Ajax Template ``index.html``"
msgstr "Ajaxテンプレート ``index.html``"

#: ../../pyvista/doc/extras/flask.rst:26 ../../pyvista/doc/extras/flask.rst:52
msgid ""
"This template should be within the ``templates`` directory in the same path "
"as ``app.py``."
msgstr "このテンプレートは， ``app.py`` と同じパスの ``templates`` ディレクトリ内にある必要があります．"

#: ../../pyvista/doc/extras/flask.rst:29 ../../pyvista/doc/extras/flask.rst:55
msgid ""
"This template returns the ``meshtype`` parameter back to the ``get_img`` "
"method in the flask app, which is used to select the type of mesh to be "
"plotted."
msgstr ""
"このテンプレートは， ``meshtype`` パラメータをflaskアプリケーションの ``get_img`` メソッドに取得します． "
"``get_img`` メソッドは，プロットするメッシュのタイプを選択するために使用されます．"

#: ../../pyvista/doc/extras/flask.rst:37
msgid "Static Example"
msgstr "静的な例"

#: ../../pyvista/doc/extras/flask.rst:41
msgid "Example Static Flask Webpage"
msgstr "静的なFlaskのWebページの例"

#: ../../pyvista/doc/extras/index.rst:2
msgid "Extras"
msgstr "その他"

#: ../../pyvista/doc/extras/index.rst:3
msgid ""
"This section contains resources to expand the usage of PyVista beyond just "
"running it from a Python console or IDE.  For example, you can package "
"PyVista in a docker image and build VTK with EGL to enable rich headless "
"plotting on remote servers.  You can also package PyVista using "
"`pyinstaller`_ to be used within a standalone application.  You could even "
"make a basic web application using `flask`_."
msgstr ""
"このセクションには，PythonコンソールまたはIDEからPyVistaを実行するだけでなく，PyVistaの使用方法を拡張するためのリソースが含まれています．例えば，PyVistaをDockerイメージにパッケージ化し，EGLでVTKをビルドして，リモートサーバ上での豊富なヘッドレスプロットを可能にすることができます．"
" `pyinstaller`_ を使用してPyVistaをパッケージ化し，スタンドアロンアプリケーション内で使用することもできます． `flask`_ "
"を使って基本的なWebアプリケーションを作成することもできます．"

#: ../../pyvista/doc/extras/index.rst:11
msgid ""
"See the :ref:`ref_developer_notes` section for details on contributing and "
"how you can help develop PyVista."
msgstr "貢献の詳細とPyVistaの開発方法については， :ref:`ref_developer_notes` のセクションを参照してください．"

#: ../../pyvista/doc/extras/plot_directive.rst:4
msgid "Sphinx PyVista Plot Directive"
msgstr "Sphinx PyVista Plot ディレクティブ"

#: ../../pyvista/doc/extras/plot_directive.rst:5
msgid ""
"You can generate static images of pyvista plots using the ``.. pyvista-"
"plot::`` directive by adding the following to your ``conf.py`` when building"
" your documentation using Sphinx."
msgstr ""
"Sphinxを使ってドキュメントを作成する際に，以下の内容を ``conf.py`` に追加することで， ``.. pyvista-plot::`` "
"ディレクティブを使用して，pyvistaのプロットの静的なイメージを生成することができます．"

#: ../../pyvista/doc/extras/plot_directive.rst:16
msgid ""
"You can then issue the plotting directive within your sphinx documentation "
"files::"
msgstr "そうすれば，sphinxのドキュメントファイルの中で，plottingディレクティブを発行することができます::"

#: ../../pyvista/doc/extras/plot_directive.rst:27
msgid "Which will be rendered as:"
msgstr "以下のように表示されます．"

#: ../../pyvista/doc/extras/plot_directive.rst:14
msgid "This is a default sphere"
msgstr "これはデフォルトの球体"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:1
msgid "Plot directive module."
msgstr "プロットディレクティブモジュール．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:4
msgid "A directive for including a PyVista plot in a Sphinx document"
msgstr "SphinxドキュメントにPyVistaプロットを含めるためのディレクティブ"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:6
msgid ""
"The ``.. pyvista-plot::`` sphinx directive will include an inline ``.png`` "
"image."
msgstr "``.. pyvista-plot::`` ディレクティブは，インラインの ``.png`` イメージを含みます．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:9
msgid "The source code for the plot may be included in one of two ways:"
msgstr "プロットのソースコードは，次の2つの方法のいずれかで含まれます．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:11
msgid "Using **doctest** syntax::"
msgstr "**doctest** 構文を使用しています．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:19
msgid "**A path to a source file** as the argument to the directive::"
msgstr "**ソースファイルへのパス** を directive の引数として指定します::"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:23
msgid ""
"When a path to a source file is given, the content of the directive may "
"optionally contain a caption for the plot::"
msgstr "ソースファイルへのパスが与えられている場合，ディレクティブの内容には，オプションでプロットのキャプションを含めることができます::"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:30
msgid ""
"Additionally, one may specify the name of a function to call (with no "
"arguments) immediately after importing the module::"
msgstr "さらに，モジュールをインポートした直後に，（引数なしで）呼び出す関数の名前を指定することもできます．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:36
msgid "Code blocks containing ``doctest:+SKIP`` will be skipped."
msgstr "``doctest:+SKIP`` を含むコードブロックはスキップされます．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:39
msgid "Animations will not be saved, only the last frame will be shown."
msgstr "アニメーションは保存されず，最後のフレームのみが表示されます．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:43
msgid "Options"
msgstr "オプション"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:44
msgid "The ``pyvista-plot`` directive supports the following options:"
msgstr "```pyvista-plot`` ディレクティブは，以下のオプションをサポートしています．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:48
msgid "include-source"
msgstr "include-source"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive-1
msgid "bool"
msgstr "bool"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:47
msgid ""
"Whether to display the source code. The default can be changed using the "
"`plot_include_source` variable in :file:`conf.py`."
msgstr ""
"ソースコードを表示するかどうかを指定します．デフォルトは :file:`conf.py` の `plot_include_source` "
"変数で変更できます．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:53
msgid "encoding"
msgstr "encoding"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive-1
msgid "str"
msgstr "str"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:51
msgid ""
"If this source file is in a non-UTF8 or non-ASCII encoding, the encoding "
"must be specified using the ``:encoding:`` option.  The encoding will not be"
" inferred using the ``-*- coding -*-`` metacomment."
msgstr ""
"もし，このソースファイルがUTF8やASCII以外のエンコーディングである場合には， ``:encoding:`` "
"オプションを使ってエンコーディングを指定しなければなりません． このエンコーディングは ``-*- coding -*-`` "
"メタコメントを使って推測されることはありません．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:58
msgid "context"
msgstr "context"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive-1
msgid "None"
msgstr "None"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:56
msgid ""
"If provided, the code will be run in the context of all previous plot "
"directives for which the ``:context:`` option was specified.  This only "
"applies to inline code plot directives, not those run from files."
msgstr ""
"このオプションが指定された場合，コードは ``:context:`` "
"オプションが指定された以前のすべてのプロットディレクティブのコンテクストで実行されます． "
"これはインラインコードのプロットディレクティブにのみ適用され，ファイルから実行されるものには適用されません．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:62
msgid "nofigs"
msgstr "nofigs"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:61
msgid ""
"If specified, the code block will be run, but no figures will be inserted.  "
"This is usually useful with the ``:context:`` option."
msgstr ""
"指定された場合，コードブロックは実行されますが，数字は挿入されません． これは通常 ``:context:`` オプションと一緒に使うと便利です．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:67
msgid "caption"
msgstr "caption"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:65
msgid ""
"If specified, the option's argument will be used as a caption for the "
"figure. This overwrites the caption given in the content, when the plot is "
"generated from a file."
msgstr ""
"指定された場合，オプションの引数が図のキャプションとして使用されます．これは，ファイルからプロットが生成された場合，コンテンツで与えられたキャプションを上書きします．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:69
msgid ""
"Additionally, this directive supports all of the options of the `image` "
"directive, except for *target* (since plot will add its own target).  These "
"include *alt*, *height*, *width*, *scale*, *align*."
msgstr ""
"さらに，このディレクティブは， *target* を除いて， `image` ディレクティブのすべてのオプションをサポートしています (plot "
"が独自のターゲットを追加するため)． これらのオプションには *alt*, *height*, *width*, *scale*, *align* "
"があります．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:75
msgid "Configuration options"
msgstr "設定オプション"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:76
msgid "The plot directive has the following configuration options:"
msgstr "plotディレクティブには，以下の設定項目があります．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:79
msgid "plot_include_source"
msgstr "plot_include_source"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:79
msgid "Default value for the include-source option. Default is ``True``."
msgstr "include-sourceオプションのデフォルト値．デフォルトは ``True`` ．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:84
msgid "plot_basedir"
msgstr "plot_basedir"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:82
msgid ""
"Base directory, to which ``plot::`` file names are relative to.  If ``None``"
" or unset, file names are relative to the directory where the file "
"containing the directive is."
msgstr ""
"ベースとなるディレクトリで， ``plot::`` のファイル名の相対パスを指定します．  ``None`` "
"または未設定の場合には，ファイル名はそのディレクティブを含むファイルがあるディレクトリに相対します．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:87
msgid "plot_html_show_formats"
msgstr "plot_html_show_formats"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:87
msgid "Whether to show links to the files in HTML. Default ``True``."
msgstr "ファイルへのリンクをHTMLで表示するかどうか．デフォルトは ``True`` ．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:90
msgid "plot_template"
msgstr "plot_template"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:90
msgid "Provide a customized Jinja2 template for preparing restructured text."
msgstr "再構成されたテキストを作成するためのカスタマイズされた Jinja2 テンプレートを提供します．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:93
msgid "plot_setup"
msgstr "plot_setup"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:93
msgid "Python code to be run before every plot directive block."
msgstr "各プロットディレクティブブロックの前に実行されるPythonコード．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:96
msgid "plot_cleanup"
msgstr "plot_cleanup"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:96
msgid "Python code to be run after every plot directive block."
msgstr "各プロットディレクティブブロックの後に実行されるPythonコード．"

#: ../../pyvista/pyvista/ext/plot_directive.pydocstring of
#: pyvista.ext.plot_directive:98
msgid ""
"These options can be set by defining global variables of the same name in "
":file:`conf.py`."
msgstr "これらのオプションは， :file:`conf.py` で同名のグローバル変数を定義することで設定できます．"

#: ../../pyvista/doc/extras/pyinstaller.rst:4
msgid "Freezing PyVista with pyinstaller"
msgstr "pyinstallerを使用したPyVistaのフリーズ"

#: ../../pyvista/doc/extras/pyinstaller.rst:5
msgid ""
"You can make some fantastic standalone programs with ``pyinstaller`` and "
"``pyvista``, and you can even make a graphical user interface incorporating "
"``PyQt5`` or ``pyside2``.  Depending on your version of VTK, this requires "
"some extra steps to setup."
msgstr ""
"``pyinstaller`` や ``pyvista`` を使って素晴らしいスタンドアローンのプログラムを作ることができますし， ``PyQt5`` "
"や ``pyside2`` "
"を組み込んだグラフィカルユーザインタフェースを作ることもできます．VTKのバージョンによっては，これをセットアップするために追加のステップが必要です．"

#: ../../pyvista/doc/extras/pyinstaller.rst:10
msgid ""
"When running VTK v9, you need to add several additional ``hiddenimports``.  "
"For clarity and completeness, create a spec file (we'll name it "
"``pyvista.spec``) following the directions given at `Using Spec Files "
"<https://pyinstaller.readthedocs.io/en/stable/spec-files.html>`__.  Modify "
"the ``Analysis`` and add the following hidden imports:"
msgstr ""
"VTK v9を実行しているときは，さらにいくつかの ``hiddenimports`` "
"を追加する必要があります．説明をわかりやすく，完全なものにするために， `Specファイルを使う "
"<https://pyinstaller.readthedocs.io/en/stable/spec-files.html>`__ "
"の指示に従ってスペックファイル(私たちは ``pyvista.spec`` と名付けます)を作成してください． ``Analysis`` "
"を修正し，次の非表示のインポートを追加します．"

#: ../../pyvista/doc/extras/pyinstaller.rst:32
msgid ""
"From there, you can freeze an application using ``pyvista`` and create a "
"standalone application."
msgstr "そこから， ``pyvista`` を使用してアプリケーションをフリーズし，スタンドアロンアプリケーションを作成できます．"

#: ../../pyvista/doc/extras/vtk_data.rst:3
msgid "Using Local VTK-Data"
msgstr "ローカルVTKデータの使用"

#: ../../pyvista/doc/extras/vtk_data.rst:5
msgid ""
"Normally, the PyVista examples will be downloaded from the `pyvista/vtk-data"
" repository <https://github.com/pyvista/vtk-data>`_. Alternatively, the "
"entire pyvista/vtk-data repository can be supplied as a local folder. If the"
" ``PYVISTA_VTK_DATA`` environment variable is set to the folder path, the "
"examples will instead be copied from the local folder."
msgstr ""
"通常，PyVista のサンプルは， `pyvista/vtk-data リポジトリ <https://github.com/pyvista/vtk-"
"data>`_ からダウンロードします．また，pyvista/vtk-data リポジトリ全体をローカルフォルダとして提供することもできます．環境変数 "
"``PYVISTA_VTK_DATA`` にフォルダパスが設定されている場合は，代わりに例題がローカルフォルダからコピーされます．"

#: ../../pyvista/doc/extras/vtk_data.rst:11
msgid "This example uses a cloned vtk-data repository:"
msgstr "この例では，クローンされたvtk-dataリポジトリを使用しています．"
