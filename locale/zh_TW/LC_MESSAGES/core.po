# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2021, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.29.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-07 02:08+0000\n"
"PO-Revision-Date: 2020-08-05 16:06+0000\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/getfem-doc/teams/112279/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pyvista/docs/core/camera.rst:2
msgid "Cameras"
msgstr ""

#: ../../pyvista/docs/core/camera.rst:3
msgid ""
"The :class:`pyvista.Camera` class adds additional functionality and a "
"pythonic API to the ``vtk.vtkCamera`` class. :class:`pyvista.Camera` objects"
" come with a default set of cameras that work well in most cases, but in "
"many situations a more hands-on approach to using the camera is necessary."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:11 ../../pyvista/docs/core/lights.rst:10
msgid "Brief Example"
msgstr ""

#: ../../pyvista/docs/core/camera.rst:13
msgid "Create a frustum of camera, then create a scene of inside frustum."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:86
msgid "Controlling Camera Rotation"
msgstr ""

#: ../../pyvista/docs/core/camera.rst:87
msgid ""
"In addition to directly controlling the camera position by setting it via "
"the :py:attr:`pyvista.Camera.position` property, you can also directly "
"control the :py:attr:`pyvista.Camera.roll`, "
":py:attr:`pyvista.Camera.elevation`, and :py:attr:`pyvista.Camera.azimuth` "
"of the camera."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:95
msgid ""
"For example, you can modify the roll.  First, generate a plot of an "
"orientation cube while initially setting the camera position to look at the "
"``'yz'``."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:107
msgid "Here we modify the roll in-place."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:118
msgid ""
"And here we offset the azimuth of the camera by 45 degrees to look at the "
"``X+`` and ``Y+`` faces."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:130
msgid ""
"Here, we move upward by setting the elevation of the camera to 45 degrees to"
" see the ``X+`` and ``Z+`` faces."
msgstr ""

#: ../../pyvista/docs/core/camera.rst:144
#: ../../pyvista/docs/core/lights.rst:122
msgid "API reference"
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera:1
msgid "PyVista wrapper for the VTK Camera class."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.azimuth:9 ../../pyvista/pyvista/plotting/camera.pydocstring
#: of pyvista.Camera.clipping_range:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.direction:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.distance:4 ../../pyvista/pyvista/plotting/camera.pydocstring
#: of pyvista.Camera.elevation:8
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.focal_point:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.model_transform_matrix:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.parallel_scale:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.position:4 ../../pyvista/pyvista/plotting/camera.pydocstring
#: of pyvista.Camera.roll:6 ../../pyvista/pyvista/plotting/camera.pydocstring
#: of pyvista.Camera.thickness:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of pyvista.Camera.up:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.view_angle:4
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:11
#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.zoom:11
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock:11
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_bounds:10
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:10
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:11
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:10
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:29
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:21
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:18
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:15
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:28
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:38
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:43
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:24
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:15
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:27
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:25
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:34
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:32
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:36
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:50
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:53
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:34
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:38
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:46
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:22
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.flip_normals:4
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:16
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:30
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:13
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:23
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:23
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:28
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:30
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:39
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:31
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:24
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:29
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:21
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:13
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:13
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:16
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:19
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:18
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:65
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:12
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.attenuation_values:14
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.cone_angle:17
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.copy:13
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:12
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.exponent:20 ../../pyvista/pyvista/plotting/lights.pydocstring
#: of pyvista.Light.focal_point:9
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.intensity:4 ../../pyvista/pyvista/plotting/lights.pydocstring
#: of pyvista.Light.is_camera_light:4
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_headlight:4
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_scene_light:4
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:27
#: ../../pyvista/pyvista/plotting/lights.pydocstring of pyvista.Light.on:6
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.position:9 ../../pyvista/pyvista/plotting/lights.pydocstring
#: of pyvista.Light.positional:19
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:24
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.shadow_attenuation:10
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.show_actor:10
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:12
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.switch_off:4
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.switch_on:4
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.transform_matrix:21
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_focal_point:9
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_position:9
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.actual_memory_size:7
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy_attributes:4
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy_structure:4
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:11
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:14
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:11
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:28
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:16
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:15
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:20
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:28
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.dimensions:7
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:16
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:20
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.save:15
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:15
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.visible_bounds:13
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:13
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid.hide_cells:11
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:53
msgid "Examples"
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera:5
msgid "Create a camera at the pyvista module level"
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera:10
msgid ""
"Access the active camera of a plotter and get the position of the camera."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.azimuth:1
msgid "Azimuth of the camera."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.azimuth:3
msgid ""
"Rotate the camera about the view up vector centered at the focal point. Note"
" that the view up vector is whatever was set via SetViewUp, and is not "
"necessarily perpendicular to the direction of projection."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.clipping_range:1
msgid ""
"Return the location of the near and far clipping planes along the direction "
"of projection."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.direction:1
msgid "Vector from the camera position to the focal point."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.disable_parallel_projection:1
msgid "Disable the use of perspective projection."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.distance:1
msgid "Distance from the camera position to the focal point."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.elevation:1
msgid "Vertical rotation of the scene."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.elevation:3
msgid ""
"Rotate the camera about the cross product of the negative of the direction "
"of projection and the view up vector, using the focal point as the center of"
" rotation."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.enable_parallel_projection:1
msgid "Enable parallel projection."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.enable_parallel_projection:3
msgid ""
"The camera will have a parallel projection. Parallel projection is often "
"useful when viewing images or 2D datasets."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.focal_point:1
msgid "Location of the camera's focus in world coordinates."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.is_parallel_projection:1
msgid "Return True if parallel projection is set."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.model_transform_matrix:1
msgid "Return the camera's model transformation matrix."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.parallel_scale:1
msgid "Scaling used for a parallel projection."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.position:1
msgid "Position of the camera in world coordinates."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of pyvista.Camera.roll:1
msgid "Rotate the camera about the direction of projection."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of pyvista.Camera.roll:3
msgid "This will spin the camera about its axis."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.thickness:1
msgid "Return the distance between clipping planes."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of pyvista.Camera.up:1
msgid "Return the \"up\" of the camera."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.Camera.view_angle:1
msgid "Return the camera view angle."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:1
msgid "Get the view frustum."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.clean:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_bounds:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.get_data_range:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.overwrite:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_x:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_y:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_z:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.translate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.connectivity:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.decimate_boundary:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_cells:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.outline:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.outline_corners:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.split_bodies:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.edge_mask:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_boundaries:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UnstructuredGridFilters.delaunay_2d:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.combine:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline_corners:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.fit_plane_to_points:0
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:0
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.copy:0
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.from_vtk:0
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:0
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy:0
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.save:0
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.get_data_range:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.save:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid.hide_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:0
msgid "Parameters"
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:3
msgid "The aspect of the viewport to compute the planes. Defaults to 1.0."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.bounds:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.volume:0 ../../pyvista/pyvista/core/dataset.pydocstring
#: of pyvista.DataSet.arrows:0 ../../pyvista/pyvista/core/dataset.pydocstring
#: of pyvista.core.dataset.DataSet.cell_bounds:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.volume:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_cells:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.surface_indices:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:0
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.actual_memory_size:0
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells_dict:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.dimensions:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.visible_bounds:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.area:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.volume:0
msgid "Returns"
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:7
msgid "**frustum** -- View frustum."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.view_frustum:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.bounds:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy:0
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.volume:0 ../../pyvista/pyvista/core/dataset.pydocstring
#: of pyvista.DataSet.arrows:0 ../../pyvista/pyvista/core/dataset.pydocstring
#: of pyvista.core.dataset.DataSet.cell_bounds:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.volume:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_cells:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.surface_indices:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:0
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:0
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:0
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.actual_memory_size:0
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells_dict:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.dimensions:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.visible_bounds:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.area:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.volume:0
msgid "Return type"
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.zoom:1
msgid "Set the zoom of the camera."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.zoom:3
msgid "In perspective mode, decrease the view angle by the specified factor."
msgstr ""

#: ../../pyvista/pyvista/plotting/camera.pydocstring of
#: pyvista.plotting.camera.Camera.zoom:6
msgid ""
"In parallel mode, decrease the parallel scale by the specified factor. A "
"value greater than 1 is a zoom-in, a value less than 1 is a zoom-out."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:2
msgid "Composite Datasets"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite:1
msgid "Container to mimic ``vtkMultiBlockDataSet`` objects."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite:3
msgid ""
"These classes hold many VTK datasets in one object that can be passed to VTK"
" algorithms and PyVista filtering/plotting routines."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:8
msgid "MultiBlock Datasets"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:11
#: ../../pyvista/docs/core/dataset.rst:31 ../../pyvista/docs/core/grids.rst:12
#: ../../pyvista/docs/core/grids.rst:33 ../../pyvista/docs/core/grids.rst:56
#: ../../pyvista/docs/core/objects.rst:9
#: ../../pyvista/docs/core/objects.rst:31
#: ../../pyvista/docs/core/point-grids.rst:313
#: ../../pyvista/docs/core/point-grids.rst:332
#: ../../pyvista/docs/core/point-grids.rst:355
#: ../../pyvista/docs/core/point-grids.rst:378
#: ../../pyvista/docs/core/points.rst:140
msgid "Attributes"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
msgid ":obj:`bounds <pyvista.core.composite.pyvista.MultiBlock.bounds>`\\"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.bounds:1
msgid "Find min/max for bounds across blocks."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
msgid ":obj:`center <pyvista.core.composite.pyvista.MultiBlock.center>`\\"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.center:1
#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.center:1
msgid "Return the center of the bounding box."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
msgid ":obj:`length <pyvista.core.composite.pyvista.MultiBlock.length>`\\"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.length:1
#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.length:1
msgid "Return the length of the diagonal of the bounding box."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
msgid ":obj:`n_blocks <pyvista.core.composite.pyvista.MultiBlock.n_blocks>`\\"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.n_blocks:1
msgid "Return the total number of blocks set."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
msgid ":obj:`volume <pyvista.core.composite.pyvista.MultiBlock.volume>`\\"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:14:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.volume:1
msgid "Return the total volume of all meshes in this dataset."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:16
#: ../../pyvista/docs/core/dataset.rst:36
#: ../../pyvista/docs/core/filters.rst:20
#: ../../pyvista/docs/core/filters.rst:40
#: ../../pyvista/docs/core/filters.rst:59
#: ../../pyvista/docs/core/filters.rst:79
#: ../../pyvista/docs/core/filters.rst:98 ../../pyvista/docs/core/grids.rst:17
#: ../../pyvista/docs/core/grids.rst:38 ../../pyvista/docs/core/grids.rst:61
#: ../../pyvista/docs/core/objects.rst:14
#: ../../pyvista/docs/core/objects.rst:36
#: ../../pyvista/docs/core/point-grids.rst:318
#: ../../pyvista/docs/core/point-grids.rst:336
#: ../../pyvista/docs/core/point-grids.rst:360
#: ../../pyvista/docs/core/point-grids.rst:383
#: ../../pyvista/docs/core/points.rst:145
msgid "Methods"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`append <pyvista.core.composite.pyvista.MultiBlock.append>`\\ "
"\\(data\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.append:1
msgid "Add a data set to the next block index."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`clean <pyvista.core.composite.pyvista.MultiBlock.clean>`\\ "
"\\(\\[empty\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.clean:1
msgid "Remove any null blocks in place."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ":obj:`copy <pyvista.core.composite.pyvista.MultiBlock.copy>`\\ \\(\\[deep\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy:1
#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy:1
msgid "Return a copy of the object."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`copy_meta_from "
"<pyvista.core.composite.pyvista.MultiBlock.copy_meta_from>`\\ \\(ido\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy_meta_from:1
#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.copy_meta_from:1
#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy_meta_from:1
msgid "Copy pyvista meta data onto this object from another object."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ":obj:`get <pyvista.core.composite.pyvista.MultiBlock.get>`\\ \\(index\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.get:1
msgid "Get a block by its index or name."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`get_block_name "
"<pyvista.core.composite.pyvista.MultiBlock.get_block_name>`\\ \\(index\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.get_block_name:1
msgid "Return the string name of the block at the given index."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`get_data_range "
"<pyvista.core.composite.pyvista.MultiBlock.get_data_range>`\\ \\(name\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.get_data_range:1
msgid "Get the min/max of an array given its name across all blocks."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`get_index_by_name "
"<pyvista.core.composite.pyvista.MultiBlock.get_index_by_name>`\\ \\(name\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.get_index_by_name:1
msgid "Find the index number by block name."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ":obj:`keys <pyvista.core.composite.pyvista.MultiBlock.keys>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.keys:1
msgid "Get all the block names in the dataset."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ":obj:`next <pyvista.core.composite.pyvista.MultiBlock.next>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.next:1
msgid "Get the next block from the iterator."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`plot <pyvista.core.composite.pyvista.MultiBlock.plot>`\\ "
"\\(\\[off\\_screen\\, full\\_screen\\, screenshot\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:1
#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:1
msgid "Plot a vtk or numpy object."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ":obj:`pop <pyvista.core.composite.pyvista.MultiBlock.pop>`\\ \\(index\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.pop:1
msgid "Pop off a block at the specified index."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`set_block_name "
"<pyvista.core.composite.pyvista.MultiBlock.set_block_name>`\\ \\(index\\, "
"name\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.set_block_name:1
msgid "Set a block's string name at the specified index."
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
msgid ""
":obj:`wrap_nested <pyvista.core.composite.pyvista.MultiBlock.wrap_nested>`\\"
" \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/composite.rst:20:<autosummary>:1
#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.wrap_nested:1
msgid ""
"Ensure that all nested data structures are wrapped as PyVista datasets."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkMultiBlockDataSet`, "
":class:`pyvista.core.filters.CompositeFilters`, "
":class:`pyvista.core.dataobject.DataObject`"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock:1
msgid "A composite class to hold many data sets which can be iterated over."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock:3
msgid ""
"This wraps/extends the ``vtkMultiBlockDataSet`` class in VTK so that we can "
"easily plot these data sets and use the composite in a Pythonic manner."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock:6
msgid ""
"You can think of ``MultiBlock`` like lists or dictionaries as we can iterate"
" over this data structure by index and we can also access blocks by their "
"string name."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.bounds:3
msgid "length 6 tuple of floats containing min/max along each axis"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.clean:3
msgid "Remove any meshes that are empty as well (have zero points)."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy:3
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy:3
msgid "When True makes a full copy of the object."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.copy:6
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy:6
msgid "**newobject** -- Deep or shallow copy of the input."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.get:3
msgid "If the name is non-unique then returns the first occurrence."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:3
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:3
msgid "VTK object or ``numpy`` array to be plotted."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:5
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:5
msgid ""
"Plots off screen when ``True``.  Helpful for saving screenshots without a "
"window popping up."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:8
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:8
msgid ""
"Opens window in full screen.  When enabled, ignores ``window_size``. Default"
" ``False``."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:11
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:11
msgid ""
"Saves screenshot to file when enabled.  See: "
"``help(pyvista.Plotter.screenshot)``.  Default ``False``.  When ``True``, "
"takes screenshot and returns ``numpy`` array of image."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:11
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:11
msgid ""
"Saves screenshot to file when enabled.  See: "
"``help(pyvista.Plotter.screenshot)``.  Default ``False``."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:14
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:14
msgid "When ``True``, takes screenshot and returns ``numpy`` array of image."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:16
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:16
msgid "Window size in pixels.  Defaults to ``[1024, 768]``"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:18
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:18
msgid ""
"Shows mesh bounds when ``True``.  Default ``False``. Alias ``show_grid`` "
"also accepted."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:21
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:21
msgid ""
"When ``True``, the resulting plot is placed inline a jupyter notebook.  "
"Assumes a jupyter console is active."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:24
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:24
msgid "Shows a vtk axes widget.  Enabled by default."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:26
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:26
msgid "Adds text at the bottom of the plot."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:28
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:28
msgid "Use the ``add_volume`` method for volume rendering."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:30
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:30
msgid ""
"Deprecated.  Instead, set the backend either globally with "
"``pyvista.set_jupyter_backend('ipyvtklink')`` or with "
"``backend='ipyvtklink'``."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:34
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:34
msgid ""
"Jupyter notebook plotting backend to use.  One of the following:  * "
"``'none'`` : Do not display in the notebook. * ``'static'`` : Display a "
"static figure. * ``'ipygany'`` : Show a ``ipygany`` widget * ``'panel'`` : "
"Show a ``panel`` widget.  This can also be set globally with "
"``pyvista.set_jupyter_backend``"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:34
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:34
msgid "Jupyter notebook plotting backend to use.  One of the following:"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:37
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:37
msgid "``'none'`` : Do not display in the notebook."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:38
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:38
msgid "``'static'`` : Display a static figure."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:39
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:39
msgid "``'ipygany'`` : Show a ``ipygany`` widget"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:40
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:40
msgid "``'panel'`` : Show a ``panel`` widget."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:42
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:42
msgid "This can also be set globally with ``pyvista.set_jupyter_backend``"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:45
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:45
msgid "Keyword arguments for the Jupyter notebook plotting backend."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:47
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:47
msgid "See help(Plotter.add_mesh) for additional options."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:50
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:50
msgid ""
"* **cpos** (*list*) -- List of camera position, focal point, and view up. * "
"**img** (*numpy.ndarray*) -- Array containing pixel RGB and alpha.  Sized:"
"   [Window height x Window width x 3] for transparent_background=False   "
"[Window height x Window width x 4] for transparent_background=True   "
"Returned only when screenshot enabled"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:50
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:50
msgid ""
"**cpos** (*list*) -- List of camera position, focal point, and view up."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.plotting.helpers.plot:51
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.plotting.helpers.plot:51
msgid ""
"**img** (*numpy.ndarray*) -- Array containing pixel RGB and alpha.  Sized: "
"[Window height x Window width x 3] for transparent_background=False [Window "
"height x Window width x 4] for transparent_background=True Returned only "
"when screenshot enabled"
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.MultiBlock.volume:3 ../../pyvista/pyvista/core/dataset.pydocstring
#: of pyvista.DataSet.volume:3 ../../pyvista/pyvista/core/pointset.pydocstring
#: of pyvista.PolyData.volume:5
msgid "**volume** -- Total volume of the mesh."
msgstr ""

#: ../../pyvista/pyvista/core/composite.pydocstring of
#: pyvista.core.composite.MultiBlock.wrap_nested:3
msgid "This is performed in place."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:4
msgid "Datasets"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:6
msgid ""
"Datasets are any spatially reference information and usually consist of "
"geometrical representations of a surface or volume in 3D space. In VTK, this"
" superclass is represented by the ``vtk.vtkDataSet`` abstract class."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:10
msgid ""
"In VTK, datasets consist of geometry, topology, and attributes to which "
"PyVista provides direct access:"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:13
msgid "Geometry is the collection of points and cells in 2D or 3D space."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:14
msgid ""
"Topology defines the structure of the dataset, or how the points are "
"connected to each other to form a cells making a surface or volume."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:15
msgid ""
"Attributes are any data values that are associated to either the points or "
"cells of the dataset"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:17
msgid ""
"All of the following data types are listed subclasses of a dataset and share"
" a set of common functionality which we wrap into the base class "
":class:`pyvista.DataSet`."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:23
msgid "The DataSet Model"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:25
msgid ""
"The :class:`pyvista.DataSet` class holds attributes that are *common* to all"
" spatially referenced datasets in PyVista. This base class is analogous to "
"VTK's ``vtk.vtkDataSet`` class."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_scalars <pyvista.DataSet.active_scalars>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_scalars:1
msgid "Return the active scalars as an array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_scalars_info <pyvista.DataSet.active_scalars_info>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_scalars_info:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_tensors_info:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_vectors_info:1
msgid "[field, name]."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_scalars_name <pyvista.DataSet.active_scalars_name>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_scalars_name:1
msgid "Return the active scalar's name."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_tensors <pyvista.DataSet.active_tensors>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_tensors:1
msgid "Return the active tensors array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_tensors_info <pyvista.DataSet.active_tensors_info>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_tensors_name <pyvista.DataSet.active_tensors_name>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_tensors_name:1
msgid "Return the name of the active tensor array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_vectors <pyvista.DataSet.active_vectors>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_vectors:1
msgid "Return the active vectors array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_vectors_info <pyvista.DataSet.active_vectors_info>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`active_vectors_name <pyvista.DataSet.active_vectors_name>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_vectors_name:1
msgid "Return the name of the active vectors array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`array_names <pyvista.DataSet.array_names>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.array_names:1
msgid "Return a list of array names for the dataset."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`arrows <pyvista.DataSet.arrows>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.arrows:1
msgid "Return a glyph representation of the active vector data as arrows."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`bounds <pyvista.DataSet.bounds>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.bounds:1
msgid "Return the bounding box of this dataset."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`cell_arrays <pyvista.DataSet.cell_arrays>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.cell_arrays:1
msgid "Return vtkCellData as DataSetAttributes."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`center <pyvista.DataSet.center>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`extent <pyvista.DataSet.extent>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.extent:1
msgid "Return the range of the bounding box."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`length <pyvista.DataSet.length>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`n_arrays <pyvista.DataSet.n_arrays>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.n_arrays:1
msgid "Return the number of arrays present in the dataset."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`n_cells <pyvista.DataSet.n_cells>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.n_cells:1
msgid "Return the number of cells in the entire dataset."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`n_points <pyvista.DataSet.n_points>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.n_points:1
msgid "Return the number of points in the entire dataset."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`number_of_cells <pyvista.DataSet.number_of_cells>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.number_of_cells:1
#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.n_faces:1 ../../pyvista/pyvista/core/pointset.pydocstring
#: of pyvista.PolyData.number_of_faces:1
msgid "Return the number of cells."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`number_of_points <pyvista.DataSet.number_of_points>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.number_of_points:1
msgid "Return the number of points."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`point_arrays <pyvista.DataSet.point_arrays>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.point_arrays:1
msgid "Return vtkPointData as DataSetAttributes."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`points <pyvista.DataSet.points>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.points:1
msgid "Return a pointer to the points as a numpy object."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`t_coords <pyvista.DataSet.t_coords>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.t_coords:1
msgid "Return the active texture coordinates on the points."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`textures <pyvista.DataSet.textures>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.textures:1
msgid "Return a dictionary to hold compatible ``vtk.vtkTexture`` objects."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`vectors <pyvista.DataSet.vectors>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.vectors:1
msgid "Return active vectors."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
msgid ":obj:`volume <pyvista.DataSet.volume>`\\"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.volume:1
#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.volume:1
msgid "Return the mesh volume."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`cast_to_unstructured_grid "
"<pyvista.DataSet.cast_to_unstructured_grid>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cast_to_unstructured_grid:1
msgid ""
"Get a new representation of this object as an "
":class:`pyvista.UnstructuredGrid`."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`cell_bounds <pyvista.DataSet.cell_bounds>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_bounds:1
msgid "Return the bounding box of a cell."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`cell_n_points <pyvista.DataSet.cell_n_points>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:1
msgid "Return the number of points in a cell."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`cell_points <pyvista.DataSet.cell_points>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:1
msgid "Return the points in a cell."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`cell_type <pyvista.DataSet.cell_type>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:1
msgid "Return the type of a cell."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`clear_arrays <pyvista.DataSet.clear_arrays>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.clear_arrays:1
msgid "Remove all arrays from point/cell/field data."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`clear_cell_arrays <pyvista.DataSet.clear_cell_arrays>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.clear_cell_arrays:1
msgid "Remove all cell arrays."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`clear_point_arrays <pyvista.DataSet.clear_point_arrays>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.clear_point_arrays:1
msgid "Remove all point arrays."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`clear_textures <pyvista.DataSet.clear_textures>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.clear_textures:1
msgid "Clear the textures from this mesh."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`copy_meta_from <pyvista.DataSet.copy_meta_from>`\\ \\(ido\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`find_closest_cell <pyvista.DataSet.find_closest_cell>`\\ \\(point\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:1
msgid "Find index of closest cell in this mesh to the given point."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`find_closest_point <pyvista.DataSet.find_closest_point>`\\ "
"\\(point\\[\\, n\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:1
msgid "Find index of closest point in this mesh to the given point."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`get_array <pyvista.DataSet.get_array>`\\ \\(name\\[\\, preference\\, "
"info\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.get_array:1
msgid "Search both point, cell and field data for an array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`get_data_range <pyvista.DataSet.get_data_range>`\\ \\(\\[arr\\_var\\, "
"preference\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.get_data_range:1
#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.get_data_range:1
#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.get_data_range:1
msgid "Get the non-NaN min and max of a named array."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`overwrite <pyvista.DataSet.overwrite>`\\ \\(mesh\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.overwrite:1
msgid "Overwrite this mesh inplace with the new mesh's geometries and data."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`plot <pyvista.DataSet.plot>`\\ \\(\\[off\\_screen\\, full\\_screen\\, "
"screenshot\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`points_to_double <pyvista.DataSet.points_to_double>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.points_to_double:1
msgid "Make points double precision."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`rename_array <pyvista.DataSet.rename_array>`\\ \\(old\\_name\\, "
"new\\_name\\[\\, preference\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rename_array:1
msgid "Change array name by searching for the array then renaming it."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`rotate_x <pyvista.DataSet.rotate_x>`\\ \\(angle\\[\\, "
"transform\\_all\\_input\\_vectors\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_x:1
msgid "Rotate mesh about the x-axis."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`rotate_y <pyvista.DataSet.rotate_y>`\\ \\(angle\\[\\, "
"transform\\_all\\_input\\_vectors\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_y:1
msgid "Rotate mesh about the y-axis."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`rotate_z <pyvista.DataSet.rotate_z>`\\ \\(angle\\[\\, "
"transform\\_all\\_input\\_vectors\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_z:1
msgid "Rotate mesh about the z-axis."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`set_active_scalars <pyvista.DataSet.set_active_scalars>`\\ "
"\\(name\\[\\, preference\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.set_active_scalars:1
msgid "Find the scalars by name and appropriately sets it as active."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`set_active_tensors <pyvista.DataSet.set_active_tensors>`\\ "
"\\(name\\[\\, preference\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.set_active_tensors:1
msgid "Find the tensors by name and appropriately sets it as active."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ""
":obj:`set_active_vectors <pyvista.DataSet.set_active_vectors>`\\ "
"\\(name\\[\\, preference\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.set_active_vectors:1
msgid "Find the vectors by name and appropriately sets it as active."
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
msgid ":obj:`translate <pyvista.DataSet.translate>`\\ \\(xyz\\)"
msgstr ""

#: ../../pyvista/docs/core/dataset.rst:40:<autosummary>:1
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.translate:1
msgid "Translate the mesh."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet:1
msgid ""
"Bases: :class:`pyvista.core.filters.DataSetFilters`, "
":class:`pyvista.core.dataobject.DataObject`"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet:1
msgid "Methods in common to spatially referenced objects."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_scalars_info:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_tensors_info:0
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_vectors_info:0
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells:0
msgid "type"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_scalars_info:3
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_vectors_info:3
msgid "Return the active scalar's field and name"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.active_tensors_info:3
msgid "Return the active tensor's field and name"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.array_names:3
msgid "This makes sure to put the active scalars' name first in the list."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.arrows:3
msgid ""
"Arrows will be located at the points of the mesh and their size will be "
"dependent on the length of the vector. Their direction will be the "
"\"direction\" of the vector"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.arrows:7
msgid "**arrows** -- Active scalars represented as arrows."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of pyvista.DataSet.bounds:3
msgid "The form is: (xmin,xmax, ymin,ymax, zmin,zmax)."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_bounds:3
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:3
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:3
#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:3
msgid "Cell ID."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_bounds:6
msgid "The limits of the cell in the X, Y and Z directions respectivelly."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_n_points:6
msgid "Number of points in the cell."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_points:6
msgid ""
"An array of floats with shape (number of points, 3) containing the "
"coordinates of the cell corners."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.cell_type:6
msgid ""
"VTK cell type. See "
"<https://vtk.org/doc/nightly/html/vtkCellType_8h_source.html>."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:3
msgid ""
"Length 3 coordinate of the point to query or a ``numpy`` array of "
"coordinates."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:7
msgid ""
"**index** -- Index or indices of the cell in this mesh that is closest to "
"the given point."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:13
msgid "Find nearest cell to a point on a sphere"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_cell:21
msgid ""
"Find the nearest cells to several random points.  Note that ``-1`` indicates"
" that the locator was not able to find a reasonably close cell."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:3
msgid ""
"If wanting to query many points, use a KDTree with scipy or another library "
"as those implementations will be easier to work with."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:6
msgid "See: https://github.com/pyvista/pyvista-support/issues/107"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:8
msgid "Length 3 coordinate of the point to query."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:10
msgid ""
"If greater than ``1``, returns the indices of the ``n`` closest points."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.find_closest_point:14
msgid "**int**"
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.get_data_range:3
msgid ""
"The name of the array to get the range. If ``None``, the active scalars is "
"used."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.get_data_range:6
msgid ""
"When scalars is specified, this is the preferred array type to search for in"
" the dataset.  Must be either ``'point'``, ``'cell'``, or ``'field'``."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.overwrite:3
msgid "The overwriting mesh."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_x:3
msgid "Angle in degrees to rotate about the x-axis."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_y:3
msgid "Angle in degrees to rotate about the y-axis."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.rotate_z:3
msgid "Angle in degrees to rotate about the z-axis."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.set_active_scalars:3
msgid "To deactivate any active scalars, pass ``None`` as the ``name``."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.set_active_tensors:3
msgid "To deactivate any active tensors, pass ``None`` as the ``name``."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.set_active_vectors:3
msgid "To deactivate any active vectors, pass ``None`` as the ``name``."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.DataSet.textures:3
msgid ""
"When casting back to a VTK dataset or filtering this dataset, these textures"
" will not be passed."
msgstr ""

#: ../../pyvista/pyvista/core/dataset.pydocstring of
#: pyvista.core.dataset.DataSet.translate:3
msgid "Length 3 list, tuple or array."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:4
msgid "Filters"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of pyvista.core.filters:1
msgid "These classes hold methods to apply general filters to any data type."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of pyvista.core.filters:3
msgid ""
"By inheriting these classes into the wrapped VTK data structures, a user can"
" easily apply common filters in an intuitive manner."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of pyvista.core.filters:7
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table:7
msgid "Example"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:12
msgid "Dataset Filters"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:14
msgid ""
"The :class:`pyvista.DataSetFilters` is inherited by :class:`pyvista.DataSet`"
" making all the following filters available as callable methods directly "
"from any PyVista dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`cell_centers "
"<pyvista.core.filters.pyvista.DataSetFilters.cell_centers>`\\ "
"\\(\\[vertex\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:1
msgid "Generate points at the center of the cells in this dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`cell_data_to_point_data "
"<pyvista.core.filters.pyvista.DataSetFilters.cell_data_to_point_data>`\\ "
"\\(\\[pass\\_cell\\_data\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.ctp:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:1
msgid "Transform cell data into point data."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`clip <pyvista.core.filters.pyvista.DataSetFilters.clip>`\\ "
"\\(\\[normal\\, origin\\, invert\\, value\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:1
msgid "Clip a dataset by a plane by specifying the origin and normal."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`clip_box <pyvista.core.filters.pyvista.DataSetFilters.clip_box>`\\ "
"\\(\\[bounds\\, invert\\, factor\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:1
msgid "Clip a dataset by a bounding box defined by the bounds."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`clip_scalar "
"<pyvista.core.filters.pyvista.DataSetFilters.clip_scalar>`\\ "
"\\(\\[scalars\\, invert\\, value\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:1
msgid "Clip a dataset by a scalar."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`clip_surface "
"<pyvista.core.filters.pyvista.DataSetFilters.clip_surface>`\\ "
"\\(surface\\[\\, invert\\, value\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:1
msgid "Clip any mesh type using a :class:`pyvista.PolyData` surface mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`compute_cell_quality "
"<pyvista.core.filters.pyvista.DataSetFilters.compute_cell_quality>`\\ "
"\\(\\[quality\\_measure\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:1
msgid "Compute a function of (geometric) quality for each cell of a mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`compute_cell_sizes "
"<pyvista.core.filters.pyvista.DataSetFilters.compute_cell_sizes>`\\ "
"\\(\\[length\\, area\\, volume\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:1
msgid "Compute sizes for 1D (length), 2D (area) and 3D (volume) cells."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`compute_derivative "
"<pyvista.core.filters.pyvista.DataSetFilters.compute_derivative>`\\ "
"\\(\\[scalars\\, gradient\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:1
msgid "Compute derivative-based quantities of point/cell scalar field."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`compute_implicit_distance "
"<pyvista.core.filters.pyvista.DataSetFilters.compute_implicit_distance>`\\ "
"\\(surface\\[\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:1
msgid "Compute the implicit distance from the points to a surface."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`connectivity "
"<pyvista.core.filters.pyvista.DataSetFilters.connectivity>`\\ "
"\\(\\[largest\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.connectivity:1
msgid "Find and label connected bodies/volumes."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`contour <pyvista.core.filters.pyvista.DataSetFilters.contour>`\\ "
"\\(\\[isosurfaces\\, scalars\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:1
msgid "Contour an input dataset by an array."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`ctp <pyvista.core.filters.pyvista.DataSetFilters.ctp>`\\ "
"\\(\\[pass\\_cell\\_data\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`decimate_boundary "
"<pyvista.core.filters.pyvista.DataSetFilters.decimate_boundary>`\\ "
"\\(\\[target\\_reduction\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.decimate_boundary:1
msgid "Return a decimated version of a triangulation of the boundary."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`delaunay_3d "
"<pyvista.core.filters.pyvista.DataSetFilters.delaunay_3d>`\\ \\(\\[alpha\\, "
"tol\\, offset\\, progress\\_bar\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:1
msgid "Construct a 3D Delaunay triangulation of the mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`elevation <pyvista.core.filters.pyvista.DataSetFilters.elevation>`\\ "
"\\(\\[low\\_point\\, high\\_point\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:1
msgid "Generate scalar values on a dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_all_edges "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_all_edges>`\\ "
"\\(\\[progress\\_bar\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:1
msgid "Extract all the internal/external edges of the dataset as PolyData."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_cells "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_cells>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_cells:1
msgid "Return a subset of the grid."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_feature_edges "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_feature_edges>`\\ "
"\\(\\[feature\\_angle\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:1
msgid "Extract edges from the surface of the mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_geometry "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_geometry>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_geometry:1
msgid ""
"Extract the outer surface of a volume or structured grid dataset as "
"PolyData."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_largest "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_largest>`\\ "
"\\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:1
msgid "Extract largest connected set in mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_points "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_points>`\\ \\(ind\\[\\,"
" adjacent\\_cells\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:1
msgid ""
"Return a subset of the grid (with cells) that contains any of the given "
"point indices."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`extract_surface "
"<pyvista.core.filters.pyvista.DataSetFilters.extract_surface>`\\ "
"\\(\\[pass\\_pointid\\, pass\\_cellid\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:1
msgid "Extract surface mesh of the grid."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`glyph <pyvista.core.filters.pyvista.DataSetFilters.glyph>`\\ "
"\\(\\[orient\\, scale\\, factor\\, geom\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:1
msgid ""
"Copy a geometric representation (called a glyph) to every point in the input"
" dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`interpolate "
"<pyvista.core.filters.pyvista.DataSetFilters.interpolate>`\\ \\(target\\[\\,"
" sharpness\\, radius\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:1
msgid "Interpolate values onto this mesh from a given dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`merge <pyvista.core.filters.pyvista.DataSetFilters.merge>`\\ "
"\\(\\[grid\\, merge\\_points\\, inplace\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:1
msgid "Join one or many other grids to this grid."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`outline <pyvista.core.filters.pyvista.DataSetFilters.outline>`\\ "
"\\(\\[generate\\_faces\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.outline:1
msgid "Produce an outline of the full extent for the input dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`outline_corners "
"<pyvista.core.filters.pyvista.DataSetFilters.outline_corners>`\\ "
"\\(\\[factor\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.outline_corners:1
msgid "Produce an outline of the corners for the input dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`plot_over_circular_arc "
"<pyvista.core.filters.pyvista.DataSetFilters.plot_over_circular_arc>`\\ "
"\\(pointa\\, pointb\\, center\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:1
msgid "Sample a dataset along a circular arc and plot it."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`plot_over_circular_arc_normal "
"<pyvista.core.filters.pyvista.DataSetFilters.plot_over_circular_arc_normal>`\\"
" \\(center\\[\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:1
msgid ""
"Sample a dataset along a resolution circular arc defined by a normal and "
"polar vector and plot it."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`plot_over_line "
"<pyvista.core.filters.pyvista.DataSetFilters.plot_over_line>`\\ \\(pointa\\,"
" pointb\\[\\, resolution\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:1
msgid "Sample a dataset along a high resolution line and plot."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`point_data_to_cell_data "
"<pyvista.core.filters.pyvista.DataSetFilters.point_data_to_cell_data>`\\ "
"\\(\\[pass\\_point\\_data\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.ptc:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:1
msgid "Transform point data into cell data."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`probe <pyvista.core.filters.pyvista.DataSetFilters.probe>`\\ "
"\\(points\\[\\, tolerance\\, pass\\_cell\\_arrays\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:1
msgid "Sample data values at specified point locations."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`ptc <pyvista.core.filters.pyvista.DataSetFilters.ptc>`\\ "
"\\(\\[pass\\_point\\_data\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`reflect <pyvista.core.filters.pyvista.DataSetFilters.reflect>`\\ "
"\\(normal\\[\\, point\\, inplace\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:1
msgid "Reflect a dataset across a plane."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`sample <pyvista.core.filters.pyvista.DataSetFilters.sample>`\\ "
"\\(target\\[\\, tolerance\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:1
msgid "Resample array data from a passed mesh onto this mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`sample_over_circular_arc "
"<pyvista.core.filters.pyvista.DataSetFilters.sample_over_circular_arc>`\\ "
"\\(pointa\\, pointb\\, center\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:20
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:28
msgid "Sample a dataset over a circular arc."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`sample_over_circular_arc_normal "
"<pyvista.core.filters.pyvista.DataSetFilters.sample_over_circular_arc_normal>`\\"
" \\(center\\[\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:1
msgid ""
"Sample a dataset over a circular arc defined by a normal and polar vector "
"and plot it."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`sample_over_line "
"<pyvista.core.filters.pyvista.DataSetFilters.sample_over_line>`\\ "
"\\(pointa\\, pointb\\[\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:1
msgid "Sample a dataset onto a line."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`select_enclosed_points "
"<pyvista.core.filters.pyvista.DataSetFilters.select_enclosed_points>`\\ "
"\\(surface\\[\\, tolerance\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:1
msgid "Mark points as to whether they are inside a closed surface."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`shrink <pyvista.core.filters.pyvista.DataSetFilters.shrink>`\\ "
"\\(\\[shrink\\_factor\\, progress\\_bar\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:1
msgid "Shrink the individual faces of a mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`slice <pyvista.core.filters.pyvista.DataSetFilters.slice>`\\ "
"\\(\\[normal\\, origin\\, generate\\_triangles\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:1
msgid ""
"Slice a dataset by a plane at the specified origin and normal vector "
"orientation."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`slice_along_axis "
"<pyvista.core.filters.pyvista.DataSetFilters.slice_along_axis>`\\ \\(\\[n\\,"
" axis\\, tolerance\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:1
msgid "Create many slices of the input dataset along a specified axis."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`slice_along_line "
"<pyvista.core.filters.pyvista.DataSetFilters.slice_along_line>`\\ "
"\\(line\\[\\, generate\\_triangles\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:1
msgid "Slice a dataset using a polyline/spline as the path."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`slice_orthogonal "
"<pyvista.core.filters.pyvista.DataSetFilters.slice_orthogonal>`\\ \\(\\[x\\,"
" y\\, z\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:1
msgid ""
"Create three orthogonal slices through the dataset on the three cartesian "
"planes."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`split_bodies "
"<pyvista.core.filters.pyvista.DataSetFilters.split_bodies>`\\ "
"\\(\\[label\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.split_bodies:1
msgid "Find, label, and split connected bodies/volumes."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`streamlines "
"<pyvista.core.filters.pyvista.DataSetFilters.streamlines>`\\ "
"\\(\\[vectors\\, source\\_center\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:1
msgid "Integrate a vector field to generate streamlines."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`surface_indices "
"<pyvista.core.filters.pyvista.DataSetFilters.surface_indices>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.surface_indices:1
msgid "Return the surface indices of a grid."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`texture_map_to_plane "
"<pyvista.core.filters.pyvista.DataSetFilters.texture_map_to_plane>`\\ "
"\\(\\[origin\\, point\\_u\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:1
msgid "Texture map this dataset to a user defined plane."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`texture_map_to_sphere "
"<pyvista.core.filters.pyvista.DataSetFilters.texture_map_to_sphere>`\\ "
"\\(\\[center\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:1
msgid "Texture map this dataset to a user defined sphere."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`threshold <pyvista.core.filters.pyvista.DataSetFilters.threshold>`\\ "
"\\(\\[value\\, scalars\\, invert\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:1
msgid "Apply a ``vtkThreshold`` filter to the input dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`threshold_percent "
"<pyvista.core.filters.pyvista.DataSetFilters.threshold_percent>`\\ "
"\\(\\[percent\\, scalars\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:1
msgid ""
"Threshold the dataset by a percentage of its range on the active scalars "
"array or as specified."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`transform <pyvista.core.filters.pyvista.DataSetFilters.transform>`\\ "
"\\(trans\\[\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:1
msgid "Transform this mesh with a 4x4 transform."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`triangulate "
"<pyvista.core.filters.pyvista.DataSetFilters.triangulate>`\\ "
"\\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:1
#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:1
#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:1
msgid "Return an all triangle mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`warp_by_scalar "
"<pyvista.core.filters.pyvista.DataSetFilters.warp_by_scalar>`\\ "
"\\(\\[scalars\\, factor\\, normal\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:1
msgid "Warp the dataset's points by a point data scalars array's values."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
msgid ""
":obj:`warp_by_vector "
"<pyvista.core.filters.pyvista.DataSetFilters.warp_by_vector>`\\ "
"\\(\\[vectors\\, factor\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:24:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:1
msgid "Warp the dataset's points by a point data vectors array's values."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters:1
msgid "A set of common filters that can be applied to any vtkDataSet."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:3
msgid "These points can be used for placing glyphs / vectors."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_centers:5
msgid "Enable/disable the generation of vertex cells."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.ctp:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.ptc:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:3
msgid ""
"Point data are specified per node and cell data specified within cells. "
"Optionally, the input point data can be passed through to the output."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:6
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:6
msgid ""
"The method of transformation is based on averaging the data values of all "
"cells using a particular point. Optionally, the input cell data can be "
"passed through to the output as well."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:10
msgid "See also: :func:`pyvista.DataSetFilters.point_data_to_cell_data`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.cell_data_to_point_data:12
msgid "If enabled, pass the input cell data through to the output"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:3
msgid ""
"If no parameters are given the clip will occur in the center of that "
"dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:5
msgid ""
"Length 3 tuple for the normal vector direction. Can also be specified as a "
"string conventional direction such as ``'x'`` for ``(1,0,0)`` or ``'-x'`` "
"for ``(-1,0,0)``, etc."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:9
msgid ""
"The center ``(x,y,z)`` coordinate of the plane on which the clip occurs. The"
" default is the center of the dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:12
msgid "Flag on whether to flip/invert the clip."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:14
msgid ""
"Set the clipping value along the normal direction. The default value is 0.0."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:44
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:28
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:23
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:24
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:17
msgid "Updates mesh in-place while returning nothing."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:19
msgid "Return both unclipped and clipped parts of the dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:22
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:22
msgid ""
"**mesh** -- Clipped mesh when ``inplace=False``.  When ``inplace=True``, "
"``None``. When ``return_clipped=True``, a tuple containing the unclipped and"
" clipped datasets, regardless of the setting of ``inplace``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:30
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:30
msgid ""
"Clip a cube along the +X direction.  ``triangulate`` is used as the cube is "
"initially composed of quadrilateral faces and subdivide only works on "
"triangles."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:38
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip:38
msgid ""
"Clip a cube in the +Z direction.  This leaves half a cube below the XY "
"plane."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:3
msgid ""
"If no bounds are given, a corner of the dataset bounds will be removed."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:5
msgid ""
"Length 6 sequence of floats: (xmin, xmax, ymin, ymax, zmin, zmax). Length 3 "
"sequence of floats: distances from the min coordinate of of the input mesh. "
"Single float value: uniform distance from the min coordinate. Length 12 "
"sequence of length 3 sequence of floats: a plane collection (normal, center,"
" ...). :class:`pyvista.PolyData`: if a poly mesh is passed that represents a"
" box with 6 faces that all form a standard box, then planes will be "
"extracted from the box to define the clipping region."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:14
msgid "Flag on whether to flip/invert the clip"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:16
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:16
msgid ""
"If bounds are not given this is the factor along each axis to extract the "
"default box."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:22
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_box:22
msgid ""
"Clip a corner of a cube.  The bounds of a cube are normally ``[-0.5, 0.5, "
"-0.5, 0.5, -0.5, 0.5]``, and this removes 1/8 of the cube's surface."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:3
msgid "Name of scalars to clip on.  Defaults to currently active scalars."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:5
msgid ""
"Flag on whether to flip/invert the clip.  When ``True``, only the mesh below"
" ``value`` will be kept.  When ``False``, only values above ``value`` will "
"be kept."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:9
msgid "Set the clipping value.  The default value is 0.0."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:14
msgid "**pdata** -- Clipped dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:19
msgid "Remove the part of the mesh with \"sample_point_scalars\" above 100."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_scalar:26
msgid ""
"Remove the part of the mesh with \"sample_point_scalars\" below 100.  Since "
"these scalars are already active, there's no need to specify ``scalars=``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:3
msgid ""
"This will return a :class:`pyvista.UnstructuredGrid` of the clipped mesh. "
"Geometry of the input dataset will be preserved where possible - geometries "
"near the clip intersection will be triangulated/tessellated."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:7
msgid ""
"The PolyData surface mesh to use as a clipping function. If this mesh is not"
" PolyData, the external surface will be extracted."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:12
msgid ""
"Set the clipping value of the implicit function (if clipping with implicit "
"function) or scalar value (if clipping with scalars). The default value is "
"0.0."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.clip_surface:16
msgid ""
"Compute the implicit distance from the mesh onto the input dataset. A new "
"array called ``'implicit_distance'`` will be added to the output clipped "
"mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:3
msgid ""
"The per-cell quality is added to the mesh's cell data, in an array named "
"\"CellQuality\". Cell types not supported by this filter or undefined "
"quality of supported cell types will have an entry of -1."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:7
msgid "Defaults to computing the scaled jacobian."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:9
msgid "Options for cell quality measure:"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:11
msgid "``'area'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:12
msgid "``'aspect_beta'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:13
msgid "``'aspect_frobenius'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:14
msgid "``'aspect_gamma'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:15
msgid "``'aspect_ratio'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:16
msgid "``'collapse_ratio'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:17
msgid "``'condition'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:18
msgid "``'diagonal'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:19
msgid "``'dimension'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:20
msgid "``'distortion'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:21
msgid "``'jacobian'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:22
msgid "``'max_angle'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:23
msgid "``'max_aspect_frobenius'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:24
msgid "``'max_edge_ratio'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:25
msgid "``'med_aspect_frobenius'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:26
msgid "``'min_angle'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:27
msgid "``'oddy'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:28
msgid "``'radius_ratio'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:29
msgid "``'relative_size_squared'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:30
msgid "``'scaled_jacobian'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:31
msgid "``'shape'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:32
msgid "``'shape_and_size'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:33
msgid "``'shear'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:34
msgid "``'shear_and_size'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:35
msgid "``'skew'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:36
msgid "``'stretch'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:37
msgid "``'taper'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:38
msgid "``'volume'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:39
msgid "``'warpage'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:41
msgid "The cell quality measure to use"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_quality:43
msgid ""
"Float value for undefined quality. Undefined quality are qualities that "
"could be addressed by this filter but is not well defined for the particular"
" geometry of cell in question, e.g. a volume query for a triangle. Undefined"
" quality will always be undefined. The default value is -1."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:3
msgid "Specify whether or not to compute the length of 1D cells."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:5
msgid "Specify whether or not to compute the area of 2D cells."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:7
msgid "Specify whether or not to compute the volume of 3D cells."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:28
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:29
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:39
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:42
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:8
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:25
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:46
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:30
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:34
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:42
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:15
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UnstructuredGridFilters.delaunay_2d:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_cell_sizes:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:29
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:5
msgid "Display a progress bar to indicate progress."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:3
msgid ""
"Utilize ``vtkGradientFilter`` to compute derivative-based quantities, such "
"as gradient, divergence, vorticity, and Q-criterion, of the selected point "
"or cell scalar field."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:7
msgid ""
"String name of the scalars array to use when computing the derivative "
"quantities."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:10
msgid ""
"Calculate gradient. If a string is passed, the string will be used for the "
"resulting array name. Otherwise, array name will be 'gradient'. Default: "
"True"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:14
msgid ""
"Calculate divergence. If a string is passed, the string will be used for the"
" resulting array name. Otherwise, array name will be 'divergence'. Default: "
"None"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:18
msgid ""
"Calculate vorticity. If a string is passed, the string will be used for the "
"resulting array name. Otherwise, array name will be 'vorticity'. Default: "
"None"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:22
msgid ""
"Calculate qcriterion. If a string is passed, the string will be used for the"
" resulting array name. Otherwise, array name will be 'qcriterion'. Default: "
"None"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:26
msgid ""
"Use faster algorithm for computing derivative quantities. Result is less "
"accurate and performs fewer derivative calculations, increasing computation "
"speed. The error will feature smoothing of the output and possibly errors at"
" boundaries. Option has no effect if DataSet is not UnstructuredGrid. "
"Default: False"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_derivative:32
msgid "Data type preference. Either 'point' or 'cell'."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:3
msgid ""
"This filter will compute the implicit distance from all of the nodes of this"
" mesh to a given surface. This distance will be added as a point array "
"called ``'implicit_distance'``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:7
msgid "The surface used to compute the distance"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:9
msgid ""
"If True, a new scalar array will be added to the ``point_arrays`` of this "
"mesh. Otherwise a copy of this mesh is returned with that scalar field."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:16
msgid "Compute the distance between all the points on a sphere and a plane."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.compute_implicit_distance:27
msgid "Plot these distances as a heatmap"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.connectivity:3
msgid ""
"This adds an ID array to the point and cell data to distinguish separate "
"connected bodies. This applies a ``vtkConnectivityFilter`` filter which "
"extracts cells that share common points and/or meet other connectivity "
"criterion. (Cells that share vertices and meet other connectivity criterion "
"such as scalar range are known as a region.)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.connectivity:10
msgid "Extract the largest connected part of the mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:3
msgid ""
"``isosurfaces`` can be an integer specifying the number of isosurfaces in "
"the data range or a sequence of values for explicitly setting the "
"isosurfaces."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:6
msgid ""
"Number of isosurfaces to compute across valid data range or a sequence of "
"float values to explicitly use as the isosurfaces."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:6
msgid "Name of scalars to threshold on. Defaults to currently active scalars."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:13
msgid "Desc"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:15
msgid "Preserves the scalar values that are being contoured"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:17
msgid ""
"If an integer number of isosurfaces is specified, this is the range over "
"which to generate contours. Default is the scalars arrays' full data range."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:21
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:23
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:9
msgid ""
"When scalars is specified, this is the preferred array type to search for in"
" the dataset.  Must be either ``'point'`` or ``'cell'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.contour:24
msgid ""
"Specify to choose which vtk filter is used to create the contour. Must be "
"one of ``'contour'``, ``'marching_cubes'`` and ``'flying_edges'``. Defaults "
"to ``'contour'``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.ctp:6
msgid "An alias/shortcut for ``cell_data_to_point_data``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.decimate_boundary:3
msgid "Only the outer surface of the input dataset will be considered."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.decimate_boundary:5
msgid ""
"Fraction of the original mesh to remove. Default is ``0.5`` TargetReduction "
"is set to ``0.9``, this filter will try to reduce the data set to 10% of its"
" original size and will remove 90% of the input triangles."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:3
msgid "This helps smooth out a rugged mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:5
msgid ""
"Distance value to control output of this filter. For a non-zero alpha value,"
" only verts, edges, faces, or tetra contained within the circumsphere (of "
"radius alpha) will be output. Otherwise, only tetrahedra will be output."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:10
msgid ""
"tolerance to control discarding of closely spaced points. This tolerance is "
"specified as a fraction of the diagonal length of the bounding box of the "
"points."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.delaunay_3d:14
msgid ""
"multiplier to control the size of the initial, bounding Delaunay "
"triangulation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:3
msgid ""
"The scalar values lie within a user specified range, and are generated by "
"computing a projection of each dataset point onto a line.  The line can be "
"oriented arbitrarily.  A typical example is to generate scalars based on "
"elevation or height above a plane."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:9
msgid ""
"The low point of the projection line in 3D space. Default is bottom center "
"of the dataset. Otherwise pass a length 3 ``tuple(float)``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:12
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:12
msgid ""
"The high point of the projection line in 3D space. Default is top center of "
"the dataset. Otherwise pass a length 3 ``tuple(float)``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:15
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:15
msgid ""
"The scalar range to project to the low and high points on the line that will"
" be mapped to the dataset. If None given, the values will be computed from "
"the elevation (Z component) range between the high and low points. Min and "
"max of a range can be given as a length 2 tuple(float). If ``str`` name of "
"scalara array present in the dataset given, the valid range of that array "
"will be used."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:22
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:22
msgid ""
"When an array name is specified for ``scalar_range``, this is the preferred "
"array type to search for in the dataset. Must be either 'point' or 'cell'."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:26
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:26
msgid ""
"A boolean flag on whether or not to set the new `Elevation` scalar as the "
"active scalars array on the output dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:34
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.elevation:34
msgid ""
"This will create a scalars array named `Elevation` on the point data of the "
"input dataset and overasdf write an array named `Elevation` if present."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_all_edges:3
msgid "This produces a full wireframe representation of the input dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_cells:3
msgid "Numpy array of cell indices to be extracted."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_cells:6
msgid "**subgrid** -- Subselected grid"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:3
msgid ""
"If the given mesh is not PolyData, the external surface of the given mesh is"
" extracted and used. From vtk documentation, the edges are one of the "
"following"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:7
msgid "boundary (used by one polygon) or a line cell"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:8
msgid "non-manifold (used by three or more polygons)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:9
msgid ""
"feature edges (edges used by two triangles and whose dihedral angle > "
"feature_angle)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:11
msgid "manifold edges (edges used by exactly two polygons)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:13
msgid "Defaults to 30 degrees."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:15
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:21
msgid "Defaults to True"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:23
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:13
msgid "Return new mesh or overwrite input."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_feature_edges:26
msgid "**edges** -- Extracted edges. None if inplace=True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_geometry:3
msgid ""
"This will extract all 0D, 1D, and 2D cells producing the boundary faces of "
"the dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:3
msgid ""
"Can be used to reduce residues obtained when generating an isosurface. Works"
" only if residues are not connected (share at least one point with) the main"
" component of the image."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_largest:10
msgid "**mesh** -- Largest connected set in mesh"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:3
msgid "Numpy array of point indices to be extracted."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:5
msgid ""
"If True, extract the cells that contain at least one of the extracted "
"points. If False, extract the cells that contain exclusively points from the"
" extracted points list. The default is True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:10
msgid "Specifies if the cells shall be returned or not. The default is True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_points:14
msgid "**subgrid** -- Subselected grid."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:3
msgid ""
"Adds a point array \"vtkOriginalPointIds\" that idenfities which original "
"points these surface points correspond to"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:6
msgid ""
"Adds a cell array \"vtkOriginalPointIds\" that idenfities which original "
"cells these surface cells correspond to"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:9
msgid ""
"If the input is an unstructured grid with nonlinear faces, this parameter "
"determines how many times the face is subdivided into linear faces.  If 0, "
"the output is the equivalent of its linear counterpart (and the midpoints "
"determining the nonlinear interpolation are discarded). If 1 (the default), "
"the nonlinear face is triangulated based on the midpoints. If greater than "
"1, the triangulated pieces are recursively subdivided to reach the desired "
"subdivision. Setting the value to greater than 1 may cause some point data "
"to not be passed even if no nonlinear faces exist. This option has no effect"
" if the input is not an unstructured grid."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:9
msgid ""
"If the input is an unstructured grid with nonlinear faces, this parameter "
"determines how many times the face is subdivided into linear faces."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:13
msgid ""
"If 0, the output is the equivalent of its linear counterpart (and the "
"midpoints determining the nonlinear interpolation are discarded). If 1 (the "
"default), the nonlinear face is triangulated based on the midpoints. If "
"greater than 1, the triangulated pieces are recursively subdivided to reach "
"the desired subdivision. Setting the value to greater than 1 may cause some "
"point data to not be passed even if no nonlinear faces exist. This option "
"has no effect if the input is not an unstructured grid."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:24
msgid "Surface mesh of the grid."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.extract_surface:29
msgid "Extract the surface of an UnstructuredGrid."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:3
msgid ""
"The glyph may be oriented along the input vectors, and it may be scaled "
"according to scalar data or vector magnitude. Passing a table of glyphs to "
"choose from based on scalars or vector magnitudes is also supported."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:8
msgid "Use the active vectors array to orient the glyphs"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:10
msgid "Use the active scalars to scale the glyphs"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:12
msgid "Scale factor applied to scaling array"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:14
msgid ""
"The geometry to use for the glyph. If missing, an arrow glyph is used. If a "
"sequence, the datasets inside define a table of geometries to choose from "
"based on scalars or vectors. In this case a sequence of numbers of the same "
"length must be passed as ``indices``. The values of the range (see ``rng``) "
"affect lookup in the table."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:21
msgid ""
"Specifies the index of each glyph in the table for lookup in case ``geom`` "
"is a sequence. If given, must be the same length as ``geom``. If missing, a "
"default value of ``range(len(geom))`` is used. Indices are interpreted in "
"terms of the scalar range (see ``rng``). Ignored if ``geom`` has length 1."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:27
msgid ""
"Specify tolerance in terms of fraction of bounding box length. Float value "
"is between 0 and 1. Default is None. If ``absolute`` is ``True`` then the "
"tolerance can be an absolute distance. If None, points merging as a "
"preprocessing step is disabled."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:32
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:23
msgid "Control if ``tolerance`` is an absolute distance or a fraction."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:34
msgid "Turn on/off clamping of \"scalar\" values to range."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.glyph:36
msgid ""
"Set the range of values to be considered by the filter when scalars values "
"are provided."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:3
msgid "The input dataset is typically a point cloud."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:5
msgid ""
"This uses a gaussian interpolation kernel. Use the ``sharpness`` and "
"``radius`` parameters to adjust this kernel. You can also switch this kernel"
" to use an N closest points approach."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:9
msgid ""
"The vtk data object to sample from - point and cell arrays from this object "
"are interpolated onto this mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:12
msgid ""
"Set / Get the sharpness (i.e., falloff) of the Gaussian. By default "
"Sharpness=2. As the sharpness increases the effects of distant points are "
"reduced."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:16
msgid "Specify the radius within which the basis points must lie."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:18
msgid ""
"If given, specifies the number of the closest points used to form the "
"interpolation basis. This will invalidate the radius and sharpness arguments"
" in favor of an N closest points approach. This typically has poorer "
"results."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:23
msgid ""
"Specify a strategy to use when encountering a \"null\" point during the "
"interpolation process. Null points occur when the local neighborhood (of "
"nearby points to interpolate from) is empty. If the strategy is set to "
"``'mask_points'``, then an output array is created that marks points as "
"being valid (=1) or null (invalid =0) (and the NullValue is set as well). If"
" the strategy is set to ``'null_value'`` (this is the default), then the "
"output data value(s) are set to the ``null_value`` (specified in the output "
"point data). Finally, the strategy ``'closest_point'`` is to simply use the "
"closest point to perform the interpolation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:34
msgid ""
"Specify the null point value. When a null point is encountered then all "
"components of each null tuple are set to this value. By default the null "
"value is set to zero."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:38
msgid "Preserve input mesh's original cell data arrays"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.interpolate:40
msgid "Preserve input mesh's original point data arrays"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:3
msgid "Grid is updated in-place by default."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:5
msgid "Can be used to merge points of adjacent cells when no grids are input."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:8
msgid "Grids to merge to this grid."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:10
msgid ""
"Points in exactly the same location will be merged between the two meshes. "
"Warning: this can leave degenerate point data."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:13
msgid ""
"Updates grid inplace when True if the input type is an "
":class:`pyvista.UnstructuredGrid`."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:16
msgid ""
"When this parameter is true and merge_points is true, the arrays of the "
"merging grids will be overwritten by the original main mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:21
msgid "**merged_grid** -- Merged grid.  Returned when inplace is False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:25
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:72
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:65
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.save:10
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:16
msgid "Notes"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.merge:26
msgid ""
"When two or more grids are joined, the type and name of each array must "
"match or the arrays will be ignored and not included in the final merged "
"mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.outline:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline:3
msgid "Generate solid faces for the box. This is off by default"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.outline_corners:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline_corners:3
msgid ""
"controls the relative size of the corners to the length of the corresponding"
" bounds"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:3
msgid ""
"Plot the variables of interest in 2D where the X-axis is distance from Point"
" A and the Y-axis is the variable of interest. Note that this filter returns"
" ``None``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:6
msgid "Location in ``[x, y, z]``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:13
msgid ""
"Number of pieces to divide the circular arc into. Defaults to number of "
"cells in the input mesh. Must be a positive integer."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:22
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:14
msgid ""
"The string name of the variable in the input dataset to probe. The active "
"scalar is used by default."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:20
msgid "The string title of the ``matplotlib`` figure."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:22
msgid "The string label of the Y-axis. Defaults to the variable name."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:24
msgid "The size of the new figure."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:26
msgid "Flag on whether or not to create a new figure."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:28
msgid "Shows the ``matplotlib`` figure when ``True``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:30
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:35
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:27
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:13
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:21
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:10
msgid ""
"Tolerance used to compute whether a point in the source is in a cell of the "
"input.  If not given, tolerance is automatically generated."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:34
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:39
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:30
msgid "Save the figure this file name when set."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc:39
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:44
msgid "Sample a dataset along a high resolution circular arc and plot."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:9
msgid ""
"number of pieces to divide circular arc into. Defaults to number of cells in"
" the input mesh. Must be a positive integer."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:13
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:12
msgid ""
"The normal vector to the plane of the arc.  By default it points in the "
"positive Z direction."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:16
msgid ""
"(starting point of the arc).  By default it is the unit vector in the "
"positive x direction."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:18
msgid ""
"Arc length (in degrees), beginning at the polar vector.  The direction is "
"counterclockwise.  By default it is 360."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:25
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:17
msgid "The string title of the `matplotlib` figure"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:27
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:19
msgid "The string label of the Y-axis. Defaults to variable name"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:29
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:21
msgid "the size of the new figure"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:31
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:23
msgid "flag on whether or not to create a new figure"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_circular_arc_normal:33
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:25
msgid "Shows the matplotlib figure"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:3
msgid ""
"Plot the variables of interest in 2D where the X-axis is distance from Point"
" A and the Y-axis is the variable of interest. Note that this filter returns"
" None."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:5
msgid "Location in [x, y, z]."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.plot_over_line:11
msgid ""
"number of pieces to divide line into. Defaults to number of cells in the "
"input mesh. Must be a positive integer."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:6
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:6
msgid "See also: :func:`pyvista.DataSetFilters.cell_data_to_point_data`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:8
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.point_data_to_cell_data:8
msgid "If enabled, pass the input point data through to the output"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:3
msgid "This uses :class:`vtk.vtkProbeFilter`."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:5
msgid ""
"The mesh to probe from - point and cell arrays from this object are probed "
"onto the nodes of the ``points`` mesh"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:8
msgid ""
"The points to probe values on to. This should be a PyVista mesh or something"
" :func:`pyvista.wrap` can handle."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:13
msgid "Preserve source mesh's original cell data arrays"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:16
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:15
msgid "Preserve source mesh's original point data arrays"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:18
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:17
msgid ""
"Control whether the source point data is to be treated as categorical. If "
"the data is categorical, then the resultant data will be determined by a "
"nearest neighbor interpolation scheme."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.probe:25
msgid "Probe the active scalars in ``grid`` at the points in ``mesh``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.ptc:6
msgid "An alias/shortcut for ``point_data_to_cell_data``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:3
msgid "Normal direction for reflection."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:5
msgid ""
"Point which, along with `normal`, defines the reflection plane. If not "
"specified, this is the origin."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:8
msgid "When ``True``, modifies the dataset and returns nothing."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.reflect:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:5
msgid ""
"When ``True``, all input vectors are transformed. Otherwise, only the "
"points, normals and active vectors are transformed."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:3
msgid "This uses :class:`vtk.vtkResampleWithDataSet`."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:5
msgid "The source vtk data object as the mesh to sample values on to"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample:7
msgid ""
"The vtk data object to sample from - point and cell arrays from this object "
"are sampled onto the nodes of the ``dataset`` mesh"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:8
msgid ""
"Number of pieces to divide circular arc into. Defaults to number of cells in"
" the input mesh. Must be a positive integer."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:3
msgid ""
"The number of segments composing the polyline is controlled by setting the "
"object resolution."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_circular_arc_normal:15
msgid ""
"Starting point of the arc in polar coordinates.  By default it is the unit "
"vector in the positive x direction."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:7
msgid ""
"Number of pieces to divide line into. Defaults to number of cells in the "
"input mesh. Must be a positive integer."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.sample_over_line:14
msgid "**sampled_line** -- Line object with sampled data from dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:3
msgid ""
"This evaluates all the input points to determine whether they are in an "
"enclosed surface. The filter produces a (0,1) mask (in the form of a "
"vtkDataArray) that indicates whether points are outside (mask value=0) or "
"inside (mask value=1) a provided surface. (The name of the output "
"vtkDataArray is \"SelectedPoints\".)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:9
msgid ""
"This filter produces and output data array, but does not modify the input "
"dataset. If you wish to extract cells or poinrs, various threshold filters "
"are available (i.e., threshold the output array)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:15
msgid ""
"The filter assumes that the surface is closed and manifold. A boolean flag "
"can be set to force the filter to first check whether this is true. If "
"false, all points will be marked outside. Note that if this check is not "
"performed and the surface is not closed, the results are undefined."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:21
msgid ""
"Set the surface to be used to test for containment. This must be a "
":class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:24
msgid ""
"The tolerance on the intersection. The tolerance is expressed as a fraction "
"of the bounding box of the enclosing surface."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:27
msgid ""
"By default, points inside the surface are marked inside or sent to the "
"output. If ``inside_out`` is ``True``, then the points outside the surface "
"are marked inside."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.select_enclosed_points:31
msgid ""
"Specify whether to check the surface for closure. If on, then the algorithm "
"first checks to see if the surface is closed and manifold. If the surface is"
" not closed and manifold, a runtime error is raised."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:3
msgid ""
"This filter shrinks the individual faces of a mesh rather than scaling the "
"entire mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:6
msgid "fraction of shrink for each cell."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.shrink:13
msgid "Extrude shrink mesh"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:3
msgid ""
"If no origin is specified, the center of the input dataset will be used."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:5
msgid ""
"Length 3 tuple for the normal vector direction. Can also be specified as a "
"string conventional direction such as ``'x'`` for ``(1,0,0)`` or ``'-x'`` "
"for ``(-1,0,0)```, etc."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:9
msgid "The center (x,y,z) coordinate of the plane on which the slice occurs"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:11
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:11
msgid ""
"If this is enabled (``False`` by default), the output will be triangles "
"otherwise, the output will be the intersection polygons."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:14
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:10
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:14
msgid "If True, apply a ``contour`` filter after slicing"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:3
msgid "The number of slices to create"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:5
msgid ""
"The axis to generate the slices along. Perpendicular to the slices. Can be "
"string name (``'x'``, ``'y'``, or ``'z'``) or axis index (``0``, ``1``, or "
"``2``)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_axis:9
msgid "The tolerance to the edge of the dataset bounds to create the slices"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:3
msgid "This also works for lines generated with :func:`pyvista.Line`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_along_line:5
msgid "A PolyData object containing one single PolyLine cell."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:3
msgid "Yields a MutliBlock dataset of the three slices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:5
msgid "The X location of the YZ slice"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:7
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:7
msgid "The Y location of the XZ slice"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:9
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.slice_orthogonal:9
msgid "The Z location of the XY slice"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.split_bodies:3
msgid ""
"This splits different connected bodies into blocks in a MultiBlock dataset."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.split_bodies:5
msgid ""
"A flag on whether to keep the ID arrays given by the ``connectivity`` "
"filter."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:3
msgid ""
"The integration is performed using a specified integrator, by default Runge-"
"Kutta2. This supports integration through any type of dataset. Thus if the "
"dataset contains 2D cells like polygons or triangles, the integration is "
"constrained to lie on the surface defined by 2D cells."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:8
msgid ""
"This produces polylines as the output, with each cell (i.e., polyline) "
"representing a streamline. The attribute values associated with each "
"streamline are stored in the cell data, whereas those associated with "
"streamline-points are stored in the point data."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:13
msgid ""
"This uses a Sphere as the source - set it's location and radius via the "
"``source_center`` and ``source_radius`` keyword arguments. You can retrieve "
"the source as :class:`pyvista.PolyData` by specifying "
"``return_source=True``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:18
msgid "The string name of the active vector field to integrate across"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:20
msgid ""
"Length 3 tuple of floats defining the center of the source particles. "
"Defaults to the center of the dataset"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:23
msgid ""
"Float radius of the source particle cloud. Defaults to one-tenth of the "
"diagonal of the dataset's spatial extent"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:26
msgid "Number of particles present in source sphere"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:28
msgid ""
"The integrator type to be used for streamline generation. The default is "
"Runge-Kutta45. The recognized solvers are: RUNGE_KUTTA2 (``2``),  "
"RUNGE_KUTTA4 (``4``), and RUNGE_KUTTA45 (``45``). Options are ``2``, ``4``, "
"or ``45``. Default is ``45``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:33
msgid ""
"Specify whether the streamline is integrated in the upstream or downstream "
"directions (or both). Options are ``'both'``, ``'backward'``, or "
"``'forward'``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:37
msgid "Compute streamlines on a surface. Default ``False``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:39
msgid ""
"Initial step size used for line integration, expressed ib length unitsL or "
"cell length units (see ``step_unit`` parameter). either the starting size "
"for an adaptive integrator, e.g., RK45, or the constant / fixed size for "
"non-adaptive ones, i.e., RK2 and RK4)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:44
msgid ""
"Uniform integration step unit. The valid unit is now limited to only "
"LENGTH_UNIT (``'l'``) and CELL_LENGTH_UNIT (``'cl'``). Default is "
"CELL_LENGTH_UNIT: ``'cl'``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:48
msgid ""
"Minimum step size used for line integration, expressed in length or cell "
"length units. Only valid for an adaptive integrator, e.g., RK45"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:51
msgid ""
"Maximum step size used for line integration, expressed in length or cell "
"length units. Only valid for an adaptive integrator, e.g., RK45"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:54
msgid ""
"Maximum number of steps for integrating a streamline. Defaults to ``2000``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:57
msgid "Terminal speed value, below which integration is terminated."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:59
msgid "Maximum error tolerated throughout streamline integration."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:61
msgid "Specify the maximum length of a streamline expressed in LENGTH_UNIT."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:63
msgid ""
"Vorticity computation at streamline points (necessary for generating proper "
"stream-ribbons using the ``vtkRibbonFilter``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:66
msgid ""
"Set the type of the velocity field interpolator to locate cells during "
"streamline integration either by points or cells. The cell locator is more "
"robust then the point locator. Options are ``'point'`` or ``'cell'`` "
"(abbreviations of ``'p'`` and ``'c'`` are also supported)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:72
msgid ""
"This can be used to scale the rate with which the streamribbons twist. The "
"default is 1."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:75
msgid "Set the start position. Default is ``(0.0, 0.0, 0.0)``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:77
msgid ""
"Return the source particles as :class:`pyvista.PolyData` as well as the "
"streamlines. This will be the second value returned if ``True``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:80
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.streamlines:83
msgid ""
"The coordinates of a start and end point for a line source. This will "
"override the sphere point source."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.surface_indices:3
msgid "**surf_ind** -- Indices of the surface points."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:3
msgid ""
"This is often used to define a plane to texture map an image to this "
"dataset. The plane defines the spatial reference and extent of that image."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:6
msgid ""
"Length 3 iterable of floats defining the XYZ coordinates of the BOTTOM LEFT "
"CORNER of the plane"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:9
msgid ""
"Length 3 iterable of floats defining the XYZ coordinates of the BOTTOM RIGHT"
" CORNER of the plane"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:12
msgid ""
"Length 3 iterable of floats defining the XYZ coordinates of the TOP LEFT "
"CORNER of the plane"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:15
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:16
msgid ""
"If True, the new texture coordinates will be added to the dataset inplace. "
"If False (default), a new dataset is returned with the textures coordinates"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:20
msgid ""
"The string name to give the new texture coordinates if applying the filter "
"inplace."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_plane:22
msgid ""
"Use the bounds to set the mapping plane by default (bottom plane of the "
"bounding box)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:3
msgid ""
"This is often used to define a sphere to texture map an image to this "
"dataset. The sphere defines the spatial reference and extent of that image."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:6
msgid ""
"Length 3 iterable of floats defining the XYZ coordinates of the center of "
"the sphere. If ``None``, this will be automatically calculated."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:10
msgid ""
"Default true. Control how the texture coordinates are generated. If set, the"
" s-coordinate ranges from 0->1 and 1->0 corresponding to the theta angle "
"variation between 0->180 and 180->0 degrees. Otherwise, the s-coordinate "
"ranges from 0->1 between 0->360 degrees."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.texture_map_to_sphere:26
msgid "Map a puppy texture to a sphere"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:3
msgid ""
"This filter will apply a ``vtkThreshold`` filter to the input dataset and "
"return the resulting object. This extracts cells where the scalar value in "
"each cell satisfies threshold criterion.  If scalars is None, the inputs "
"active scalars is used."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:8
msgid ""
"Single value or (min, max) to be used for the data threshold.  If a "
"sequence, then length must be 2. If no value is specified, the non-NaN data "
"range will be used to remove any NaN values."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:14
msgid ""
"If value is a single value, when invert is True cells are kept when their "
"values are below parameter \"value\".  When invert is False cells are kept "
"when their value is above the threshold \"value\". Default is False: "
"yielding above the threshold \"value\"."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:19
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:13
msgid ""
"When True, the continuous interval [minimum cell scalar, maximum cell "
"scalar] will be used to intersect the threshold bound, rather than the set "
"of discrete scalar values from the vertices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold:26
msgid ""
"If using scalars from point data, all scalars for all points in a cell must "
"satisfy the threshold when this value is ``True``.  When ``False``, any "
"point of the cell with a scalar value satisfying the threshold criterion "
"will extract the cell."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:3
msgid ""
"The percentage (0,1) to threshold. If value is out of 0 to 1 range, then it "
"will be divided by 100 and checked to be in that range."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.threshold_percent:8
msgid ""
"When invert is True cells are kept when their values are below the "
"percentage of the range.  When invert is False, cells are kept when their "
"value is above the percentage of the range. Default is False: yielding above"
" the threshold \"value\"."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:3
msgid "Accepts a vtk transformation object or a 4x4 transformation matrix."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:11
msgid "Translate a mesh by (50, 100, 200)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.transform:16
msgid ""
"Here is a 4x4 NumPy array is used, but vtk.vtkMatrix4x4 and vtk.vtkTransform"
" are also accepted."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:3
msgid "More complex polygons will be broken down into triangles."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:5
msgid "Updates mesh in-place while returning ``None``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:8
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.triangulate:8
msgid ""
"**mesh** -- Mesh containing only triangles. ``None`` when ``inplace=True``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:3
msgid ""
"This modifies point coordinates by moving points along point normals by the "
"scalar amount times the scale factor."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:6
msgid "Name of scalars to warp by. Defaults to currently active scalars."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:8
msgid ""
"A scaling factor to increase the scaling effect. Alias ``scale_factor`` also"
" accepted - if present, overrides ``factor``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:11
msgid ""
"User specified normal. If given, data normals will be ignored and the given "
"normal will be used to project the warp."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_scalar:14
msgid "If True, the points of the given dataset will be updated."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:3
msgid ""
"This modifies point coordinates by moving points along point vectors by the "
"local vector times the scale factor."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:6
msgid ""
"A classical application of this transform is to visualize eigenmodes in "
"mechanics."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:9
msgid "Name of vector to warp by. Defaults to currently active vector."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:11
msgid ""
"A scaling factor that multiplies the vectors to warp by. Can be used to "
"enhance the warping effect."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:14
msgid ""
"If True, the function will update the mesh in-place and return ``None``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.DataSetFilters.warp_by_vector:18
msgid "**warped_mesh** -- The warped mesh resulting from the operation."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:32
msgid "PolyData Filters"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:34
msgid ""
"The :class:`pyvista.PolyDataFilters` is inherited by "
":class:`pyvista.PolyData` making all the following filters available as "
"callable methods directly from any ``PolyData`` mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`boolean_add "
"<pyvista.core.filters.pyvista.PolyDataFilters.boolean_add>`\\ \\(mesh\\[\\, "
"inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:1
msgid "Add a mesh to the current mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`boolean_cut "
"<pyvista.core.filters.pyvista.PolyDataFilters.boolean_cut>`\\ \\(cut\\[\\, "
"tolerance\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:1
msgid "Perform a Boolean cut using another mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`boolean_difference "
"<pyvista.core.filters.pyvista.PolyDataFilters.boolean_difference>`\\ "
"\\(mesh\\[\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:1
msgid ""
"Combine two meshes and retains only the volume in common between the meshes."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`boolean_union "
"<pyvista.core.filters.pyvista.PolyDataFilters.boolean_union>`\\ "
"\\(mesh\\[\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:1
msgid "Combine two meshes and attempts to create a manifold mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`clean <pyvista.core.filters.pyvista.PolyDataFilters.clean>`\\ "
"\\(\\[point\\_merging\\, tolerance\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:1
msgid "Clean the mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`clip_closed_surface "
"<pyvista.core.filters.pyvista.PolyDataFilters.clip_closed_surface>`\\ "
"\\(\\[normal\\, origin\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:1
msgid "Clip a closed polydata surface with a plane."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`compute_arc_length "
"<pyvista.core.filters.pyvista.PolyDataFilters.compute_arc_length>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:1
msgid "Compute the arc length over the length of the probed line."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`compute_normals "
"<pyvista.core.filters.pyvista.PolyDataFilters.compute_normals>`\\ "
"\\(\\[cell\\_normals\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:1
msgid "Compute point and/or cell normals for a mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`curvature <pyvista.core.filters.pyvista.PolyDataFilters.curvature>`\\ "
"\\(\\[curv\\_type\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:1
msgid "Return the pointwise curvature of a mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`decimate <pyvista.core.filters.pyvista.PolyDataFilters.decimate>`\\ "
"\\(target\\_reduction\\[\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:1
msgid ""
"Reduce the number of triangles in a triangular mesh using "
"vtkQuadricDecimation."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`decimate_pro "
"<pyvista.core.filters.pyvista.PolyDataFilters.decimate_pro>`\\ "
"\\(reduction\\[\\, feature\\_angle\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:1
msgid "Reduce the number of triangles in a triangular mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`delaunay_2d "
"<pyvista.core.filters.pyvista.PolyDataFilters.delaunay_2d>`\\ \\(\\[tol\\, "
"alpha\\, offset\\, bound\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:1
#: ../../pyvista/docs/core/filters.rst:62:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UnstructuredGridFilters.delaunay_2d:1
msgid "Apply a delaunay 2D filter along the best fitting plane."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`edge_mask <pyvista.core.filters.pyvista.PolyDataFilters.edge_mask>`\\ "
"\\(angle\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.edge_mask:1
msgid ""
"Return a mask of the points of a surface mesh that has a surface angle "
"greater than angle."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`extrude <pyvista.core.filters.pyvista.PolyDataFilters.extrude>`\\ "
"\\(vector\\[\\, inplace\\, progress\\_bar\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:1
msgid "Sweep polygonal data creating a \"skirt\" from free edges."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`extrude_rotate "
"<pyvista.core.filters.pyvista.PolyDataFilters.extrude_rotate>`\\ "
"\\(\\[resolution\\, inplace\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:1
msgid ""
"Sweep polygonal data creating \"skirt\" from free edges and lines, and lines"
" from vertices."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`fill_holes "
"<pyvista.core.filters.pyvista.PolyDataFilters.fill_holes>`\\ "
"\\(hole\\_size\\[\\, inplace\\, progress\\_bar\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:1
msgid "Fill holes in a pyvista.PolyData or vtk.vtkPolyData object."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`flip_normals "
"<pyvista.core.filters.pyvista.PolyDataFilters.flip_normals>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.flip_normals:1
msgid "Flip normals of a triangular mesh by reversing the point ordering."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`geodesic <pyvista.core.filters.pyvista.PolyDataFilters.geodesic>`\\ "
"\\(start\\_vertex\\, end\\_vertex\\[\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:1
msgid ""
"Calculate the geodesic path between two vertices using Dijkstra's algorithm."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`geodesic_distance "
"<pyvista.core.filters.pyvista.PolyDataFilters.geodesic_distance>`\\ "
"\\(start\\_vertex\\, end\\_vertex\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:1
msgid ""
"Calculate the geodesic distance between two vertices using Dijkstra's "
"algorithm."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`intersection "
"<pyvista.core.filters.pyvista.PolyDataFilters.intersection>`\\ \\(mesh\\[\\,"
" split\\_first\\, split\\_second\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:1
msgid "Compute the intersection between two meshes."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`multi_ray_trace "
"<pyvista.core.filters.pyvista.PolyDataFilters.multi_ray_trace>`\\ "
"\\(origins\\, directions\\[\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:1
msgid "Perform multiple ray trace calculations."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`plot_boundaries "
"<pyvista.core.filters.pyvista.PolyDataFilters.plot_boundaries>`\\ "
"\\(\\[edge\\_color\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_boundaries:1
msgid "Plot boundaries of a mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`plot_curvature "
"<pyvista.core.filters.pyvista.PolyDataFilters.plot_curvature>`\\ "
"\\(\\[curv\\_type\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:1
msgid "Plot the curvature."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`plot_normals "
"<pyvista.core.filters.pyvista.PolyDataFilters.plot_normals>`\\ "
"\\(\\[show\\_mesh\\, mag\\, flip\\, use\\_every\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_normals:1
msgid "Plot the point normals of a mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`project_points_to_plane "
"<pyvista.core.filters.pyvista.PolyDataFilters.project_points_to_plane>`\\ "
"\\(\\[origin\\, normal\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:1
msgid "Project points of this mesh to a plane."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`ray_trace <pyvista.core.filters.pyvista.PolyDataFilters.ray_trace>`\\ "
"\\(origin\\, end\\_point\\[\\, first\\_point\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:1
msgid "Perform a single ray trace calculation."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`remove_points "
"<pyvista.core.filters.pyvista.PolyDataFilters.remove_points>`\\ "
"\\(remove\\[\\, mode\\, keep\\_scalars\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:1
msgid "Rebuild a mesh by removing points."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`ribbon <pyvista.core.filters.pyvista.PolyDataFilters.ribbon>`\\ "
"\\(\\[width\\, scalars\\, angle\\, factor\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:1
msgid "Create a ribbon of the lines in this dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`smooth <pyvista.core.filters.pyvista.PolyDataFilters.smooth>`\\ "
"\\(\\[n\\_iter\\, relaxation\\_factor\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:1
msgid "Adjust point coordinates using Laplacian smoothing."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`strip <pyvista.core.filters.pyvista.PolyDataFilters.strip>`\\ "
"\\(\\[join\\, max\\_length\\, pass\\_cell\\_data\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:1
msgid "Strip poly data cells."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`subdivide <pyvista.core.filters.pyvista.PolyDataFilters.subdivide>`\\ "
"\\(nsub\\[\\, subfilter\\, inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:1
msgid ""
"Increase the number of triangles in a single, connected triangular mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`triangulate "
"<pyvista.core.filters.pyvista.PolyDataFilters.triangulate>`\\ "
"\\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
msgid ""
":obj:`tube <pyvista.core.filters.pyvista.PolyDataFilters.tube>`\\ "
"\\(\\[radius\\, scalars\\, capping\\, n\\_sides\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:43:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:1
msgid "Generate a tube around each input line."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UnstructuredGridFilters:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters:1
msgid "Bases: :class:`pyvista.core.filters.DataSetFilters`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters:1
msgid "An internal class to manage filters/algorithms for polydata datasets."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:3
msgid "Does not attempt to \"join\" the meshes."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:5
msgid "The mesh to add."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_add:10
msgid "**joinedmesh** -- Initial mesh and the new mesh when inplace=False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:3
msgid "Mesh making the cut"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_cut:8
msgid "**mesh** -- The cut mesh when inplace=False"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:3
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:3
msgid "The mesh to perform a union against."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_difference:8
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.boolean_union:8
msgid "**union** -- The union mesh when inplace=False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:3
msgid ""
"This merges duplicate points, removes unused points, and/or removes "
"degenerate cells."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:6
msgid "Enables point merging.  On by default."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:8
msgid ""
"Set merging tolerance.  When enabled merging is set to absolute distance. If"
" ``absolute`` is False, then the merging tolerance is a fraction of the "
"bounding box length. The alias ``merge_tol`` is also excepted."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:13
msgid ""
"Turn on/off conversion of degenerate lines to points.  Enabled by default."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:16
msgid ""
"Turn on/off conversion of degenerate polys to lines.  Enabled by default."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:19
msgid "Turn on/off conversion of degenerate strips to polys."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:21
msgid "Updates mesh in-place while returning nothing.  Default True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:28
msgid "**mesh** -- Cleaned mesh.  ``None`` when ``inplace=True``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clean:33
msgid ""
"Create a mesh with a degenerate face and then clean it, removing the "
"degenerate face"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:3
msgid ""
"This currently only supports one plane but could be implemented to handle a "
"plane collection."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:6
msgid ""
"It will produce a new closed surface by creating new polygonal faces where "
"the input data was clipped."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:9
msgid ""
"Non-manifold surfaces should not be used as input for this filter. The input"
" surface should have no open edges, and must not have any edges that are "
"shared by more than two faces. In addition, the input surface should not "
"self-intersect, meaning that the faces of the surface should only touch at "
"their edges."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:15
msgid ""
"Plane normal to clip with.  Plane is centered at ``origin``.  Normal can be "
"either a 3 member list (e.g. ``[0, 0, 1]``) or one of the following strings:"
" ``'x'``, ``'y'``, ``'z'``, ``'-x'``, ``'-y'``, or ``'-z'``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:21
msgid ""
"Coordinate of the origin (e.g. ``[1, 0, 0]``).  Defaults to ``[0, 0, 0]```"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:24
msgid ""
"The tolerance for creating new points while clipping.  If the tolerance is "
"too small, then degenerate triangles might be produced."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:28
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:43
msgid "Updates mesh in-place while returning nothing. Defaults to False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:31
msgid ""
"**clipped_mesh** -- The clipped mesh resulting from this operation when "
"``inplace==False``.  Otherwise, ``None``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:37
msgid ""
"Clip a sphere in the X direction centered at the origin.  This will leave "
"behind half a sphere in the positive X direction."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.clip_closed_surface:44
msgid ""
"Clip the sphere at the xy plane and leave behind half the sphere in the "
"positive Z direction.  Shift the clip upwards to leave a smaller mesh "
"behind."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:3
msgid ""
"It adds a new point-data array named \"arc_length\" with the computed arc "
"length for each of the polylines in the input. For all other cell types, the"
" arc length is set to 0."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:7
msgid "**arc_length** -- Arc length of the length of the probed line"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:19
msgid "This is identical to the geodesic_distance"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_arc_length:25
msgid "You can also plot the arc_length"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:3
msgid ""
"The filter can reorder polygons to insure consistent orientation across "
"polygon neighbors. Sharp edges can be split and points duplicated with "
"separate normals to give crisp (rendered) surface definition. It is also "
"possible to globally flip the normal orientation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:8
msgid ""
"The algorithm works by determining normals for each polygon and then "
"averaging them at shared points. When sharp edges are present, the edges are"
" split and new points generated to prevent blurry edges (due to Gouraud "
"shading)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:13
msgid "Calculation of cell normals. Defaults to True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:15
msgid "Calculation of point normals. Defaults to True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:17
msgid "Splitting of sharp edges. Defaults to False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:19
msgid ""
"Set global flipping of normal orientation. Flipping modifies both the normal"
" direction and the order of a cell's points. Defaults to False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:23
msgid "Enforcement of consistent polygon ordering. Defaults to True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:25
msgid ""
"Turn on/off the automatic determination of correct normal orientation. NOTE:"
" This assumes a completely closed surface (i.e. no boundary edges) and no "
"non-manifold edges. If these constraints do not hold, all bets are off. This"
" option adds some computational complexity, and is useful if you don't want "
"to have to inspect the rendered image to determine whether to turn on the "
"FlipNormals flag. However, this flag can work with the FlipNormals flag, and"
" if both are set, all the normals in the output will point \"inward\". "
"Defaults to False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:35
msgid ""
"Turn on/off traversal across non-manifold edges. Changing this may prevent "
"problems where the consistency of polygonal ordering is corrupted due to "
"topological loops. Defaults to True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:39
msgid ""
"The angle that defines a sharp edge. If the difference in angle across "
"neighboring polygons is greater than this value, the shared edge is "
"considered \"sharp\". Defaults to 30.0."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:46
msgid "**mesh** -- Updated mesh with cell and point normals if inplace=False"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:51
msgid "Compute the point normals of the surface of a sphere"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:60
msgid ""
"Alternatively, create a new mesh when computing the normals and compute both"
" cell and point normals."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:73
msgid "Previous arrays named \"Normals\" will be overwritten."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:75
msgid ""
"Normals are computed only for polygons and triangle strips. Normals are not "
"computed for lines or vertices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:78
msgid ""
"Triangle strips are broken up into triangle polygons. You may want to "
"restrip the triangles."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.compute_normals:81
msgid "May be easier to run mesh.point_normals or mesh.cell_normals"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:3
msgid "vtk polydata mesh"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:10
msgid "One of the following strings Mean Gaussian Maximum Minimum"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.curvature:16
msgid "**curvature** -- Curvature values"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:3
msgid "Mesh to decimate"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:5
msgid ""
"Fraction of the original mesh to remove. TargetReduction is set to 0.9, this"
" filter will try to reduce the data set to 10% of its original size and will"
" remove 90% of the input triangles."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:10
msgid ""
"Decide whether to activate volume preservation which greatly reduces errors "
"in triangle normal direction. If off, volume preservation is disabled and if"
" AttributeErrorMetric is active, these errors can be large. Defaults to "
"False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:15
msgid ""
"Decide whether to include data attributes in the error metric. If off, then "
"only geometric error is used to control the decimation. Defaults to False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:19
msgid ""
"If attribute errors are to be included in the metric (i.e., "
"AttributeErrorMetric is on), then the following flags control which "
"attributes are to be included in the error calculation. Defaults to True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:24
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:28
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:30
msgid "See scalars parameter. Defaults to True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:26
msgid "See scalars parameter. Defaults to False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:32
msgid ""
"The scaling weight contribution of the scalar attribute. These values are "
"used to weight the contribution of the attributes towards the error metric. "
"Defaults to 0.1."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:36
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:38
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:40
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:42
msgid "See scalars weight parameter. Defaults to 0.1."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:49
msgid "**outmesh** -- Decimated mesh.  None when inplace=True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:54
msgid "Decimate a sphere while preserving its volume"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate:66
msgid ""
"If you encounter a segmentation fault or other error, consider using "
"``clean`` to remove any invalid cells before using this filter."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:3
msgid ""
"It forms a good approximation to the original geometry. Based on the "
"algorithm originally described in \"Decimation of Triangle Meshes\", Proc "
"Siggraph 92."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:6
msgid ""
"Reduction factor. A value of 0.9 will leave 10 % of the original number of "
"vertices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:9
msgid ""
"Angle used to define what an edge is (i.e., if the surface normal between "
"two adjacent triangles is >= feature_angle, an edge exists)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:12
msgid ""
"Angle used to control the splitting of the mesh. A split line exists when "
"the surface normals between two edge connected triangles are >= split_angle."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:15
msgid ""
"Controls the splitting of the mesh at corners, along edges, at non-manifold "
"points, or anywhere else a split is required. Turning splitting off will "
"better preserve the original topology of the mesh, but may not necessarily "
"give the exact requested decimation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:20
msgid ""
"Separates the mesh into semi-planar patches, which are disconnected from "
"each other. This can give superior results in some cases. If pre_split_mesh "
"is set to True, the mesh is split with the specified split_angle. Otherwise "
"mesh splitting is deferred as long as possible."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:25
msgid ""
"Controls topology preservation. If on, mesh splitting and hole elimination "
"will not occur. This may limit the maximum reduction that may be achieved."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.decimate_pro:31
msgid "**mesh** -- Decimated mesh. None when inplace=True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:3
msgid ""
"Specify a tolerance to control discarding of closely spaced points. This "
"tolerance is specified as a fraction of the diagonal length of the bounding "
"box of the points."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:7
msgid ""
"Specify alpha (or distance) value to control output of this filter. For a "
"non-zero alpha value, only edges or triangles contained within a sphere "
"centered at mesh vertices will be output. Otherwise, only triangles will be "
"output."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:12
msgid ""
"Specify a multiplier to control the size of the initial, bounding Delaunay "
"triangulation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:15
msgid ""
"Boolean controls whether bounding triangulation points (and associated "
"triangles) are included in the output. (These are introduced as an initial "
"triangulation to begin the triangulation process. This feature is nice for "
"debugging output.)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:20
msgid "If True, overwrite this mesh with the triangulated mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:22
msgid ""
"Specify the source object used to specify constrained edges and loops. (This"
" is optional.) If set, and lines/polygons are defined, a constrained "
"triangulation is created. The lines/polygons are assumed to reference points"
" in the input point set (i.e. point ids are identical in the input and "
"source). Note that this method does not connect the pipeline. See "
"SetSourceConnection for connecting the pipeline."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.delaunay_2d:35
msgid ""
"Extract the points of a sphere and then convert the point cloud to a surface"
" mesh.  Note that only the bottom half is converted to a mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.edge_mask:3
msgid "Angle to consider an edge."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:3
msgid "This will create a line from vertices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:5
msgid ""
"This takes polygonal data as input and generates polygonal data on output. "
"The input dataset is swept according to some extrusion function and creates "
"new polygonal primitives. These primitives form a \"skirt\" or swept "
"surface. For example, sweeping a line results in a quadrilateral, and "
"sweeping a triangle creates a \"wedge\"."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:12
msgid ""
"There are a number of control parameters for this filter. You can control "
"whether the sweep of a 2D object (i.e., polygon or triangle strip) is capped"
" with the generating geometry via the \"Capping\" parameter."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:22
msgid ""
"The skirt is generated by locating certain topological features. Free edges "
"(edges of polygons or triangle strips only used by one polygon or triangle "
"strips) generate surfaces. This is true also of lines or polylines. Vertices"
" generate lines."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:23
msgid ""
"This filter can be used to create 3D fonts, 3D irregular bar charts, or to "
"model 2 1/2D objects like punched plates. It also can be used to create "
"solid objects from 2D polygonal meshes."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:28
msgid "Mesh to extrude."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:30
msgid "Direction and length to extrude the mesh in."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:32
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:34
msgid "Overwrites the original mesh inplace."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude:39
msgid "Extrude a half arc circle"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:3
msgid "This is a modeling filter."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:5
msgid ""
"This takes polygonal data as input and generates polygonal data on output. "
"The input dataset is swept around the z-axis to create new polygonal "
"primitives. These primitives form a \"skirt\" or swept surface. For example,"
" sweeping a line results in a cylindrical shell, and sweeping a circle "
"creates a torus."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:12
msgid ""
"There are a number of control parameters for this filter. You can control "
"whether the sweep of a 2D object (i.e., polygon or triangle strip) is capped"
" with the generating geometry via the \"Capping\" instance variable. Also, "
"you can control the angle of rotation, and whether translation along the "
"z-axis is performed along with the rotation. (Translation is useful for "
"creating \"springs\".) You also can adjust the radius of the generating "
"geometry using the \"DeltaRotation\" instance variable."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:28
msgid ""
"This filter can be used to model axisymmetric objects like cylinders, "
"bottles, and wine glasses; or translational/ rotational symmetric objects "
"like springs or corkscrews."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:32
msgid "Number of pieces to divide line into."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:36
msgid "Total amount of translation along the z-axis."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:38
msgid "Change in radius during sweep process."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.extrude_rotate:40
msgid "The angle of rotation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:3
msgid ""
"Holes are identified by locating boundary edges, linking them together into "
"loops, and then triangulating the resulting loops. Note that you can specify"
" an approximate limit to the size of the hole that can be filled."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:8
msgid ""
"Specifies the maximum hole size to fill. This is represented as a radius to "
"the bounding circumsphere containing the hole. Note that this is an "
"approximate area; the actual area cannot be computed without first "
"triangulating the hole."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:18
msgid "**mesh** -- Mesh with holes filled.  None when inplace=True"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.fill_holes:23
msgid "Create a partial sphere with a hole and then fill it"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.flip_normals:5
msgid ""
"Flip the normals of a sphere and plot the normals before and after the flip."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:3
msgid ""
"This will add an array titled `vtkOriginalPointIds` of the input mesh's "
"point ids to the output mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:6
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:3
msgid "Vertex index indicating the start point of the geodesic segment."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:8
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:5
msgid "Vertex index indicating the end point of the geodesic segment."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:11
msgid ""
"**output** -- PolyData object consisting of the line segment between the two"
" given vertices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic:17
msgid "Plot the path between two points on a sphere"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.geodesic_distance:8
msgid "**length** -- Length of the geodesic segment."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:3
msgid "The mesh to intersect with."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:5
msgid ""
"If `True`, return the first input mesh split by the intersection with the "
"second input mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:8
msgid ""
"If `True`, return the second input mesh split by the intersection with the "
"first input mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:12
msgid ""
"* **intersection** (*pyvista.PolyData*) -- The intersection line. * "
"**first_split** (*pyvista.PolyData*) -- The first mesh split along the "
"intersection. Returns the original first mesh   if `split_first` is False. *"
" **second_split** (*pyvista.PolyData*) -- The second mesh split along the "
"intersection. Returns the original second mesh   if `split_second` is False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:12
msgid "**intersection** (*pyvista.PolyData*) -- The intersection line."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:13
msgid ""
"**first_split** (*pyvista.PolyData*) -- The first mesh split along the "
"intersection. Returns the original first mesh if `split_first` is False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:15
msgid ""
"**second_split** (*pyvista.PolyData*) -- The second mesh split along the "
"intersection. Returns the original second mesh if `split_second` is False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:20
msgid ""
"Intersect two spheres, returning the intersection and both spheres which "
"have new points/cells along the intersection line."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.intersection:28
msgid ""
"The mesh splitting takes additional time and can be turned off for either "
"mesh individually."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:3
msgid ""
"This requires a mesh with only triangular faces, an array of origin points "
"and an equal sized array of direction vectors to trace along."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:7
msgid ""
"The embree library used for vectorisation of the ray traces is known to "
"occasionally return no intersections where the VTK implementation would "
"return an intersection. If the result appears to be missing some "
"intersection points, set retry=True to run a second pass over rays that "
"returned no intersections, using the VTK ray_trace implementation."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:13
msgid "Starting point for each trace."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:15
msgid "Direction vector for each trace."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:17
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:10
msgid "Returns intersection of first point only."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:19
msgid "Will retry rays that return no intersections using the ray_trace"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:22
msgid ""
"* **intersection_points** (*np.ndarray*) -- Location of the intersection "
"points.  Empty array if no   intersections. * **intersection_rays** "
"(*np.ndarray*) -- Indices of the ray for each intersection point. Empty "
"array if no   intersections. * **intersection_cells** (*np.ndarray*) -- "
"Indices of the intersection cells.  Empty array if no   intersections."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:22
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:17
msgid ""
"**intersection_points** (*np.ndarray*) -- Location of the intersection "
"points.  Empty array if no intersections."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:24
msgid ""
"**intersection_rays** (*np.ndarray*) -- Indices of the ray for each "
"intersection point. Empty array if no intersections."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:26
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:19
msgid ""
"**intersection_cells** (*np.ndarray*) -- Indices of the intersection cells."
"  Empty array if no intersections."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.multi_ray_trace:31
msgid ""
"Compute the intersection between rays from the origin in directions ``[1, 0,"
" 0]``, ``[0, 1, 0]`` and ``[0, 0, 1]``, and a sphere with radius 0.5 "
"centered at the origin"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_boundaries:3
msgid "The color of the edges when they are added to the plotter."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_boundaries:5
msgid ""
"All additional keyword arguments will be passed to "
":func:`pyvista.BasePlotter.add_mesh`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:3
msgid ""
"One of the following strings indicating curvature type:  * ``'Mean'`` * "
"``'Gaussian'`` * ``'Maximum'`` * ``'Minimum'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:3
msgid "One of the following strings indicating curvature type:"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:5
msgid "``'Mean'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:6
msgid "``'Gaussian'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:7
msgid "``'Maximum'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:8
msgid "``'Minimum'``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:10
msgid "See :func:`pyvista.plot`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:13
msgid "**cpos** -- List of camera position, focal point, and view up."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.plot_curvature:18
msgid "Plot the mean curvature of an example mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:3
msgid ""
"Plane origin.  Defaults the approximate center of the input mesh minus half "
"the length of the input mesh in the direction of the normal."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:7
msgid "Plane normal.  Defaults to +Z ``[0, 0, 1]``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:9
msgid "Overwrite the original mesh with the projected points"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.project_points_to_plane:14
msgid "Flatten a sphere to the XY plane"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:3
msgid ""
"This requires a mesh and a line segment defined by an origin and end_point."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:6
msgid "Start of the line segment."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:8
msgid "End of the line segment."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:12
msgid "Plots ray trace results"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:14
msgid "Plots off screen when ``plot=True``.  Used for unit testing."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:17
msgid ""
"* **intersection_points** (*np.ndarray*) -- Location of the intersection "
"points.  Empty array if no   intersections. * **intersection_cells** "
"(*np.ndarray*) -- Indices of the intersection cells.  Empty array if no   "
"intersections."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ray_trace:24
msgid ""
"Compute the intersection between a ray from the origin and [1, 0, 0] and a "
"sphere with radius 0.5 centered at the origin"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:3
msgid "Only valid for all-triangle meshes."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:5
msgid ""
"If remove is a bool array, points that are True will be removed.  Otherwise,"
" it is treated as a list of indices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:8
msgid ""
"When 'all', only faces containing all points flagged for removal will be "
"removed.  Default 'all'"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:11
msgid "When True, point and cell scalars will be passed on to the new mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:17
msgid ""
"* **mesh** (*pyvista.PolyData*) -- Mesh without the points flagged for "
"removal.  Not returned   when inplace=False. * **ridx** (*np.ndarray*) -- "
"Indices of new points relative to the original mesh.  Not   returned when "
"inplace=False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:17
msgid ""
"**mesh** (*pyvista.PolyData*) -- Mesh without the points flagged for "
"removal.  Not returned when inplace=False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:19
msgid ""
"**ridx** (*np.ndarray*) -- Indices of new points relative to the original "
"mesh.  Not returned when inplace=False."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.remove_points:24
msgid "Remove the first 100 points from a sphere"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:5
msgid ""
"If there are no lines in the input dataset, then the output will be an empty"
" PolyData mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:8
msgid ""
"Set the \"half\" width of the ribbon. If the width is allowed to vary, this "
"is the minimum width. The default is 10% the length"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:11
msgid ""
"String name of the scalars array to use to vary the ribbon width. This is "
"only used if a scalars array is specified."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:14
msgid ""
"Set the offset angle of the ribbon from the line normal. (The angle is "
"expressed in degrees.) The default is 0.0"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:17
msgid ""
"Set the maximum ribbon width in terms of a multiple of the minimum width. "
"The default is 2.0"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:20
msgid "Normal to use as default"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:22
msgid ""
"If True, generate texture coordinates along the ribbon. This can also be "
"specified to generate the texture coordinates in the following ways: "
"``'length'``, ``'normalized'``,"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.ribbon:29
msgid "Convert a line to a ribbon and plot it."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:3
msgid ""
"The effect is to \"relax\" the mesh, making the cells better shaped and the "
"vertices more evenly distributed."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:6
msgid "Number of iterations for Laplacian smoothing."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:8
msgid ""
"Relaxation factor controls the amount of displacement in a single iteration."
" Generally a lower relaxation factor and higher number of iterations is "
"numerically more stable."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:12
msgid ""
"Convergence criterion for the iteration process. Smaller numbers result in "
"more smoothing iterations. Range from (0 to 1)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:15
msgid ""
"Edge angle to control smoothing along edges (either interior or boundary)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:17
msgid "Feature angle for sharp edge identification."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:19
msgid "Boolean flag to control smoothing of boundary edges."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:21
msgid "Boolean flag to control smoothing of feature edges."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:26
msgid "**mesh** -- Smoothed mesh. None when inplace=True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.smooth:31
msgid "Smooth the edges of an all triangular cube"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:3
msgid ""
"Generates triangle strips and/or poly-lines from input polygons, triangle "
"strips, and lines."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:6
msgid ""
"Polygons are assembled into triangle strips only if they are triangles; "
"other types of polygons are passed through to the output and not stripped. "
"(Use  ``triangulate`` filter to triangulate non-triangular polygons prior to"
" running this filter if you need to strip all the data.) The filter will "
"pass through (to the output) vertices if they are present in the input "
"polydata. Also note that if triangle strips or polylines are defined in the "
"input they are passed through and not joined nor extended. (If you wish to "
"strip these use ``triangulate`` filter to fragment the input into triangles "
"and lines prior to running this filter.)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:17
msgid ""
"If on, the output polygonal segments will be joined if they are contiguous. "
"This is useful after slicing a surface. The default is off."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:21
msgid ""
"Specify the maximum number of triangles in a triangle strip, and/or the "
"maximum number of lines in a poly-line."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:24
msgid ""
"Enable/Disable passing of the CellData in the input to the output as "
"FieldData. Note the field data is transformed."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:27
msgid ""
"If on, the output polygonal dataset will have a celldata array that holds "
"the cell index of the original 3D cell that produced each output cell. This "
"is useful for picking. The default is off to conserve memory."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.strip:32
msgid ""
"If on, the output polygonal dataset will have a pointdata array that holds "
"the point index of the original vertex that produced each output vertex. "
"This is useful for picking. The default is off to conserve memory."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:3
msgid ""
"Uses one of the following vtk subdivision filters to subdivide a mesh. "
"vtkButterflySubdivisionFilter vtkLoopSubdivisionFilter "
"vtkLinearSubdivisionFilter"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:8
msgid ""
"Linear subdivision results in the fastest mesh subdivision, but it does not "
"smooth mesh edges, but rather splits each triangle into 4 smaller triangles."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:12
msgid ""
"Butterfly and loop subdivision perform smoothing when dividing, and may "
"introduce artifacts into the mesh when dividing."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:15
msgid ""
"Subdivision filter appears to fail for multiple part meshes.  Should be one "
"single mesh."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:18
msgid ""
"Number of subdivisions.  Each subdivision creates 4 new triangles, so the "
"number of resulting triangles is nface*4**nsub where nface is the current "
"number of faces."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:22
msgid "Can be one of the following: 'butterfly', 'loop', 'linear'"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:27
msgid "**mesh** -- pyvista polydata object.  None when inplace=True"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.subdivide:37
msgid "Alternatively, update the mesh in-place"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:3
msgid "More complex polygons will be broken down into tetrahedrals."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.triangulate:8
msgid "**mesh** -- Mesh containing only triangles.  None when inplace=True"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:3
msgid ""
"The radius of the tube can be set to linearly vary with a scalar value."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:5
msgid "Minimum tube radius (minimum because the tube radius may vary)."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:7
msgid "scalars array by which the radius varies"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:9
msgid "Turn on/off whether to cap the ends with polygons. Default ``True``."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:11
msgid "Set the number of sides for the tube. Minimum of 3."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:13
msgid "Maximum tube radius in terms of a multiple of the minimum radius."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:15
msgid "The field preference when searching for the scalars array by name."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:20
msgid "**mesh** -- Tube-filtered mesh. None when inplace=True."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.PolyDataFilters.tube:25
msgid "Convert a single line to a tube"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:52
msgid "UnstructuredGrid Filters"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:54
msgid ""
"The :class:`pyvista.UnstructuredGridFilters` is inherited by "
":class:`pyvista.UnstructuredGrid` making all the following filters available"
" as callable methods directly from any ``UnstructuredGrid`` mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:62:<autosummary>:1
msgid ""
":obj:`delaunay_2d "
"<pyvista.core.filters.pyvista.UnstructuredGridFilters.delaunay_2d>`\\ "
"\\(\\[tol\\, alpha\\, offset\\, bound\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UnstructuredGridFilters:1
msgid ""
"An internal class to manage filters/algorithms for unstructured grid "
"datasets."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UnstructuredGridFilters.delaunay_2d:3
msgid ""
"This extracts the grid's points and performs the triangulation on those "
"alone."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:72
msgid "UniformGrid Filters"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:74
msgid ""
"The :class:`pyvista.UniformGridFilters` is inherited by "
":class:`pyvista.UniformGrid` making all the following filters available as "
"callable methods directly from any ``UniformGrid`` mesh."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:82:<autosummary>:1
msgid ""
":obj:`extract_subset "
"<pyvista.core.filters.pyvista.UniformGridFilters.extract_subset>`\\ "
"\\(voi\\[\\, rate\\, boundary\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:82:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:1
msgid "Select piece (e.g., volume of interest)."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:82:<autosummary>:1
msgid ""
":obj:`gaussian_smooth "
"<pyvista.core.filters.pyvista.UniformGridFilters.gaussian_smooth>`\\ "
"\\(\\[radius\\_factor\\, std\\_dev\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:82:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:1
msgid "Smooth the data with a Gaussian kernel."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters:1
msgid ""
"An internal class to manage filters/algorithms for uniform grid datasets."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:3
msgid ""
"To use this filter set the VOI ivar which are i-j-k min/max indices that "
"specify a rectangular region in the data. (Note that these are 0-offset.) "
"You can also specify a sampling rate to subsample the data."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:8
msgid ""
"Typical applications of this filter are to extract a slice from a volume for"
" image processing, subsampling large volumes to reduce data size, or "
"extracting regions of a volume with interesting data."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:12
msgid ""
"Length 6 iterable of ints: ``(xmin, xmax, ymin, ymax, zmin, zmax)``. These "
"bounds specify the volume of interest in i-j-k min/max indices."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:16
msgid ""
"Length 3 iterable of ints: ``(xrate, yrate, zrate)``. Default: ``(1, 1, 1)``"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.extract_subset:19
msgid ""
"Control whether to enforce that the \"boundary\" of the grid is output in "
"the subsampling process. (This only has effect when the rate in any "
"direction is not equal to 1). When this is on, the subsampling will always "
"include the boundary of the grid even though the sample rate is not an even "
"multiple of the grid dimensions. (By default this is off.)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:3
msgid "Unitless factor to limit the extent of the kernel."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:5
msgid "Standard deviation of the kernel in pixel units."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.UniformGridFilters.gaussian_smooth:7
msgid "Name of scalars to process. Defaults to currently active scalars."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:91
msgid "Composite Filters"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:93
msgid ""
"These are filters that can be applied to composite datasets, i.e. "
":class:`pyvista.MultiBlock`. The :class:`pyvista.CompositeFilters` class "
"inherits many but not all of the filters from "
":class:`pyvista.DataSetFilters`."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`cell_centers "
"<pyvista.core.filters.pyvista.CompositeFilters.cell_centers>`\\ "
"\\(\\[vertex\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`cell_data_to_point_data "
"<pyvista.core.filters.pyvista.CompositeFilters.cell_data_to_point_data>`\\ "
"\\(\\[pass\\_cell\\_data\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`clip <pyvista.core.filters.pyvista.CompositeFilters.clip>`\\ "
"\\(\\[normal\\, origin\\, invert\\, value\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`clip_box <pyvista.core.filters.pyvista.CompositeFilters.clip_box>`\\ "
"\\(\\[bounds\\, invert\\, factor\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`combine <pyvista.core.filters.pyvista.CompositeFilters.combine>`\\ "
"\\(\\[merge\\_points\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.combine:1
msgid "Append all blocks into a single unstructured grid."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`compute_cell_sizes "
"<pyvista.core.filters.pyvista.CompositeFilters.compute_cell_sizes>`\\ "
"\\(\\[length\\, area\\, volume\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`elevation <pyvista.core.filters.pyvista.CompositeFilters.elevation>`\\"
" \\(\\[low\\_point\\, high\\_point\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`extract_all_edges "
"<pyvista.core.filters.pyvista.CompositeFilters.extract_all_edges>`\\ "
"\\(\\[progress\\_bar\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`extract_geometry "
"<pyvista.core.filters.pyvista.CompositeFilters.extract_geometry>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.extract_geometry:1
msgid "Combine the geomertry of all blocks into a single ``PolyData`` object."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`outline <pyvista.core.filters.pyvista.CompositeFilters.outline>`\\ "
"\\(\\[generate\\_faces\\, nested\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline:1
msgid ""
"Produce an outline of the full extent for the all blocks in this composite "
"dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`outline_corners "
"<pyvista.core.filters.pyvista.CompositeFilters.outline_corners>`\\ "
"\\(\\[factor\\, nested\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline_corners:1
msgid ""
"Produce an outline of the corners for the all blocks in this composite "
"dataset."
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`point_data_to_cell_data "
"<pyvista.core.filters.pyvista.CompositeFilters.point_data_to_cell_data>`\\ "
"\\(\\[pass\\_point\\_data\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`slice <pyvista.core.filters.pyvista.CompositeFilters.slice>`\\ "
"\\(\\[normal\\, origin\\, generate\\_triangles\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`slice_along_axis "
"<pyvista.core.filters.pyvista.CompositeFilters.slice_along_axis>`\\ "
"\\(\\[n\\, axis\\, tolerance\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`slice_along_line "
"<pyvista.core.filters.pyvista.CompositeFilters.slice_along_line>`\\ "
"\\(line\\[\\, generate\\_triangles\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`slice_orthogonal "
"<pyvista.core.filters.pyvista.CompositeFilters.slice_orthogonal>`\\ "
"\\(\\[x\\, y\\, z\\, ...\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/filters.rst:101:<autosummary>:1
msgid ""
":obj:`triangulate "
"<pyvista.core.filters.pyvista.CompositeFilters.triangulate>`\\ "
"\\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters:1
msgid "An internal class to manage filters/algorithms for composite datasets."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.combine:3
msgid "Merge coincidental points."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.extract_geometry:3
msgid ""
"Place this filter at the end of a pipeline before a polydata consumer such "
"as a polydata mapper to extract geometry from all blocks and append them to "
"one polydata object."
msgstr ""

#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline:5
#: ../../pyvista/pyvista/core/filters.pydocstring of
#: pyvista.core.filters.CompositeFilters.outline_corners:6
msgid "If True, these creates individual outlines for each nested dataset"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:2
msgid "Gridded Data"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:5
msgid ""
"Gridded datasets in pyvista capture ``vtkRectilinearGrid`` and "
"``vtkImageData`` data objects on the VTK backend. These data types have "
"common features which are encompassed int their shared inheritance of "
":class:`pyvista.Grid`"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:15:<autosummary>:1
msgid ":obj:`dimensions <pyvista.Grid.dimensions>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:15:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.Grid.dimensions:1
#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.RectilinearGrid.dimensions:1
#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.StructuredGrid.dimensions:1
msgid "Return a length 3 tuple of the grid's dimensions."
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.core.grid.Grid:1
msgid "Bases: :class:`pyvista.core.dataset.DataSet`"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.core.grid.Grid:1
msgid "A class full of common methods for non-pointset grids."
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.Grid.dimensions:3
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.RectilinearGrid.dimensions:3
msgid ""
"These are effectively the number of nodes along each of the three dataset "
"axes."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:28
msgid "Rectilinear Grid"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
msgid ":obj:`dimensions <pyvista.RectilinearGrid.dimensions>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
msgid ":obj:`meshgrid <pyvista.RectilinearGrid.meshgrid>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.RectilinearGrid.meshgrid:1
msgid "Return a meshgrid of numpy arrays for this mesh."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
msgid ":obj:`points <pyvista.RectilinearGrid.points>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.RectilinearGrid.points:1
msgid "Return a copy of the points as an n by 3 numpy array."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
msgid ":obj:`x <pyvista.RectilinearGrid.x>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.RectilinearGrid.x:1
msgid "Get the coordinates along the X-direction."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
msgid ":obj:`y <pyvista.RectilinearGrid.y>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.RectilinearGrid.y:1
msgid "Get the coordinates along the Y-direction."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
msgid ":obj:`z <pyvista.RectilinearGrid.z>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:36:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.RectilinearGrid.z:1
msgid "Get the coordinates along the Z-direction."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:41:<autosummary>:1
msgid ""
":obj:`cast_to_structured_grid "
"<pyvista.RectilinearGrid.cast_to_structured_grid>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:41:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid.cast_to_structured_grid:1
msgid "Cast this rectilinear grid to a :class:`pyvista.StructuredGrid`."
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkRectilinearGrid`, "
":class:`pyvista.core.grid.Grid`"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:1
msgid "Extend the functionality of a vtk.vtkRectilinearGrid object."
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:3
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:3
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:3
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:3
msgid "Can be initialized in several ways:"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:5
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:5
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:5
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:18
msgid "Create empty grid"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:6
msgid "Initialize from a vtk.vtkRectilinearGrid object"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:7
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:7
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:7
msgid "Initialize directly from the point arrays"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.RectilinearGrid:9
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:9
msgid ""
"See _from_arrays in the documentation for more details on initializing from "
"point arrays"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.RectilinearGrid.meshgrid:3
msgid ""
"This simply returns a ``numpy.meshgrid`` of the coordinates for this mesh in"
" ``ij`` indexing. These are a copy of the points of this mesh."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:50
msgid "Uniform Grid"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:52
msgid ""
"PyVista's definition of a uniform grid is an extension of VTK's "
"``vtkImageData``"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
msgid ":obj:`origin <pyvista.UniformGrid.origin>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.UniformGrid.origin:1
msgid "Return the origin of the grid (bottom southwest corner)."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
msgid ":obj:`points <pyvista.UniformGrid.points>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.UniformGrid.points:1
msgid "Build a copy of the implicitly defined points as a numpy array."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
msgid ":obj:`spacing <pyvista.UniformGrid.spacing>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.UniformGrid.spacing:1
msgid "Get the spacing for each axial direction."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
msgid ":obj:`x <pyvista.UniformGrid.x>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.UniformGrid.x:1
msgid "Return all the X points."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
msgid ":obj:`y <pyvista.UniformGrid.y>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.UniformGrid.y:1
msgid "Return all the Y points."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
msgid ":obj:`z <pyvista.UniformGrid.z>`\\"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:59:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of pyvista.UniformGrid.z:1
msgid "Return all the Z points."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:64:<autosummary>:1
msgid ""
":obj:`cast_to_rectilinear_grid "
"<pyvista.UniformGrid.cast_to_rectilinear_grid>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:64:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid.cast_to_rectilinear_grid:1
msgid "Cast this uniform grid to a :class:`pyvista.RectilinearGrid`."
msgstr ""

#: ../../pyvista/docs/core/grids.rst:64:<autosummary>:1
msgid ""
":obj:`cast_to_structured_grid "
"<pyvista.UniformGrid.cast_to_structured_grid>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/grids.rst:64:<autosummary>:1
#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid.cast_to_structured_grid:1
msgid "Cast this uniform grid to a :class:`pyvista.StructuredGrid`."
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkImageData`, "
":class:`pyvista.core.grid.Grid`, "
":class:`pyvista.core.filters.UniformGridFilters`"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:1
msgid "Extend the functionality of a vtk.vtkImageData object."
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:6
msgid "Initialize from a vtk.vtkImageData object"
msgstr ""

#: ../../pyvista/pyvista/core/grid.pydocstring of
#: pyvista.core.grid.UniformGrid:9
msgid ""
"See ``_from_specs`` in the documentation for more details on initializing "
"from point arrays"
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:2
msgid "Helpers"
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:4
msgid ""
"The ``pyvista`` module contains several functions to simplify the creation "
"and manipulation of meshes or interfacing with VTK datasets."
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:9
msgid "Wrap a VTK Dataset"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:1
msgid "Wrap any given VTK data object to its appropriate pyvista data object."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:3
msgid ""
"Other formats that are supported include: * 2D :class:`numpy.ndarray` of XYZ"
" vertices * 3D :class:`numpy.ndarray` representing a volume. Values will be "
"scalars. * 3D :class:`trimesh.Trimesh` mesh. * 3D :class:`meshio` mesh."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:9
msgid "Dataset to wrap."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:12
msgid "**wrapped_dataset** -- The `pyvista` wrapped dataset."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:17
msgid "Wrap a numpy array representing a random point cloud."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:32
msgid "Wrap a Trimesh object."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.wrap:49
msgid "Wrap a VTK object."
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:14
msgid "Simplified Triangular Mesh Construction"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:1
msgid "Construct a ``pyvista.PolyData`` mesh using points and faces arrays."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:3
msgid ""
"Construct a mesh from an Nx3 array of points and an Mx3 array of triangle "
"indices, resulting in a mesh with N vertices and M triangles.  This function"
" does not require the standard VTK \"padding\" column and simplifies mesh "
"creation."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:8
msgid ""
"Array of points with shape (N, 3) storing the vertices of the triangle mesh."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:11
msgid "Array of indices with shape (M, 3) containing the triangle indices."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:15
msgid "**tri_mesh** -- PolyData instance containing the triangle mesh."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.make_tri_mesh:20
msgid ""
"This example discretizes the unit square into a triangle mesh with nine "
"vertices and eight faces."
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:19
msgid "Lines from Points"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:1
msgid "Make a connected line set given an array of points."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:3
msgid ""
"Points representing the vertices of the connected segments. For example, two"
" line segments would be represented as:  np.array([[0, 0, 0], [1, 0, 0], [1,"
" 1, 0]])"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:3
msgid ""
"Points representing the vertices of the connected segments. For example, two"
" line segments would be represented as:"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:6
msgid "np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0]])"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:8
msgid "If True, close the line segments into a loop"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.lines_from_points:11
#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:14
msgid "**lines** -- PolyData with lines and cells."
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:24
msgid "Line Segments from Points"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:1
msgid "Generate non-connected line segments from points."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:3
msgid ""
"Assumes points are ordered as line segments and an even number of points."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:6
msgid ""
"Points representing line segments. An even number must be given as every two"
" vertices represent a single line segment. For example, two line segments "
"would be represented as:  ``np.array([[0, 0, 0], [1, 0, 0], [1, 0, 0], [1, "
"1, 0]])``"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:6
msgid ""
"Points representing line segments. An even number must be given as every two"
" vertices represent a single line segment. For example, two line segments "
"would be represented as:"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:11
msgid "``np.array([[0, 0, 0], [1, 0, 0], [1, 0, 0], [1, 1, 0]])``"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.line_segments_from_points:19
msgid ""
"This example plots two line segments at right angles to each other line."
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:29
msgid "Convert to and from VTK Datatypes"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:1
msgid "Convert a NumPy array to a vtkDataArray or vice versa."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:3
msgid "A numpy array or vtkDataArry to convert"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:5
msgid "The name of the data array for VTK"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:7
msgid "if input is numpy array then deep copy values"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.convert_array:10
msgid ""
"the converted array (if input is a NumPy ndaray then returns "
"``vtkDataArray`` or is input is ``vtkDataArray`` then returns NumPy "
"``ndarray``). If pdf==True and the input is ``vtkDataArry``, return a pandas"
" DataFrame."
msgstr ""

#: ../../pyvista/docs/core/helpers.rst:34
msgid "Fit Plane to Points"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.fit_plane_to_points:1
msgid "Fit a plane to a set of points."
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.fit_plane_to_points:3
msgid "Size n by 3 array of points to fit a plane through"
msgstr ""

#: ../../pyvista/pyvista/utilities/helpers.pydocstring of
#: pyvista.utilities.helpers.fit_plane_to_points:5
msgid "If true, also returns the center and normal used to generate the plane"
msgstr ""

#: ../../pyvista/docs/core/index.rst:2
msgid "Core API"
msgstr ""

#: ../../pyvista/docs/core/index.rst:4
msgid ""
"The `Visualization Toolkit`_ (VTK), developed by Kitware_, has many mesh "
"data types that PyVista wraps. This chapter is intended to describe these "
"different mesh types and how we wrap and implement each of those mesh types "
"in VTK. This chapter also highlights how all PyVista types have direct "
"access to common VTK filters (see :ref:`filters_ref`)."
msgstr ""

#: ../../pyvista/docs/core/index.rst:15
msgid ""
"All PyVista meshes inherit from the DataSet type (see :ref:`ref_dataset`). "
"PyVista has the following mesh types:"
msgstr ""

#: ../../pyvista/docs/core/index.rst:18
msgid ""
":class:`pyvista.PolyData` consists of any 1D or 2D geometries to construct "
"vertices, lines, polygons, and triangles. We generally use ``PolyData`` to "
"construct scattered points and closed/open surfaces (non-volumetric "
"datasets). The :class:`pyvista.PolyData` class is an extension of "
"``vtk.vtkPolyData``."
msgstr ""

#: ../../pyvista/docs/core/index.rst:20
msgid ""
"An :class:`pyvista.UnstructuredGrid` is the most general dataset type that "
"can hold any 1D, 2D, or 3D cell geometries. You can think of this as a 3D "
"extension of ``PolyData`` that allows volumetric cells to be present. It's "
"fairly uncommon to explicitly make unstructured grids but they are often the"
" result of different processing routines that might extract subsets of "
"larger datasets. The :class:`pyvista.UnstructuredGrid` class is an extension"
" of ``vtk.UnstructuredGrid``."
msgstr ""

#: ../../pyvista/docs/core/index.rst:22
msgid ""
"A :class:`pyvista.StructuredGrid` is a regular lattice of points aligned "
"with an internal coordinate axes such that the connectivity can be defined "
"by a grid ordering. These are commonly made from :func:`np.meshgrid`. The "
"cell types of structured grids must be 2D Quads or 3D Hexahedrons. The "
":class:`pyvista.StructuredGrid` class is an extension of "
"``vtk.vtkStructuredGrid``."
msgstr ""

#: ../../pyvista/docs/core/index.rst:24
msgid ""
"A :class:`pyvista.RectilinearGrid` defines meshes with implicit geometries "
"along the axes directions that are rectangular and regular. The "
":class:`pyvista.RectilinearGrid` class is an extension of "
"``vtk.vtkRectilinearGrid``."
msgstr ""

#: ../../pyvista/docs/core/index.rst:26
msgid ""
"Image data, commonly referenced to as uniform grids, and defined by the "
":class:`pyvista.UniformGrid` class are meshes with implicit geometries where"
" cell sizes are uniformly assigned along each axis and the spatial reference"
" is built out from an origin point. The :class:`pyvista.UniformGrid` class "
"is an extension of ``vtk.vtkImageData``."
msgstr ""

#: ../../pyvista/docs/core/index.rst:28
msgid ""
":class:`pyvista.MultiBlock` datasets are containers to hold several VTK "
"datasets in one accessible and spatially referenced object. The "
":class:`pyvista.MultiBlock` class is an extension of "
"``vtk.vtkMultiBlockDataSet``."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:2
msgid "Lights"
msgstr ""

#: ../../pyvista/docs/core/lights.rst:3
msgid ""
"The :class:`pyvista.Light` class adds additional functionality and a "
"pythonic API to the ``vtk.vtkLight`` class. :class:`pyvista.Plotter` objects"
" come with a default set of lights that work well in most cases, but in many"
" situations a more hands-on access to lighting is necessary."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:22
msgid ""
"Create a red spotlight that shines on the origin, then create a scene "
"without lighting and add our light to it manually."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:43
msgid "For detailed examples please see :ref:`ref_light_examples`."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:47
msgid "Light API"
msgstr ""

#: ../../pyvista/docs/core/lights.rst:48
msgid ""
"``pyvista.Light`` instances come in three types: headlights, camera lights, "
"and scene lights. Headlights always shine along the camera's axis, camera "
"lights have a fixed position with respect to the camera, and scene lights "
"are positioned with respect to the scene, such that moving around the camera"
" doesn't affect the lighting of the scene."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:54
msgid ""
"Lights have a :py:attr:`position` and a :py:attr:`focal_point` that define "
"the axis of the light. The meaning of these depends on the type of the "
"light. The color of the light can be set according to ambient, diffuse and "
"specular components. The brightness can be set with the :py:attr:`intensity`"
" property, and the writable :py:attr:`on` property specifies whether the "
"light is switched on."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:60
msgid ""
"Lights can be either directional (meaning an infinitely distant point "
"source) or :py:attr:`positional`. Positional lights have additional "
"properties that describe the geometry and the spatial distribution of the "
"light. The :py:attr:`cone_angle` and :py:attr:`exponent` properties define "
"the shape of the light beam and the angular distribution of the light's "
"intensity within that beam. The fading of the light with distance can be "
"customized with the :py:attr:`attenuation_values` property. Positional "
"lights can also make use of an actor that represents the shape and color of "
"the light using a wireframe, see :func:`show_actor`."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:69
msgid ""
"Positional lights with a :py:attr:`cone_angle` of less than 90 degrees are "
"known as spotlights. Spotlights are unidirectional and they make full use of"
" beam shaping properties, namely :py:attr:`exponent` and attenuation.  Non-"
"spotlight positional lights, however, act like point sources located in the "
"real-world position of the light, shining in all directions of space. They "
"display attenuation with distance from the source, but their beam is "
"isotropic in space. In contrast, directional lights act as infinitely "
"distant point sources, so they are unidirectional but they do not attenuate."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:80
msgid "Shadows"
msgstr ""

#: ../../pyvista/docs/core/lights.rst:81
msgid ""
"With directed lights, it is possible to create complex lighting scenarios.  "
"For example, you can position a light directly above an actor (in this case,"
" a sphere), to create a shadow directly below it."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:85
msgid ""
"The following example uses a positional light to create an eclipse-like "
"shadow below a sphere by controlling the cone angle and exponent values of "
"the light."
msgstr ""

#: ../../pyvista/docs/core/lights.rst:116
msgid ""
"VTK has known issues when rendering shadows on certain window sizes.  Be "
"prepared to experiment with the ``window_size`` parameter."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:1
msgid "Light class."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:3
msgid ""
"The position of the light. The interpretation of the position depends on the"
" type of the light and whether the light has a transformation matrix.  See "
"also the :py:attr:`position` property."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:8
msgid ""
"The focal point of the light. The interpretation of the focal point depends "
"on the type of the light and whether the light has a transformation matrix."
"  See also the :py:attr:`focal_point` property."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:13
msgid ""
"The color of the light. The ambient, diffuse and specular colors will all be"
" set to this color on creation."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:16
msgid ""
"The type of the light. If a string, one of ``'headlight'``, ``'camera "
"light'`` or ``'scene light'``. If an int, one of 1, 2 or 3, respectively. "
"The class constants ``Light.HEADLIGHT``, ``Light.CAMERA_LIGHT`` and "
"``Light.SCENE_LIGHT`` are also available, respectively.      - A headlight "
"is attached to the camera, looking at its       focal point along the axis "
"of the camera.      - A camera light also moves with the camera, but it can"
"       occupy a general position with respect to it.      - A scene light is"
" stationary with respect to the scene,       as it does not follow the "
"camera. This is the default."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:16
msgid ""
"The type of the light. If a string, one of ``'headlight'``, ``'camera "
"light'`` or ``'scene light'``. If an int, one of 1, 2 or 3, respectively. "
"The class constants ``Light.HEADLIGHT``, ``Light.CAMERA_LIGHT`` and "
"``Light.SCENE_LIGHT`` are also available, respectively."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:22
msgid ""
"A headlight is attached to the camera, looking at its focal point along the "
"axis of the camera."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:25
msgid ""
"A camera light also moves with the camera, but it can occupy a general "
"position with respect to it."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:28
msgid ""
"A scene light is stationary with respect to the scene, as it does not follow"
" the camera. This is the default."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:31
msgid "The brightness of the light (between 0 and 1)."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:33
msgid ""
"Set if the light is positional.  The default is a directional light, i.e. an"
" infinitely distant point source. A positional light with a cone angle of at"
" least 90 degrees acts like a spherical point source. A positional light "
"with a cone angle that is less than 90 degrees is known as a spotlight."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:33
msgid "Set if the light is positional."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:35
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.positional:3
msgid ""
"The default is a directional light, i.e. an infinitely distant point source."
" A positional light with a cone angle of at least 90 degrees acts like a "
"spherical point source. A positional light with a cone angle that is less "
"than 90 degrees is known as a spotlight."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:41
msgid "Cone angle of a positional light in degrees."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:43
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.show_actor:1
msgid "Show an actor for a spotlight that depicts the geometry of the beam."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:46
msgid ""
"The exponent of the cosine used for spotlights. See also the "
":py:attr:`exponent` property."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:49
msgid ""
"The value of shadow attenuation.  By default a light will be completely "
"blocked when in shadow. By setting this value to less than 1.0 you can "
"control how much light is attenuated when in shadow. Note that changing the "
":py:attr:`attenuation_values` of the light can make it pass through objects "
"even if its shadow attenuation is 1."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:49
msgid "The value of shadow attenuation."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:51
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.shadow_attenuation:3
msgid ""
"By default a light will be completely blocked when in shadow. By setting "
"this value to less than 1.0 you can control how much light is attenuated "
"when in shadow. Note that changing the :py:attr:`attenuation_values` of the "
"light can make it pass through objects even if its shadow attenuation is 1."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:57
msgid ""
"Quadratic attenuation constants.  The values are a 3-length sequence which "
"specifies the constant, linear and quadratic constants in this order. These "
"parameters only have an effect for positional lights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:57
msgid "Quadratic attenuation constants."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:59
msgid ""
"The values are a 3-length sequence which specifies the constant, linear and "
"quadratic constants in this order. These parameters only have an effect for "
"positional lights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:66
msgid "Create a light at (10, 10, 10) and set its diffuse color to red."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light:72
msgid ""
"Create a positional light at (0, 0, 3) with a cone angle of 30, exponent of "
"20, and a visible actor."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.add_renderer:1
msgid "Attach a renderer to this light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:1
msgid "Return the ambient color of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:3
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:3
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:3
msgid ""
"When setting, the color must be a 3-length sequence or a string. For "
"example:"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:6
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:6
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:6
msgid "``color='white'``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:7
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:7
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:7
msgid "``color='w'``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:8
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:8
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:8
msgid "``color=[1, 1, 1]``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:9
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:9
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:9
msgid "``color='#FFFFFF'``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.ambient_color:13
msgid "Create a light and set its ambient color to red."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.attenuation_values:1
msgid "Return the quadratic attenuation constants."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.attenuation_values:3
msgid ""
"The values are 3-length sequences which specify the constant, linear and "
"quadratic constants in this order. These parameters only have an effect for "
"positional lights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.attenuation_values:7
msgid ""
"Attenuation refers to the dampening of a beam of light as it gets further "
"away from the point source. The three constants describe three different "
"profiles for dampening with distance. A larger attenuation constant "
"corresponds to more rapid decay with distance."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.attenuation_values:15
msgid ""
"Plot three cubes lit by two lights with different attenuation profiles.  The"
" blue light has slower linear attenuation, the green one has quadratic "
"attenuation that makes it decay faster. Note that there are no shadow "
"effects included so each box gets lit by both lights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.cone_angle:1
msgid "Return the cone angle of a positional light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.cone_angle:3
msgid ""
"The angle is in degrees and is measured between the axis of the cone and an "
"extremal ray of the cone. A value smaller than 90 has spot lighting effects,"
" anything equal to and above 90 is just a positional light, i.e. a spherical"
" point source."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.cone_angle:8
msgid ""
"Regarding the angular distribution of the light, the cone angle merely "
"truncates the beam, the shape of which is defined by the "
":py:attr:`exponent`.  If the cone angle is at least 90 degrees then there is"
" no angular dependence."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.cone_angle:13
msgid ""
"If the light's cone angle is increased to 90 degrees or above, its actor (if"
" previousy shown) is automatically hidden."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.cone_angle:18
msgid ""
"Plot three planes lit by three spotlights with varying cone angles.  Use a "
"large exponent to cause a visible angular variation of the intensity of the "
"beams."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.copy:1
msgid "Return a shallow or a deep copy of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.copy:3
msgid ""
"The only mutable attribute of ``Light`` objects is the transformation matrix"
" (if it exists). Thus asking for a shallow copy merely implies that the "
"returned light and the original share the transformation matrix instance."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.copy:8
msgid ""
"Whether to return a deep copy rather than a shallow one. Default ``True``."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.copy:14
msgid ""
"Create a light and check that it shares a transformation matrix with its "
"shallow copy."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:1
msgid "Return the diffuse color of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.diffuse_color:13
msgid "Create a light and set its diffuse color to blue."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.exponent:1
msgid "Return the exponent of the cosine used for spotlights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.exponent:3
msgid ""
"With a spotlight (a positional light with cone angle less than 90 degrees) "
"the shape of the light beam within the light cone varies with the angle from"
" the light's axis, and the variation of the intensity depends as the cosine "
"of this angle raised to an exponent, which is 1 by default. Increasing the "
"exponent makes the beam sharper (more focused around the axis), decreasing "
"it spreads the beam out."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.exponent:11
msgid ""
"Note that since the angular dependence defined by this property and the "
"truncation performed by the :py:attr:`cone_angle` are independent, for "
"spotlights with narrow beams (small :py:attr:`cone_angle`) it is harder to "
"see the angular variation of the intensity, and a lot higher exponent might "
"be necessary to visibly impact the angular distribution of the beam."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.exponent:21
msgid ""
"Plot three planes lit by three spotlights with exponents of 1, 2 and 5.  The"
" one with the lowest exponent has the broadest beam."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.focal_point:1
msgid "Return the focal point of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.focal_point:3
msgid ""
"Note: the focal point is defined in the coordinate space indicated by the "
"light's transformation matrix (if it exists). To get the light's world space"
" focal point, use the (read-only) :py:attr:`world_focal_point` property."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.focal_point:10
msgid "Create a light at (10, 10, 10) shining at (0, 0, 1)."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.from_vtk:1
msgid "Create a light from a ``vtk.vtkLight``, resulting in a copy."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.from_vtk:3
msgid "The ``vtk.vtkLight`` to be copied."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.hide_actor:1
msgid ""
"Hide the actor for a positional light that depicts the geometry of the beam."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.hide_actor:3
msgid "For a directional light the function doesn't do anything."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.intensity:1
msgid "Return the brightness of the light (between 0 and 1)."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.intensity:5
msgid "Light the two sides of a cube with lights of different brightness."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_camera_light:1
msgid "Return whether the light is a camera light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_camera_light:5
msgid ""
"Verify that four out of five lights of the default light kit are camera "
"lights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_headlight:1
msgid "Return whether the light is a headlight."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_headlight:5
msgid "Verify that the first light of the default light kit is a headlight."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_scene_light:1
msgid "Return whether the light is a scene light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.is_scene_light:5
msgid ""
"Verify that none of the lights of the default light kit are scene lights."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:1
msgid "Return the light type."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:3
msgid ""
"The default light type is a scene light which lives in world coordinate "
"space."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:6
msgid ""
"A headlight is attached to the camera and always points at the camera's "
"focal point."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:9
msgid ""
"A camera light also moves with the camera, but it can have an arbitrary "
"relative position to the camera. Camera lights are defined in a coordinate "
"space where the camera is located at (0, 0, 1), looking towards (0, 0, 0) at"
" a distance of 1, with up being (0, 1, 0). Camera lights use the transform "
"matrix to establish this space, i.e. they have a fixed :py:attr:`position` "
"with respect to the camera, and moving the camera only affects the "
":py:attr:`world_position` via changes in the :py:attr:`transform_matrix` "
"(and the same goes for the focal point)."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:20
msgid "The property returns class constant values from an enum:"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:22
msgid "``Light.HEADLIGHT == 1``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:23
msgid "``Light.CAMERA_LIGHT == 2``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:24
msgid "``Light.SCENE_LIGHT == 3``"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:28
msgid ""
"Check the type of lights for the first two lights of the default light kit "
"of plotters."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.light_type:37
msgid ""
"Change the light type of the default light kit's headlight to a scene light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of pyvista.Light.on:1
msgid "Return whether the light is on."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of pyvista.Light.on:3
msgid "This corresponds to the Switch state of the ``vtk.vtkLight`` class."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of pyvista.Light.on:7
msgid "Create a light, check if it's on by default, and turn it off."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.position:1
msgid "Return the position of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.position:3
msgid ""
"Note: the position is defined in the coordinate space indicated by the "
"light's transformation matrix (if it exists). To get the light's world space"
" position, use the (read-only) :py:attr:`world_position` property."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.position:10
msgid ""
"Create a light positioned at (10, 10, 10) after initialization, and note how"
" the position is unaffected by a non-trivial transform matrix."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.positional:1
msgid "Return whether the light is positional."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.positional:9
msgid ""
"Attenuation and cone angles are only used for positional lights.  The "
":py:attr:`exponent` property is only used for spotlights.  Positional lights"
" with a cone angle of at least 90 degrees don't show angular dependence of "
"their beams, but they display attenuation."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.positional:15
msgid ""
"If the light is changed to directional, its actor (if previously shown) is "
"automatically hidden."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.positional:20
msgid "Create a spotlight shining on the origin."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.renderers:1
msgid "Return the renderers associated with this light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_camera_light:1
msgid "Set the light to be a camera light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_camera_light:3
msgid ""
"A camera light moves with the camera, but it can have an arbitrary relative "
"position to the camera. Camera lights are defined in a coordinate space "
"where the camera is located at (0, 0, 1), looking towards (0, 0, 0) at a "
"distance of 1, with up being (0, 1, 0).  Camera lights use the "
"transformation matrix to establish this space.  Calling this method will "
"reset the light's transformation matrix."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:1
msgid "Set the position and focal point of a directional light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:3
msgid ""
"The light is switched to directional (non-positional). The focal point is "
"set to the origin. The position is defined in terms of an elevation and an "
"azimuthal angle, both in degrees."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:7
msgid ""
"Note that the equivalent ``vtk.vtkLight.SetDirectionAngle()`` method uses a "
"surprising coordinate system where the (x', y', z') axes of the method "
"correspond to the (z, x, y) axes of the renderer. This method reimplements "
"the functionality in a way that ``elev`` is the conventional elevation and "
"``azim`` is the conventional azimuth. In particular:"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:14
msgid "``elev = 0``, ``azim = 0`` is the +x direction"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:15
msgid "``elev = 0``, ``azim = 90`` is the +y direction"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:16
msgid "``elev = 90``, ``azim = 0`` is the +z direction"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:18
msgid "The elevation of the directional light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:20
msgid "The azimuthal angle of the directional light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_direction_angle:25
msgid ""
"Create a light that shines on the origin from a 30-degree elevation in the "
"xz plane."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_headlight:1
msgid "Set the light to be a headlight."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_headlight:3
msgid ""
"Headlights are fixed to the camera and always point to the focal point of "
"the camera. Calling this method will reset the light's transformation "
"matrix."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_scene_light:1
msgid "Set the light to be a scene light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.set_scene_light:3
msgid ""
"Scene lights are stationary with respect to the scene. Calling this method "
"will reset the light's transformation matrix."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.shadow_attenuation:1
msgid "Return the value of shadow attenuation."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.shadow_attenuation:11
msgid "Set the shadow attenuation to 0.5"
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.show_actor:3
msgid ""
"For a directional light or a positional light with :py:attr:`cone_angle` of "
"at least 90 degrees the method doesn't do anything. If the light is changed "
"so that it becomes a spotlight, this method has to be called again for the "
"actor to show. To hide the actor see :func:`hide_actor`."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.show_actor:11
msgid ""
"Create a scene containing a cube lit with a cyan spotlight and visualize the"
" light using an actor."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:1
msgid "Return the specular color of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.specular_color:13
msgid "Create a light and set its specular color to bright green."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.switch_off:1
msgid "Switch off the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.switch_off:5
msgid "Create a light and switch it off."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.switch_on:1
msgid "Switch on the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.plotting.lights.Light.switch_on:5
msgid "Create a light, switch it off and switch it back on again."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.transform_matrix:1
msgid "Return the transformation matrix of the light (if any)."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.transform_matrix:3
msgid ""
"The transformation matrix is ``None`` by default, and it is stored as a "
"``vtk.vtkMatrix4x4`` object when set. If set, the light's parameters "
"(position and focal point) are transformed by the matrix before being "
"rendered. See also the :py:attr:`world_position` and "
":py:attr:`world_focal_point` read-only properties that can differ from "
":py:attr:`position` and :py:attr:`focal_point`, respectively."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.transform_matrix:11
msgid ""
"The 4-by-4 transformation matrix is a tool to encode a general linear "
"transformation and a translation (an affine transform). The 3-by-3 principal"
" submatrix (the top left corner of the matrix) encodes a three-dimensional "
"linear transformation (e.g. some rotation around the origin). The top three "
"elements in the last column of the matrix encode a three-dimensional "
"translation. The last row of the matrix is redundant."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.transform_matrix:22
#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_position:10
msgid ""
"Create a light with a transformation matrix that corresponds to a 90-degree "
"rotation around the z axis and a shift by (0, 0, -1), and check that the "
"light's position transforms as expected."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_focal_point:1
msgid "Return the world space focal point of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_focal_point:3
msgid ""
"The world space focal point is the :py:attr:`focal_point` property "
"transformed by the light's transform matrix if it exists. The value of this "
"read-only property corresponds to the "
"``vtk.vtkLight.GetTransformedFocalPoint()`` method."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_focal_point:10
msgid ""
"Create a light with a transformation matrix that corresponds to a 90-degree "
"rotation around the z axis and a shift by (0, 0, -1), and check that the "
"light's focal point transforms as expected."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_position:1
msgid "Return the world space position of the light."
msgstr ""

#: ../../pyvista/pyvista/plotting/lights.pydocstring of
#: pyvista.Light.world_position:3
msgid ""
"The world space position is the :py:attr:`position` property transformed by "
"the light's transform matrix if it exists. The value of this read-only "
"property corresponds to the ``vtk.vtkLight.GetTransformedPosition()`` "
"method."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:2
msgid "Objects"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:4
msgid ""
"The :class:`pyvista.DataObject` class is a set of common methods and "
"attributes for all PyVista types. These objects have no spatial reference, "
"but simply hold data."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:12:<autosummary>:1
msgid ":obj:`actual_memory_size <pyvista.DataObject.actual_memory_size>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:12:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.actual_memory_size:1
msgid "Return the actual size of the dataset object."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:12:<autosummary>:1
msgid ":obj:`field_arrays <pyvista.DataObject.field_arrays>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:12:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.field_arrays:1
msgid "Return vtkFieldData as DataSetAttributes."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:12:<autosummary>:1
msgid ":obj:`memory_address <pyvista.DataObject.memory_address>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:12:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.memory_address:1
msgid "Get address of the underlying C++ object in format 'Addr=%p'."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ""
":obj:`add_field_array <pyvista.DataObject.add_field_array>`\\ \\(scalars\\, "
"name\\[\\, deep\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.add_field_array:1
msgid "Add a field array."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`clear_field_arrays <pyvista.DataObject.clear_field_arrays>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.clear_field_arrays:1
msgid "Remove all field arrays."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`copy <pyvista.DataObject.copy>`\\ \\(\\[deep\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`copy_attributes <pyvista.DataObject.copy_attributes>`\\ \\(dataset\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy_attributes:1
msgid "Copy the data attributes of the input dataset object."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`copy_meta_from <pyvista.DataObject.copy_meta_from>`\\ \\(ido\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`copy_structure <pyvista.DataObject.copy_structure>`\\ \\(dataset\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.copy_structure:1
msgid ""
"Copy the structure (geometry and topology) of the input dataset object."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`deep_copy <pyvista.DataObject.deep_copy>`\\ \\(to\\_copy\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.deep_copy:1
msgid "Overwrite this mesh with the given mesh as a deep copy."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`get_data_range <pyvista.DataObject.get_data_range>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`head <pyvista.DataObject.head>`\\ \\(\\[display\\, html\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.head:1
msgid "Return the header stats of this dataset."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`save <pyvista.DataObject.save>`\\ \\(filename\\[\\, binary\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.save:1
msgid "Save this vtk object to file."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
msgid ":obj:`shallow_copy <pyvista.DataObject.shallow_copy>`\\ \\(to\\_copy\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:17:<autosummary>:1
#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.shallow_copy:1
msgid "Shallow copy the given mesh to this mesh."
msgstr ""

#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject:1
msgid "Methods common to all wrapped data objects."
msgstr ""

#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.DataObject.actual_memory_size:3
msgid "The actual size of the dataset object in kibibytes (1024 bytes)."
msgstr ""

#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.head:3
msgid ""
"If in IPython, this will be formatted to HTML. Otherwise returns a console "
"friendly string."
msgstr ""

#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.save:3
msgid ""
"Filename of output file. Writer type is inferred from the extension of the "
"filename."
msgstr ""

#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.save:6
msgid "If True, write as binary, else ASCII."
msgstr ""

#: ../../pyvista/pyvista/core/dataobject.pydocstring of
#: pyvista.core.dataobject.DataObject.save:11
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:17
msgid ""
"Binary files write much faster than ASCII and have a smaller file size."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:25
msgid "Table"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:27
msgid ""
"The table class is a non-spatially referenced data object that can be used "
"on VTK pipelines and holds arrays of data."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
msgid ":obj:`n_arrays <pyvista.Table.n_arrays>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of pyvista.Table.n_arrays:1
#: ../../pyvista/pyvista/core/objects.pydocstring of pyvista.Table.n_columns:1
msgid "Return the number of columns."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
msgid ":obj:`n_columns <pyvista.Table.n_columns>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
msgid ":obj:`n_rows <pyvista.Table.n_rows>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of pyvista.Table.n_rows:1
msgid "Return the number of rows."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
msgid ":obj:`row_arrays <pyvista.Table.row_arrays>`\\"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:34:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.Table.row_arrays:1
msgid "Return the all row arrays."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`get <pyvista.Table.get>`\\ \\(index\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.get:1
msgid "Get an array by its name."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ""
":obj:`get_data_range <pyvista.Table.get_data_range>`\\ \\(\\[arr\\, "
"preference\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`items <pyvista.Table.items>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.items:1
msgid "Return the table items."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`keys <pyvista.Table.keys>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.keys:1
msgid "Return the table keys."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`pop <pyvista.Table.pop>`\\ \\(name\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.pop:1
msgid "Pops off an array by the specified name."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`save <pyvista.Table.save>`\\ \\(\\*args\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.save:1
msgid "Save the table."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`to_pandas <pyvista.Table.to_pandas>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.to_pandas:1
msgid "Create a Pandas DataFrame from this Table."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`update <pyvista.Table.update>`\\ \\(data\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.update:1
msgid "Set the table data."
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
msgid ":obj:`values <pyvista.Table.values>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/objects.rst:39:<autosummary>:1
#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.values:1
msgid "Return the table values."
msgstr ""

#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkTable`, "
":class:`pyvista.core.dataobject.DataObject`"
msgstr ""

#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table:1
msgid "Wrapper for the ``vtkTable`` class."
msgstr ""

#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table:3
msgid ""
"Create by passing a 2D NumPy array of shape (``n_rows`` by ``n_columns``) or"
" from a dictionary containing NumPy arrays."
msgstr ""

#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.get_data_range:3
msgid ""
"The name of the array to get the range. If None, the active scalar is used"
msgstr ""

#: ../../pyvista/pyvista/core/objects.pydocstring of
#: pyvista.core.objects.Table.get_data_range:6
msgid ""
"When scalars is specified, this is the preferred array type to search for in"
" the dataset.  Must be either ``'row'`` or ``'field'``."
msgstr ""

#: ../../pyvista/pyvista/core/objects.pydocstring of pyvista.Table.n_arrays:3
msgid "Alias for: ``n_columns``."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:2
msgid "Point-Based Grids"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:4
msgid ""
"Structured and unstructured grids are designed to manage cells whereas a "
"polydata object manage surfaces.  The ``vtk.UnstructuredGrid`` is a derived "
"class from ``vtk.vtkUnstructuredGrid`` designed to make creation, array "
"access, and plotting more straightforward than using the vtk object.  The "
"same applies to a ``vtk.StructuredGrid``."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:12
msgid "Unstructured Grid Creation"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:14
msgid ""
"See :ref:`ref_create_unstructured` for an example on how to create an "
"unstructured grid from NumPy arrays."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:19
#: ../../pyvista/docs/core/point-grids.rst:51
#: ../../pyvista/docs/core/points.rst:15
msgid "Empty Object"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:20
msgid "An unstructured grid can be initialized with:"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:27
msgid ""
"This creates an empty grid, and is not useful until points and cells are "
"added to it.  VTK points and cells can be added with ``SetPoints`` and "
"``SetCells``, but the inputs to these need to be ``vtk.vtkCellArray`` and "
"``vtk.vtkPoints`` objects, which need to be populated with values.  Grid "
"creation is simplified by initializing the grid directly from numpy arrays "
"as in the following section."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:35
#: ../../pyvista/docs/core/point-grids.rst:95
msgid "Loading from File"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:36
msgid "Unstructured grids can be loaded from a vtk file."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:48
msgid "Structured Grid Creation"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:52
msgid "A structured grid can be initialized with:"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:59
msgid ""
"This creates an empty grid, and is not useful until points are added to it."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:64
msgid "Creating from Numpy Arrays"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:65
msgid ""
"A structured grid can be created directly from numpy arrays.  This is useful"
" when creating a grid from scratch or copying it from another format."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:68
msgid ""
"Also see :ref:`ref_create_structured` for an example on creating a "
"structured grid from NumPy arrays."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:96
msgid "Structured grids can be loaded from a ``vtk`` file."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:104
msgid "Plotting Grids"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:105
msgid ""
"This example shows how you can load an unstructured grid from a ``vtk`` file"
" and create a plot and gif movie by updating the plotting object."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:125
msgid "A simple plot can be created by using:"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:131
msgid "A more complex plot can be created using:"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:153
msgid ""
"You can animate the motion of the beam by updating the positions and scalars"
" of the grid copied to the plotting object.  First you have to set up the "
"plotting object:"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:167
msgid ""
"You then open the render window by plotting before opening the movie file. "
"Set auto_close to False so the plotter does not close automatically. "
"Disabling interactive means the plot will automatically continue without "
"waiting for the user to exit the window."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:200
msgid "You can also render the beam as as a wire-frame object:"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:238
msgid "Adding Labels to a Plot"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:239
msgid ""
"Labels can be added to a plot using the ``add_point_labels`` function within"
" the ``Plotter`` object.  The following example loads the included example "
"beam, generates a plotting class, and sub-selects points along the y-z plane"
" and labels their coordinates. ``add_point_labels`` requires that the number"
" of labels matches the number of points, and that labels is a list "
"containing one entry per point.  The code automatically converts each item "
"in the list to a string."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:280
msgid ""
"This example is similar and shows how labels can be combined with a scalar "
"bar to show the exact value of certain points."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:307
msgid "pv.Unstructured Grid Class Methods"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:308
msgid ""
"The following is a description of the methods available to a "
"``pv.UnstructuredGrid`` object.  It inherits all methods from the original "
"``vtk`` object, `vtk.vtkUnstructuredGrid "
"<https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html>`_."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
msgid ":obj:`cell_connectivity <pyvista.UnstructuredGrid.cell_connectivity>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cell_connectivity:1
msgid "Return a the vtk cell connectivity as a numpy array."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
msgid ":obj:`cells <pyvista.UnstructuredGrid.cells>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells:1
msgid "Return a pointer to the cells as a numpy object."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
msgid ":obj:`cells_dict <pyvista.UnstructuredGrid.cells_dict>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells_dict:1
msgid "Return a dictionary that contains all cells mapped from cell types."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
msgid ":obj:`celltypes <pyvista.UnstructuredGrid.celltypes>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.celltypes:1
msgid "Get the cell types array."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
msgid ":obj:`offset <pyvista.UnstructuredGrid.offset>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:316:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.offset:1
msgid "Get cell locations Array."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:322:<autosummary>:1
msgid ""
":obj:`cast_to_explicit_structured_grid "
"<pyvista.UnstructuredGrid.cast_to_explicit_structured_grid>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:322:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:1
msgid "Cast to an explicit structured grid."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:322:<autosummary>:1
msgid ":obj:`linear_copy <pyvista.UnstructuredGrid.linear_copy>`\\ \\(\\[deep\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:322:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:1
msgid "Return a copy of the unstructured grid containing only linear cells."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkUnstructuredGrid`, "
":class:`pyvista.core.pointset.PointGrid`, "
":class:`pyvista.core.filters.UnstructuredGridFilters`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:1
msgid "Extends the functionality of a vtk.vtkUnstructuredGrid object."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:3
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:3
msgid "Can be initialized by the following:"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:5
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:5
msgid "Creating an empty grid"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:6
msgid "From a vtk.vtkPolyData object"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:7
msgid "From cell, offset, and node arrays"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:8
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:9
msgid "From a file"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:16
msgid "Create an empty grid"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:20
msgid "Copy a vtkUnstructuredGrid"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid:31
msgid "From a string filename"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:3
msgid "An explicit structured grid."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:0
msgid "Raises"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:6
msgid ""
"If the unstructured grid doesn't have the ``'BLOCK_I'``,     ``'BLOCK_J'`` "
"and ``'BLOCK_K'`` cells arrays."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:10
msgid ":obj:`ExplicitStructuredGrid.cast_to_unstructured_grid`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid:11
msgid "Cast an explicit structured grid to an unstructured grid."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells:3
msgid "Legacy method"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells_dict:3
msgid ""
"This function returns a np.ndarray for each cell type in an ordered fashion."
" Note that this function only works with element types of fixed sizes"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.UnstructuredGrid.cells_dict:6
msgid ""
"**cells_dict** -- A dictionary mapping containing all cells of this "
"unstructured grid. Structure: vtk_enum_type (int) -> cells (np.ndarray)"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:3
msgid "Converts the following cell types to their linear equivalents."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:5
msgid "VTK_QUADRATIC_TETRA      --> VTK_TETRA"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:6
msgid "VTK_QUADRATIC_PYRAMID    --> VTK_PYRAMID"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:7
msgid "VTK_QUADRATIC_WEDGE      --> VTK_WEDGE"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:8
msgid "VTK_QUADRATIC_HEXAHEDRON --> VTK_HEXAHEDRON"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:10
msgid ""
"When True, makes a copy of the points array.  Default False.  Cells and cell"
" types are always copied."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.UnstructuredGrid.linear_copy:14
msgid "**grid** -- UnstructuredGrid containing only linear cells."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:330
msgid "Explicit Structured Grid"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:335:<autosummary>:1
msgid ":obj:`dimensions <pyvista.ExplicitStructuredGrid.dimensions>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:335:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.dimensions:1
msgid "Return the topological dimensions of the grid."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:335:<autosummary>:1
msgid ":obj:`visible_bounds <pyvista.ExplicitStructuredGrid.visible_bounds>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:335:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.visible_bounds:1
msgid "Return the bounding box of the visible cells."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ""
":obj:`cast_to_unstructured_grid "
"<pyvista.ExplicitStructuredGrid.cast_to_unstructured_grid>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:1
msgid "Cast to an unstructured grid."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ":obj:`cell_coords <pyvista.ExplicitStructuredGrid.cell_coords>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:12
msgid "Return the cell structured coordinates."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ":obj:`cell_id <pyvista.ExplicitStructuredGrid.cell_id>`\\ \\(coords\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:13
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:1
msgid "Return the cell ID."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ""
":obj:`compute_connections "
"<pyvista.ExplicitStructuredGrid.compute_connections>`\\ \\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:25
msgid "Compute an array with the number of connected cell faces."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ""
":obj:`compute_connectivity "
"<pyvista.ExplicitStructuredGrid.compute_connectivity>`\\ \\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:17
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:1
msgid "Compute the faces connectivity flags array."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ""
":obj:`hide_cells <pyvista.ExplicitStructuredGrid.hide_cells>`\\ \\(ind\\[\\,"
" inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:1
msgid "Hide specific cells."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ""
":obj:`neighbors <pyvista.ExplicitStructuredGrid.neighbors>`\\ \\(ind\\[\\, "
"rel\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:1
msgid "Return the indices of neighboring cells."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ":obj:`save <pyvista.ExplicitStructuredGrid.save>`\\ \\(filename\\[\\, binary\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.save:1
msgid "Save this VTK object to file."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
msgid ""
":obj:`show_cells <pyvista.ExplicitStructuredGrid.show_cells>`\\ "
"\\(\\[inplace\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:339:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:1
msgid "Show hidden cells."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkExplicitStructuredGrid`, "
":class:`pyvista.core.pointset.PointGrid`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:1
msgid ""
"Extend the functionality of a ``vtk.vtkExplicitStructuredGrid`` object."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:6
msgid ""
"From a ``vtk.vtkExplicitStructuredGrid`` or ``vtk.vtkUnstructuredGrid`` "
"object"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:7
msgid "From a VTU or VTK file"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid:8
msgid "From ``dims`` and ``corners`` arrays"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:3
msgid ""
"An unstructured grid. VTK adds the ``'BLOCK_I'``, ``'BLOCK_J'`` and "
"``'BLOCK_K'`` cell arrays. These arrays are required to restore the explicit"
" structured grid."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:10
msgid ""
"The ghost cell array is disabled before casting the unstructured grid in "
"order to allow the original structure and attributes data of the explicit "
"structured grid to be restored. If you don't need to restore the explicit "
"structured grid later or want to extract an unstructured grid from the "
"visible subgrid, use the ``extract_cells`` filter and the cell indices where"
" the ghost cell array is ``0``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:22
msgid ":obj:`DataSetFilters.extract_cells`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:22
msgid "Extract a subset of a dataset."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:24
msgid ":obj:`UnstructuredGrid.cast_to_explicit_structured_grid`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid:25
msgid "Cast an unstructured grid to an explicit structured grid."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:3
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:3
msgid "Cell IDs."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:6
msgid ""
"**coords** -- Cell structured coordinates. ``None`` if ``ind`` is outside "
"the grid extent."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords:12
msgid ":obj:`ExplicitStructuredGrid.cell_id`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:3
msgid "Cell structured coordinates."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:6
msgid ""
"**ind** -- Cell IDs. ``None`` if ``coords`` is outside the grid extent."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.cell_id:11
msgid ":obj:`ExplicitStructuredGrid.cell_coords`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:3
msgid ""
"This method calculates the number of topological cell neighbors connected by"
" faces. The results are stored in the ``'number_of_connections'`` cell "
"array."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:7
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:14
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:8
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:6
msgid ""
"This method is applied to this grid if ``True`` (default) or to a copy "
"otherwise."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:11
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:18
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:12
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:10
msgid ""
"**grid** -- A deep copy of this grid if ``inplace=False`` or ``None`` "
"otherwise."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections:16
msgid ":obj:`ExplicitStructuredGrid.compute_connectivity`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:3
msgid ""
"This method checks the faces connectivity of the cells with their "
"topological neighbors.  The result is stored in the array of integers "
"``'ConnectivityFlags'``. Each value in this array must be interpreted as a "
"binary number, where the digits shows the faces connectivity of a cell with "
"its topological neighbors -Z, +Z, -Y, +Y, -X and +X respectively. For "
"example, a cell with ``'ConnectivityFlags'`` equal to ``27`` (``011011``) "
"indicates that this cell is connected by faces with their neighbors ``(0, 0,"
" 1)``, ``(0, -1, 0)``, ``(-1, 0, 0)`` and ``(1, 0, 0)``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity:24
msgid ":obj:`ExplicitStructuredGrid.compute_connections`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.dimensions:3
msgid "Number of sampling points in the I, J and Z directions respectively."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:3
msgid "Hides cells by setting the ghost cell array to ``HIDDENCELL``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells:5
msgid ""
"Cell indices to be hidden. A boolean array of the same size as the number of"
" cells also is acceptable."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:5
msgid ""
"Defines the neighborhood relationship. If ``'topological'``, returns the "
"``(i-1, j, k)``, ``(i+1, j, k)``, ``(i, j-1, k)``, ``(i, j+1, k)``, ``(i, j,"
" k-1)`` and ``(i, j, k+1)`` cells. If ``'connectivity'`` (default), returns "
"only the topological neighbors considering faces connectivity. If "
"``'geometric'``, returns the cells in the ``(i-1, j)``, ``(i+1, j)``, "
"``(i,j-1)`` and ``(i, j+1)`` vertical cell groups whose faces intersect."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.neighbors:16
msgid "**indices** -- Indices of neighboring cells."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.save:3
msgid "Output file name. VTU and VTK extensions are supported."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.save:5
msgid "If ``True`` (default), write as binary, else ASCII."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.save:10
msgid ""
"VTK adds the ``'BLOCK_I'``, ``'BLOCK_J'`` and ``'BLOCK_K'`` cell arrays. "
"These arrays are required to restore the explicit structured grid."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.ExplicitStructuredGrid.show_cells:3
msgid ""
"Shows hidden cells by setting the ghost cell array to ``0`` where "
"``HIDDENCELL``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.visible_bounds:3
msgid ""
"Different from `bounds`, which returns the bounding box of the complete "
"grid, this method returns the bounding box of the visible cells, where the "
"ghost cell array is not ``HIDDENCELL``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.ExplicitStructuredGrid.visible_bounds:8
msgid ""
"The limits of the visible grid in the X, Y and Z directions respectively."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:347
msgid "pv.Structured Grid Class Methods"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:348
msgid ""
"The following is a description of the methods available to a "
"``pv.StructuredGrid`` object.  It inherits all methods from the original "
"``vtk`` object, `vtk.vtkStructuredGrid "
"<https://www.vtk.org/doc/nightly/html/classvtkStructuredGrid.html>`_."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
msgid ":obj:`dimensions <pyvista.StructuredGrid.dimensions>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
msgid ":obj:`points_matrix <pyvista.StructuredGrid.points_matrix>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.StructuredGrid.points_matrix:1
msgid "Points as a 4-D matrix, with x/y/z along the last dimension."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
msgid ":obj:`x <pyvista.StructuredGrid.x>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.StructuredGrid.x:1
msgid "Return the X coordinates of all points."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
msgid ":obj:`y <pyvista.StructuredGrid.y>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.StructuredGrid.y:1
msgid "Return the Y coordinates of all points."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
msgid ":obj:`z <pyvista.StructuredGrid.z>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:358:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.StructuredGrid.z:1
msgid "Return the Z coordinates of all points."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:363:<autosummary>:1
msgid ":obj:`hide_cells <pyvista.StructuredGrid.hide_cells>`\\ \\(ind\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:363:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid.hide_cells:1
msgid "Hide cells without deleting them."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkStructuredGrid`, "
":class:`pyvista.core.pointset.PointGrid`, "
":class:`pyvista.core.filters.StructuredGridFilters`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:1
msgid "Extend the functionality of a vtk.vtkStructuredGrid object."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:6
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:22
msgid "Initialize from a vtk.vtkStructuredGrid object"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid:27
msgid "Create from NumPy arrays"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid.hide_cells:3
msgid "Hides cells by setting the ghost_cells array to HIDDEN_CELL."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid.hide_cells:5
msgid ""
"List or array of cell indices to be hidden.  The array can also be a boolean"
" array of the same size as the number of cells."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.StructuredGrid.hide_cells:12
msgid "Hide part of the middle of a structured surface."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:371
msgid "Methods in Common with Structured and Unstructured Grids"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:372
msgid ""
"These methods are common to both ``pv.StructuredGrid`` and "
"``pv.UnstructuredGrid`` objects."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:381:<autosummary>:1
msgid ":obj:`volume <pyvista.PointGrid.volume>`\\"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:381:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PointGrid.volume:1
msgid "Compute the volume of the point grid."
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:386:<autosummary>:1
msgid ":obj:`plot_curvature <pyvista.PointGrid.plot_curvature>`\\ \\(\\[curv\\_type\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/point-grids.rst:386:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:1
msgid "Plot the curvature of the external surface of the grid."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid:1
msgid "Bases: :class:`pyvista.core.pointset.PointSet`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid:1
msgid "Class in common with structured and unstructured grids."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:3
msgid ""
"One of the following strings indicating curvature types  - mean - gaussian -"
" maximum - minimum"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:3
msgid "One of the following strings indicating curvature types"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:5
msgid "mean"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:6
msgid "gaussian"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:7
msgid "maximum"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:8
msgid "minimum"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:10
msgid "Optional keyword arguments.  See help(pyvista.plot)"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PointGrid.plot_curvature:13
msgid ""
"**cpos** -- Camera position, focal point, and view up.  Used for storing and"
" setting camera view."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PointGrid.volume:3
msgid "This extracts the external surface and computes the interior volume"
msgstr ""

#: ../../pyvista/docs/core/points.rst:2
msgid "Point Data"
msgstr ""

#: ../../pyvista/docs/core/points.rst:3
msgid ""
"The ``pyvista.PolyData`` object adds additional functionality to the "
"``vtk.vtkPolyData`` object, to include direct array access through NumPy, "
"one line plotting, and other mesh functions."
msgstr ""

#: ../../pyvista/docs/core/points.rst:9
msgid "PolyData Creation"
msgstr ""

#: ../../pyvista/docs/core/points.rst:11
msgid ""
"See :ref:`ref_create_poly` for an example on creating a ``pyvista.PolyData``"
" object from NumPy arrays."
msgstr ""

#: ../../pyvista/docs/core/points.rst:16
msgid "A polydata object can be initialized with:"
msgstr ""

#: ../../pyvista/docs/core/points.rst:23
msgid ""
"This creates an empty grid, and is not useful until points and cells are "
"added to it.  VTK points and cells can be added with ``SetPoints`` and "
"``SetCells``, but the inputs to these need to be ``vtk.vtkCellArray`` and "
"``vtk.vtkPoints`` objects, which need to be populated with values. Grid "
"creation is simplified by initializing the grid directly from NumPy arrays "
"as in the following section."
msgstr ""

#: ../../pyvista/docs/core/points.rst:32
msgid "Initialize from a File"
msgstr ""

#: ../../pyvista/docs/core/points.rst:33
msgid ""
"Both binary and ASCII .ply, .stl, and .vtk files can be read using PyVista. "
"For example, the PyVista package contains example meshes and these can be "
"loaded with:"
msgstr ""

#: ../../pyvista/docs/core/points.rst:53
msgid "This mesh can then be written to a vtk file using:"
msgstr ""

#: ../../pyvista/docs/core/points.rst:59
msgid "These meshes are identical."
msgstr ""

#: ../../pyvista/docs/core/points.rst:80
msgid "Mesh Manipulation and Plotting"
msgstr ""

#: ../../pyvista/docs/core/points.rst:81
msgid ""
"Meshes can be directly manipulated using NumPy or with the built-in "
"translation and rotation routines.  This example loads two meshes and moves,"
" scales, copies them, and finally plots them."
msgstr ""

#: ../../pyvista/docs/core/points.rst:85
msgid ""
"To plot more than one mesh a plotting class must be created to manage the "
"plotting.  The following code creates the class and plots the meshes with "
"various colors."
msgstr ""

#: ../../pyvista/docs/core/points.rst:132
msgid "pyvista.PolyData Grid Class Methods"
msgstr ""

#: ../../pyvista/docs/core/points.rst:133
msgid ""
"The following is a description of the methods available to a "
"``pyvista.PolyData`` object.  It inherits all methods from the original vtk "
"object, `vtk.vtkPolyData "
"<https://www.vtk.org/doc/nightly/html/classvtkPolyData.html>`_."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`area <pyvista.PolyData.area>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.area:1
msgid "Return the mesh surface area."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`cell_normals <pyvista.PolyData.cell_normals>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.cell_normals:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.face_normals:1
msgid "Return the cell normals."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`face_normals <pyvista.PolyData.face_normals>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`faces <pyvista.PolyData.faces>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.faces:1
msgid "Return a pointer to the faces as a numpy object."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`lines <pyvista.PolyData.lines>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.lines:1
msgid "Return a pointer to the lines as a numpy object."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`n_faces <pyvista.PolyData.n_faces>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`n_open_edges <pyvista.PolyData.n_open_edges>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.n_open_edges:1
msgid "Return the number of open edges on this mesh."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`number_of_faces <pyvista.PolyData.number_of_faces>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`obbTree <pyvista.PolyData.obbTree>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.obbTree:1
msgid "Return the obbTree of the polydata."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`point_normals <pyvista.PolyData.point_normals>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.point_normals:1
msgid "Return the point normals."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`verts <pyvista.PolyData.verts>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.verts:1
msgid "Get the vertex cells."
msgstr ""

#: ../../pyvista/docs/core/points.rst:143:<autosummary>:1
msgid ":obj:`volume <pyvista.PolyData.volume>`\\"
msgstr ""

#: ../../pyvista/docs/core/points.rst:148:<autosummary>:1
msgid ":obj:`is_all_triangles <pyvista.PolyData.is_all_triangles>`\\ \\(\\)"
msgstr ""

#: ../../pyvista/docs/core/points.rst:148:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.is_all_triangles:1
msgid "Return ``True`` if all the faces of the ``PolyData`` are triangles."
msgstr ""

#: ../../pyvista/docs/core/points.rst:148:<autosummary>:1
msgid ":obj:`save <pyvista.PolyData.save>`\\ \\(filename\\[\\, binary\\]\\)"
msgstr ""

#: ../../pyvista/docs/core/points.rst:148:<autosummary>:1
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:1
msgid "Write a surface mesh to disk."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:1
msgid ""
"Bases: :class:`vtkmodules.vtkCommonDataModel.vtkPolyData`, "
":class:`pyvista.core.pointset.PointSet`, "
":class:`pyvista.core.filters.PolyDataFilters`"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:1
msgid "Extend the functionality of a vtk.vtkPolyData object."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:5
#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:59
msgid "Create an empty mesh"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:6
msgid "Initialize from a vtk.vtkPolyData"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:7
msgid "Using vertices"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:8
msgid "Using vertices and faces"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:11
msgid ""
"Flexible input type.  Can be a ``vtk.vtkPolyData``, in which case this "
"PolyData object will be copied if ``deep=True`` and will be a shallow copy "
"if ``deep=False``.  Also accepts a path, which may be local path as in "
"``'my_mesh.stl'`` or global path like ``'/tmp/my_mesh.ply'`` or "
"``'C:/Users/user/my_mesh.ply'``.  Otherwise, this must be a points array or "
"list containing one or more points.  Each point must have 3 dimensions."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:11
msgid ""
"Flexible input type.  Can be a ``vtk.vtkPolyData``, in which case this "
"PolyData object will be copied if ``deep=True`` and will be a shallow copy "
"if ``deep=False``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:15
msgid ""
"Also accepts a path, which may be local path as in ``'my_mesh.stl'`` or "
"global path like ``'/tmp/my_mesh.ply'`` or ``'C:/Users/user/my_mesh.ply'``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:19
msgid ""
"Otherwise, this must be a points array or list containing one or more "
"points.  Each point must have 3 dimensions."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:22
msgid ""
"Face connectivity array.  Faces must contain padding indicating the number "
"of points in the face.  For example, the two faces ``[10, 11, 12]`` and "
"``[20, 21, 22, 23]`` will be represented as ``[3, 10, 11, 12, 4, 20, 21, 22,"
" 23]``.  This lets you have an arbitrary number of points per face.  When "
"not including the face connectivity array, each point will be assigned to a "
"single vertex.  This is used for point clouds that have no connectivity."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:22
msgid ""
"Face connectivity array.  Faces must contain padding indicating the number "
"of points in the face.  For example, the two faces ``[10, 11, 12]`` and "
"``[20, 21, 22, 23]`` will be represented as ``[3, 10, 11, 12, 4, 20, 21, 22,"
" 23]``.  This lets you have an arbitrary number of points per face."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:28
msgid ""
"When not including the face connectivity array, each point will be assigned "
"to a single vertex.  This is used for point clouds that have no "
"connectivity."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:32
msgid ""
"Number of faces in the ``faces`` connectivity array.  While optional, "
"setting this speeds up the creation of the ``PolyData``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:36
msgid ""
"The line connectivity array.  Like ``faces``, this array requires padding "
"indicating the number of points in a line segment.  For example, the two "
"line segments ``[0, 1]`` and ``[1, 2, 3, 4]`` will be represented as ``[2, "
"0, 1, 4, 1, 2, 3, 4]``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:42
msgid ""
"Number of lines in the ``lines`` connectivity array.  While optional, "
"setting this speeds up the creation of the ``PolyData``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:46
msgid ""
"Whether to copy the inputs, or to create a mesh from them without copying "
"them.  Setting ``deep=True`` ensures that the original arrays can be "
"modified outside the mesh without affecting the mesh. Default is ``False``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:63
msgid "Initialize from a ``vtk.vtkPolyData`` object"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:68
msgid "Initialize from just vertices"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:73
msgid "Initialize from vertices and faces"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:78
msgid "Initialize from vertices and lines"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData:83
msgid "Initialize from a filename"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of pyvista.PolyData.area:3
msgid "**area** -- Total area of the mesh."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.n_faces:3
msgid "Alias for ``n_cells``."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.obbTree:3
msgid ""
"An obbTree is an object to generate oriented bounding box (OBB) trees. An "
"oriented bounding box is a bounding box that does not necessarily line up "
"along coordinate axes. The OBB tree is a hierarchical tree structure of such"
" boxes, where deeper levels of OBB confine smaller regions of space."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:3
msgid ""
"Written file may be an ASCII or binary ply, stl, or vtk mesh file. If ply or"
" stl format is chosen, the face normals are computed in place to ensure the "
"mesh is properly saved."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:7
msgid ""
"Filename of mesh to be written.  File type is inferred from the extension of"
" the filename unless overridden with ftype.  Can be one of the following "
"types (.ply, .stl, .vtk)"
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.core.pointset.PolyData.save:12
msgid "Writes the file as binary when True and ASCII when False."
msgstr ""

#: ../../pyvista/pyvista/core/pointset.pydocstring of
#: pyvista.PolyData.volume:3
msgid "This will throw a VTK error/warning if not a closed surface"
msgstr ""
