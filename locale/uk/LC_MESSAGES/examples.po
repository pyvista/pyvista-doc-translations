# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2022, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# SerTetora, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.35.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-01 01:04+0000\n"
"PO-Revision-Date: 2020-08-05 16:06+0000\n"
"Last-Translator: SerTetora, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/getfem-doc/teams/112279/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-explicit-"
"structured-grid.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:24
#: ../../pyvista/doc/examples/index.rst:51
msgid "Creating an Explicit Structured Grid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:26
msgid "Create an explicit structured grid from NumPy arrays."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:28
#: ../../pyvista/doc/examples/00-load/load-gltf.rst:29
msgid "Note this feature is only available for ``vtk>=9``."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:82
msgid "**Total running time of the script:** ( 0 minutes  1.014 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:97
msgid ""
":download:`Download Python source code: create-explicit-structured-grid.py "
"<create-explicit-structured-grid.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:103
msgid ""
":download:`Download Jupyter notebook: create-explicit-structured-grid.ipynb "
"<create-explicit-structured-grid.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-explicit-structured-grid.rst:110
#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:155
#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:181
#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:708
#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:197
#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:173
#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:360
#: ../../pyvista/doc/examples/00-load/create-pointset.rst:179
#: ../../pyvista/doc/examples/00-load/create-poly.rst:177
#: ../../pyvista/doc/examples/00-load/create-spline.rst:326
#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:379
#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:242
#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:302
#: ../../pyvista/doc/examples/00-load/create-truss.rst:172
#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:168
#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:310
#: ../../pyvista/doc/examples/00-load/load-gltf.rst:140
#: ../../pyvista/doc/examples/00-load/load-vrml.rst:102
#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:172
#: ../../pyvista/doc/examples/00-load/read-file.rst:332
#: ../../pyvista/doc/examples/00-load/read-image.rst:160
#: ../../pyvista/doc/examples/00-load/read-parallel.rst:265
#: ../../pyvista/doc/examples/00-load/reader.rst:460
#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:298
#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:184
#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:345
#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:170
#: ../../pyvista/doc/examples/01-filter/clipping.rst:319
#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:251
#: ../../pyvista/doc/examples/01-filter/collisions.rst:170
#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:178
#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:444
#: ../../pyvista/doc/examples/01-filter/connectivity.rst:139
#: ../../pyvista/doc/examples/01-filter/contouring.rst:147
#: ../../pyvista/doc/examples/01-filter/decimate.rst:195
#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:338
#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:182
#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:243
#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:192
#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:198
#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:243
#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:176
#: ../../pyvista/doc/examples/01-filter/geodesic.rst:158
#: ../../pyvista/doc/examples/01-filter/glyphs.rst:222
#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:141
#: ../../pyvista/doc/examples/01-filter/gradients.rst:351
#: ../../pyvista/doc/examples/01-filter/interpolate.rst:259
#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:142
#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:99
#: ../../pyvista/doc/examples/01-filter/project-plane.rst:111
#: ../../pyvista/doc/examples/01-filter/reflect.rst:135
#: ../../pyvista/doc/examples/01-filter/resample.rst:203
#: ../../pyvista/doc/examples/01-filter/rotate.rst:293
#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:203
#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:158
#: ../../pyvista/doc/examples/01-filter/slicing.rst:513
#: ../../pyvista/doc/examples/01-filter/streamlines.rst:409
#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:254
#: ../../pyvista/doc/examples/01-filter/subdivide.rst:170
#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:189
#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:139
#: ../../pyvista/doc/examples/01-filter/using-filters.rst:254
#: ../../pyvista/doc/examples/01-filter/voxelize.rst:284
#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:128
#: ../../pyvista/doc/examples/02-plot/background_image.rst:141
#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:408
#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:183
#: ../../pyvista/doc/examples/02-plot/clear.rst:178
#: ../../pyvista/doc/examples/02-plot/cmap.rst:324
#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:207
#: ../../pyvista/doc/examples/02-plot/edges.rst:98
#: ../../pyvista/doc/examples/02-plot/edl.rst:297
#: ../../pyvista/doc/examples/02-plot/floors.rst:86
#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:147
#: ../../pyvista/doc/examples/02-plot/gif.rst:121
#: ../../pyvista/doc/examples/02-plot/image_depth.rst:158
#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:285
#: ../../pyvista/doc/examples/02-plot/isovalue.rst:233
#: ../../pyvista/doc/examples/02-plot/labels.rst:270
#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:232
#: ../../pyvista/doc/examples/02-plot/linked.rst:111
#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:142
#: ../../pyvista/doc/examples/02-plot/movie.rst:115
#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:141
#: ../../pyvista/doc/examples/02-plot/multi-window.rst:296
#: ../../pyvista/doc/examples/02-plot/opacity.rst:394
#: ../../pyvista/doc/examples/02-plot/orbit.rst:186
#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:177
#: ../../pyvista/doc/examples/02-plot/pbr.rst:206
#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:137
#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:200
#: ../../pyvista/doc/examples/02-plot/point-picking.rst:206
#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:263
#: ../../pyvista/doc/examples/02-plot/screenshot.rst:126
#: ../../pyvista/doc/examples/02-plot/shading.rst:215
#: ../../pyvista/doc/examples/02-plot/silhouette.rst:250
#: ../../pyvista/doc/examples/02-plot/spherical.rst:279
#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:138
#: ../../pyvista/doc/examples/02-plot/texture.rst:544
#: ../../pyvista/doc/examples/02-plot/themes.rst:541
#: ../../pyvista/doc/examples/02-plot/topo-map.rst:249
#: ../../pyvista/doc/examples/02-plot/vector-component.rst:139
#: ../../pyvista/doc/examples/02-plot/volume.rst:448
#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:141
#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:190
#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:131
#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:159
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:293
#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:190
#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:300
#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:117
#: ../../pyvista/doc/examples/04-lights/actors.rst:191
#: ../../pyvista/doc/examples/04-lights/attenuation.rst:201
#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:288
#: ../../pyvista/doc/examples/04-lights/light_types.rst:174
#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:127
#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:267
#: ../../pyvista/doc/examples/04-lights/shadows.rst:267
#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:341
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:464
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:448
#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:159
#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:97
#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:249
#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:358
#: ../../pyvista/doc/examples/index.rst:2790
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-geometric-"
"objects.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:24
#: ../../pyvista/doc/examples/index.rst:72
msgid "Geometric Objects"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:26
msgid "The \"Hello, world!\" of VTK"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:43
msgid ""
"This runs through several of the available geometric objects available in "
"VTK which PyVista provides simple convenience methods for generating."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:46
msgid "Let's run through creating a few geometric objects!"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:72
msgid "Now let's plot them all in one window"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rstNone
msgid "create geometric objects"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:113
#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:73
#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:79
#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:144
#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:266
#: ../../pyvista/doc/examples/00-load/create-pointset.rst:56
#: ../../pyvista/doc/examples/00-load/create-pointset.rst:112
#: ../../pyvista/doc/examples/00-load/create-spline.rst:73
#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:135
#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:200
#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:120
#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:74
#: ../../pyvista/doc/examples/00-load/create-truss.rst:91
#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:125
#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:226
#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:269
#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:63
#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:130
#: ../../pyvista/doc/examples/00-load/read-file.rst:72
#: ../../pyvista/doc/examples/00-load/read-file.rst:150
#: ../../pyvista/doc/examples/00-load/read-file.rst:183
#: ../../pyvista/doc/examples/00-load/read-image.rst:90
#: ../../pyvista/doc/examples/00-load/read-image.rst:118
#: ../../pyvista/doc/examples/00-load/read-parallel.rst:115
#: ../../pyvista/doc/examples/00-load/read-parallel.rst:136
#: ../../pyvista/doc/examples/00-load/reader.rst:71
#: ../../pyvista/doc/examples/00-load/reader.rst:120
#: ../../pyvista/doc/examples/00-load/reader.rst:149
#: ../../pyvista/doc/examples/00-load/reader.rst:180
#: ../../pyvista/doc/examples/00-load/reader.rst:217
#: ../../pyvista/doc/examples/00-load/reader.rst:247
#: ../../pyvista/doc/examples/00-load/reader.rst:281
#: ../../pyvista/doc/examples/00-load/reader.rst:384
#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:93
#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:137
#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:176
#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:258
#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:362
#: ../../pyvista/doc/examples/01-filter/decimate.rst:75
#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:155
#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:214
#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:272
#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:175
#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:122
#: ../../pyvista/doc/examples/01-filter/geodesic.rst:118
#: ../../pyvista/doc/examples/01-filter/gradients.rst:99
#: ../../pyvista/doc/examples/01-filter/gradients.rst:155
#: ../../pyvista/doc/examples/01-filter/gradients.rst:279
#: ../../pyvista/doc/examples/01-filter/rotate.rst:252
#: ../../pyvista/doc/examples/01-filter/streamlines.rst:208
#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:79
#: ../../pyvista/doc/examples/02-plot/clear.rst:63
#: ../../pyvista/doc/examples/02-plot/clear.rst:100
#: ../../pyvista/doc/examples/02-plot/clear.rst:136
#: ../../pyvista/doc/examples/02-plot/edl.rst:76
#: ../../pyvista/doc/examples/02-plot/edl.rst:123
#: ../../pyvista/doc/examples/02-plot/edl.rst:182
#: ../../pyvista/doc/examples/02-plot/edl.rst:220
#: ../../pyvista/doc/examples/02-plot/edl.rst:255
#: ../../pyvista/doc/examples/02-plot/isovalue.rst:193
#: ../../pyvista/doc/examples/02-plot/opacity.rst:310
#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:47
#: ../../pyvista/doc/examples/02-plot/point-picking.rst:137
#: ../../pyvista/doc/examples/02-plot/texture.rst:331
#: ../../pyvista/doc/examples/02-plot/themes.rst:240
#: ../../pyvista/doc/examples/02-plot/topo-map.rst:79
#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:94
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:76
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:138
#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:92
#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:68
#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:159
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:115
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:149
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:184
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:215
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:275
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:309
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:344
#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:382
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:85
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:115
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:141
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:178
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:222
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:273
#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:322
#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:144
#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:216
msgid "Out:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:127
msgid "**Total running time of the script:** ( 0 minutes  1.706 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:142
msgid ""
":download:`Download Python source code: create-geometric-objects.py <create-"
"geometric-objects.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-geometric-objects.rst:148
msgid ""
":download:`Download Jupyter notebook: create-geometric-objects.ipynb "
"<create-geometric-objects.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-kochanek-"
"spline.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:24
#: ../../pyvista/doc/examples/index.rst:93
msgid "Create a Kochanek Spline"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:26
msgid "Create a Kochanek spline/polyline from a numpy array of XYZ vertices."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:46
#: ../../pyvista/doc/examples/00-load/create-spline.rst:46
msgid "Create a dataset to plot"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:88
msgid "Interpolate those points onto a parametric Kochanek spline"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:153
msgid "**Total running time of the script:** ( 0 minutes  0.907 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:168
msgid ""
":download:`Download Python source code: create-kochanek-spline.py <create-"
"kochanek-spline.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-kochanek-spline.rst:174
msgid ""
":download:`Download Jupyter notebook: create-kochanek-spline.ipynb <create-"
"kochanek-spline.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-parametric-"
"geometric-objects.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:24
#: ../../pyvista/doc/examples/index.rst:114
msgid "Parametric Geometric Objects"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:26
msgid "Creating parametric objects"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:47
msgid "This example demonstrates how to plot parametric objects using pyvista"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:50
msgid "Supertoroid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:75
msgid "Parametric Ellipsoid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:102
msgid "Partial Parametric Ellipsoid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:137
msgid "Pseudosphere"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:162
msgid "Bohemian Dome"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:188
msgid "Bour"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:213
msgid "Boy's Surface"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:238
msgid "Catalan Minimal"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:263
msgid "Conic Spiral"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:288
msgid "Cross Cap"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:313
msgid "Dini"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:338
msgid "Enneper"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:363
msgid "Figure-8 Klein"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:388
msgid "Henneberg"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:413
msgid "Klein"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:438
msgid "Kuen"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:463
msgid "Mobius"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:488
msgid "Plucker Conoid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:514
msgid "Random Hills"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:539
msgid "Roman"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:564
msgid "Super Ellipsoid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:589
msgid "Torus"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:614
msgid "Circular Arc"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:650
msgid "Extruded Half Arc"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:680
msgid "**Total running time of the script:** ( 0 minutes  11.017 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:695
msgid ""
":download:`Download Python source code: create-parametric-geometric-"
"objects.py <create-parametric-geometric-objects.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-parametric-geometric-objects.rst:701
msgid ""
":download:`Download Jupyter notebook: create-parametric-geometric-"
"objects.ipynb <create-parametric-geometric-objects.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-pixel-art.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:24
#: ../../pyvista/doc/examples/index.rst:135
msgid "Pixel Art of ALIEN MONSTERS"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:26
msgid ""
"Here we use :func:`pyvista.Box` to make `pixel art "
"<https://en.wikipedia.org/wiki/Pixel_art>`_. Pixel string `source "
"<https://commons.wikimedia.org/wiki/File:Noto_Emoji_Pie_1f47e.svg>`_ and "
"`license <https://github.com/googlefonts/noto-emoji#license>`_."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:47
msgid "Convert pixel art to an array"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:88
msgid "Define function to draw pixels"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:89
msgid "Define a helper function to add pixel boxes to plotter."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:129
msgid "Now you can plot a pixel art of ALIEN MONSTERS."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:169
msgid "**Total running time of the script:** ( 0 minutes  1.329 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:184
msgid ""
":download:`Download Python source code: create-pixel-art.py <create-pixel-"
"art.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pixel-art.rst:190
msgid ""
":download:`Download Jupyter notebook: create-pixel-art.ipynb <create-pixel-"
"art.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-platonic-"
"solids.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:24
#: ../../pyvista/doc/examples/index.rst:156
msgid "Platonic Solids"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:26
msgid ""
"PyVista wraps the ``vtk.vtkPlatonicSolidSource`` filter as "
":func:`pyvista.PlatonicSolid`."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:47
msgid ""
"We can either use the generic :func:`PlatonicSolid() "
"<pyvista.PlatonicSolid>` and specify the different kinds of solids to "
"generate, or we can use the thin wrappers:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:51
msgid ":func:`pyvista.Tetrahedron`"
msgstr ":func:`pyvista.Tetrahedron`"

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:52
msgid ":func:`pyvista.Octahedron`"
msgstr ":func:`pyvista.Octahedron`"

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:53
msgid ":func:`pyvista.Dodecahedron`"
msgstr ":func:`pyvista.Dodecahedron`"

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:54
msgid ":func:`pyvista.Icosahedron`"
msgstr ":func:`pyvista.Icosahedron`"

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:55
msgid ":func:`pyvista.Cube` (implemented via a different filter)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:57
msgid ""
"Let's generate all the Platonic solids, along with the :func:`teapotahedron "
"<pyvista.examples.downloads.download_teapot>`."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:99
msgid "Now let's plot them all."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:102
#: ../../pyvista/doc/examples/04-lights/shadows.rst:72
msgid ""
"VTK has known issues when rendering shadows on certain window sizes.  Be "
"prepared to experiment with the ``window_size`` parameter.  An initial "
"window size of ``(1000, 1000)`` seems to work well, which can be manually "
"resized without issue."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:139
msgid ""
"The Platonic solids come with cell scalars that index each face of the "
"solids."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:145
msgid "**Total running time of the script:** ( 0 minutes  1.402 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:160
msgid ""
":download:`Download Python source code: create-platonic-solids.py <create-"
"platonic-solids.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-platonic-solids.rst:166
msgid ""
":download:`Download Jupyter notebook: create-platonic-solids.ipynb <create-"
"platonic-solids.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-point-cloud.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:24
#: ../../pyvista/doc/examples/index.rst:177
msgid "Create Point Cloud"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:26
msgid ""
"Create a :class:`pyvista.PolyData` object from a point cloud of vertices and"
" scalar arrays for those points."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:48
msgid ""
"Point clouds are generally constructed in the :class:`pyvista.PolyData` "
"class and can easily have scalar/vector data arrays associated with the "
"point cloud. In this example, we'll work a bit backwards using a point cloud"
" that that is available from our ``examples`` module. This however is no "
"different than creating a PyVista mesh with your own NumPy arrays of vertice"
" locations."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:94
msgid ""
"Now that you have a NumPy array of points/vertices either from our sample "
"data or your own project, creating a PyVista mesh of those points is simply:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:109
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>67841</td></tr>\n"
"<tr><td>N Points</td><td>67841</td></tr>\n"
"<tr><td>X Bounds</td><td>4.809e+05, 4.811e+05</td></tr>\n"
"<tr><td>Y Bounds</td><td>4.400e+06, 4.400e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.754e+03, 1.785e+03</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:130
msgid "And we can even do a sanity check"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:155
msgid ""
"And now that we have a PyVista mesh, we can plot it. Note that we add an "
"option to use eye dome lighting - this is a shading technique to improve "
"depth perception with point clouds (learn more in :ref:`ref_edl`)."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:179
msgid ""
"Now what if you have data attributes (scalar/vector arrays) that you'd like "
"to associate with every node of your mesh? You can easily add NumPy data "
"arrays that have a length equal to the number of points in the mesh along "
"the first axis. For example, lets add a few arrays to this new "
"``point_cloud`` mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:185
msgid ""
"Make an array of scalar values with the same length as the points array. "
"Each element in this array will correspond to points at the same index:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:208
msgid ""
"And now we can plot the point cloud with that random data. PyVista is smart "
"enough to plot the scalar array you added by default. Note that this time, "
"we specify to render every point as its own sphere."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:232
msgid ""
"That data is kind of boring, right? You can also add data arrays with more "
"than one scalar value - perhaps a vector with three elements? Let's make a "
"little function that will compute vectors for every node in the point cloud "
"and add those vectors to the mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:237
msgid "This time, we're going to create a totally new, random point cloud."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:295
msgid ""
"Now we can make arrows using those vectors using the glyph filter (see "
":ref:`glyph_example` for more details)."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:332
msgid "**Total running time of the script:** ( 0 minutes  4.253 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:347
msgid ""
":download:`Download Python source code: create-point-cloud.py <create-point-"
"cloud.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-point-cloud.rst:353
msgid ""
":download:`Download Jupyter notebook: create-point-cloud.ipynb <create-"
"point-cloud.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-pointset.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:24
#: ../../pyvista/doc/examples/index.rst:198
msgid "Create a PointSet"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:26
msgid ""
"A :class:`pyvista.PointSet` is a concrete class representing a set of points"
" that specifies the interface for datasets that explicitly use \"point\" "
"arrays to represent geometry. This class is useful for improving the "
"performance of filters on point clouds."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:31
msgid ""
"This example shows the performance improvement when clipping using the "
":func:`pyvista.DataSet.clip` filter on a :class:`pyvista.PointSet`."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:67
msgid "Plot the clipped polydata"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:89
msgid ""
"Show the performance improvement when using a PointSet. This is only "
"available with VTK >= 9.1.0."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:123
msgid "Plot the same dataset."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:126
msgid ""
"PyVista must still create an intermediate PolyData to be able to plot, so "
"there is no performance improvement when using a :class:`pyvista.PointSet`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:151
msgid "**Total running time of the script:** ( 0 minutes  13.565 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:166
msgid ""
":download:`Download Python source code: create-pointset.py <create-"
"pointset.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-pointset.rst:172
msgid ""
":download:`Download Jupyter notebook: create-pointset.ipynb <create-"
"pointset.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-poly.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:24
#: ../../pyvista/doc/examples/index.rst:219
msgid "Create PolyData"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:26
msgid ""
"Creating a :class:`pyvista.PolyData` (surface mesh) from vertices and faces."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:46
msgid ""
"A PolyData object can be created quickly from numpy arrays.  The vertex "
"array contains the locations of the points in the mesh and the face array "
"contains the number of points of each face and the indices of the vertices "
"which comprise that face."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:95
msgid "Polygonal PolyData"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:96
msgid "Create a three face polygonal mesh directly from points and faces."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:99
msgid ""
"It is generally more efficient to use a numpy array rather than stacking "
"lists for large meshes."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:149
msgid "**Total running time of the script:** ( 0 minutes  1.279 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:164
msgid ""
":download:`Download Python source code: create-poly.py <create-poly.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-poly.rst:170
msgid ""
":download:`Download Jupyter notebook: create-poly.ipynb <create-poly.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-spline.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:24
#: ../../pyvista/doc/examples/index.rst:240
msgid "Creating a Spline"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:26
msgid "Create a spline/polyline from a numpy array of XYZ vertices"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:88
msgid ""
"Now let's make a function that can create line cells on a "
":class:`pyvista.PolyData` mesh given that the points are in order for the "
"segments they make."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:117
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>99</td></tr>\n"
"<tr><td>N Points</td><td>100</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.084e+00, 4.084e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.281e+00, 5.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:159
msgid ""
"That tube has sharp edges at each line segment. This can be mitigated by "
"creating a single PolyLine cell for all of the points"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:197
msgid "You could also interpolate those points onto a parametric spline"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:216
msgid "Plot spline as a tube"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:242
msgid "The spline can also be plotted as a plain line"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:271
msgid "Ribbons"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:273
msgid ""
"Ayy of the lines from the examples above can be used to create ribbons. Take"
" a look at the :func:`pyvista.PolyDataFilters.ribbon` filter."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:298
msgid "**Total running time of the script:** ( 0 minutes  1.928 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:313
msgid ""
":download:`Download Python source code: create-spline.py <create-spline.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-spline.rst:319
msgid ""
":download:`Download Jupyter notebook: create-spline.ipynb <create-"
"spline.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-structured-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:24
#: ../../pyvista/doc/examples/index.rst:261
msgid "Creating a Structured Surface"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:26
msgid "Create a StructuredGrid surface from NumPy arrays"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:48
msgid "From NumPy Meshgrid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:50
msgid "Create a simple meshgrid using NumPy"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:73
msgid "Now pass the NumPy meshgrid to PyVista"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:118
msgid ""
"Generating a structured grid is a one-liner in this module, and the points "
"from the resulting surface can be accessed as a NumPy array:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:153
msgid "From XYZ Points"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:155
msgid ""
"Quite often, you might be given a set of coordinates (XYZ points) in a "
"simple tabular format where there exists some structure such that grid could"
" be built between the nodes you have. A great example is found in `pyvista-"
"support#16`_ where a structured grid that is rotated from the cartesian "
"reference frame is given as just XYZ points. In these cases, all that is "
"needed to recover the grid is the dimensions of the grid (`nx` by `ny` by "
"`nz`) and that the coordinates are ordered appropriately."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:165
msgid ""
"For this example, we will create a small dataset and rotate the coordinates "
"such that they are not on orthogonal to cartesian reference frame."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:215
msgid ""
"Now pretend that the (n by 3) NumPy array above are coordinates that you "
"have, possibly from a file with three columns of XYZ points."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:218
msgid ""
"We simply need to recover the dimensions of the grid that these points make "
"and then we can generate a :class:`pyvista.StructuredGrid` mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:221
msgid "Let's preview the points to see what we are dealing with:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:250
msgid ""
"In the figure above, we can see some inherit structure to the points and "
"thus we could connect the points as a structured grid. All we need to know "
"are the dimensions of the grid present. In this case, we know (because we "
"made this dataset) the dimensions are ``[29, 32, 1]``, but you might not "
"know the dimensions of your pointset. There are a few ways to figure out the"
" dimensionality of structured grid including:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:257
msgid "manually counting the nodes along the edges of the pointset"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:258
msgid ""
"using a technique like principle component analysis to strip the rotation "
"from the dataset and count the unique values along each axis for the new;y "
"projected dataset."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:293
msgid "Extending a 2D StructuredGrid to 3D"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:295
msgid ""
"A 2D :class:`pyvista.StructuredGrid` mesh can be extended into a 3D mesh. "
"This is highly applicable when wanting to create a terrain following mesh in"
" earth science research applications."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:299
msgid ""
"For example, we could have a :class:`pyvista.StructuredGrid` of a topography"
" surface and extend that surface to a few different levels and connect each "
"\"level\" to create the 3D terrain following mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:303
msgid "Let's start with a simple example by extending the wave mesh to 3D"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:351
msgid "**Total running time of the script:** ( 0 minutes  2.614 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:366
msgid ""
":download:`Download Python source code: create-structured-surface.py "
"<create-structured-surface.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-structured-surface.rst:372
msgid ""
":download:`Download Jupyter notebook: create-structured-surface.ipynb "
"<create-structured-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-surface-"
"draped.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:24
#: ../../pyvista/doc/examples/index.rst:282
msgid "Drape 2D Surface From Line"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:26
msgid "Drape a surface (2D array) from a line in 3D space."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:28
msgid ""
"This is a common task to create a 2.5D image/sectional mesh of data like GPR"
" or airborne EM profiles (geophysics applications). This example provides a "
"look into how to create a 2.5D sectional mesh from typical data in those use"
" cases."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:32
msgid ""
"For this example, we have an instrument path on the ground surface (the "
"line) and a 2D array of the collected image under that line."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:35
msgid ""
"Originally posted in `this support issue "
"<https://github.com/pyvista/pyvista-support/issues/135>`_."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:37
msgid ""
"Suppose you have some GPR data (or anything that produces a line of data "
"with values at depth). With these data, you'll have a 2D image/array of your"
" data values and 3D coordinates of where that line/profile is in 3D space "
"(often where you collected the data on the surface of topography). Attached "
"below are some example data for this: 1) XYZ coordinates of a GPR path and "
"2) a 2D array of data values produced from the GPR."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:44
msgid ""
"the data here are wacky (it's difficult to get shareable data of decent "
"quality), so ignore them but pay attention to the structure. The coordinates"
" we have are technically shifted up and we have some NaN filler above the "
"surface - its weird and just ignore it. You'll typically have a more uniform"
" looking profile in 2D with the coordinates associated to the top of each "
"column in your 2D array."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:96
msgid ""
"View the the path of the GPR profile from a top-down perspective. Since we "
"have the full coordinates (XY and Z), we can create a structured mesh "
"\"draping\" down from those coordinates to hold the GPR image data."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:159
msgid "Make a StructuredGrid from the structured points"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:181
msgid ""
"And now we can plot it! or process or do anything, because it is a PyVista "
"mesh and the possibilities are endless with PyVista"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:214
msgid "**Total running time of the script:** ( 0 minutes  12.963 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:229
msgid ""
":download:`Download Python source code: create-surface-draped.py <create-"
"surface-draped.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-surface-draped.rst:235
msgid ""
":download:`Download Jupyter notebook: create-surface-draped.ipynb <create-"
"surface-draped.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-tri-surface.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:24
#: ../../pyvista/doc/examples/index.rst:303
msgid "Create Triangulated Surface"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:26
msgid ""
"Create a surface from a set of points through a Delaunay triangulation."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:47
msgid "Simple Triangulations"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:49
msgid "First, create some points for the surface."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:89
msgid ""
"Now use those points to create a point cloud PyVista data object. This will "
"be encompassed in a :class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:115
msgid ""
"Now that we have a PyVista data structure of the points, we can perform a "
"triangulation to turn those boring discrete points into a connected surface."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:142
msgid "Masked Triangulations"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:165
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>100</td></tr>\n"
"<tr><td>N Points</td><td>100</td></tr>\n"
"<tr><td>X Bounds</td><td>2.433e-02, 9.213e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>1.486e-02, 9.297e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:186
msgid "Run the triangulation on these points"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:210
msgid ""
"Note that some of the outer edges are unconstrained and the triangulation "
"added unwanted triangles. We can mitigate that with the ``alpha`` parameter."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:235
msgid ""
"We could also add a polygon to ignore during the triangulation via the "
"``edge_source`` parameter."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:274
msgid "**Total running time of the script:** ( 0 minutes  1.825 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:289
msgid ""
":download:`Download Python source code: create-tri-surface.py <create-tri-"
"surface.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-tri-surface.rst:295
msgid ""
":download:`Download Jupyter notebook: create-tri-surface.ipynb <create-tri-"
"surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-truss.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:24
#: ../../pyvista/doc/examples/index.rst:324
msgid "Plot Truss-like FEA Solution with Cylinders"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:26
msgid ""
"Plot connections between points in 3D as cylinders, colored by scalars."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:46
msgid ""
"Define the points and elements of the truss.  Call them ``nodes`` here as it"
" comes from finite element analysis."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:110
msgid "Plot the truss while rendering the lines as tubes."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:144
msgid "**Total running time of the script:** ( 0 minutes  0.571 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:159
msgid ""
":download:`Download Python source code: create-truss.py <create-truss.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-truss.rst:165
msgid ""
":download:`Download Jupyter notebook: create-truss.ipynb <create-"
"truss.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-uniform-"
"grid.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:22
#: ../../pyvista/doc/examples/index.rst:345
msgid "Creating a Uniform Grid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:24
msgid "Create a simple uniform grid from a 3D NumPy array of values."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:44
msgid ""
"Take a 3D NumPy array of data values that holds some spatial data where each"
" axis corresponds to the XYZ cartesian axes. This example will create a "
":class:`pyvista.UniformGrid` object that will hold the spatial reference for"
" a 3D grid which a 3D NumPy array of values can be plotted against."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:51
msgid ""
"Create the 3D NumPy array of spatially referenced data. This is spatially "
"referenced such that the grid is 20 by 5 by 10 (nx by ny by nz)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:94
msgid ""
"Don't like cell data? You could also add the NumPy array to the point data "
"of a :class:`pyvista.UniformGrid`. Take note of the subtle difference when "
"setting the grid dimensions upon initialization."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:140
msgid "**Total running time of the script:** ( 0 minutes  1.306 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:155
msgid ""
":download:`Download Python source code: create-uniform-grid.py <create-"
"uniform-grid.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-uniform-grid.rst:161
msgid ""
":download:`Download Jupyter notebook: create-uniform-grid.ipynb <create-"
"uniform-grid.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_create-unstructured-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:24
#: ../../pyvista/doc/examples/index.rst:366
msgid "Creating an Unstructured Grid"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:26
msgid "Create an irregular, unstructured grid from NumPy arrays."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:47
msgid ""
"An unstructured grid can be created directly from NumPy arrays. This is "
"useful when creating a grid from scratch or copying it from another format."
"  See `vtkUnstructuredGrid "
"<https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html>`_ for "
"available cell types and their descriptions."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:140
msgid "UnstructuredGrid with Shared Points"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:142
msgid ""
"The next example again creates an unstructured grid containing hexahedral "
"cells, but using common points between the cells."
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:237
msgid "Finally, create the unstructured grid and plot it"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:282
msgid "**Total running time of the script:** ( 0 minutes  0.875 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:297
msgid ""
":download:`Download Python source code: create-unstructured-surface.py "
"<create-unstructured-surface.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/create-unstructured-surface.rst:303
msgid ""
":download:`Download Jupyter notebook: create-unstructured-surface.ipynb "
"<create-unstructured-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_load-gltf.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:24
#: ../../pyvista/doc/examples/index.rst:387
msgid "Working with glTF Files"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:25
msgid ""
"Import a glTF file directly into a PyVista plotting scene.  For more details"
" regarding the glTF format, see: https://www.khronos.org/gltf/"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:31
msgid ""
"First, download the examples.  Note that here we're using a high dynamic "
"range texture since glTF files generally contain physically based rendering "
"and VTK v9 supports high dynamic range textures."
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:56
msgid ""
"Set up the plotter and enable environment textures.  This works well for "
"physically based rendering enabled meshes like the damaged helmet example."
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:86
msgid ""
"You can also directly read in gltf files and extract the underlying mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:112
msgid "**Total running time of the script:** ( 1 minutes  8.114 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:127
msgid ":download:`Download Python source code: load-gltf.py <load-gltf.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-gltf.rst:133
msgid ""
":download:`Download Jupyter notebook: load-gltf.ipynb <load-gltf.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_load-vrml.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:24
#: ../../pyvista/doc/examples/index.rst:408
msgid "Working with VRML Files"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:25
msgid ""
"Import a VRML file directly into a PyVista plotting scene. For more details "
"regarding the VRML format, see: https://en.wikipedia.org/wiki/VRML"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:49
msgid "Set up the plotter and import VRML file."
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:74
msgid "**Total running time of the script:** ( 0 minutes  0.634 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:89
msgid ":download:`Download Python source code: load-vrml.py <load-vrml.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/load-vrml.rst:95
msgid ""
":download:`Download Jupyter notebook: load-vrml.ipynb <load-vrml.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-dolfin.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:22
#: ../../pyvista/doc/examples/index.rst:429
msgid "Read FEniCS/Dolfin Meshes"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:24
msgid ""
"PyVista leverages `meshio`_ to read many mesh formats not natively supported"
" by VTK including the `FEniCS/Dolfin`_ XML format."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:46
msgid ""
"Let's download an example FEniCS/Dolfin mesh from our example data "
"repository. This will download an XML Dolfin mesh and save it to PyVista's "
"data directory."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:74
msgid ""
"As shown, we now have an XML Dolfin mesh save locally. This filename can be "
"passed directly to PyVista's :func:`pyvista.read` method to be read into a "
"PyVista mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:91
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>5400</td></tr>\n"
"<tr><td>N Points</td><td>2868</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:112
msgid "Now we can do stuff with that Dolfin mesh!"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rstNone
msgid "read dolfin"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:144
msgid "**Total running time of the script:** ( 0 minutes  1.319 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:159
msgid ""
":download:`Download Python source code: read-dolfin.py <read-dolfin.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-dolfin.rst:165
msgid ""
":download:`Download Jupyter notebook: read-dolfin.ipynb <read-dolfin.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-file.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:24
#: ../../pyvista/doc/examples/index.rst:450
msgid "Load and Plot from a File"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:26
msgid "Read a dataset from a known file type."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:30
msgid ""
"Loading a mesh is trivial - if your data is in one of the many supported "
"file formats, simply use :func:`pyvista.read` to load your spatially "
"referenced dataset into a PyVista mesh object."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:34
msgid ""
"The following code block uses a built-in example file and displays an "
"airplane mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:54
msgid ""
"The following code block uses a built-in example file, displays an airplane "
"mesh and returns the camera's position:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:83
msgid ""
"Note the above filename, it's a ``.ply`` file - one of the many supported "
"formats in PyVista."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:108
msgid ""
"You can also take a screenshot without creating an interactive plot window "
"using the ``Plotter``:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:135
msgid "The points from the mesh are directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:167
msgid "The faces from the mesh are also directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:200
msgid ""
"Loading other files types is just as easy! Simply pass your file path to the"
" :func:`pyvista.read` function and that's it!"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:203
msgid ""
"Here are a few other examples - simply replace ``examples.download_*`` in "
"the examples below with ``pyvista.read('path/to/you/file.ext')``"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:208
msgid "Example STL file:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:232
msgid "Example OBJ file"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:256
msgid "Example BYU file"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:280
msgid "Example VTK file"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:304
msgid "**Total running time of the script:** ( 0 minutes  3.697 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:319
msgid ":download:`Download Python source code: read-file.py <read-file.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-file.rst:325
msgid ""
":download:`Download Jupyter notebook: read-file.ipynb <read-file.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-image.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:22
#: ../../pyvista/doc/examples/index.rst:471
msgid "Read Image Files"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:24
msgid "Read and plot image files (JPEG, TIFF, PNG, etc)."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:42
msgid ""
"PyVista fully supports reading images into their own spatially referenced "
"data objects (this example) as well as supports texture mapping of images "
"onto datasets (see :ref:`ref_texture_example`)."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:46
msgid ""
"Download a JPEG image of a puppy and load it to "
":class:`pyvista.UniformGrid`. This could similarly be implemented with any "
"image file by using the :func:`pyvista.read` function and passing the path "
"to the image file."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:68
msgid ""
"When plotting images stored in :class:`pyvista.UniformGrid` objects, it is "
"important to specify using the `rgb` option when plotting to ensure that the"
" image's true colors are used and not mapped."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rstNone
#: ../../pyvista/doc/examples/00-load/read-image.rstNone
msgid "read image"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:132
msgid "**Total running time of the script:** ( 0 minutes  6.458 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:147
msgid ":download:`Download Python source code: read-image.py <read-image.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-image.rst:153
msgid ""
":download:`Download Jupyter notebook: read-image.ipynb <read-image.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_read-parallel.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:24
#: ../../pyvista/doc/examples/index.rst:492
msgid "Parallel Files"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:26
msgid ""
"The VTK library supports parallel file formats. Reading meshes broken up "
"into several files is natively supported by VTK and PyVista."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:48
msgid ""
"Let's go ahead and download the sample dataset containing an "
":class:`pyvista.UnstructuredGrid` broken up into several files."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:64
#: ../../pyvista/doc/examples/00-load/read-parallel.rst:165
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>39353</td></tr>\n"
"<tr><td>N Points</td><td>48823</td></tr>\n"
"<tr><td>X Bounds</td><td>5.300e+01, 1.210e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.000e+01, 9.700e+01</td></tr>\n"
"<tr><td>Z Bounds</td><td>6.400e+01, 1.820e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>5</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>node_value</td><td>Points</td><td>int32</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td>simerr_type</td><td>Points</td><td>int32</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td>density</td><td>Cells</td><td>float32</td><td>1</td><td>2.203e-01</td><td>5.232e-01</td></tr>\n"
"<tr><td>velocity</td><td>Cells</td><td>float32</td><td>3</td><td>-3.607e-01</td><td>8.989e-02</td></tr>\n"
"<tr><td>shearstress</td><td>Cells</td><td>float32</td><td>1</td><td>6.160e-05</td><td>1.726e-02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:95
msgid ""
"The above code downloaded a dataset containing a set of parallel files for a"
" blood vessel mesh and returned an :class:`pyvista.UnstructuredGrid` - we "
"did not grab that UnstructuredGrid, so that we could demo how to use these "
"types of files."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:100
msgid "Let's inspect where this downloaded our dataset:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:147
msgid ""
"Note that a ``.pvtu`` file is available along side a directory. This "
"directory contains all the parallel files or pieces that make the whole "
"mesh. We can simply read the ``.pvtu`` file and VTK will handle putting the "
"mesh together."
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:196
msgid "Plot the pieced together mesh"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:237
msgid "**Total running time of the script:** ( 0 minutes  1.921 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:252
msgid ""
":download:`Download Python source code: read-parallel.py <read-parallel.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/read-parallel.rst:258
msgid ""
":download:`Download Jupyter notebook: read-parallel.ipynb <read-"
"parallel.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_reader.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:24
#: ../../pyvista/doc/examples/index.rst:513
msgid "Load data using a Reader"
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:28
msgid ""
"To have more control over reading data files, use a class based reader. This"
" class allows for more fine-grained control over reading datasets from "
"files.  See :func:`pyvista.get_reader` for a list of file types supported."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:54
msgid ""
"An XML PolyData file in ``.vtp`` format is created.  It will be saved in a "
"temporary file for this example."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:82
msgid ""
":class:`pyvista.Sphere` already includes ``Normals`` point data.  "
"Additionally ``height`` point data and ``id`` cell data is added."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:103
msgid ""
":func:`pyvista.read` function reads all the data in the file. This provides "
"a quick and easy one-liner to read data from files."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:131
msgid ""
"Using :func:`pyvista.get_reader` enables more fine-grained control of "
"reading data files. Reading in a ``.vtp``` file uses the "
":class:`pyvista.XMLPolyDataReader`."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:160
msgid ""
"Some reader classes, including this one, offer the ability to inspect the "
"data file before loading all the data. For example, we can access the number"
" and names of point and cell arrays."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:194
msgid ""
"We can select which data to read by selectively disabling or enabling "
"specific arrays or all arrays.  Here we disable all the cell arrays and the "
"``Normals`` point array to leave only the ``height`` point array.  The data "
"is finally read into a pyvista object that only has the ``height`` point "
"array."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:230
msgid ""
"We can reuse the reader object to choose different variables if needed."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:258
msgid ""
"Some Readers support setting different time points or iterations. In both "
"cases, this is done using the time point functionality. The NACA dataset has"
" two such points with density.  This dataset is in EnSight format, which "
"uses the :class:`pyvista.EnSightReader` class."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:294
msgid ""
"First both time points are read in, and then the difference in density is "
"calculated and saved on the second mesh.  The read method of "
":class:`pyvista.EnSightReader` returns a :class:`pyvista.MultiBlock` "
"instance. In this dataset, there are 3 blocks and the new scalar must be "
"applied on each block."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:322
msgid ""
"The value of `DENS` is plotted on the left column for both time points, and "
"the difference on the right."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:364
msgid ""
"Reading time points or iterations can also be utilized to make a movie. "
"Compare to :ref:`gif_movie_example`, but here a set of files are read in "
"through a ParaView Data format file. This file format and reader also return"
" a :class:`pyvista.MultiBlock` mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:395
msgid ""
"For each time point, plot the mesh colored by the height. Put iteration "
"value in top left"
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:432
msgid "**Total running time of the script:** ( 0 minutes  8.451 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:447
msgid ":download:`Download Python source code: reader.py <reader.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/reader.rst:453
msgid ":download:`Download Jupyter notebook: reader.ipynb <reader.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:7
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:7
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:7
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:7
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:7
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:7
msgid "Computation times"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:8
msgid "**00:00.634** total execution time for **examples_00-load** files:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_00-load_load-vrml.py` (``load-vrml.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:11
msgid "00:00.634"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:11
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:27
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:29
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:31
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:33
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:35
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:37
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:39
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:41
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:43
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:45
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:47
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:49
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:51
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:53
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:55
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:57
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:59
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:11
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:27
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:29
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:31
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:33
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:35
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:37
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:39
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:41
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:43
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:45
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:47
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:49
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:51
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:53
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:55
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:57
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:59
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:61
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:63
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:65
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:67
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:69
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:71
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:73
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:75
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:77
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:79
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:81
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:83
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:85
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:87
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:11
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:27
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:29
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:31
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:33
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:35
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:37
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:39
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:41
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:43
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:45
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:47
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:49
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:51
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:53
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:55
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:57
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:59
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:61
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:63
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:65
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:67
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:69
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:71
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:73
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:75
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:77
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:79
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:81
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:83
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:85
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:87
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:11
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:11
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:11
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:23
msgid "0.0 MB"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_00-load_create-explicit-structured-grid.py` "
"(``create-explicit-structured-grid.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:27
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:29
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:31
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:33
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:35
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:37
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:39
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:41
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:43
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:45
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:47
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:49
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:51
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:53
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:55
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:57
#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:59
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:27
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:29
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:31
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:33
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:35
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:37
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:39
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:41
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:43
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:45
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:47
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:49
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:51
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:53
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:55
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:57
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:59
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:61
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:63
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:65
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:67
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:69
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:71
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:73
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:75
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:77
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:79
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:81
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:83
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:85
#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:87
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:27
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:29
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:31
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:33
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:35
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:37
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:39
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:41
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:43
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:45
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:47
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:49
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:51
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:53
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:55
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:57
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:59
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:61
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:63
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:65
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:67
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:69
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:71
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:73
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:75
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:77
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:79
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:81
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:83
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:85
#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:87
#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:25
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:23
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:13
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:15
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:17
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:19
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:21
#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:23
msgid "00:00.000"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_00-load_create-geometric-objects.py` (``create-"
"geometric-objects.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:17
msgid ""
":ref:`sphx_glr_examples_00-load_create-kochanek-spline.py` (``create-"
"kochanek-spline.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:19
msgid ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py` "
"(``create-parametric-geometric-objects.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:21
msgid ""
":ref:`sphx_glr_examples_00-load_create-pixel-art.py` (``create-pixel-"
"art.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_00-load_create-platonic-solids.py` (``create-"
"platonic-solids.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:25
msgid ""
":ref:`sphx_glr_examples_00-load_create-point-cloud.py` (``create-point-"
"cloud.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:27
msgid ""
":ref:`sphx_glr_examples_00-load_create-pointset.py` (``create-pointset.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py` (``create-poly.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:31
msgid ""
":ref:`sphx_glr_examples_00-load_create-spline.py` (``create-spline.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:33
msgid ""
":ref:`sphx_glr_examples_00-load_create-structured-surface.py` (``create-"
"structured-surface.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_00-load_create-surface-draped.py` (``create-surface-"
"draped.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:37
msgid ""
":ref:`sphx_glr_examples_00-load_create-tri-surface.py` (``create-tri-"
"surface.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:39
msgid ":ref:`sphx_glr_examples_00-load_create-truss.py` (``create-truss.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_00-load_create-uniform-grid.py` (``create-uniform-"
"grid.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:43
msgid ""
":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py` (``create-"
"unstructured-surface.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:45
msgid ":ref:`sphx_glr_examples_00-load_load-gltf.py` (``load-gltf.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py` (``read-dolfin.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:49
msgid ":ref:`sphx_glr_examples_00-load_read-file.py` (``read-file.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:51
msgid ":ref:`sphx_glr_examples_00-load_read-image.py` (``read-image.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_examples_00-load_read-parallel.py` (``read-parallel.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:55
msgid ":ref:`sphx_glr_examples_00-load_reader.py` (``reader.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:57
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py` (``terrain-mesh.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_00-load_wrap-trimesh.py` (``wrap-trimesh.py``)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_terrain-mesh.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:24
#: ../../pyvista/doc/examples/index.rst:534
msgid "Terrain Following Mesh"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:26
msgid "Use a topographic surface to create a 3D terrain-following mesh."
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:28
msgid ""
"Terrain following meshes are common in the environmental sciences, for "
"instance in hydrological modelling (see `Maxwell 2013 "
"<https://www.sciencedirect.com/science/article/abs/pii/S0309170812002564>`_ "
"and `ParFlow <https://parflow.org>`_)."
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:34
msgid ""
"In this example, we demonstrate a simple way to make a 3D grid/mesh that "
"follows a given topographic surface. In this example, it is important to "
"note that the given digital elevation model (DEM) is structured (gridded and"
" not triangulated): this is common for DEMs."
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:58
msgid "Download a gridded topography surface (DEM)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:72
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1677401</td></tr>\n"
"<tr><td>N Points</td><td>1680000</td></tr>\n"
"<tr><td>X Bounds</td><td>1.810e+06, 1.831e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.640e+06, 5.658e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>Dimensions</td><td>1400, 1200, 1</td></tr>\n"
"<tr><td>Spacing</td><td>1.500e+01, 1.500e+01, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>7.339e+02</td><td>2.787e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:101
msgid ""
"Now let's subsample and extract an area of interest to make this example "
"simple (also the DEM we just load is pretty big). Since the DEM we loaded is"
" a :class:`pyvista.UniformGrid` mesh, we can use the "
":func:`pyvista.UniformGridFilters.extract_subset` filter:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:128
msgid ""
"Now that we have a region of interest for our terrain following mesh, lets "
"make a 3D surface of that DEM:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:143
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6400</td></tr>\n"
"<tr><td>N Points</td><td>6561</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.441e+03, 2.769e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>81, 81, 1</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.441e+03</td><td>2.769e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:190
msgid ""
"And now we have a 3D structured surface of the terrain! We can now extend "
"that structured surface into a 3D mesh to form a terrain following grid. To "
"do this, we first our cell spacings in the z-direction (these start from the"
" terrain surface). Then we repeat the XYZ structured coordinates of the "
"terrain mesh and decrease each Z level by our Z cell spacing. Once we have "
"those structured coordinates, we can create a "
":class:`pyvista.StructuredGrid`."
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:218
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>70400</td></tr>\n"
"<tr><td>N Points</td><td>78732</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.364e+02, 2.744e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>81, 81, 12</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>Elevation</b></td><td>Points</td><td>float64</td><td>1</td><td>9.364e+02</td><td>2.744e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:270
msgid "**Total running time of the script:** ( 0 minutes  2.213 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:285
msgid ""
":download:`Download Python source code: terrain-mesh.py <terrain-mesh.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/terrain-mesh.rst:291
msgid ""
":download:`Download Jupyter notebook: terrain-mesh.ipynb <terrain-"
"mesh.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_00-load_wrap-trimesh.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:24
#: ../../pyvista/doc/examples/index.rst:555
msgid "Wrapping Other Objects"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:25
msgid "You can wrap several other object types using pyvista including:"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:27
msgid "`numpy` arrays"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:28
msgid "`trimesh.Trimesh` meshes"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:29
msgid "VTK objects"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:31
msgid ""
"This allows for the \"best of both worlds\" programming special to Python "
"due to its modularity.  If there's some limitation of pyvista (or trimesh), "
"then you can adapt your scripts to use the best features of more than one "
"module."
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:38
msgid "Wrap a point cloud composed of random points from numpy"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:73
msgid "Wrap an instance of Trimesh"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:111
msgid "Wrap an instance of vtk.vtkPolyData"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:156
msgid "**Total running time of the script:** ( 0 minutes  0.837 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:171
msgid ""
":download:`Download Python source code: wrap-trimesh.py <wrap-trimesh.py>`"
msgstr ""

#: ../../pyvista/doc/examples/00-load/wrap-trimesh.rst:177
msgid ""
":download:`Download Jupyter notebook: wrap-trimesh.ipynb <wrap-"
"trimesh.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_boolean-"
"operations.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:24
#: ../../pyvista/doc/examples/index.rst:600
msgid "Boolean Operations"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:26
msgid "Perform boolean operations with closed (manifold) surfaces."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:28
msgid ""
"Boolean/topological operations (intersect, union, difference) methods are "
"implemented for :class:`pyvista.PolyData` mesh types only and are accessible"
" directly from any :class:`pyvista.PolyData` mesh. Check out "
":class:`pyvista.PolyDataFilters` and take a look at the following filters:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:34
msgid ":func:`pyvista.PolyDataFilters.boolean_difference`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_difference`"

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:35
msgid ":func:`pyvista.PolyDataFilters.boolean_union`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_union`"

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:36
msgid ":func:`pyvista.PolyDataFilters.boolean_intersection`"
msgstr ":func:`pyvista.PolyDataFilters.boolean_intersection`"

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:38
msgid ""
"Essentially, boolean union, difference, and intersection are all the same "
"operation. Just different parts of the objects are kept at the end."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:42
msgid ""
"The ``-`` operator can be used between any two :class:`pyvista.PolyData` "
"meshes in PyVista to cut the first mesh by the second.  These meshes must be"
" all triangle meshes, which you can check with "
":attr:`pyvista.PolyData.is_all_triangles`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:48
msgid ""
"For merging, the ``+`` operator can be used between any two meshes in "
"PyVista which simply calls the ``.merge()`` filter to combine any two "
"meshes.  This is different from ``boolean_union`` as it simply superimposes "
"the two meshes without performing additional calculations on the result."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:55
msgid ""
"If your boolean operations don't react the way you think they should (i.e. "
"the wrong parts disappear), one of your meshes probably has its normals "
"pointing inward. Use :func:`pyvista.PolyDataFilters.plot_normals` to "
"visualize the normals."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:81
msgid "Boolean Union"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:83
msgid ""
"Perform a boolean union of ``A`` and ``B`` using the "
":func:`pyvista.PolyDataFilters.boolean_union` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:86
msgid ""
"The union of two manifold meshes ``A`` and ``B`` is the mesh which is in "
"``A``, in ``B``, or in both ``A`` and ``B``."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:89
msgid ""
"Order of operands does not matter for boolean union (the operation is "
"commutative)."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:121
msgid "Boolean Difference"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:123
msgid ""
"Perform a boolean difference of ``A`` and ``B`` using the "
":func:`pyvista.PolyDataFilters.boolean_difference` filter or the ``-`` "
"operator since both meshes are :class:`pyvista.PolyData`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:127
msgid ""
"The difference of two manifold meshes ``A`` and ``B`` is the volume of the "
"mesh in ``A`` not belonging to ``B``."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:130
msgid "Order of operands matters for boolean difference."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:161
msgid "Boolean Intersection"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:163
msgid ""
"Perform a boolean intersection of ``A`` and ``B`` using the "
":func:`pyvista.PolyDataFilters.boolean_intersection` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:166
msgid ""
"The intersection of two manifold meshes ``A`` and ``B`` is the mesh which is"
" the volume of ``A`` that is also in ``B``."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:169
msgid ""
"Order of operands does not matter for boolean intersection (the operation is"
" commutative)."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:201
msgid "Behavior due to flipped normals"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:202
msgid ""
"Note that these boolean filters behave differently depending on the "
"orientation of the normals."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:205
msgid ""
"Boolean difference with both cube and sphere normals pointed outward.  This "
"is the \"normal\" behavior."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:233
msgid "Boolean difference with cube normals outward, sphere inward."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:261
msgid "Boolean difference with cube normals inward, sphere outward."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:289
msgid "Both cube and sphere normals inward."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:317
msgid "**Total running time of the script:** ( 0 minutes  9.943 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:332
msgid ""
":download:`Download Python source code: boolean-operations.py <boolean-"
"operations.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/boolean-operations.rst:338
msgid ""
":download:`Download Jupyter notebook: boolean-operations.ipynb <boolean-"
"operations.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_cell-centers.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:24
#: ../../pyvista/doc/examples/index.rst:621
msgid "Extract Cell Centers"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:26
msgid "Extract the coordinates of the centers of all cells/faces in a mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:28
msgid "Here we use :func:`pyvista.DataSetFilters.cell_centers`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:47
msgid "First let's fetch the centers of a mesh with 2D geometries (a surface)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:83
msgid "We can also do this for full 3D meshes."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:142
msgid "**Total running time of the script:** ( 0 minutes  1.940 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:157
msgid ""
":download:`Download Python source code: cell-centers.py <cell-centers.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/cell-centers.rst:163
msgid ""
":download:`Download Jupyter notebook: cell-centers.ipynb <cell-"
"centers.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_clipping.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:24
#: ../../pyvista/doc/examples/index.rst:663
msgid "Clipping with Planes & Boxes"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:26
msgid "Clip/cut any dataset using using planes or boxes."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:45
msgid "Clip with Plane"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:47
msgid ""
"Clip any dataset by a user defined plane using the "
":func:`pyvista.DataSetFilters.clip` filter"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:80
msgid "Clip with Bounds"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:82
msgid ""
"Clip any dataset by a set of XYZ bounds using the "
":func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:116
msgid "Clip with Rotated Box"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:118
msgid ""
"Clip any dataset by an arbitrarily rotated solid box using the "
":func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:150
msgid "Run the box clipping algorithm"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:183
msgid "Crinkled Clipping"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:184
msgid ""
"Crinkled clipping is useful if you don’t want the clip filter to truly clip "
"cells on the boundary, but want to preserve the input cell structure and to "
"pass the entire cell on through the boundary."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:188
msgid ""
"This option is available for :func:`pyvista.DataSetFilters.clip`, "
":func:`pyvista.DataSetFilters.clip_box`, and "
":func:`pyvista.DataSetFilters.clip_sruface`, but not available when clipping"
" by scalar in :func:`pyvista.DataSetFilters.clip_scalar`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:210
msgid "Define clipping plane"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:228
msgid "Perform a standard clip"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:245
msgid "Perform a crinkled clip"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:262
msgid "Plot comparison"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:291
msgid "**Total running time of the script:** ( 0 minutes  3.563 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:306
msgid ":download:`Download Python source code: clipping.py <clipping.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping.rst:312
msgid ":download:`Download Jupyter notebook: clipping.ipynb <clipping.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_clipping-with-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:24
#: ../../pyvista/doc/examples/index.rst:642
msgid "Clipping with a Surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:26
msgid ""
"Clip any PyVista dataset by a :class:`pyvista.PolyData` surface mesh using "
"the :func:`pyvista.DataSetFilters.clip_surface` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:29
msgid ""
"Note that we first demonstrate how the clipping is performed by computing an"
" implicit distance and thresholding the mesh. This thresholding is one "
"approach to clip by a surface, and preserve the original geometry of the "
"given mesh, but many folks leverage the ``clip_surface`` filter to "
"triangulate/tessellate the mesh geometries along the clip."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:84
msgid ""
"Take a look at the implicit function used to perform the surface clipping by"
" using the :func:`pyvista.DataSetFilters.compute_implicit_distance` filter. "
"The clipping operation field is performed where the ``implicit_distance`` "
"field is zero and the ``invert`` flag controls which sides of zero to "
"preserve."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:158
msgid ""
"Clip the rectilinear grid dataset using the :class:`pyvista.PolyData` "
"surface mesh via the :func:`pyvista.DataSetFilters.clip_surface` filter. "
"This will triangulate/tessellate the mesh geometries along the clip."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:190
msgid ""
"Here is another example of clipping a mesh by a surface. This time, we'll "
"generate a :class:`pyvista.UniformGrid` around a topography surface and then"
" clip that grid using the surface to create a closed 3D model of the surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:223
msgid "**Total running time of the script:** ( 0 minutes  43.536 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:238
msgid ""
":download:`Download Python source code: clipping-with-surface.py <clipping-"
"with-surface.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/clipping-with-surface.rst:244
msgid ""
":download:`Download Jupyter notebook: clipping-with-surface.ipynb <clipping-"
"with-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_collisions.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:24
#: ../../pyvista/doc/examples/index.rst:684
msgid "Collision"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:25
msgid "Perform a collision detection between two meshes."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:27
msgid ""
"This example use the :class:`collision <pyvista.PolyDataFilters.collision>` "
"filter to detect the faces from one sphere colliding with another sphere."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:32
msgid ""
"Due to the nature of the `vtk.vtkCollisionDetectionFilter "
"<https://vtk.org/doc/nightly/html/classvtkCollisionDetectionFilter.html>`_, "
"repeated uses of this method will be slower that using the "
"``vtk.vtkCollisionDetectionFilter`` directly.  The first update of the "
"filter creates two instances of `vtkOBBTree "
"<https://vtk.org/doc/nightly/html/classvtkOBBTree.html>`_, which can be "
"subsequently updated by modifying the transform or matrix of the input "
"meshes."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:41
msgid ""
"This method assumes no transform and is easier to use for single collision "
"tests, but it is recommended to use a combination of ``pyvista`` and ``vtk``"
" for rapidly computing repeated collisions.  See the `Collision Detection "
"Example <https://kitware.github.io/vtk-"
"examples/site/Python/Visualization/CollisionDetection/>`_"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:68
msgid "Create the main mesh and the secondary \"moving\" mesh"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:70
msgid ""
"Collision faces will be plotted on this sphere, and to do so we initialize "
"an initial ``\"collisions\"`` mask."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:92
msgid ""
"Set up the plotter open a movie, and write a frame after moving the sphere."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:142
msgid "**Total running time of the script:** ( 0 minutes  10.534 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:157
msgid ":download:`Download Python source code: collisions.py <collisions.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/collisions.rst:163
msgid ""
":download:`Download Jupyter notebook: collisions.ipynb <collisions.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_compute-normals.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:24
#: ../../pyvista/doc/examples/index.rst:705
msgid "Computing Surface Normals"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:27
msgid "Compute normals on a surface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:47
msgid ""
"Computing the normals of a surface is quite easy using "
":class:`pyvista.PolyData`'s :func:`pyvista.PolyDataFilters.compute_normals` "
"method."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:73
msgid ""
"Now we have a surface dataset of the globe loaded - unfortunately, the "
"dataset shows the globe with a uniform radius which hides topographic "
"relief. Using :func:`pyvista.PolyData.compute_normals`, we can compute the "
"normal vectors on the globe at all points in the dataset, then use the "
"values given in the dataset to warp the surface in the normals direction to "
"create some exaggerated topographic relief."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:109
msgid ""
"We could also use face/cell normals to extract all the faces of a mesh "
"facing a general direction. In the following snippet, we take a mesh, "
"compute the normals along its cell faces, and extract the faces that face "
"upward."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:150
msgid "**Total running time of the script:** ( 0 minutes  19.910 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:165
msgid ""
":download:`Download Python source code: compute-normals.py <compute-"
"normals.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-normals.rst:171
msgid ""
":download:`Download Jupyter notebook: compute-normals.ipynb <compute-"
"normals.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_compute-volume.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:24
#: ../../pyvista/doc/examples/index.rst:726
msgid "Volumetric Analysis"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:27
msgid "Calculate mass properties such as the volume or area of datasets"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:48
msgid ""
"Computing mass properties such as the volume or area of datasets in PyVista "
"is quite easy using the :func:`pyvista.DataSetFilters.compute_cell_sizes` "
"filter and the :attr:`pyvista.DataSet.volume` property on all PyVista "
"meshes."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:52
msgid "Let's get started with a simple gridded mesh:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:72
msgid ""
"We can then calculate the volume of every cell in the array using the "
"``.compute_cell_sizes`` filter which will add arrays to the cell data of the"
" mesh core the volume and area by default."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:96
msgid ""
"We can also compute the total volume of the mesh using the ``.volume`` "
"property:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:116
msgid ""
"Okay awesome! But what if we have have a dataset that we threshold with two "
"volumetric bodies left over in one dataset? Take this for example:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:142
msgid ""
"We could then assign a classification array for the two bodies, compute the "
"cell sizes, then extract the volumes of each body. Note that there is a "
"simpler implementation of this below in :ref:`split_vol_ref`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:189
msgid ""
"Or better yet, you could simply extract the largest volume from your "
"thresholded dataset by passing ``largest=True`` to the ``connectivity`` "
"filter or by using ``extract_largest`` filter (both are equivalent)."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:228
msgid "Splitting Volumes"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:230
msgid ""
"What if instead, we wanted to split all the different connected bodies / "
"volumes in a dataset like the one above? We could use the "
":func:`pyvista.DataSetFilters.split_bodies` filter to extract all the "
"different connected volumes in a dataset into blocks in a "
":class:`pyvista.MultiBlock` dataset. For example, lets split the thresholded"
" volume in the example above:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:294
msgid "A Real Dataset"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:296
msgid ""
"Here is a realistic training dataset of fluvial channels in the subsurface. "
"This will threshold the channels from the dataset then separate each "
"significantly large body and compute the volumes for each!"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:300
msgid "Load up the data and threshold the channels:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:319
msgid "Now extract all the different bodies and compute their volumes:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:346
msgid "Print out the volumes for each body:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:393
msgid "And visualize all the different volumes:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:416
msgid "**Total running time of the script:** ( 0 minutes  13.171 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:431
msgid ""
":download:`Download Python source code: compute-volume.py <compute-"
"volume.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/compute-volume.rst:437
msgid ""
":download:`Download Jupyter notebook: compute-volume.ipynb <compute-"
"volume.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_connectivity.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:24
#: ../../pyvista/doc/examples/index.rst:747
msgid "Connectivity"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:26
msgid "Use the connectivity filter to remove noisy isosurfaces."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:28
msgid ""
"This example is very similar to `this VTK example "
"<https://kitware.github.io/vtk-"
"examples/site/Python/VisualizationAlgorithms/PineRootConnectivity/>`__"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:46
msgid "Load a dataset that has noisy isosurfaces"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:76
msgid ""
"The mesh plotted above is very noisy. We can extract the largest connected "
"isosurface in that mesh using the "
":func:`pyvista.DataSetFilters.connectivity` filter and passing "
"``largest=True`` to the ``connectivity`` filter or by using the "
":func:`pyvista.DataSetFilters.extract_largest` filter (both are equivalent)."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:111
msgid "**Total running time of the script:** ( 0 minutes  2.944 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:126
msgid ""
":download:`Download Python source code: connectivity.py <connectivity.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/connectivity.rst:132
msgid ""
":download:`Download Jupyter notebook: connectivity.ipynb "
"<connectivity.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_contouring.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:24
#: ../../pyvista/doc/examples/index.rst:768
msgid "Contouring"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:26
msgid ""
"Generate iso-lines or -surfaces for the scalars of a surface or volume."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:28
msgid ""
"3D meshes can have 2D iso-surfaces of a scalar field extracted and 2D "
"surface meshes can have 1D iso-lines of a scalar field extracted."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:50
msgid "Iso-Lines"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:52
msgid "Let's extract 1D iso-lines of a scalar field from a 2D surface mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:83
msgid "Iso-Surfaces"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:85
msgid "Let's extract 2D iso-surfaces of a scalar field from a 3D mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:119
msgid "**Total running time of the script:** ( 0 minutes  5.551 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:134
msgid ":download:`Download Python source code: contouring.py <contouring.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/contouring.rst:140
msgid ""
":download:`Download Jupyter notebook: contouring.ipynb <contouring.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_decimate.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:24
#: ../../pyvista/doc/examples/index.rst:789
msgid "Decimation"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:26
msgid "Decimate a mesh"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:58
msgid ""
"Now let's define a target reduction and compare the "
":func:`pyvista.PolyData.decimate` and :func:`pyvista.PolyData.decimate_pro` "
"filters."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:128
msgid "Side by side comparison:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:167
msgid "**Total running time of the script:** ( 0 minutes  1.731 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:182
msgid ":download:`Download Python source code: decimate.py <decimate.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/decimate.rst:188
msgid ":download:`Download Jupyter notebook: decimate.ipynb <decimate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_distance-between-"
"surfaces.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:22
#: ../../pyvista/doc/examples/index.rst:810
msgid "Distance Between Two Surfaces"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:24
msgid "Compute the average thickness between two surfaces."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:26
msgid ""
"For example, you might have two surfaces that represent the boundaries of "
"lithological layers in a subsurface geological model and you want to know "
"the average thickness of a unit between those boundaries."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:30
msgid ""
"A clarification on terminology in this example is important.  A mesh point "
"exists on the vertex of each cell on the mesh.  See :ref:`what_is_a_mesh`. "
"Each cell in this example encompasses a 2D region of space which contains an"
" infinite number of spatial points; these spatial points are not mesh "
"points. The distance between two surfaces can mean different things "
"depending on context and usage.  Each example here explores different "
"aspects of the distance from the vertex points of the bottom mesh to the top"
" mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:38
msgid ""
"First, we will demo a method where we compute the normals on the vertex "
"points of the bottom surface, and then project a ray to the top surface to "
"compute the distance along the surface normals. This ray will usually "
"intersect the top surface at a spatial point inside a cell of the mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:43
msgid ""
"Second, we will use a KDTree to compute the distance from every vertex point"
" in the bottom mesh to its closest vertex point in the top mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:46
msgid ""
"Lastly, we will use a PyVista filter, "
":func:`pyvista.DataSet.find_closest_cell` to calculate the distance from "
"every vertex point in the bottom mesh to the closest spatial point inside a "
"cell of the top mesh.  This will be the shortest distance from the vertex "
"point to the top surface, unlike the first two examples."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:107
msgid "Ray Tracing Distance"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:109
msgid "Compute normals of lower surface at vertex points"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:126
msgid ""
"Travel along normals to the other surface and compute the thickness on each "
"vector."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:189
msgid "Nearest Neighbor Distance"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:191
msgid ""
"You could also use a KDTree to compare the distance between each vertex "
"point of the upper surface and the nearest neighbor vertex point of the "
"lower surface. This will be noticeably faster than a ray trace, especially "
"for large surfaces."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:248
msgid "Using PyVista Filter"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:250
msgid ""
"The :func:`pyvista.DataSet.find_closest_cell` filter returns the spatial "
"points inside the cells of the top surface that are closest to the vertex "
"points of the bottom surface.  ``closest_points`` is returned when using "
"``return_closest_point=True``."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:283
msgid ""
"As expected there is only a small difference between this method and the "
"KDTree method."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:310
msgid "**Total running time of the script:** ( 0 minutes  2.991 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:325
msgid ""
":download:`Download Python source code: distance-between-surfaces.py "
"<distance-between-surfaces.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/distance-between-surfaces.rst:331
msgid ""
":download:`Download Jupyter notebook: distance-between-surfaces.ipynb "
"<distance-between-surfaces.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_extract-cells-inside-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:22
#: ../../pyvista/doc/examples/index.rst:831
msgid "Extract Cells Inside Surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:24
msgid ""
"Extract the cells in a mesh that exist inside or outside a closed surface of"
" another mesh"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:64
msgid "Mark points inside with 1 and outside with a 0"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:78
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>3263</td></tr>\n"
"<tr><td>N Points</td><td>2903</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.446e+00, 5.998e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.637e+00, 2.760e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-1.701e+00, 1.701e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>SelectedPoints</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:105
msgid ""
"Extract two meshes, one completely inside and one completely outside the "
"enclosing surface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:125
msgid "display the results"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:154
msgid "**Total running time of the script:** ( 0 minutes  1.369 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:169
msgid ""
":download:`Download Python source code: extract-cells-inside-surface.py "
"<extract-cells-inside-surface.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-cells-inside-surface.rst:175
msgid ""
":download:`Download Jupyter notebook: extract-cells-inside-surface.ipynb "
"<extract-cells-inside-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_extract-edges.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:24
#: ../../pyvista/doc/examples/index.rst:852
msgid "Extract Edges"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:26
msgid "Extract edges from a surface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:45
msgid "From vtk documentation, the edges of a mesh are one of the following:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:47
msgid "boundary (used by one polygon) or a line cell"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:48
msgid "non-manifold (used by three or more polygons)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:49
msgid ""
"feature edges (edges used by two triangles and whose dihedral angle > "
"feature_angle)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:50
msgid "manifold edges (edges used by exactly two polygons)."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:52
msgid ""
"The :func:`extract_feature_edges() "
"<pyvista.PolyDataFilters.extract_feature_edges>` filter will extract those "
"edges given a feature angle and return a dataset with lines that represent "
"the edges of the original mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:56
msgid ""
"To demonstrate, we will first extract the edges around a sample CAD model:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:89
msgid ""
"We can do this analysis for any :class:`pyvista.PolyData` object. Let's try "
"the cow mesh example:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:121
msgid ""
"We can leverage the :any:`pyvista.PolyData.n_open_edges` property and "
":func:`pyvista.PolyDataFilters.extract_feature_edges` filter to count and "
"extract the open edges on a :class:`pyvista.PolyData` mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:139
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>69451</td></tr>\n"
"<tr><td>N Points</td><td>35947</td></tr>\n"
"<tr><td>X Bounds</td><td>-9.469e-02, 6.101e-02</td></tr>\n"
"<tr><td>Y Bounds</td><td>3.299e-02, 1.873e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-6.187e-02, 5.880e-02</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:160
msgid "We can get a count of the open edges with:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:186
msgid ""
"And we can extract those edges with the ``boundary_edges`` option of "
":func:`pyvista.PolyDataFilters.extract_feature_edges`:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:215
msgid "**Total running time of the script:** ( 0 minutes  3.395 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:230
msgid ""
":download:`Download Python source code: extract-edges.py <extract-edges.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-edges.rst:236
msgid ""
":download:`Download Jupyter notebook: extract-edges.ipynb <extract-"
"edges.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_extract-surface.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:24
#: ../../pyvista/doc/examples/index.rst:873
msgid "Extract Surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:26
msgid ""
"You can extract the surface of nearly any object within ``pyvista`` using "
"the ``extract_surface`` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:50
msgid "Create a quadratic cell and extract its surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:51
msgid ""
"Here we create a single quadratic hexahedral cell and then extract its "
"surface to demonstrate how to extract the surface of an UnstructuredGrid."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:135
msgid "Nonlinear Surface Subdivision"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:136
msgid ""
"Should your UnstructuredGrid contain quadratic cells, you can generate a "
"smooth surface based on the position of the \"mid-edge\" nodes.  This allows"
" the plotting of cells containing curvature.  For additional reference, "
"please see: https://prod.sandia.gov/techlib-noauth/access-"
"control.cgi/2004/041617.pdf"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:164
msgid "**Total running time of the script:** ( 0 minutes  0.754 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:179
msgid ""
":download:`Download Python source code: extract-surface.py <extract-"
"surface.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extract-surface.rst:185
msgid ""
":download:`Download Jupyter notebook: extract-surface.ipynb <extract-"
"surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_extrude-rotate.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:22
#: ../../pyvista/doc/examples/index.rst:894
msgid "Extrude Rotation"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:23
msgid ""
"Sweep polygonal data creating \"skirt\" from free edges and lines, and lines"
" from vertices."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:26
msgid ""
"This takes polygonal data as input and generates polygonal data on output. "
"The input dataset is swept around the z-axis to create new polygonal "
"primitives. These primitives form a \"skirt\" or swept surface. For example,"
" sweeping a line results in a cylindrical shell, and sweeping a circle "
"creates a torus."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:51
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>2</td></tr>\n"
"<tr><td>N Points</td><td>33</td></tr>\n"
"<tr><td>X Bounds</td><td>-1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-9.511e-01, 9.511e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"<tr><td><b>Distance</b></td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:80
msgid "Plot the extruded line"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:124
msgid "Create a spring"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:170
msgid "**Total running time of the script:** ( 0 minutes  0.899 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:185
msgid ""
":download:`Download Python source code: extrude-rotate.py <extrude-"
"rotate.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/extrude-rotate.rst:191
msgid ""
":download:`Download Jupyter notebook: extrude-rotate.ipynb <extrude-"
"rotate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_flying_edges.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:24
#: ../../pyvista/doc/examples/index.rst:915
msgid "Marching Cubes"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:26
msgid ""
"Generate a surface from a scalar field using the flying edges and marching "
"cubes filters as provided by the :func:`contour "
"<pyvista.DataSetFilters.contour>` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:30
msgid ""
"Special thanks to GitHub user `stla <https://gist.github.com/stla>`_ for "
"providing examples."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:51
msgid "Spider Cage"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:52
msgid ""
"Use the marching cubes algorithm to extract the isosurface generated from "
"the spider cage function."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:104
msgid "Barth Sextic"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:105
msgid ""
"Use the flying edges algorithm to extract the isosurface generated from the "
"Barth sextic function."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:164
msgid "Animate Barth Sextic"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:165
msgid ""
"Show 15 frames of various isocurves extracted from the Barth sextic "
"function."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:215
msgid "**Total running time of the script:** ( 0 minutes  6.701 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:230
msgid ""
":download:`Download Python source code: flying_edges.py <flying_edges.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/flying_edges.rst:236
msgid ""
":download:`Download Jupyter notebook: flying_edges.ipynb "
"<flying_edges.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_gaussian-"
"smoothing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:24
#: ../../pyvista/doc/examples/index.rst:936
msgid "Gaussian Smoothing"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:26
msgid "Perform a Gaussian convolution on a uniformly gridded data set."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:28
msgid ""
":class:`pyvista.UniformGrid` data sets (a.k.a. images) a can be smoothed by "
"convolving the image data set with a Gaussian for one- to three-dimensional "
"inputs. This is commonly referred to as Gaussian blurring and typically used"
" to reduce noise or decrease the detail of an image dataset."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:33
msgid "See also :func:`pyvista.UniformGrid.gaussian_smooth`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:57
msgid ""
"Let's apply the gaussian smoothing with different values of standard "
"deviation."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:105
#: ../../pyvista/doc/examples/02-plot/volume.rst:24
#: ../../pyvista/doc/examples/index.rst:2244
msgid "Volume Rendering"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:106
msgid "Now let's see an example on a 3D dataset with volume rendering:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:148
msgid "**Total running time of the script:** ( 0 minutes  9.240 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:163
msgid ""
":download:`Download Python source code: gaussian-smoothing.py <gaussian-"
"smoothing.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gaussian-smoothing.rst:169
msgid ""
":download:`Download Jupyter notebook: gaussian-smoothing.ipynb <gaussian-"
"smoothing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_geodesic.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:24
#: ../../pyvista/doc/examples/index.rst:957
msgid "Geodesic Paths"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:26
msgid ""
"Calculates the geodesic path between two vertices using Dijkstra's algorithm"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:47
msgid "Get the geodesic path as a new :class:`pyvista.PolyData` object:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:71
msgid "Render the path along the land surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:104
msgid "How long is that path?"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:130
msgid "**Total running time of the script:** ( 0 minutes  16.084 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:145
msgid ":download:`Download Python source code: geodesic.py <geodesic.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/geodesic.rst:151
msgid ":download:`Download Jupyter notebook: geodesic.ipynb <geodesic.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_glyphs.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:24
#: ../../pyvista/doc/examples/index.rst:978
msgid "Plotting Glyphs (Vectors or PolyData)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:26
msgid "Use vectors in a dataset to plot and orient glyphs/geometric objects."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:47
msgid ""
"Glyphying can be done via the :func:`pyvista.DataSetFilters.glyph` filter"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:89
msgid ""
"Another approach is to load the vectors directly to the mesh object and then"
" access the :attr:`pyvista.DataSet.arrows` property."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:129
msgid "Plot the arrows and the sphere."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:157
msgid "Subset of Glyphs"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:159
msgid ""
"Sometimes you might not want glyphs for every node in the input dataset. In "
"this case, you can choose to build glyphs for a subset of the input dataset "
"by using a merging tolerance. Here we specify a merging tolerance of five "
"percent which equates to five percent of the bounding box's length."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:194
msgid "**Total running time of the script:** ( 0 minutes  3.501 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:209
msgid ":download:`Download Python source code: glyphs.py <glyphs.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs.rst:215
msgid ":download:`Download Jupyter notebook: glyphs.ipynb <glyphs.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_glyphs_table.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:24
#: ../../pyvista/doc/examples/index.rst:999
msgid "Table of Glyphs"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:26
msgid ""
"``vtk`` supports tables of glyphs from which glyphs are looked up. This "
"example demonstrates this functionality."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:47
msgid ""
"We can allow tables of glyphs in a backward-compatible way by allowing a "
"sequence of geometries as well as single (scalar) geometries to be passed as"
" the ``geom`` kwarg of :func:`pyvista.DataSetFilters.glyph`. An ``indices`` "
"optional keyword specifies the index of each glyph geometry in the table, "
"and it has to be the same length as ``geom`` if specified. If it is absent a"
" default value of ``range(len(geom))`` is assumed."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:113
msgid "**Total running time of the script:** ( 0 minutes  1.763 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:128
msgid ""
":download:`Download Python source code: glyphs_table.py <glyphs_table.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/glyphs_table.rst:134
msgid ""
":download:`Download Jupyter notebook: glyphs_table.ipynb "
"<glyphs_table.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_gradients.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:24
#: ../../pyvista/doc/examples/index.rst:1020
msgid "Compute Gradients of a Field"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:26
msgid "Estimate the gradient of a scalar or vector field in a data set."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:28
msgid ""
"The ordering for the output gradient tuple will be {du/dx, du/dy, du/dz, "
"dv/dx, dv/dy, dv/dz, dw/dx, dw/dy, dw/dz} for an input array {u, v, w}."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:32
msgid "Showing the :func:`pyvista.DataSetFilters.compute_derivative` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:52
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>158400</td></tr>\n"
"<tr><td>N Points</td><td>167580</td></tr>\n"
"<tr><td>X Bounds</td><td>1.000e+02, 1.750e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.000e+01, 1.280e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.000e+00, 4.500e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>76, 49, 45</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>5.800e+02</td></tr>\n"
"<tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-2.263e+01</td><td>1.662e+01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:82
msgid ""
"Now compute the gradients of the ``vectors`` vector field in the point data "
"of that mesh. This is as simple as calling "
":func:`pyvista.DataSetFilters.compute_derivative`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:122
msgid ""
"You can also use :func:`pyvista.DataSetFilters.compute_derivative` for "
"computing other derivative based quantities, such as divergence, vorticity, "
"and Q-criterion. See function documentation for options."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:128
msgid ""
"``mesh_g[\"gradient\"]`` is an ``N`` by 9 NumPy array of the gradients, so "
"we could make a dictionary of NumPy arrays of the gradients like:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:175
msgid ""
"And we can add all of those components as individual arrays back to the mesh"
" by:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:190
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>158400</td></tr>\n"
"<tr><td>N Points</td><td>167580</td></tr>\n"
"<tr><td>X Bounds</td><td>1.000e+02, 1.750e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.000e+01, 1.280e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.000e+00, 4.500e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>76, 49, 45</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>12</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>scalars</td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>5.800e+02</td></tr>\n"
"<tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-2.263e+01</td><td>1.662e+01</td></tr>\n"
"<tr><td>gradient</td><td>Points</td><td>float32</td><td>9</td><td>-1.585e+01</td><td>1.536e+01</td></tr>\n"
"<tr><td>du/dx</td><td>Points</td><td>float32</td><td>1</td><td>-8.293e+00</td><td>8.336e+00</td></tr>\n"
"<tr><td>du/dy</td><td>Points</td><td>float32</td><td>1</td><td>-1.084e+01</td><td>8.334e+00</td></tr>\n"
"<tr><td>du/dz</td><td>Points</td><td>float32</td><td>1</td><td>-8.300e+00</td><td>8.317e+00</td></tr>\n"
"<tr><td>dv/dx</td><td>Points</td><td>float32</td><td>1</td><td>-1.133e+01</td><td>1.536e+01</td></tr>\n"
"<tr><td>dv/dy</td><td>Points</td><td>float32</td><td>1</td><td>-1.585e+01</td><td>1.170e+01</td></tr>\n"
"<tr><td>dv/dz</td><td>Points</td><td>float32</td><td>1</td><td>-1.131e+01</td><td>7.459e+00</td></tr>\n"
"<tr><td>dw/dx</td><td>Points</td><td>float32</td><td>1</td><td>-8.738e+00</td><td>1.212e+01</td></tr>\n"
"<tr><td>dw/dy</td><td>Points</td><td>float32</td><td>1</td><td>-8.734e+00</td><td>8.740e+00</td></tr>\n"
"<tr><td><b>dw/dz</b></td><td>Points</td><td>float32</td><td>1</td><td>-1.124e+01</td><td>8.728e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:261
msgid ""
"And there you have it, the gradients for a vector field! We could also do "
"this for a scalar  field like for the ``scalars`` field in the given "
"dataset."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:323
msgid "**Total running time of the script:** ( 0 minutes  2.083 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:338
msgid ":download:`Download Python source code: gradients.py <gradients.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/gradients.rst:344
msgid ""
":download:`Download Jupyter notebook: gradients.ipynb <gradients.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_interpolate.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:24
#: ../../pyvista/doc/examples/index.rst:1041
msgid "Interpolating"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:26
msgid ""
"Interpolate one mesh's point/cell arrays onto another mesh's nodes using a "
"Gaussian Kernel."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:46
msgid "Simple Surface Interpolation"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:47
msgid "Resample the points' arrays onto a surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:77
msgid "Run the interpolation"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:108
msgid "Complex Interpolation"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:109
msgid ""
"In this example, we will in interpolate sparse points in 3D space into a "
"volume. These data are from temperature probes in the subsurface and the "
"goal is to create an approximate 3D model of the temperature field in the "
"subsurface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:114
msgid ""
"This approach is a great for back-of-the-hand estimations but pales in "
"comparison to kriging"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:134
msgid "Create the interpolation grid around the sparse data"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:183
msgid "Run an interpolation"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:200
msgid "Visualize the results"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:231
msgid "**Total running time of the script:** ( 0 minutes  9.628 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:246
msgid ""
":download:`Download Python source code: interpolate.py <interpolate.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/interpolate.rst:252
msgid ""
":download:`Download Jupyter notebook: interpolate.ipynb <interpolate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_mesh-quality.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:24
#: ../../pyvista/doc/examples/index.rst:1062
msgid "Computing Mesh Quality"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:26
msgid "Leverage powerful VTK algorithms for computing mesh quality."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:28
msgid ""
"Here we will use the :func:`pyvista.DataSetFilters.compute_cell_quality` "
"filter to compute the cell qualities. For a full list of the various quality"
" metrics available, please refer to the documentation for that filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:55
msgid ""
"Compute the cell quality. Note that there are many different quality "
"measures"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:69
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1740</td></tr>\n"
"<tr><td>N Points</td><td>871</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.389e+00, 6.005e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.648e+00, 2.761e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-1.701e+00, 1.701e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>CellQuality</b></td><td>Cells</td><td>float64</td><td>1</td><td>6.197e-02</td><td>9.911e-01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:114
msgid "**Total running time of the script:** ( 0 minutes  0.550 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:129
msgid ""
":download:`Download Python source code: mesh-quality.py <mesh-quality.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/mesh-quality.rst:135
msgid ""
":download:`Download Jupyter notebook: mesh-quality.ipynb <mesh-"
"quality.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_poly-ray-trace.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:24
#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:22
#: ../../pyvista/doc/examples/index.rst:1083
#: ../../pyvista/doc/examples/index.rst:2748
msgid "Ray Tracing"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:26
#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:24
msgid "Single line segment ray tracing for PolyData objects."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:71
#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:109
msgid "**Total running time of the script:** ( 0 minutes  0.484 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:86
msgid ""
":download:`Download Python source code: poly-ray-trace.py <poly-ray-"
"trace.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/poly-ray-trace.rst:92
msgid ""
":download:`Download Jupyter notebook: poly-ray-trace.ipynb <poly-ray-"
"trace.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_project-plane.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:22
#: ../../pyvista/doc/examples/index.rst:1104
msgid "Project to a Plane"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:24
msgid ""
":class:`pyvista.PolyData` surfaces and pointsets can easily be projected to "
"a plane defined by a normal and origin"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:53
msgid "Project that surface to a plane underneath the surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:83
msgid "**Total running time of the script:** ( 0 minutes  1.268 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:98
msgid ""
":download:`Download Python source code: project-plane.py <project-plane.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/project-plane.rst:104
msgid ""
":download:`Download Jupyter notebook: project-plane.ipynb <project-"
"plane.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_reflect.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:24
#: ../../pyvista/doc/examples/index.rst:1125
msgid "Reflect Meshes"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:26
msgid "This example reflects a mesh across a plane."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:45
msgid "This example demonstrates how to reflect a mesh across a plane."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:47
msgid "Load an example mesh:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:64
msgid ""
"Reflect the mesh across a plane parallel to Z plane and coincident with (0, "
"0, -100)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:82
msgid "Plot the reflected mesh:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:107
msgid "**Total running time of the script:** ( 0 minutes  0.352 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:122
msgid ":download:`Download Python source code: reflect.py <reflect.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/reflect.rst:128
msgid ":download:`Download Jupyter notebook: reflect.ipynb <reflect.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_resample.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:24
#: ../../pyvista/doc/examples/index.rst:1146
msgid "Resampling"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:26
msgid "Resample one mesh's point/cell arrays onto another mesh's nodes."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:30
msgid ""
"This example will resample a volumetric mesh's  scalar data onto the surface"
" of a sphere contained in that volume."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:51
msgid "Simple Resample"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:52
msgid "Query a grids points onto a sphere"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:70
msgid "Plot the two datasets"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:95
msgid "Run the algorithm and plot the result"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:122
msgid "Complex Resample"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:123
msgid ""
"Take a volume of data and create a grid of lower resolution to resample on"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:175
msgid "**Total running time of the script:** ( 0 minutes  7.645 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:190
msgid ":download:`Download Python source code: resample.py <resample.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/resample.rst:196
msgid ":download:`Download Jupyter notebook: resample.ipynb <resample.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_rotate.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:24
#: ../../pyvista/doc/examples/index.rst:1167
msgid "Rotations"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:26
msgid ""
"Rotations of a mesh about its axes. In this model, the x axis is from the "
"left to right; the y axis is from bottom to top; and the z axis emerges from"
" the image. The camera location is the same in all four images."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:47
msgid "Define camera and axes"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:49
msgid "Define camera and axes. Setting axes origin to ``(3.0, 3.0, 3.0)``."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:76
msgid "Original Mesh"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:78
msgid "Plot original mesh. Add axes actor to Plotter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:109
msgid "Rotation about the x axis"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:111
msgid ""
"Plot the mesh rotated about the x axis every 60 degrees. Add the axes actor "
"to the Plotter and set the axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:146
msgid "Rotation about the y axis"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:148
msgid ""
"Plot the mesh rotated about the y axis every 60 degrees. Add the axes actor "
"to the Plotter and set the axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:183
msgid "Rotation about the z axis"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:185
msgid ""
"Plot the mesh rotated about the z axis every 60 degrees. Add axes actor to "
"the Plotter and set the axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:220
msgid "Rotation about a custom vector"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:222
msgid ""
"Plot the mesh rotated about a custom vector every 60 degrees. Add the axes "
"actor to the Plotter and set axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:265
msgid "**Total running time of the script:** ( 0 minutes  2.258 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:280
msgid ":download:`Download Python source code: rotate.py <rotate.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/rotate.rst:286
msgid ":download:`Download Jupyter notebook: rotate.ipynb <rotate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_examples_01-filter_sampling_functions_2d.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:22
#: ../../pyvista/doc/examples/index.rst:1188
msgid "Sample Function: Perlin Noise in 2D"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:23
#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:23
msgid ""
"Here we use :func:`pyvista.core.imaging.sample_function` to sample Perlin "
"noise over a region to generate random terrain."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:26
msgid ""
"Perlin noise is atype of gradient noise often used by visual effects artists"
" to increase the appearance of realism in computer graphics. Source: "
"https://en.wikipedia.org/wiki/Perlin_noise"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:31
msgid ""
"The development of Perlin Noise has allowed computer graphics artists to "
"better represent the complexity of natural phenomena in visual effects for "
"the motion picture industry."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:52
msgid "Generate Perlin Noise over a StructuredGrid"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:53
msgid ""
"Feel free to change the values of ``freq`` to change the shape of the "
"\"mountains\".  For example, lowering the frequency will make the terrain "
"seem more like hills rather than mountains."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:76
msgid "Warp by scalar"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:77
msgid ""
"Here we warp by scalar to give the terrain some height based on the value of"
" the Perlin noise.  This is necessary to the terrain its shape."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:110
msgid "Show the terrain as a contour plot"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:148
msgid "Show the terrain with custom lighting and shadows"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:175
msgid "**Total running time of the script:** ( 0 minutes  3.397 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:190
msgid ""
":download:`Download Python source code: sampling_functions_2d.py "
"<sampling_functions_2d.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_2d.rst:196
msgid ""
":download:`Download Jupyter notebook: sampling_functions_2d.ipynb "
"<sampling_functions_2d.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_examples_01-filter_sampling_functions_3d.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:22
#: ../../pyvista/doc/examples/index.rst:1209
msgid "Sample Function: Perlin Noise in 3D"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:26
msgid ""
"Video games like Minecraft use Perlin noise to create terrain.  Here, we "
"create a voxelized mesh similar to a Minecraft \"cave\"."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:46
msgid "Generate Perlin Noise over a 3D StructuredGrid"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:47
msgid ""
"Feel free to change the values of ``freq`` to change the shape of the "
"\"caves\".  For example, lowering the frequency will make the caves larger "
"and more expansive, while a higher frequency in any direction will make the "
"caves appear more \"vein-like\" and less open."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:52
msgid ""
"Change the threshold to reduce or increase the percent of the terrain that "
"is open or closed"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:71
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>109863</td></tr>\n"
"<tr><td>N Points</td><td>121638</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 3.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float64</td><td>1</td><td>-6.143e-02</td><td>9.082e-01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:98
msgid "color limits without blue"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:130
msgid "**Total running time of the script:** ( 0 minutes  0.677 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:145
msgid ""
":download:`Download Python source code: sampling_functions_3d.py "
"<sampling_functions_3d.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sampling_functions_3d.rst:151
msgid ""
":download:`Download Jupyter notebook: sampling_functions_3d.ipynb "
"<sampling_functions_3d.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:8
msgid "**00:09.240** total execution time for **examples_01-filter** files:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:11
msgid ""
":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py` (``gaussian-"
"smoothing.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:11
msgid "00:09.240"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_01-filter_boolean-operations.py` (``boolean-"
"operations.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_01-filter_cell-centers.py` (``cell-centers.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:17
msgid ""
":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py` (``clipping-"
"with-surface.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py` (``clipping.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_01-filter_collisions.py` (``collisions.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_01-filter_compute-normals.py` (``compute-"
"normals.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:25
msgid ""
":ref:`sphx_glr_examples_01-filter_compute-volume.py` (``compute-volume.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:27
msgid ""
":ref:`sphx_glr_examples_01-filter_connectivity.py` (``connectivity.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py` (``contouring.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py` (``decimate.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:33
msgid ""
":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py` (``distance-"
"between-surfaces.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py` "
"(``extract-cells-inside-surface.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:37
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-edges.py` (``extract-edges.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:39
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-surface.py` (``extract-"
"surface.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_01-filter_extrude-rotate.py` (``extrude-rotate.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:43
msgid ""
":ref:`sphx_glr_examples_01-filter_flying_edges.py` (``flying_edges.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:45
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py` (``geodesic.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py` (``glyphs.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:49
msgid ""
":ref:`sphx_glr_examples_01-filter_glyphs_table.py` (``glyphs_table.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:51
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py` (``gradients.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_01-filter_interpolate.py` (``interpolate.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:55
msgid ""
":ref:`sphx_glr_examples_01-filter_mesh-quality.py` (``mesh-quality.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:57
msgid ""
":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py` (``poly-ray-trace.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_01-filter_project-plane.py` (``project-plane.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:61
msgid ":ref:`sphx_glr_examples_01-filter_reflect.py` (``reflect.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:63
msgid ":ref:`sphx_glr_examples_01-filter_resample.py` (``resample.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:65
msgid ":ref:`sphx_glr_examples_01-filter_rotate.py` (``rotate.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:67
msgid ""
":ref:`sphx_glr_examples_01-filter_sampling_functions_2d.py` "
"(``sampling_functions_2d.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:69
msgid ""
":ref:`sphx_glr_examples_01-filter_sampling_functions_3d.py` "
"(``sampling_functions_3d.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:71
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py` (``slicing.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:73
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py` (``streamlines.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:75
msgid ""
":ref:`sphx_glr_examples_01-filter_streamlines_2D.py` (``streamlines_2D.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:77
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py` (``subdivide.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:79
msgid ""
":ref:`sphx_glr_examples_01-filter_surface-smoothing.py` (``surface-"
"smoothing.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:81
msgid ""
":ref:`sphx_glr_examples_01-filter_surface_reconstruction.py` "
"(``surface_reconstruction.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:83
msgid ""
":ref:`sphx_glr_examples_01-filter_using-filters.py` (``using-filters.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:85
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py` (``voxelize.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/sg_execution_times.rst:87
msgid ""
":ref:`sphx_glr_examples_01-filter_warp-by-vector.py` (``warp-by-vector.py``)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_slicing.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:24
#: ../../pyvista/doc/examples/index.rst:1230
msgid "Slicing"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:26
msgid "Extract thin planar slices from a volume."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:47
msgid ""
"PyVista meshes have several slicing filters bound directly to all datasets. "
"These filters allow you to slice through a volumetric dataset to extract and"
" view sections through the volume of data."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:51
msgid ""
"One of the most common slicing filters used in PyVista is the "
":func:`pyvista.DataSetFilters.slice_orthogonal` filter which creates three "
"orthogonal slices through the dataset parallel to the three Cartesian "
"planes. For example, let's slice through the sample geostatistical training "
"image volume. First, load up the volume and preview it:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:83
msgid ""
"Note that this dataset is a 3D volume and there might be regions within this"
" volume that we would like to inspect. We can create slices through the mesh"
" to gain further insight about the internals of the volume."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:111
msgid "The orthogonal slices can be easily translated throughout the volume:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:134
msgid ""
"We can also add just a single slice of the volume by specifying the origin "
"and normal of the slicing plane with the "
":func:`pyvista.DataSetFilters.slice` filter:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:164
msgid ""
"Adding slicing planes uniformly across an axial direction can also be "
"automated with the :func:`pyvista.DataSetFilters.slice_along_axis` filter:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:192
msgid "Slice Along Line"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:194
msgid ""
"We can also slice a dataset along a :func:`pyvista.Spline` or "
":func:`pyvista.Line` using the :func:`DataSetFilters.slice_along_line` "
"filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:197
msgid ""
"First, define a line source through the dataset of interest. Please note "
"that this type of slicing is computationally expensive and might take a "
"while if there are a lot of points in the line - try to keep the resolution "
"of the line low."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:229
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>15</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.475e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.400e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.000e+00, 1.100e+01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>arc_length</td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>3.605e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:256
msgid "Then run the filter"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:270
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>49100</td></tr>\n"
"<tr><td>N Points</td><td>49692</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.415e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>facies</b></td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>4.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:321
msgid "Multiple Slices in Vector Direction"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:323
msgid "Slice a mesh along a vector direction perpendicularly."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:384
msgid "Slice At Different Bearings"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:386
msgid ""
"From `pyvista-support#23 <https://github.com/pyvista/pyvista-"
"support/issues/23>`_"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:388
msgid ""
"An example of how to get many slices at different bearings all centered "
"around a user-chosen location."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:391
msgid "Create a point to orient slices around"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:409
msgid ""
"Now generate a few normal vectors to rotate a slice around the z-axis. Use "
"equation for circle since its about the Z-axis."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:430
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Information</th><th>Blocks</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>MultiBlock</th><th>Values</th></tr>\n"
"<tr><td>N Blocks</td><td>6</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000, 250.000</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000, 250.000</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000, 100.000</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Index</th><th>Name</th><th>Type</th></tr>\n"
"<tr><th>0</th><th>Bearing: 0.00</th><th>PolyData</th></tr>\n"
"<tr><th>1</th><th>Bearing: 30.00</th><th>PolyData</th></tr>\n"
"<tr><th>2</th><th>Bearing: 60.00</th><th>PolyData</th></tr>\n"
"<tr><th>3</th><th>Bearing: 90.00</th><th>PolyData</th></tr>\n"
"<tr><th>4</th><th>Bearing: 120.00</th><th>PolyData</th></tr>\n"
"<tr><th>5</th><th>Bearing: 150.00</th><th>PolyData</th></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:460
msgid "And now display it!"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:485
msgid "**Total running time of the script:** ( 0 minutes  23.130 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:500
msgid ":download:`Download Python source code: slicing.py <slicing.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/slicing.rst:506
msgid ":download:`Download Jupyter notebook: slicing.ipynb <slicing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_streamlines.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:24
#: ../../pyvista/doc/examples/index.rst:1251
msgid "Streamlines"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:26
msgid "Integrate a vector field to generate streamlines."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:30
msgid ""
"This example generates streamlines of blood velocity. An isosurface of speed"
" provides context. The starting positions for the streamtubes were "
"determined by experimenting with the data."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:54
msgid "Carotid"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:55
msgid ""
"Download a sample dataset containing a vector field that can be integrated."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:73
msgid ""
"Run the stream line filtering algorithm using random seed points inside a "
"sphere with radius of 2.0."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:100
msgid ""
"Display the results! Please note that because this dataset's velocity field "
"was measured with low resolution, many streamlines travel outside the "
"artery."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:132
msgid "Blood Vessels"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:133
msgid "Here is another example of blood flow:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:183
msgid ""
"A source mesh can also be provided using the "
":func:`pyvista.DataSetFilters.streamlines_from_source` filter, for example "
"if an inlet surface is available.  In this example, the inlet surface is "
"extracted just inside the domain for use as the seed for the streamlines."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:220
msgid "Plot streamlines colored by the time along the streamlines."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:257
msgid "Kitchen"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:316
msgid "Custom 3D Vector Field"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:381
msgid "**Total running time of the script:** ( 0 minutes  14.408 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:396
msgid ""
":download:`Download Python source code: streamlines.py <streamlines.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines.rst:402
msgid ""
":download:`Download Jupyter notebook: streamlines.ipynb <streamlines.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_streamlines_2D.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:24
#: ../../pyvista/doc/examples/index.rst:1272
msgid "2D Streamlines"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:26
msgid "Integrate a vector field to generate streamlines on a 2D surface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:42
msgid ""
"This example generates streamlines of flow around a cylinder in cross flow."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:61
msgid ""
"The data is multiblock with the fluid data as the first block. The data lies"
" in the `xy` plane, i.e. `z=0`, with no `z` velocity."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:97
msgid ""
"The default behavior of the :func:`streamlines() "
"<pyvista.DataSetFilters.streamlines>` filter is to use a 3D sphere source as"
" the seed points.  This often will not generate any seed points on the 2D "
"plane of interest.  Instead, a single streamline can be generated using the "
"``start_position`` argument. The ``surface_streamlines=True`` argument is "
"also needed if the dataset has nonzero normal velocity component.  This is "
"not the case in this dataset."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:140
msgid ""
"To generate multiple streamlines, a line source can be used with the "
"``pointa`` and ``pointb`` parameters."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:177
msgid ""
"The behavior immediately downstream of the cylinder is still not apparent "
"using streamlines at the inlet."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:180
msgid ""
"Another method is to use :func:`streamlines_evenly_spaced_2D() "
"<pyvista.DataSetFilters.streamlines_evenly_spaced_2D>`. This filter only "
"works with 2D data that lies on the xy plane. This method can quickly run of"
" memory, so particular attention must be paid to the input parameters.  The "
"defaults are in cell length units."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:219
msgid ""
"The streamlines are only approximately evenly spaced and capture the vortex "
"pair downstream of the cylinder with appropriate choice of "
"``start_position``."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:226
msgid "**Total running time of the script:** ( 0 minutes  3.859 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:241
msgid ""
":download:`Download Python source code: streamlines_2D.py "
"<streamlines_2D.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/streamlines_2D.rst:247
msgid ""
":download:`Download Jupyter notebook: streamlines_2D.ipynb "
"<streamlines_2D.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_subdivide.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:24
#: ../../pyvista/doc/examples/index.rst:1293
msgid "Subdivide Cells"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:26
msgid ""
"Increase the number of triangles in a single, connected triangular mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:28
msgid ""
"The :func:`pyvista.PolyDataFilters.subdivide` filter utilizes three "
"different subdivision algorithms to subdivide a mesh's cells: `butterfly`, "
"`loop`, or `linear`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:48
msgid ""
"First, let's load a **triangulated** mesh to subdivide. We can use the "
":func:`pyvista.DataSetFilters.triangulate` filter to ensure the mesh we are "
"using is purely triangles."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:73
msgid ""
"Now, lets do a few subdivisions with the mesh and compare the results. Below"
" is a helper function to make a comparison plot of thee different "
"subdivisions."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:117
msgid "Run the subdivisions for 1 and 3 levels."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:142
msgid "**Total running time of the script:** ( 0 minutes  1.068 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:157
msgid ":download:`Download Python source code: subdivide.py <subdivide.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/subdivide.rst:163
msgid ""
":download:`Download Jupyter notebook: subdivide.ipynb <subdivide.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_surface-"
"smoothing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:24
#: ../../pyvista/doc/examples/index.rst:1314
msgid "Surface Smoothing"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:26
msgid "Smoothing rough edges of a surface mesh"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:45
msgid ""
"Suppose you extract a volumetric subset of a dataset that has roughly "
"defined edges. Perhaps you'd like a smooth representation of that model "
"region. This can be achieved by extracting the bounding surface of the "
"volume and applying a :func:`pyvista.PolyData.smooth` filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:50
msgid ""
"The below code snippet loads a sample roughly edged volumetric dataset:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:80
msgid ""
"Extract the outer surface of the volume using the "
":func:`pyvista.DataSetFilters.extract_geometry` filter and then apply the "
"smoothing filter:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:109
msgid ""
"Not smooth enough? Try increasing the number of iterations for the Laplacian"
" smoothing algorithm:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:135
msgid ""
"Still not smooth enough? Increase the number of iterations for the Laplacian"
" smoothing algorithm to a crazy high value:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:161
msgid "**Total running time of the script:** ( 0 minutes  1.556 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:176
msgid ""
":download:`Download Python source code: surface-smoothing.py <surface-"
"smoothing.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface-smoothing.rst:182
msgid ""
":download:`Download Jupyter notebook: surface-smoothing.ipynb <surface-"
"smoothing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_examples_01-filter_surface_reconstruction.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:24
#: ../../pyvista/doc/examples/index.rst:1335
msgid "Surface Reconstruction"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:26
msgid ""
"Surface reconstruction has a dedicated filter in PyVista and is handled by "
":func:`pyvista.PolyDataFilters.reconstruct_surface`.  This tends to perform "
"much better than :func:`DataSetFilters.delaunay_3d`."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:45
msgid ""
"Create a point cloud from a sphere and then reconstruct a surface from it."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:61
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>840</td></tr>\n"
"<tr><td>N Points</td><td>422</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.995e-01, 4.989e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>-4.986e-01, 4.986e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-4.985e-01, 4.985e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:82
msgid "Plot the point cloud and the reconstructed sphere."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:111
msgid "**Total running time of the script:** ( 0 minutes  0.486 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:126
msgid ""
":download:`Download Python source code: surface_reconstruction.py "
"<surface_reconstruction.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/surface_reconstruction.rst:132
msgid ""
":download:`Download Jupyter notebook: surface_reconstruction.ipynb "
"<surface_reconstruction.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_using-filters.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:24
#: ../../pyvista/doc/examples/index.rst:1356
msgid "Using Common Filters"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:26
msgid "Using common filters like thresholding and clipping."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:46
msgid ""
"PyVista wrapped data objects have a suite of common filters ready for "
"immediate use directly on the object. These filters include the following "
"(see :ref:`filters_ref` for a complete list):"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:50
msgid ""
"``slice``: creates a single slice through the input dataset on a user "
"defined plane"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:51
msgid ""
"``slice_orthogonal``: creates a ``MultiBlock`` dataset of three orthogonal "
"slices"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:52
msgid ""
"``slice_along_axis``: creates a ``MultiBlock`` dataset of many slices along "
"a specified axis"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:53
msgid ""
"``threshold``: Thresholds a dataset by a single value or range of values"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:54
msgid "``threshold_percent``: Threshold by percentages of the scalar range"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:55
msgid "``clip``: Clips the dataset by a user defined plane"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:56
msgid "``outline_corners``: Outlines the corners of the data extent"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:57
msgid "``extract_geometry``: Extract surface geometry"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:59
msgid ""
"To use these filters, call the method of your choice directly on your data "
"object:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:84
msgid ""
"And now there is a thresholded version of the input dataset in the new "
"``threshed`` object. To learn more about what keyword arguments are "
"available to alter how filters are executed, print the docstring for any "
"filter attached to PyVista objects with either ``help(dataset.threshold)`` "
"or using ``shift+tab`` in an IPython environment."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:90
msgid ""
"We can now plot this filtered dataset along side an outline of the original "
"dataset"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:119
msgid ""
"What about other filters? Let's collect a few filter results and compare "
"them:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:169
msgid "Filter Pipeline"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:171
msgid ""
"In VTK, filters are often used in a pipeline where each algorithm passes its"
" output to the next filtering algorithm. In PyVista, we can mimic the "
"filtering pipeline through a chain; attaching each filter to the last "
"filter. In the following example, several filters are chained together:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:176
msgid "First, and empty ``threshold`` filter to clean out any ``NaN`` values."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:177
msgid ""
"Use an ``elevation`` filter to generate scalar values corresponding to "
"height."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:178
msgid "Use the ``clip`` filter to cut the dataset in half."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:179
msgid ""
"Create three slices along each axial plane using the ``slice_orthogonal`` "
"filter."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:198
msgid ""
"And to view this filtered data, simply call the ``plot`` method "
"(``result.plot()``) or create a rendering scene:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:226
msgid "**Total running time of the script:** ( 0 minutes  2.297 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:241
msgid ""
":download:`Download Python source code: using-filters.py <using-filters.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/using-filters.rst:247
msgid ""
":download:`Download Jupyter notebook: using-filters.ipynb <using-"
"filters.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_voxelize.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:24
#: ../../pyvista/doc/examples/index.rst:1377
msgid "Voxelize a Surface Mesh"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:26
msgid ""
"Create a voxel model (like legos) of a closed surface or volumetric mesh."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:28
msgid ""
"This example also demonstrates how to compute an implicit distance from a "
"bounding :class:`pyvista.PolyData` surface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:50
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>4204</td></tr>\n"
"<tr><td>N Points</td><td>2154</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.633e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.860e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.126e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:96
msgid "Create a voxel model of the bounding surface"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:124
msgid ""
"We could even add a scalar field to that new voxel model in case we wanted "
"to create grids for modelling. In this case, let's add a scalar field for "
"bone density noting:"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:140
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>93038</td></tr>\n"
"<tr><td>N Points</td><td>113188</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.584e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.858e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.097e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>3</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>3.685e+03</td><td>7.283e+05</td></tr>\n"
"<tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>3.624e+03</td><td>7.017e+05</td></tr>\n"
"<tr><td><b>density</b></td><td>Cells</td><td>float64</td><td>1</td><td>3.650e+00</td><td>3.650e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:188
msgid ""
"A constant scalar field is kind of boring, so let's get a little fancier by "
"added a scalar field that varies by the distance from the bounding surface."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:203
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>93038</td></tr>\n"
"<tr><td>N Points</td><td>113188</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.584e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.858e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.097e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>4</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>3.685e+03</td><td>7.283e+05</td></tr>\n"
"<tr><td>implicit_distance</td><td>Points</td><td>float64</td><td>1</td><td>-6.951e-01</td><td>4.148e-01</td></tr>\n"
"<tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>3.624e+03</td><td>7.017e+05</td></tr>\n"
"<tr><td><b>density</b></td><td>Cells</td><td>float64</td><td>1</td><td>3.650e+00</td><td>3.650e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:256
msgid "**Total running time of the script:** ( 0 minutes  12.498 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:271
msgid ":download:`Download Python source code: voxelize.py <voxelize.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/voxelize.rst:277
msgid ":download:`Download Jupyter notebook: voxelize.ipynb <voxelize.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_01-filter_warp-by-vector.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:24
#: ../../pyvista/doc/examples/index.rst:1398
msgid "Warping by Vectors"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:26
msgid ""
"This example applies the ``warp_by_vector`` filter to a sphere mesh that has"
" 3D displacement vectors defined at each node."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:31
msgid "We first compare the unwarped sphere to the warped sphere."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:67
msgid ""
"We then use several values for the scale factor applied to the warp "
"operation. Applying a warping factor that is too high can often lead to "
"unrealistic results."
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:100
msgid "**Total running time of the script:** ( 0 minutes  1.026 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:115
msgid ""
":download:`Download Python source code: warp-by-vector.py <warp-by-"
"vector.py>`"
msgstr ""

#: ../../pyvista/doc/examples/01-filter/warp-by-vector.rst:121
msgid ""
":download:`Download Jupyter notebook: warp-by-vector.ipynb <warp-by-"
"vector.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_background_image.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:24
#: ../../pyvista/doc/examples/index.rst:1446
msgid "Background Image"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:26
msgid ""
"Add a background image with :func:`pyvista.Plotter.add_background_image`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:44
msgid "Plot an airplane with the map of the earth in the background"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:71
msgid "Plot several earth related plots"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:113
msgid "**Total running time of the script:** ( 0 minutes  8.136 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:128
msgid ""
":download:`Download Python source code: background_image.py "
"<background_image.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/background_image.rst:134
msgid ""
":download:`Download Jupyter notebook: background_image.ipynb "
"<background_image.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_chart_basics.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:24
#: ../../pyvista/doc/examples/index.rst:1467
msgid "Chart Basics"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:26
msgid ""
"This example shows how different types of charts can be added to the scene. "
"A more complex example, showing how to combine multiple charts as overlays "
"in the same renderer, is given in :ref:`chart_overlays_example`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:49
msgid ""
"This example shows how to create a 2D scatter plot from 100 randomly sampled"
" datapoints. By default, the chart automatically rescales its axes such that"
" all plotted data is visible. By right clicking on the chart you can enable "
"zooming and panning of the chart."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:79
msgid ""
"To connect datapoints with lines, you can create a 2D line plot as shown in "
"the example below. You can also dynamically 'zoom in' on the plotted data by"
" specifying a custom axis range yourself."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:109
msgid ""
"You can also easily combine scatter and line plots using the general "
":func:`pyvista.Chart2D.plot` function, specifying both the line and marker "
"style at once."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:139
msgid ""
"The following example shows how to create filled areas between two "
"polylines."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:170
msgid ""
"Bar charts are also supported. Multiple bar plots are placed next to each "
"other."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:218
msgid ""
"In case you want to stack the bars, instead of drawing them next to each "
"other, pass a sequence of y values."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:251
msgid ""
"In a similar way, you can stack multiple area plots on top of each other."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:279
msgid ""
"Beside the flexible Chart2D used in the previous examples, there are a "
"couple other dedicated charts you can create. The example below shows how a "
"pie chart can be created."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:307
msgid "To summarize statistics of datasets, you can easily create a boxplot."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:333
msgid ""
"If you would like to add other types of chart that are currently not "
"supported by pyvista or VTK, you can resort to matplotlib to create your "
"custom chart and afterwards embed it into a pyvista plotting window. The "
"below example shows how you can do this."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:380
msgid "**Total running time of the script:** ( 0 minutes  3.714 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:395
msgid ""
":download:`Download Python source code: chart_basics.py <chart_basics.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_basics.rst:401
msgid ""
":download:`Download Jupyter notebook: chart_basics.ipynb "
"<chart_basics.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_chart_overlays.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:24
#: ../../pyvista/doc/examples/index.rst:1488
msgid "Chart Overlays"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:26
msgid ""
"This example shows how you can combine multiple charts as overlays in the "
"same renderer. For an overview of the different chart types you can use, "
"please refer to :ref:`chart_basics_example`. Interaction with a chart can be"
" enabled by a double left click on top of it. Note that this will disable "
"interaction with the 3D scene. To stop interacting with the chart, perform "
"another double left click. This will either enable interaction with another "
"chart (if clicked on top of it) or re-enable interaction with the 3D scene."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:54
msgid "Data to display"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:73
msgid ""
"Define a Matplotlib figure. Use a tight layout to keep axis labels visible "
"on smaller figures."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:96
msgid ""
"Define plotter, add the created matplotlib figure as the first (left) chart "
"to the scene, and define a second (right) chart."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:155
msgid "**Total running time of the script:** ( 0 minutes  7.392 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:170
msgid ""
":download:`Download Python source code: chart_overlays.py "
"<chart_overlays.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/chart_overlays.rst:176
msgid ""
":download:`Download Jupyter notebook: chart_overlays.ipynb "
"<chart_overlays.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_clear.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:22
#: ../../pyvista/doc/examples/index.rst:1509
msgid "Clearing a Mesh or the Entire Plot"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:24
msgid "This example demonstrates how to remove elements from a scene."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rstNone
#: ../../pyvista/doc/examples/02-plot/clear.rstNone
#: ../../pyvista/doc/examples/02-plot/clear.rstNone
msgid "clear"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:76
msgid "Clearing the entire plotting window:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:113
msgid ""
"Or you can give any actor a ``name`` when adding it and if an actor is added"
" with that same name at a later time, it will replace the previous actor:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:150
msgid "**Total running time of the script:** ( 0 minutes  0.981 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:165
msgid ":download:`Download Python source code: clear.py <clear.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/clear.rst:171
msgid ":download:`Download Jupyter notebook: clear.ipynb <clear.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_cmap.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:24
#: ../../pyvista/doc/examples/index.rst:1530
msgid "Colormap Choices"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:26
msgid ""
"Use a Matplotlib, Colorcet, cmocean, or custom colormap when plotting scalar"
" values."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:50
msgid ""
"Any colormap built for ``matplotlib``, ``colorcet``, or ``cmocean`` is fully"
" compatible with PyVista. Colormaps are typically specified by passing the "
"string name of the colormap to the plotting routine via the ``cmap`` "
"argument."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:55
msgid ""
"See `Matplotlib's complete list of available colormaps`_, `Colorcet's "
"complete list`_, and `cmocean's complete list`_."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:65
msgid "Custom Made Colormaps"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:67
msgid ""
"To get started using a custom colormap, download some data with scalar "
"values to plot."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:88
msgid ""
"Build a custom colormap - here we make a colormap with 5 discrete colors and"
" we specify the ranges where those colors fall:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:123
msgid "Simply pass the colormap to the plotting routine!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:145
msgid ""
"Or you could make a simple colormap... any Matplotlib colormap can be passed"
" to PyVista!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:169
msgid ""
"You can also pass a list of color strings to the color map.  This approach "
"divides up the colormap into 5 equal parts."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:192
msgid ""
"If you still wish to have control of the separation of values, you can do "
"this by creating a scalar array and passing that to the plotter along with "
"the the colormap"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:224
msgid "Matplotlib vs. Colorcet"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:226
msgid ""
"Let's compare Colorcet's perceptually uniform \"fire\" colormap to "
"Matplotlib's \"hot\" colormap much like the example on the `first page of "
"Colorcet's docs`_."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:231
msgid ""
"The \"hot\" version washes out detail at the high end, as if the image is "
"overexposed, while \"fire\" makes detail visible throughout the data range."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:234
msgid ""
"Please note that in order to use Colorcet's colormaps including \"fire\", "
"you must have Colorcet installed in your Python environment: ``pip install "
"colorcet``"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:296
msgid "**Total running time of the script:** ( 0 minutes  5.339 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:311
msgid ":download:`Download Python source code: cmap.py <cmap.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/cmap.rst:317
msgid ":download:`Download Jupyter notebook: cmap.ipynb <cmap.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_depth-peeling.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:24
#: ../../pyvista/doc/examples/index.rst:1551
msgid "Depth Peeling"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:25
msgid ""
"Depth peeling is a technique to correctly render translucent geometry. This "
"is not enabled by default in :attr:`pyvista.global_theme` as some operating "
"systems and versions of VTK have issues with this routine."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:29
msgid ""
"For this example, we will showcase the difference that depth peeling "
"provides."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:98
msgid ""
"The following room surfaces example mesh, provided courtesy of `Sam Potter "
"<https://github.com/sampotter>`_ has coincident topology and depth rendering"
" helps correctly render those geometries when a global opacity value is "
"used."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:140
msgid ""
"And here is another example wheen rendering many translucent contour "
"surfaces."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:179
msgid "**Total running time of the script:** ( 0 minutes  11.910 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:194
msgid ""
":download:`Download Python source code: depth-peeling.py <depth-peeling.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/depth-peeling.rst:200
msgid ""
":download:`Download Jupyter notebook: depth-peeling.ipynb <depth-"
"peeling.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_edges.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:24
#: ../../pyvista/doc/examples/index.rst:1572
msgid "Show Edges"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:26
msgid "Show the edges of all geometries within a mesh"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:30
msgid ""
"Sometimes it can be useful to show all of the edges of a mesh when rendering"
" to communicate aspects of the dataset like resolution."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:33
msgid ""
"Showing the edges for any rendered dataset is as simple as specifying the "
"the ``show_edges`` keyword argument to ``True`` when plotting a dataset."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:70
msgid "**Total running time of the script:** ( 0 minutes  5.314 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:85
msgid ":download:`Download Python source code: edges.py <edges.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edges.rst:91
msgid ":download:`Download Jupyter notebook: edges.ipynb <edges.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_edl.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:24
#: ../../pyvista/doc/examples/index.rst:1593
msgid "Eye Dome Lighting"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:26
msgid ""
"Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading "
"technique designed to improve depth perception in scientific visualization "
"images. To learn more, please see `this blog post`_."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:52
msgid "Statue"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:54
msgid ""
"Eye-Dome Lighting can dramatically improve depth perception when plotting "
"incredibly sophisticated meshes like the creative commons Queen Nefertiti "
"statue:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rstNone
#: ../../pyvista/doc/examples/02-plot/edl.rstNone
#: ../../pyvista/doc/examples/02-plot/edl.rstNone
#: ../../pyvista/doc/examples/02-plot/edl.rstNone
#: ../../pyvista/doc/examples/02-plot/edl.rstNone
msgid "edl"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:89
msgid "Here we will compare a EDL shading side by side with normal shading"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:137
msgid "Point Cloud"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:139
msgid ""
"When plotting a simple point cloud, it can be difficult to perceive depth. "
"Take this Lidar point cloud for example:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:159
msgid "And now plot this point cloud as-is:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:195
msgid ""
"We can improve the depth mapping by enabling eye dome lighting on the "
"renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:233
msgid "The eye dome lighting mode can also handle plotting scalar arrays:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:269
msgid "**Total running time of the script:** ( 0 minutes  22.996 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:284
msgid ":download:`Download Python source code: edl.py <edl.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/edl.rst:290
msgid ":download:`Download Jupyter notebook: edl.ipynb <edl.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/floors.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_floors.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/floors.rst:24
#: ../../pyvista/doc/examples/index.rst:1614
msgid "Plot with Floors"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/floors.rst:26
msgid "Add a floor/wall at the boundary of the rendering scene."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/floors.rst:58
msgid "**Total running time of the script:** ( 0 minutes  4.119 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/floors.rst:73
msgid ":download:`Download Python source code: floors.py <floors.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/floors.rst:79
msgid ":download:`Download Jupyter notebook: floors.ipynb <floors.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_ghost-cells.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:22
#: ../../pyvista/doc/examples/index.rst:1635
msgid "Hide Cells with Ghosting"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:24
msgid "Specify specific cells to hide when plotting."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:26
msgid ""
"This is a lightweight alternative to thresholding to quickly hide cells in a"
" mesh without creating a new mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:29
msgid ""
"Notably, the mesh must be cast to an :class:`pyvista.UnstructuredGrid` type "
"for this to work (use the ``cast_to_unstructured_grid`` filter)."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:52
msgid ""
"Decide which cells are ghosted with a criteria (feel free to adjust this or "
"manually create this array to hide specific cells)."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:69
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1065589</td></tr>\n"
"<tr><td>N Points</td><td>1336015</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>facies</td><td>Cells</td><td>int64</td><td>1</td><td>1.000e+00</td><td>4.000e+00</td></tr>\n"
"<tr><td><b>vtkGhostType</b></td><td>Cells</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>0.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:97
msgid "Now we can plot the mesh and those cells will be hidden"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:119
msgid "**Total running time of the script:** ( 0 minutes  6.624 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:134
msgid ""
":download:`Download Python source code: ghost-cells.py <ghost-cells.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ghost-cells.rst:140
msgid ""
":download:`Download Jupyter notebook: ghost-cells.ipynb <ghost-cells.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_gif.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:24
#: ../../pyvista/doc/examples/index.rst:1656
msgid "Create a GIF Movie"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:25
msgid "Generate a moving gif from an active plotter."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:28
msgid ""
"Use ``lighting=False`` to reduce the size of the color space to avoid "
"\"jittery\" GIFs, especially for the scalar bar."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:93
msgid "**Total running time of the script:** ( 0 minutes  3.208 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:108
msgid ":download:`Download Python source code: gif.py <gif.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/gif.rst:114
msgid ":download:`Download Jupyter notebook: gif.ipynb <gif.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_image_depth.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:22
#: ../../pyvista/doc/examples/index.rst:1677
msgid "Render a depth image"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:24
msgid ""
"Plot a depth image as viewed from a camera overlooking the \"hills\" example"
" mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:60
msgid "Record depth image without and with a custom fill value"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:78
msgid "Visualize depth images"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:130
msgid "**Total running time of the script:** ( 0 minutes  1.002 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:145
msgid ""
":download:`Download Python source code: image_depth.py <image_depth.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/image_depth.rst:151
msgid ""
":download:`Download Jupyter notebook: image_depth.ipynb <image_depth.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_interpolate-before-"
"map.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:22
#: ../../pyvista/doc/examples/index.rst:1698
msgid "Interpolate Before Mapping"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:24
msgid ""
"The ``add_mesh`` function has an ``interpolate_before_map`` argument - this "
"affects the way scalar data is visualized with colors. The effect can of "
"this can vary depending on the dataset's topology and the chosen colormap."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:29
msgid ""
"This example serves to demo the difference and why we've chosen to enable "
"this by default."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:32
msgid ""
"For more details, please see `this blog post <https://blog.kitware.com/what-"
"is-interpolatescalarsbeforemapping-in-vtk/>`_"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:49
msgid ""
"Meshes are colored by the data on their nodes or cells - when coloring a "
"mesh by data on its nodes, the values must be interpolated across the faces "
"of cells. The process by which those scalars are interpolated is critical. "
"If the ``interpolate_before_map`` is left off, the color mapping occurs at "
"polygon points and  colors are interpolated, which is generally less "
"accurate whereas if the ``interpolate_before_map`` is on, then the scalars "
"will be interpolated across the topology of the dataset which is more "
"accurate."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:57
msgid ""
"To summarize, when ``interpolate_before_map`` is off, the colors are "
"interpolated after rendering and when ``interpolate_before_map`` is on, the "
"scalars are interpolated across the mesh and those values are mapped to "
"colors."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:62
msgid "So lets take a look at the difference:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:104
msgid ""
"Shown in the figure above, when not interpolating the scalars before "
"mapping, the colors (RGB values, not scalars) are interpolated between the "
"vertices by the underlying graphics library (OpenGL), and the colors shown "
"are not accurate."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:109
msgid "The same interpolation effect occurs for wireframe visualization too:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:148
msgid ""
"The cylinder mesh above is a great example dataset for this as it has a wide"
" spread between the vertices (points are only at the top and bottom of the "
"cylinder) which means high surface are of the mesh has to be interpolated."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:152
msgid ""
"However, most meshes don't have such a wide spread and the effects of color "
"interpolating are harder to notice. Let's take a look at a wavelet example "
"and try to figure out how the ``interpolate_before_map`` option affects its "
"rendering."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:198
msgid ""
"This time is pretty difficult to notice the differences - they are there, "
"subtle, but present. The differences become more apparent when we decrease "
"the number of colors in colormap. Let's take a look at the differences when "
"using eight discrete colors via the ``n_colors`` argument:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:243
msgid ""
"Left, ``interpolate_before_map`` OFF.  Right, ``interpolate_before_map`` ON."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:245
msgid ""
"Now that is much more compelling! On the right, the contours of the scalar "
"field are visible, but on the left, the contours are obscured due to the "
"color interpolation by OpenGL. In both cases, the colors at the vertices are"
" the same, the difference is how color is assigned between the vertices."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:250
msgid ""
"In our opinion, color interpolation is not a preferred default for "
"scientific visualization and is why we have chosen to set the "
"``interpolate_before_map`` flag to ``True``."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:257
msgid "**Total running time of the script:** ( 0 minutes  2.651 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:272
msgid ""
":download:`Download Python source code: interpolate-before-map.py "
"<interpolate-before-map.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/interpolate-before-map.rst:278
msgid ""
":download:`Download Jupyter notebook: interpolate-before-map.ipynb "
"<interpolate-before-map.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_isovalue.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:24
#: ../../pyvista/doc/examples/index.rst:1719
msgid "Moving Isovalue"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:26
msgid "Make an animation of an isovalue through a volumetric dataset"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:45
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6998400</td></tr>\n"
"<tr><td>N Points</td><td>7109137</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.800e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.160e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.800e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>181, 217, 181</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>image_data</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>2.550e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:74
msgid ""
"Now lets make an array of all of the isovalues for which we want to show."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:91
msgid "Now let's create an initial isosurface that we can plot and move"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:108
msgid "Precompute the surfaces"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:125
msgid "Set a single surface as the one being plotted that can be overwritten"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:205
msgid "**Total running time of the script:** ( 0 minutes  46.846 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:220
msgid ":download:`Download Python source code: isovalue.py <isovalue.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/isovalue.rst:226
msgid ":download:`Download Jupyter notebook: isovalue.ipynb <isovalue.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_labels.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:22
#: ../../pyvista/doc/examples/index.rst:1740
msgid "Label Points"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:24
msgid "Use string arrays in a point set to label points"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:46
msgid "Label String Array"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:48
msgid ""
"This example will label the nodes of a mesh with a given array of string "
"labels for each of the nodes."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:68
msgid ""
"Add string labels to the point data - this associates a label with every "
"node:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:84
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>10</td></tr>\n"
"<tr><td>N Points</td><td>10</td></tr>\n"
"<tr><td>X Bounds</td><td>2.936e-01, 9.057e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>1.007e-02, 8.315e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.005e-02, 9.565e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>My Labels</td><td>Points</td><td><U7</td><td>1</td><td>nan</td><td>nan</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:111
msgid "Now plot the points with labels:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:138
msgid "Label Node Locations"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:140
msgid ""
"This example will label the nodes of a mesh with their coordinate locations"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:160
msgid "Create plotting class and add the unstructured grid"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:194
msgid "Label Scalar Values"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:196
msgid "This example will label each point with their scalar values"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:242
msgid "**Total running time of the script:** ( 0 minutes  1.163 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:257
msgid ":download:`Download Python source code: labels.py <labels.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/labels.rst:263
msgid ":download:`Download Jupyter notebook: labels.ipynb <labels.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_lighting_mesh.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:24
#: ../../pyvista/doc/examples/index.rst:1761
msgid "Lighting Properties"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:26
msgid ""
"Control aspects of the rendered mesh's lighting such as Ambient, Diffuse, "
"and Specular. These options only work if the ``lighting`` argument to "
"``add_mesh`` is ``True`` (it's ``True`` by default)."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:30
msgid ""
"You can turn off all lighting for the given mesh by passing "
"``lighting=False`` to ``add_mesh``."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:53
msgid "First, lets take a look at the mesh with default lighting conditions"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:75
msgid "What about with no lighting"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:97
msgid "Demonstration of the specular property"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:132
msgid "Just specular"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:154
msgid "Specular power"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:176
msgid "Demonstration of all three in use"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:198
msgid ""
"For detailed control over lighting conditions in general see the "
":ref:`ref_light_examples` examples."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:204
msgid "**Total running time of the script:** ( 0 minutes  5.964 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:219
msgid ""
":download:`Download Python source code: lighting_mesh.py <lighting_mesh.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/lighting_mesh.rst:225
msgid ""
":download:`Download Jupyter notebook: lighting_mesh.ipynb "
"<lighting_mesh.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/linked.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_linked.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/linked.rst:24
#: ../../pyvista/doc/examples/index.rst:1782
msgid "Linked Views in Subplots"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/linked.rst:83
msgid "**Total running time of the script:** ( 0 minutes  3.236 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/linked.rst:98
msgid ":download:`Download Python source code: linked.py <linked.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/linked.rst:104
msgid ":download:`Download Jupyter notebook: linked.ipynb <linked.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_mesh-picking.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:24
#: ../../pyvista/doc/examples/index.rst:1803
msgid "Picking Meshes"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:25
msgid ""
"This example demonstrates how to pick meshes using "
":func:`enable_mesh_picking() <pyvista.Plotter.enable_mesh_picking>`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:45
msgid "Pick either a cube or a sphere using \"p\""
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:78
#: ../../pyvista/doc/examples/02-plot/point-picking.rst:150
msgid "Pick using the left-mouse button"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:79
msgid ""
"Pick using the left mouse button and trigger a callback that \"shrinks\" the"
" mesh each time it's selected."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:114
msgid "**Total running time of the script:** ( 0 minutes  0.795 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:129
msgid ""
":download:`Download Python source code: mesh-picking.py <mesh-picking.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/mesh-picking.rst:135
msgid ""
":download:`Download Jupyter notebook: mesh-picking.ipynb <mesh-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_movie.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:24
#: ../../pyvista/doc/examples/index.rst:1824
msgid "Create a MP4 Movie"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:26
msgid "Create an animated MP4 movie of a rendering scene."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:29
msgid ""
"This movie will appear static since MP4 movies will not be rendered on a "
"sphinx gallery example."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:87
msgid "**Total running time of the script:** ( 0 minutes  16.761 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:102
msgid ":download:`Download Python source code: movie.py <movie.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/movie.rst:108
msgid ":download:`Download Jupyter notebook: movie.ipynb <movie.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_moving_cmap.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:24
#: ../../pyvista/doc/examples/index.rst:1845
msgid "Create a GIF Movie of a Static Object with a Moving Colormap"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:25
msgid ""
"Generate a gif movie of a Hopf torus with a moving colormap, by updating the"
" scalars."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:113
msgid "**Total running time of the script:** ( 0 minutes  15.700 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:128
msgid ""
":download:`Download Python source code: moving_cmap.py <moving_cmap.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/moving_cmap.rst:134
msgid ""
":download:`Download Jupyter notebook: moving_cmap.ipynb <moving_cmap.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_multi-window.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:22
#: ../../pyvista/doc/examples/index.rst:1866
msgid "Multi-Window Plot"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:25
msgid "Subplotting: having multiple scenes in a single window"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:44
msgid ""
"This example shows how to create a multi-window plotter by specifying the "
"``shape`` parameter.  The window generated is a two by two window by setting"
" ``shape=(2, 2)``. Use the :func:`pyvista.BasePlotter.subplot` function to "
"select the subplot you wish to be the active subplot."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:127
msgid ""
"Split the rendering window in half and subdivide it in a nr. of vertical or "
"horizontal subplots."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:178
msgid ""
"To get full flexibility over the layout grid, you can define the relative "
"weighting of rows and columns and register groups that can span over "
"multiple rows and columns. A group is defined through a tuple "
"``(rows,cols)`` of row and column indices or slices. The group always spans "
"from the smallest to the largest (row or column) id that is passed through "
"the list or slice."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:268
msgid "**Total running time of the script:** ( 0 minutes  2.635 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:283
msgid ""
":download:`Download Python source code: multi-window.py <multi-window.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/multi-window.rst:289
msgid ""
":download:`Download Jupyter notebook: multi-window.ipynb <multi-"
"window.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_opacity.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:24
#: ../../pyvista/doc/examples/index.rst:1887
msgid "Plot with Opacity"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:26
msgid ""
"Plot a mesh's scalar array with an opacity transfer function or opacity "
"mapping based on a scalar array."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:51
msgid "Global Value"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:53
msgid ""
"You can also apply a global opacity value to the mesh by passing a single "
"float between 0 and 1 which would enable you to see objects behind the mesh:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:83
msgid ""
"Note that you can specify ``use_transparency=True`` to convert opacities to "
"transparencies in any of the following examples."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:89
msgid "Transfer Functions"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:91
msgid ""
"It's possible to apply an opacity mapping to any scalar array plotted. You "
"can specify either a single static value to make the mesh transparent on all"
" cells, or use a transfer function where the scalar array plotted is mapped "
"to the opacity. We have several predefined transfer functions."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:96
msgid "Opacity transfer functions are:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:98
msgid ""
"``'linear'``: linearly vary (increase) opacity across the plotted scalar "
"range from low to high"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:99
msgid ""
"``'linear_r'``: linearly vary (increase) opacity across the plotted scalar "
"range from high to low"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:100
msgid ""
"``'geom'``: on a log scale, vary (increase) opacity across the plotted "
"scalar range from low to high"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:101
msgid ""
"``'geom_r'``: on a log scale, vary (increase) opacity across the plotted "
"scalar range from high to low"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:102
msgid ""
"``'sigmoid'``: vary (increase) opacity on a sigmoidal s-curve across the "
"plotted scalar range from low to high"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:103
msgid ""
"``'sigmoid_r'``: vary (increase) opacity on a sigmoidal s-curve across the "
"plotted scalar range from high to low"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:147
msgid ""
"It's also possible to use your own transfer function that will be linearly "
"mapped to the scalar array plotted. For example, we can create an opacity "
"mapping as:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:166
msgid ""
"When given a minimized opacity mapping like that above, PyVista interpolates"
" it across a range of how many colors are shown when mapping the scalars. If"
" ``scipy`` is available, then a quadratic interpolation is used - otherwise,"
" a simple linear interpolation is used. Curious what that opacity transfer "
"function looks like? You can fetch it:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:202
msgid ""
"That opacity mapping will have an opacity of 0.0 at the minimum scalar "
"range, a value or 0.9 at the middle of the scalar range, and a value of 0.3 "
"at the maximum of the scalar range:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:227
msgid ""
"Opacity mapping is often useful when plotting DICOM images. For example, "
"download the sample knee DICOM image:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:245
msgid ""
"And here we inspect the DICOM image with a few different opacity mappings:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:285
msgid "Opacity by Array"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:287
msgid ""
"You can also use a scalar array associated with the mesh to give each cell "
"its own opacity/transparency value derived from a scalar field. For example,"
" an uncertainty array from a modelling result could be used to hide regions "
"of a mesh that are uncertain and highlight regions that are well resolved."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:292
msgid ""
"The following is a demonstration of plotting a mesh with colored values and "
"using a second array to control the transparency of the mesh"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:321
msgid ""
"Make sure to flag ``use_transparency=True`` since we want areas of high "
"variance to have high transparency."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:324
msgid ""
"Also, since the opacity array must be between 0 and 1, we normalize the "
"temperature variance array by the maximum value.  That way high variance "
"will be completely transparent."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:366
msgid "**Total running time of the script:** ( 0 minutes  9.563 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:381
msgid ":download:`Download Python source code: opacity.py <opacity.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/opacity.rst:387
msgid ":download:`Download Jupyter notebook: opacity.ipynb <opacity.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_orbit.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:24
#: ../../pyvista/doc/examples/index.rst:1908
msgid "Orbiting"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:26
msgid "Orbit around a scene."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:29
msgid ""
"The quality of the movie will be better when using "
"``p.open_movie('orbit.mp4')`` instead of ``p.open_gif('orbit.gif')``"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:33
msgid ""
"For orbiting to work you first have to show the scene and leave the plotter "
"open with ``.show(auto_close=False)``.  You may also have to set "
"``pv.Plotter(off_screen=True)``"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:38
msgid ""
"Use ``lighting=False`` to reduce the size of the color space to avoid "
"\"jittery\" GIFs when showing the scalar bar."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:60
msgid "Orbit around the Mt. St Helens dataset."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:158
msgid "**Total running time of the script:** ( 1 minutes  3.942 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:173
msgid ":download:`Download Python source code: orbit.py <orbit.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/orbit.rst:179
msgid ":download:`Download Jupyter notebook: orbit.ipynb <orbit.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_ortho-slices.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:24
#: ../../pyvista/doc/examples/index.rst:1929
msgid "Orthogonal Slices"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:26
msgid "View three orthogonal slices from a mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:28
msgid ""
"Use the :func:`pyvista.DataSetFilters.slice_orthogonal` filter to create "
"these slices simultaneously."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:58
msgid ""
"Create three slices. Easily control their locations with the ``x``, ``y``, "
"and ``z`` arguments."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:149
msgid "**Total running time of the script:** ( 0 minutes  5.094 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:164
msgid ""
":download:`Download Python source code: ortho-slices.py <ortho-slices.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/ortho-slices.rst:170
msgid ""
":download:`Download Jupyter notebook: ortho-slices.ipynb <ortho-"
"slices.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_pbr.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:24
#: ../../pyvista/doc/examples/index.rst:1950
msgid "Physically Based Rendering"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:26
msgid ""
"VTK 9 introduced Physically Based Rendering (PBR) and we have exposed that "
"functionality in PyVista. Read the `blog about PBR "
"<https://blog.kitware.com/vtk-pbr/>`_ for more details."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:30
msgid ""
"PBR is only supported for :class:`pyvista.PolyData` and can be triggered via"
" the ``pbr`` keyword argument of ``add_mesh``. Also use the ``metallic`` and"
" ``roughness`` arguments for further control."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:34
msgid ""
"Let's show off this functionality by rendering a high quality mesh of a "
"statue as though it were metallic."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:62
msgid ""
"Let's render the mesh with a base color of \"linen\" to give it a metal "
"looking finish."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:94
msgid "Show the variation of the metallic and roughness parameters."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:96
msgid ""
"Plot with metallic increasing from left to right and roughness increasing "
"from bottom to top."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:132
msgid "Combine custom lighting and physically based rendering."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:178
msgid "**Total running time of the script:** ( 1 minutes  14.614 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:193
msgid ":download:`Download Python source code: pbr.py <pbr.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/pbr.rst:199
msgid ":download:`Download Jupyter notebook: pbr.ipynb <pbr.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_plot-over-circular-"
"arc.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:22
#: ../../pyvista/doc/examples/index.rst:1971
msgid "Plot Scalars Over a Circular Arc"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:24
msgid "Interpolate the scalars of a dataset over a circular arc."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:44
#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:46
msgid "Volumetric Mesh"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:46
msgid "Add the height scalars to a uniform 3D mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:87
msgid "Run the filter and produce a line plot."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:124
msgid ""
":download:`Download Python source code: plot-over-circular-arc.py <plot-"
"over-circular-arc.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-circular-arc.rst:130
msgid ""
":download:`Download Jupyter notebook: plot-over-circular-arc.ipynb <plot-"
"over-circular-arc.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_plot-over-line.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:24
#: ../../pyvista/doc/examples/index.rst:1992
msgid "Plot Over Line"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:26
msgid "Plot the values of a dataset over a line through that dataset"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:48
msgid "First a 3D mesh example to demonstrate"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:82
#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:143
msgid "Run the filter and produce a line plot"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:106
msgid "Flat Surface"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:108
msgid "We could also plot the values of a mesh that lies on a flat surface"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:172
msgid "**Total running time of the script:** ( 0 minutes  1.659 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:187
msgid ""
":download:`Download Python source code: plot-over-line.py <plot-over-"
"line.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/plot-over-line.rst:193
msgid ""
":download:`Download Jupyter notebook: plot-over-line.ipynb <plot-over-"
"line.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_point-picking.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:24
#: ../../pyvista/doc/examples/index.rst:2013
msgid "Picking points on a mesh"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:25
msgid ""
"This example demonstrates how to pick points on meshes using "
":func:`enable_point_picking() <pyvista.Plotter.enable_point_picking>`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:45
msgid "Pick points on a sphere"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:74
msgid "Ignore the 3D window"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:76
msgid ""
"In the above example, both points on the mesh and points in the 3d window "
"can be selected. It is possible instead pick only points on the mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:105
msgid "Modify which actors are pickable"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:107
msgid "After enabling point picking, we can modify which actors are pickable."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:178
msgid "**Total running time of the script:** ( 0 minutes  1.440 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:193
msgid ""
":download:`Download Python source code: point-picking.py <point-picking.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/point-picking.rst:199
msgid ""
":download:`Download Jupyter notebook: point-picking.ipynb <point-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_scalar-bars.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:24
#: ../../pyvista/doc/examples/index.rst:2034
msgid "Customize Scalar Bars"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:26
msgid ""
"Walk through of all the different capabilities of scalar bars and how a user"
" can customize scalar bars."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:46
msgid ""
"By default, when plotting a dataset with a scalar array, a scalar bar for "
"that array is added. To turn off this behavior, a user could specify "
"``show_scalar_bar=False`` when calling ``.add_mesh()``. Let's start with a "
"sample dataset provide via PyVista to demonstrate the default behavior of "
"scalar bar plotting:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:81
msgid ""
"We could also plot the scene with an interactive scalar bar to move around "
"and place where we like by specifying passing keyword arguments to control "
"the scalar bar via the ``scalar_bar_args`` parameter in "
":func:`pyvista.BasePlotter.add_mesh`. The keyword arguments to control the "
"scalar bar are defined in :func:`pyvista.BasePlotter.add_scalar_bar`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:113
msgid "Or manually define the scalar bar's location:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:141
msgid "The text properties of the scalar bar can also be controlled:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:178
msgid "Labelling values outside of the scalar range"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:203
msgid ""
"Annotate values of interest using a dictionary. The key of the dictionary "
"must be the value to annotate, and the value must be the string label."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:235
msgid "**Total running time of the script:** ( 0 minutes  5.053 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:250
msgid ""
":download:`Download Python source code: scalar-bars.py <scalar-bars.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/scalar-bars.rst:256
msgid ""
":download:`Download Jupyter notebook: scalar-bars.ipynb <scalar-bars.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_screenshot.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:22
#: ../../pyvista/doc/examples/index.rst:2055
msgid "Saving Screenshots"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:48
msgid ""
"You can also take a screenshot without creating an interactive plot window "
"using the :class:`pyvista.Plotter`:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:74
msgid ""
"The ``img`` array can be used to plot the screenshot in ``matplotlib``:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:98
msgid "**Total running time of the script:** ( 0 minutes  0.569 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:113
msgid ":download:`Download Python source code: screenshot.py <screenshot.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/screenshot.rst:119
msgid ""
":download:`Download Jupyter notebook: screenshot.ipynb <screenshot.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:8
msgid "**00:01.466** total execution time for **examples_02-plot** files:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_02-plot_mesh-picking.py` (``mesh-picking.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:11
msgid "00:00.795"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_02-plot_surface-picking.py` (``surface-picking.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:13
msgid "00:00.671"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_02-plot_background_image.py` "
"(``background_image.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_02-plot_chart_basics.py` (``chart_basics.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:19
msgid ""
":ref:`sphx_glr_examples_02-plot_chart_overlays.py` (``chart_overlays.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_02-plot_clear.py` (``clear.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py` (``cmap.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:25
msgid ""
":ref:`sphx_glr_examples_02-plot_depth-peeling.py` (``depth-peeling.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:27
msgid ":ref:`sphx_glr_examples_02-plot_edges.py` (``edges.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:29
msgid ":ref:`sphx_glr_examples_02-plot_edl.py` (``edl.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:31
msgid ":ref:`sphx_glr_examples_02-plot_floors.py` (``floors.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:33
msgid ":ref:`sphx_glr_examples_02-plot_ghost-cells.py` (``ghost-cells.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_02-plot_gif.py` (``gif.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:37
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py` (``image_depth.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:39
msgid ""
":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py` (``interpolate-"
"before-map.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_02-plot_isovalue.py` (``isovalue.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:43
msgid ":ref:`sphx_glr_examples_02-plot_labels.py` (``labels.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:45
msgid ""
":ref:`sphx_glr_examples_02-plot_lighting_mesh.py` (``lighting_mesh.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_02-plot_linked.py` (``linked.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:49
msgid ":ref:`sphx_glr_examples_02-plot_movie.py` (``movie.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:51
msgid ":ref:`sphx_glr_examples_02-plot_moving_cmap.py` (``moving_cmap.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py` (``multi-window.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:55
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py` (``opacity.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:57
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py` (``orbit.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_02-plot_ortho-slices.py` (``ortho-slices.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:61
msgid ":ref:`sphx_glr_examples_02-plot_pbr.py` (``pbr.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:63
msgid ""
":ref:`sphx_glr_examples_02-plot_plot-over-circular-arc.py` (``plot-over-"
"circular-arc.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_examples_02-plot_plot-over-line.py` (``plot-over-line.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:67
msgid ""
":ref:`sphx_glr_examples_02-plot_point-picking.py` (``point-picking.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:69
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py` (``scalar-bars.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:71
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py` (``screenshot.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:73
msgid ":ref:`sphx_glr_examples_02-plot_shading.py` (``shading.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:75
msgid ":ref:`sphx_glr_examples_02-plot_silhouette.py` (``silhouette.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:77
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py` (``spherical.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:79
msgid ":ref:`sphx_glr_examples_02-plot_texture.py` (``texture.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:81
msgid ":ref:`sphx_glr_examples_02-plot_themes.py` (``themes.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:83
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py` (``topo-map.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:85
msgid ""
":ref:`sphx_glr_examples_02-plot_vector-component.py` (``vector-"
"component.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/sg_execution_times.rst:87
msgid ":ref:`sphx_glr_examples_02-plot_volume.py` (``volume.py``)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_shading.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:24
#: ../../pyvista/doc/examples/index.rst:2076
msgid "Types of Shading"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:26
msgid "Comparison of default, flat shading vs. smooth shading."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:44
msgid ""
"PyVista supports two types of shading: flat and smooth shading that uses "
"VTK's Phong shading algorithm."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:47
msgid "This is a plot with the default flat shading."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:71
msgid "Here's the same sphere with smooth shading."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:94
msgid ""
"Note how smooth shading makes edges that should be sharp look odd, it's "
"because the points of these normals are averaged between two faces that have"
" a sharp angle between them.  You can avoid this by enabling "
"``split_sharp_edges``."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:100
msgid ""
"You can configure the splitting angle with the optional ``feature_angle`` "
"keyword argument."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:124
msgid ""
"We can even plot the edges that will be split using "
":func:`extract_feature_edges "
"<pyvista.PolyDataFilters.extract_feature_edges>`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:159
msgid ""
"The ``split_sharp_edges`` keyword argument is compatible with physically "
"based rendering as well."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:187
msgid "**Total running time of the script:** ( 0 minutes  2.123 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:202
msgid ":download:`Download Python source code: shading.py <shading.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/shading.rst:208
msgid ":download:`Download Jupyter notebook: shading.ipynb <shading.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_silhouette.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:24
#: ../../pyvista/doc/examples/index.rst:2097
msgid "Silhouette Highlight"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:26
msgid ""
"Extract a subset of the edges of a polygonal mesh to generate an outline "
"(silhouette) of a mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:46
msgid "Prepare a triangulated ``PolyData``"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:63
msgid "Now we can display the silhouette of the mesh and compare the result:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:95
msgid ""
"Maybe the default parameters are not enough to really notice the silhouette."
" But by using a ``dict``, it is possible to modify the properties of the "
"outline. For example, color and width could be specified like so:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:127
msgid ""
"By default, PyVista uses a pretty aggressive decimation level but we might "
"want to disable it. It is also possible to display sharp edges:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:178
msgid "Here is another example:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:222
msgid "**Total running time of the script:** ( 0 minutes  15.062 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:237
msgid ":download:`Download Python source code: silhouette.py <silhouette.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/silhouette.rst:243
msgid ""
":download:`Download Jupyter notebook: silhouette.ipynb <silhouette.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_spherical.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:22
#: ../../pyvista/doc/examples/index.rst:2118
msgid "Plot data in spherical coordinates"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:24
msgid ""
"Generate and visualize meshes from data in longitude-latitude coordinates."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:106
msgid "Create a structured grid"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:138
msgid "Visualize vectors in spherical coordinates Vertical wind"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:200
msgid "Isurfaces of 3D data in spherical coordinates"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:251
msgid "**Total running time of the script:** ( 0 minutes  1.435 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:266
msgid ":download:`Download Python source code: spherical.py <spherical.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/spherical.rst:272
msgid ""
":download:`Download Jupyter notebook: spherical.ipynb <spherical.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_surface-picking.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:24
#: ../../pyvista/doc/examples/index.rst:2139
msgid "Picking a Point on the Surface of a Mesh"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:25
msgid ""
"This example demonstrates how to pick meshes using "
":func:`surface_mesh_picking() <pyvista.Plotter.surface_mesh_picking>`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:28
msgid "This allows you to pick points on the surface of a mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:46
msgid "Create a mesh and enable picking using the default settings."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:75
msgid ""
"Enable a callback that creates a cube at the clicked point and add a label "
"at the point as well it."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:110
msgid "**Total running time of the script:** ( 0 minutes  0.671 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:125
msgid ""
":download:`Download Python source code: surface-picking.py <surface-"
"picking.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/surface-picking.rst:131
msgid ""
":download:`Download Jupyter notebook: surface-picking.ipynb <surface-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_texture.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:24
#: ../../pyvista/doc/examples/index.rst:2160
msgid "Applying Textures"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:26
msgid "Plot a mesh with an image projected onto it as a texture."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:48
msgid ""
"Texture mapping is easily implemented using PyVista. Many of the geometric "
"objects come preloaded with texture coordinates, so quickly creating a "
"surface and displaying an image is simply:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:80
msgid ""
"But what if your dataset doesn't have texture coordinates? Then you can "
"harness the :func:`pyvista.DataSetFilters.texture_map_to_plane` filter to "
"properly map an image to a dataset's surface. For example, let's map that "
"same image of bricks to a curvey surface:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:117
msgid ""
"Display scalar data along with a texture by ensuring the "
"``interpolate_before_map`` setting is ``False`` and specifying both the "
"``texture`` and ``scalars`` arguments."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:145
msgid "Note that this process can be completed with any image texture!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:172
msgid "Textures from Files"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:174
msgid ""
"What about loading your own texture from an image? This is often most easily"
" done using the :func:`pyvista.read_texture` function - simply pass an image"
" file's path, and this function with handle making a ``vtkTexture`` for you "
"to use."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:204
msgid "NumPy Arrays as Textures"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:206
msgid ""
"Want to use a programmatically built image? :class:`pyvista.UniformGrid` "
"objects can be converted to textures using :func:`pyvista.image_to_texture` "
"and 3D NumPy (X by Y by RGB) arrays can be converted to textures using "
":func:`pyvista.numpy_to_texture`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:249
msgid "Create a GIF Movie with updating textures"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:250
msgid "Generate a moving gif from an active plotter with updating textures."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:308
msgid "Textures with Transparency"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:310
msgid ""
"Textures can also specify per-pixel opacity values. The image must contain a"
" 4th channel specifying the opacity value from 0 [transparent] to 255 [fully"
" visible]. To enable this feature just pass the opacity array as the 4th "
"channel of the image as a 3 dimensional matrix with shape [nrows, ncols, 4] "
":func:`pyvista.numpy_to_texture`."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:316
msgid "Here we can download an image that has an alpha channel:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:364
msgid "Repeating Textures"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:366
msgid ""
"What if you have a single texture that you'd like to repeat across a mesh? "
"Simply define the texture coordinates for all nodes explicitly."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:369
msgid ""
"Here we create the texture coordinates to fill up the grid with several "
"mappings of a single texture. In order to do this we must define texture "
"coordinates outside of the typical ``(0, 1)`` range:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:394
msgid ""
"By defining texture coordinates that range ``(0, 4)`` on each axis, we will "
"produce 4 repetitions of the same texture on this mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:397
msgid ""
"Then we must associate those texture coordinates with the mesh through the "
":attr:`pyvista.DataSet.active_t_coords` property."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:416
msgid "Now display all the puppies!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:443
msgid "Spherical Texture Coordinates"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:444
msgid ""
"We have a built in convienance method for mapping textures to spherical "
"coordinate systems much like the planar mapping demoed above."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:472
msgid ""
"The helper method above does not always produce the desired texture "
"coordinates, so sometimes it must be done manually. Here is a great, user "
"contributed example from `this support issue "
"<https://github.com/pyvista/pyvista-support/issues/257>`_"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:476
msgid ""
"Manually create the texture coordinates for a globe map. First, we create "
"the mesh that will be used as the globe. Note the `start_theta` for a slight"
" overlappig"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:516
msgid "**Total running time of the script:** ( 0 minutes  10.979 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:531
msgid ":download:`Download Python source code: texture.py <texture.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/texture.rst:537
msgid ":download:`Download Jupyter notebook: texture.ipynb <texture.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_themes.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:24
#: ../../pyvista/doc/examples/index.rst:2181
msgid "Control Global and Local Plotting Themes"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:26
msgid ""
"PyVista allows you to set global and local plotting themes to easily set "
"default plotting parameters."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:45
msgid "Define a simple plotting routine for comparing the themes."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:71
msgid ""
"PyVista's default color theme is chosen to be generally easy on your eyes "
"and is best used when working long hours on your visualization project.  The"
" grey background and warm colormaps are chosen to make sure 3D renderings do"
" not drastically change the brightness of your screen when working in dark "
"environments."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:77
msgid ""
"Here's an example of our default plotting theme - this is what you would see"
" by default after running any of our examples locally."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:102
msgid "PyVista also ships with a few plotting themes:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:104
msgid ""
"``'ParaView'``: this is designed to mimic ParaView's default plotting theme."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:105
msgid ""
"``'dark'``: this is designed to be night-mode friendly with dark backgrounds"
" and color schemes."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:106
msgid ""
"``'document'``: this is built for use in document style plotting and making "
"publication quality figures."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:110
msgid "Demo the ``'ParaView'`` theme."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:136
msgid "Demo the ``'dark'`` theme."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:161
msgid ""
"Demo the ``'document'`` theme.  This theme is used on our online examples."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:186
msgid ""
"Note that you can also use color gradients for the background of the "
"plotting window!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:216
msgid "Modifying the Global Theme"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:217
msgid ""
"You can control how meshes are displayed by setting individual parameters "
"when plotting like ``mesh.plot(show_edges=True)``, or by setting a global "
"theme.  You can also control individual parameters how all meshes are "
"displayed by default via ``pyvista.global_theme``."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:222
msgid ""
"Here, we print out the current global defaults for all ``pyvista`` meshes.  "
"These values have been changed by the previous \"Document\" theme."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:332
msgid ""
"By default, edges are not shown on meshes unless explicitly specified when "
"plotting a mesh via ``show_edges=True``.  You can change this default "
"behavior globally by changing the default parameter."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:360
msgid ""
"You can reset pyvista to default behavior with ``restore_defaults``. Note "
"that the figure's color was reset to the default \"white\" color rather than"
" the \"tan\" color default with the document theme.  Under the hood, each "
"theme applied changes the global plot defaults stored within "
"``pyvista.global_theme.``"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:390
msgid "Creating a Custom Theme and Applying it Globally"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:391
msgid ""
"You can create a custom theme by modifying one of the existing themes and "
"then loading it into the global plotting defaults."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:394
msgid ""
"Here, we create a dark theme that plots meshes red by default while showing "
"edges."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:429
msgid "Creating a Custom Theme and Applying it to a Single Plotter"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:430
msgid ""
"In this example, we create a custom theme from the base \"default\" theme "
"and then apply it to a single plotter.  Note that this does not change the "
"behavior of the global \"defaults\", which are still set to the modified "
"``DarkTheme``."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:435
msgid ""
"This approach carries the advantage that you can maintain several themes and"
" apply them to one or more plotters."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:469
msgid "Alternatively, set the theme of an instance of ``Plotter``."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:496
msgid "Reset to use the document theme"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:513
msgid "**Total running time of the script:** ( 0 minutes  6.321 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:528
msgid ":download:`Download Python source code: themes.py <themes.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/themes.rst:534
msgid ":download:`Download Jupyter notebook: themes.ipynb <themes.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_topo-map.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:24
#: ../../pyvista/doc/examples/index.rst:2202
msgid "Topographic Map"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:26
msgid ""
"This is very similar to the :ref:`ref_texture_example` example except it is "
"focused on plotting aerial imagery from a GeoTIFF on top of some topography "
"mesh."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:56
msgid "Let's inspect the imagery that we just loaded"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:90
msgid ""
"Once you have a topography mesh loaded as a surface mesh (we use a "
":class:`pyvista.StructuredGrid` here) and an image loaded as a "
":class:`pyvista.Texture` object using the :func:`pyvista.read_texture` "
"method, then you can map that imagery to the surface mesh as follows:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:112
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>436733</td></tr>\n"
"<tr><td>N Points</td><td>222110</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.825e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.645e+06, 5.653e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.381e+03, 2.787e+03</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.381e+03</td><td>2.787e+03</td></tr>\n"
"<tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:140
msgid "Now display it! Note that the imagery is aligned as we expect."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:162
msgid "And here is a 3D perspective!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:184
msgid ""
"We could also display the entire region by extracting the surrounding region"
" and plotting the texture mapped local topography and the outside area"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:221
msgid "**Total running time of the script:** ( 0 minutes  17.127 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:236
msgid ":download:`Download Python source code: topo-map.py <topo-map.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/topo-map.rst:242
msgid ":download:`Download Jupyter notebook: topo-map.ipynb <topo-map.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_vector-component.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:22
#: ../../pyvista/doc/examples/index.rst:2223
msgid "Plot Vector Component"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:24
msgid "Plot a single component of a vector as a scalar array."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:26
msgid ""
"We can plot individual components of multi-component arrays with the "
"``component`` argument  of the ``add_mesh`` method."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:46
msgid "Download an example notched beam stress"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:64
msgid ""
"The default behavior with no component specified is to use the vector "
"magnitude. We can access each component by specifying the component "
"argument."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:111
msgid "**Total running time of the script:** ( 0 minutes  1.290 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:126
msgid ""
":download:`Download Python source code: vector-component.py <vector-"
"component.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/vector-component.rst:132
msgid ""
":download:`Download Jupyter notebook: vector-component.ipynb <vector-"
"component.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_02-plot_volume.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:26
msgid ""
"Volume render uniform mesh types like :class:`pyvista.UniformGrid` or 3D "
"NumPy arrays."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:29
msgid ""
"This also explores how to extract a volume of interest (VOI) from a "
":class:`pyvista.UniformGrid` using the "
":func:`pyvista.UniformGridFilters.extract_subset` filter."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:50
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>10225800</td></tr>\n"
"<tr><td>N Points</td><td>10368384</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.497e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.786e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 2.000e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>208, 248, 201</td></tr>\n"
"<tr><td>Spacing</td><td>7.230e-01, 7.230e-01, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>SLCImage</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.740e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:80
msgid "Simple Volume Render"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:109
msgid "Opacity Mappings"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:111
msgid ""
"Or use the :func:`pyvista.BasePlotter.add_volume` method like below. Note "
"that here we use a non-default opacity mapping to a sigmoid:"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:138
msgid "You can also use a custom opacity mapping"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:165
msgid ""
"We can also use a shading technique when volume rendering with the ``shade``"
" option"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:197
msgid "Cool Volume Examples"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:199
msgid "Here are a few more cool volume rendering examples"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:277
msgid "Extracting a VOI"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:279
msgid ""
"Use the :func:`pyvista.UniformGridFilters.extract_subset` filter to extract "
"a volume of interest/subset volume to volume render. This is ideal when "
"dealing with particularly large volumes and you want to volume render only a"
" specific region."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:298
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>UniformGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>11003760</td></tr>\n"
"<tr><td>N Points</td><td>11156040</td></tr>\n"
"<tr><td>X Bounds</td><td>4.130e+05, 6.920e+05</td></tr>\n"
"<tr><td>Y Bounds</td><td>3.864e+06, 4.096e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>-5.479e+04, 5.302e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>280, 233, 171</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+03, 1.000e+03, 3.535e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>data</b></td><td>Points</td><td>float32</td><td>1</td><td>9.782e-15</td><td>1.000e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:357
msgid ""
"Woah, that's a big volume! We probably don't want to volume render the whole"
" thing. So let's extract a region of interest under the volcano."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:360
msgid ""
"The region we will extract will be between nodes 175 and 200 on the x-axis, "
"between nodes 105 and 132 on the y-axis, and between nodes 98 and 170 on the"
" z-axis."
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:390
msgid "Ah, much better. Let's now volume render that region of interest!"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:420
msgid "**Total running time of the script:** ( 0 minutes  39.019 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:435
msgid ":download:`Download Python source code: volume.py <volume.py>`"
msgstr ""

#: ../../pyvista/doc/examples/02-plot/volume.rst:441
msgid ":download:`Download Jupyter notebook: volume.ipynb <volume.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_box-widget.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:24
#: ../../pyvista/doc/examples/index.rst:2289
msgid "Box Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:26
msgid ""
"The box widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_box_widget` and "
":func:`pyvista.Plotter.clear_box_widgets` methods respectively. When "
"enabling the box widget, you must provide a custom callback function "
"otherwise the box would appear and do nothing - the callback functions are "
"what allow us to leverage the widget to perform a task like "
"clipping/cropping."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:33
msgid ""
"Considering that using a box to clip/crop a mesh is one of the most common "
"use cases, we have included a helper method that will allow you to add a "
"mesh to a scene with a box widget that controls its extent, the "
":func:`pyvista.Plotter.add_mesh_clip_box` method."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:81
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:62
msgid "After interacting with the scene, the clipped mesh is available as:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:113
msgid "**Total running time of the script:** ( 0 minutes  8.533 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:128
msgid ":download:`Download Python source code: box-widget.py <box-widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/box-widget.rst:134
msgid ""
":download:`Download Jupyter notebook: box-widget.ipynb <box-widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_checkbox-widget.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:24
#: ../../pyvista/doc/examples/index.rst:2310
msgid "Checkbox Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:26
msgid "Use a checkbox to turn on/off the visibility of meshes in a scene."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:28
msgid ""
"See :func:`pyvista.Plotter.add_checkbox_button_widget` for more details."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:46
msgid "Single Checkbox"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:81
msgid "Multiple Checkboxes"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:83
msgid ""
"In this example, we will add many meshes to a scene with unique colors and "
"create corresponding checkboxes for those meshes of the same color to toggle"
" their visibility in the scene."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:162
msgid "**Total running time of the script:** ( 0 minutes  0.787 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:177
msgid ""
":download:`Download Python source code: checkbox-widget.py <checkbox-"
"widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/checkbox-widget.rst:183
msgid ""
":download:`Download Jupyter notebook: checkbox-widget.ipynb <checkbox-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_line-widget.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:24
#: ../../pyvista/doc/examples/index.rst:2331
msgid "Line Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:26
msgid ""
"The line widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_line_widget` and "
":func:`pyvista.Plotter.clear_line_widgets` methods respectively. "
"Unfortunately, PyVista does not have any helper methods to utilize this "
"widget, so it is necessary to pass a custom callback method."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:32
msgid ""
"One particularly fun example is to use the line widget to create a source "
"for the :func:`pyvista.DataSetFilters.streamlines` filter. Again note the "
"use of the ``name`` argument in ``add_mesh``."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:96
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:94
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:156
#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:206
#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:110
#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:155
#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:102
#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:161
#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:265
msgid "And here is a screen capture of a user interacting with this"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:103
msgid "**Total running time of the script:** ( 0 minutes  1.797 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:118
msgid ""
":download:`Download Python source code: line-widget.py <line-widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/line-widget.rst:124
msgid ""
":download:`Download Jupyter notebook: line-widget.ipynb <line-widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_multi-slider-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:22
#: ../../pyvista/doc/examples/index.rst:2352
msgid "Multiple Slider Widgets"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:24
msgid ""
"Use a class based callback to track multiple slider widgets for updating a "
"single mesh."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:27
msgid ""
"In this example we simply change a few parameters for the "
":func:`pyvista.Sphere` method, but this could easily be applied to any mesh-"
"generating/altering code."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:131
msgid "**Total running time of the script:** ( 0 minutes  0.397 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:146
msgid ""
":download:`Download Python source code: multi-slider-widget.py <multi-"
"slider-widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/multi-slider-widget.rst:152
msgid ""
":download:`Download Jupyter notebook: multi-slider-widget.ipynb <multi-"
"slider-widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_plane-widget.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:24
#: ../../pyvista/doc/examples/index.rst:2373
msgid "Plane Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:26
msgid ""
"The plane widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_plane_widget` and "
":func:`pyvista.Plotter.clear_plane_widgets` methods respectively. As with "
"all widgets, you must provide a custom callback method to utilize that "
"plane. Considering that planes are most commonly used for clipping and "
"slicing meshes, we have included two helper methods for doing those tasks!"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:33
msgid "Let's use a plane to clip a mesh:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:100
msgid "Or you could slice a mesh using the plane widget:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:124
msgid "After interacting with the scene, the slice is available as:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:162
msgid ""
"Or you could leverage the plane widget for some custom task like glyphing a "
"vector field along that plane. Note that we have to pass a ``name`` when "
"calling ``add_mesh`` to ensure that there is only one set of glyphs plotted "
"at a time."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:212
msgid ""
"Further, a user can disable the arrow vector by setting the "
"``normal_rotation`` argument to ``False``. For example, here we "
"programmatically set the normal vector on which we want to translate the "
"plane and we disable the arrow to prevent its rotation."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:240
msgid ""
"The vector is also forcibly disabled anytime the ``assign_to_axis`` argument"
" is set."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:265
msgid "**Total running time of the script:** ( 0 minutes  8.208 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:280
msgid ""
":download:`Download Python source code: plane-widget.py <plane-widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/plane-widget.rst:286
msgid ""
":download:`Download Jupyter notebook: plane-widget.ipynb <plane-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:8
msgid "**00:24.143** total execution time for **examples_03-widgets** files:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_03-widgets_box-widget.py` (``box-widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:11
msgid "00:08.533"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_03-widgets_plane-widget.py` (``plane-widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:13
msgid "00:08.208"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_03-widgets_slider-bar-widget.py` (``slider-bar-"
"widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:15
msgid "00:03.400"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:17
msgid ""
":ref:`sphx_glr_examples_03-widgets_line-widget.py` (``line-widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:17
msgid "00:01.797"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:19
msgid ""
":ref:`sphx_glr_examples_03-widgets_sphere-widget.py` (``sphere-widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:19
msgid "00:00.942"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:21
msgid ""
":ref:`sphx_glr_examples_03-widgets_checkbox-widget.py` (``checkbox-"
"widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:21
msgid "00:00.787"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_03-widgets_spline-widget.py` (``spline-widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:23
msgid "00:00.476"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sg_execution_times.rst:25
msgid ""
":ref:`sphx_glr_examples_03-widgets_multi-slider-widget.py` (``multi-slider-"
"widget.py``)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_slider-bar-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:24
#: ../../pyvista/doc/examples/index.rst:2394
msgid "Slider Bar Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:26
msgid ""
"The slider widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_slider_widget` and "
":func:`pyvista.Plotter.clear_slider_widgets` methods respectively. This is "
"one of the most versatile widgets as it can control a value that can be used"
" for just about anything."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:46
msgid ""
"One helper method we've added is the "
":func:`pyvista.Plotter.add_mesh_threshold` method which leverages the slider"
" widget to control a thresholding value."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:78
msgid "After interacting with the scene, the threshold mesh is available as:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:117
msgid "Custom Callback"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:119
msgid ""
"Or you could leverage a custom callback function that takes a single value "
"from the slider as its argument to do something like control the resolution "
"of a mesh. Again note the use of the ``name`` argument in ``add_mesh``:"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:162
msgid "**Total running time of the script:** ( 0 minutes  3.400 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:177
msgid ""
":download:`Download Python source code: slider-bar-widget.py <slider-bar-"
"widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/slider-bar-widget.rst:183
msgid ""
":download:`Download Jupyter notebook: slider-bar-widget.ipynb <slider-bar-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_sphere-widget.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:22
#: ../../pyvista/doc/examples/index.rst:2415
msgid "Sphere Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:24
msgid ""
"The sphere widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_sphere_widget` and "
":func:`pyvista.Plotter.clear_sphere_widgets` methods respectively. This is a"
" very versatile widget as it can control vertex location that can be used to"
" control or update the location of just about anything."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:30
msgid ""
"We don't have any convenient helper methods that utilize this widget out of "
"the box, but we have added a lot of ways to use this widget so that you can "
"easily add several widgets to a scene."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:34
msgid "Let's look at a few use cases that all update a surface mesh."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:51
msgid "Example A"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:53
msgid "Use a single sphere widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:109
msgid "Example B"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:111
msgid "Use several sphere widgets at once"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:168
msgid "Example C"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:170
msgid ""
"This one is the coolest - use four sphere widgets to update perturbations on"
" a surface and interpolate between them with some boundary conditions"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:272
msgid "**Total running time of the script:** ( 0 minutes  0.942 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:287
msgid ""
":download:`Download Python source code: sphere-widget.py <sphere-widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/sphere-widget.rst:293
msgid ""
":download:`Download Jupyter notebook: sphere-widget.ipynb <sphere-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_03-widgets_spline-widget.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:22
#: ../../pyvista/doc/examples/index.rst:2436
msgid "Spline Widget"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:25
msgid ""
"A spline widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_spline_widget` and "
":func:`pyvista.Plotter.clear_spline_widgets` methods respectively. This "
"widget allows users to interactively create a poly line (spline) through a "
"scene and use that spline."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:31
msgid ""
"A common task with splines is to slice a volumetric dataset using an "
"irregular path. To do this, we have added a convenient helper method which "
"leverages the :func:`pyvista.DataSetFilters.slice_along_line` filter named "
":func:`pyvista.Plotter.add_mesh_slice_spline`."
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:89
msgid "**Total running time of the script:** ( 0 minutes  0.476 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:104
msgid ""
":download:`Download Python source code: spline-widget.py <spline-widget.py>`"
msgstr ""

#: ../../pyvista/doc/examples/03-widgets/spline-widget.rst:110
msgid ""
":download:`Download Jupyter notebook: spline-widget.ipynb <spline-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_actors.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:24
#: ../../pyvista/doc/examples/index.rst:2481
msgid "Light Actors"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:26
msgid ""
"Positional lights in PyVista have customizable beam shapes, see the "
":ref:`ref_light_beam_shape_example` example. Spotlights are special in the "
"sense that they are unidirectional lights with a finite position, so they "
"can be visualized using a cone."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:31
msgid ""
"This is exactly the purpose of a ``vtk.vtkLightActor``, the functionality of"
" which can be enabled for spotlights:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:79
msgid ""
"Light actors can be very useful when designing complex scenes where "
"spotlights are involved in lighting."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:122
msgid ""
"One thing to watch out for is that the light actors are represented such "
"that their cone has a fixed height. This implies that for very large cone "
"angles we typically end up with enormous light actors, in which case setting"
" a manual camera position before rendering is usually a good idea. "
"Increasing the first example's cone angle and omitting the manual camera "
"positioning exemplifies the problem:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:163
msgid "**Total running time of the script:** ( 0 minutes  1.977 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:178
msgid ":download:`Download Python source code: actors.py <actors.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/actors.rst:184
msgid ":download:`Download Jupyter notebook: actors.ipynb <actors.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_attenuation.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:24
#: ../../pyvista/doc/examples/index.rst:2502
msgid "Attenuation"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:26
msgid ""
"Attenuation is the phenomenon of light's intensity being gradually dampened "
"as it propagates through a medium. In PyVista positional lights can show "
"attenuation. The quadratic attenuation model uses three parameters to "
"describe attenuation: a constant, a linear and a quadratic parameter. These "
"parameters describe the decrease of the beam intensity as a function of the "
"distance, `I(r)`. In a broad sense the constant, linear and quadratic "
"components correspond to `I(r) = 1`, `I(r) = 1/r` and `I(r) = 1/r^2` decay "
"of the intensity with distance from the point source. In all cases a larger "
"attenuation value (of a given kind) means stronger dampening (weaker light "
"at a given distance)."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:36
msgid ""
"So the constant attenuation parameter corresponds roughly to a constant "
"intensity component. The linear and the quadratic attenuation parameters "
"correspond to intensity components that decay with distance from the source."
" For the same parameter value the quadratic attenuation produces a beam that"
" is shorter in range than that produced by linear attenuation."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:42
msgid "Three spotlights with three different attenuation profiles each:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:82
msgid ""
"It's not too obvious but it's visible that the rightmost light with "
"quadratic attenuation has a shorter range than the middle one with linear "
"attenuation. Although it seems that even the leftmost light with constant "
"attenuation loses its brightness gradually, this partly has to do with the "
"fact that we sliced the light beams very close to their respective axes, "
"meaning that light hits the surface in a very small angle. Altering the "
"scene such that the lights are further away from the plane changes this:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:126
msgid "Now the relationship of the three kinds of attenuation seems clearer."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:128
msgid ""
"For a more practical comparison, let's look at planes that are perpendicular"
" to the axis of each light (making use of the fact that shadowing between "
"objects is not handled by default):"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:173
msgid "**Total running time of the script:** ( 0 minutes  1.145 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:188
msgid ""
":download:`Download Python source code: attenuation.py <attenuation.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/attenuation.rst:194
msgid ""
":download:`Download Jupyter notebook: attenuation.ipynb <attenuation.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_beam_shape.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:24
#: ../../pyvista/doc/examples/index.rst:2523
msgid "Beam Shape"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:26
msgid ""
"The default directional lights are infinitely distant point sources, for "
"which the only geometric customization option is the choice of beam "
"direction defined by the light's position and focal point. Positional "
"lights, however, have more options for beam customization."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:31
msgid "Consider two hemispheres:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:65
msgid ""
"We can see that the default lighting does a very good job of articulating "
"the shape of the hemispheres."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:68
msgid ""
"Let's shine a directional light on them, positioned between the hemispheres "
"and oriented along their centers:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:105
msgid ""
"Both hemispheres have their surface lit on the side that faces the light. "
"This is consistent with the point source positioned at infinity, directed "
"from the light's nominal position toward the focal point."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:109
msgid ""
"Now let's change the light to a positional light (but not a spotlight):"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:147
msgid ""
"Now the inner surface of both hemispheres is lit. A positional light with a "
"cone angle of 90 degrees (or more) acts as a point source located at the "
"light's nominal position. It could still display attenuation, see the "
":ref:`ref_attenuation_example` example."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:152
msgid ""
"Switching to a spotlight (i.e. a positional light with a cone angle less "
"than 90 degrees) will enable beam shaping using the :py:attr:`exponent` "
"property. Let's put our hemispheres side by side for this, and put a light "
"in the center of each: one spotlight, one merely positional."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:204
msgid ""
"Even though the two lights only differ by a fraction of a degree in cone "
"angle, the beam shaping effect enabled for spotlights causes a marked "
"difference in the result."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:208
msgid ""
"Once we have a spotlight we can change its :py:attr:`exponent` to make the "
"beam shape sharper or broader. Three spotlights with varying sharpness:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:254
msgid ""
"The spotlight with exponent 0.3 is practically uniform, and the one with "
"exponent 5 is visibly focused along the axis of the light."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:260
msgid "**Total running time of the script:** ( 0 minutes  2.194 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:275
msgid ":download:`Download Python source code: beam_shape.py <beam_shape.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/beam_shape.rst:281
msgid ""
":download:`Download Jupyter notebook: beam_shape.ipynb <beam_shape.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_light_types.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:24
#: ../../pyvista/doc/examples/index.rst:2544
msgid "Light Types"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:26
msgid "Lights come in three types:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:28
msgid ""
"headlights, the axis of which always coincides with the view of the camera,"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:29
msgid ""
"camera lights, which move together with the camera, but which can occupy any"
" fixed relative position with respect to the camera,"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:31
msgid ""
"scene lights, the position of which is fixed to the scene, and which is thus"
" unaffected by moving the camera. This is the default type."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:35
msgid "Headlight"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:37
msgid ""
"For headlights the :py:attr:`position` and :py:attr:`focal_point` properties"
" are meaningless. No matter where you move the camera, the light always "
"emanates from the view point:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:78
msgid "Camera light"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:80
msgid ""
"Camera lights define their :py:attr:`position` and :py:attr:`focal_point` "
"properties in a coordinate system that is local to the camera. The "
"coordinates in the scene's coordinate system can be accessed through the "
":py:attr:`world_position` and :py:attr:`world_focal_point` read-only "
"properties, respectively. For specifics of the local coordinate system used "
"for the coordinates please see the documentation of "
":func:`pyvista.Light.set_camera_light`."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:115
msgid "Scene light"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:117
msgid ""
"Scene lights are attached to the scene, their position and focal point are "
"interpreted as global coordinates:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:146
msgid "**Total running time of the script:** ( 0 minutes  3.315 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:161
msgid ""
":download:`Download Python source code: light_types.py <light_types.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/light_types.rst:167
msgid ""
":download:`Download Jupyter notebook: light_types.ipynb <light_types.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_mesh_lighting.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:24
#: ../../pyvista/doc/examples/index.rst:2565
msgid "Disabling Mesh Lighting"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:26
msgid "Disable mesh lighting."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:28
msgid ""
"While plotters have a default set of lights and there are many options for "
"customizing lighting conditions in general, meshes have the option to opt "
"out of lighting altogether. Pass ``lighting=False`` to "
":func:`pyvista.Plotter.add_mesh` to disable lighting for the given mesh:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:67
msgid ""
"Due to the obvious lack of depth detail this mostly makes sense for meshes "
"with non-trivial colors or textures. If it weren't for the edges being "
"drawn, the second mesh would be practically impossible to understand even "
"with the option to interactively explore the surface:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:93
msgid ""
"For further examples about fine-tuning mesh properties that affect light "
"rendering, see the :ref:`ref_lighting_properties_example` example."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:99
msgid "**Total running time of the script:** ( 0 minutes  1.833 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:114
msgid ""
":download:`Download Python source code: mesh_lighting.py <mesh_lighting.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/mesh_lighting.rst:120
msgid ""
":download:`Download Jupyter notebook: mesh_lighting.ipynb "
"<mesh_lighting.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_plotter_builtins.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:24
#: ../../pyvista/doc/examples/index.rst:2586
msgid "Plotter Lighting Systems"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:26
msgid ""
"The :class:`pyvista.Plotter` class comes with three options for the default "
"lighting system:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:29
msgid "a light kit consisting of a headlight and four camera lights,"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:30
msgid ""
"an illumination system containing three lights arranged around the camera,"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:31
msgid "no lighting."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:33
msgid ""
"With meshes that don't have depth information encoded in their color the "
"importance of an appropriate lighting setup becomes paramount for accurate "
"visualization."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:38
msgid "Light kit"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:40
msgid ""
"The default ``lighting='light kit'`` option recreates a lighting setup that "
"corresponds to a ``vtk.vtkLightKit``. We can check what type of lights this "
"lighting comprises:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:79
msgid "Add a white terrain to the scene:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:107
msgid "Three-lights illumination"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:109
msgid ""
"Switching to three-lights illumination gives a different character to the "
"figure, in this case showing less contrast when viewing the mountain from "
"the top, but having more contrast with views closer to the side. This "
"becomes especially clear when exploring the figures interactively."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:137
msgid "Again we can check what kind of lights this setting uses:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:171
msgid "Custom lighting"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:173
msgid ""
"We can introduce our own lighting from scratch by disabling any lighting on "
"plotter initialization. Adding a single scene light to a scene will often "
"result in ominous visuals due to objects having larger regions in shadow."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:206
msgid "Custom lighting with shadows"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:208
msgid ""
"Here, we ``enable_shadows`` to enhance the effect that the lighting angle "
"has.  It has a subtle, but realistic effect.  Notice the sharp shadows due "
"to the mountaintop."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:239
msgid "**Total running time of the script:** ( 0 minutes  3.824 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:254
msgid ""
":download:`Download Python source code: plotter_builtins.py "
"<plotter_builtins.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/plotter_builtins.rst:260
msgid ""
":download:`Download Jupyter notebook: plotter_builtins.ipynb "
"<plotter_builtins.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:8
msgid "**00:05.249** total execution time for **examples_04-lights** files:"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_examples_04-lights_shadows.py` (``shadows.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:11
msgid "00:05.249"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_examples_04-lights_actors.py` (``actors.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_examples_04-lights_attenuation.py` (``attenuation.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_examples_04-lights_beam_shape.py` (``beam_shape.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_examples_04-lights_light_types.py` (``light_types.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:21
msgid ""
":ref:`sphx_glr_examples_04-lights_mesh_lighting.py` (``mesh_lighting.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_04-lights_plotter_builtins.py` "
"(``plotter_builtins.py``)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_04-lights_shadows.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:24
#: ../../pyvista/doc/examples/index.rst:2607
msgid "Shadows"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:26
msgid "Demonstrate the usage of lights and shadows in PyVista."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:48
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>871414</td></tr>\n"
"<tr><td>N Points</td><td>437645</td></tr>\n"
"<tr><td>X Bounds</td><td>-6.182e-02, 6.692e-02</td></tr>\n"
"<tr><td>Y Bounds</td><td>-9.431e-02, 7.927e-02</td></tr>\n"
"<tr><td>Z Bounds</td><td>5.273e-02, 1.972e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:69
msgid "Using two lights, plot the Stanford Dragon with shadows."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:146
msgid ""
"Show light penetrating several planes.  Adjust the light intensity and the "
"``shadow_attenuation`` to change how many planes the light can go through."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:193
msgid ""
"Here, we use a lower shadow_attenuation value to demonstrate how the light "
"can travel through more planes."
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:239
msgid "**Total running time of the script:** ( 0 minutes  5.249 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:254
msgid ":download:`Download Python source code: shadows.py <shadows.py>`"
msgstr ""

#: ../../pyvista/doc/examples/04-lights/shadows.rst:260
msgid ":download:`Download Jupyter notebook: shadows.ipynb <shadows.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_antarctica-"
"compare.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:24
#: ../../pyvista/doc/examples/index.rst:2643
msgid "Compare Field Across Mesh Regions"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:26
msgid ""
"Here is some velocity data from a glacier modelling simulation that is "
"compared across nodes in the simulation. We have simplified the mesh to have"
" the simulation node value already on the mesh."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:30
msgid ""
"This was originally posted to `pyvista/pyvista-support#83 "
"<https://github.com/pyvista/pyvista-support/issues/83>`_."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:32
msgid ""
"The modeling results are courtesy of `Urruty Benoit "
"<https://github.com/BenoitURRUTY>`_ and  are from the `Elmer/Ice "
"<http://elmerice.elmerfem.org>`_ simulation software."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:56
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1106948</td></tr>\n"
"<tr><td>N Points</td><td>557470</td></tr>\n"
"<tr><td>X Bounds</td><td>-2.506e+06, 2.743e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>-2.143e+06, 2.240e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>3</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>ssavelocity</td><td>Points</td><td>float64</td><td>3</td><td>-4.341e+03</td><td>9.677e+03</td></tr>\n"
"<tr><td>node_value</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>2.300e+01</td></tr>\n"
"<tr><td><b>magnitude</b></td><td>Points</td><td>float64</td><td>1</td><td>6.649e-03</td><td>1.013e+04</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:85
msgid ""
"Here is a helper to extract regions of the mesh based on the simulation "
"node."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:190
msgid "plot vectors without mesh"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:222
msgid ""
"Compare directions. Normalize them so we can get a reasonable direction "
"comparison."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:263
msgid "flow_a that agrees with the mean flow path of flow_b"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:313
msgid "**Total running time of the script:** ( 0 minutes  11.662 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:328
msgid ""
":download:`Download Python source code: antarctica-compare.py <antarctica-"
"compare.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/antarctica-compare.rst:334
msgid ""
":download:`Download Jupyter notebook: antarctica-compare.ipynb <antarctica-"
"compare.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_extending-"
"pyvista.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:24
#: ../../pyvista/doc/examples/index.rst:2664
msgid "Extending PyVista"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:26
msgid ""
"A :class:`pyvista.DataSet`, such as :class:`pyvista.PolyData`, can be "
"extended by users.  For example, if the user wants to keep track of the "
"location of the maximum point in the (1, 0, 1) direction on the mesh."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:30
msgid ""
"There are two methods by which users can handle subclassing.  One is "
"directly managing the types objects.  This may require checking types during"
" filter operations."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:34
msgid ""
"The second is automatic managing of types.  Users can control whether user "
"defined classes are nearly always used for particular types of DataSets."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:38
msgid ""
"This is for advanced usage only.  Automatic managing of types will not work "
"in all situations, in particular when a builtin dataset is directly "
"instantiated.  See examples below."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:63
msgid ""
"A user defined subclass of :class:`pyvista.PolyData`, ``FooData`` is "
"defined. It includes a property to keep track of the point on the mesh that "
"is furthest along in the (1, 0, 1) direction."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:90
msgid "Directly Managing Types"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:92
msgid ""
"Now a ``foo_sphere`` object is created of type ``FooData``. The index of the"
" point and location of the point of interest can be obtained directly. The "
"sphere has a radius of 0.5, so the maximum extent in the direction (1, 0, 1)"
" is :math:`0.5\\sqrt{0.5}\\approx0.354`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:129
msgid ""
"Using an inplace operation like :func:`pyvista.DataSet.rotate_y` does not "
"affect the type of the object."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:164
msgid ""
"However, filter operations can return different ``DataSet`` types including "
"ones that differ from the original type.  In this case, the :func:`decimate "
"<pyvista.PolyDataFilters.decimate>` method returns a "
":class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:197
msgid "It is now required to explicitly wrap the object into ``FooData``."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:229
msgid "Automatically Managing Types"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:231
msgid ""
"The default :class:`pyvista.DataSet` type can be set using "
"``pyvista._wrappers``. In general, it is best to use this method when it is "
"expected to primarily use the user defined class."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:235
msgid ""
"In this example, all objects that would have been created as "
":class:`pyvista.PolyData` would now be created as a ``FooData`` object. "
"Note, that the key is the underlying vtk object."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:255
msgid ""
"It is no longer necessary to specifically wrap :class:`pyvista.PolyData` "
"objects to obtain a ``FooData`` object."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:289
msgid ""
"Using an inplace operation like :func:`rotate_y <pyvista.DataSet.rotate_y>` "
"does not affect the type of the object."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:324
msgid ""
"Filter operations that return :class:`pyvista.PolyData` now return "
"``FooData``"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:359
msgid ""
"Users can still create a native :class:`pyvista.PolyData` object, but using "
"this method may incur unintended consequences.  In this case, it is "
"recommended to use the directly managing types method."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:394
msgid ""
"Usage of ``pyvista._wrappers`` may require resetting the default value to "
"avoid leaking the setting into cases where it is unused."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:413
msgid ""
"For instances where a localized usage is preferred, a tear-down method is "
"recommended.  One example is a ``try...finally`` block."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:436
msgid "**Total running time of the script:** ( 0 minutes  0.186 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:451
msgid ""
":download:`Download Python source code: extending-pyvista.py <extending-"
"pyvista.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/extending-pyvista.rst:457
msgid ""
":download:`Download Jupyter notebook: extending-pyvista.ipynb <extending-"
"pyvista.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_openfoam-"
"example.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:24
#: ../../pyvista/doc/examples/index.rst:2685
msgid "Plot OpenFOAM data"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:43
msgid ""
"This example uses data from a lid-driven cavity flow.  It is recommended to "
"use :class:`pyvista.OpenFOAMReader` for reading OpenFOAM files for more "
"control over reading data."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:47
msgid ""
"This example will only run correctly in versions of vtk>=9.1.0.  The names "
"of the patch arrays and resulting keys in the read mesh will be different in"
" prior versions."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:68
msgid ""
"OpenFOAM datasets include multiple sub-datasets including the internal mesh "
"and patches, typically boundaries.  This can be inspected before reading the"
" data."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:97
msgid ""
"This data is represented as a :class:`pyvista.MultiBlock` object. The "
"internal mesh will be located in the top-level MultiBlock mesh."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:126
msgid "In this case the internal mesh is a :class:`pyvista.UnstructuredGrid`."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:159
msgid ""
"Additional Patch meshes are nested inside another MultiBlock mesh.  The name"
" of the sub-level MultiBlock mesh depends on the vtk version."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:203
msgid ""
"The default in OpenFOAMReader is to translate the existing cell data to "
"point data.  Therefore, the cell data arrays are duplicated in point data."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:253
msgid "This behavior can be turned off if only cell data is required."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:302
msgid "Now we will read in all the data at the last time point."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:333
msgid ""
"This OpenFOAM simulation is in 3D with only 1 cell in the z-direction.  "
"First, the solution is sliced in the center of the z-direction. "
":func:`pyvista.DataSetFilters.streamlines_evenly_spaced_2D` requires the "
"data to lie in the z=0 plane.  So, after the domain sliced, it is translated"
" to ``z=0``."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:367
msgid "Streamlines are generated using the point data \"U\"."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:390
msgid ""
"Plot streamlines colored by velocity magnitude.  Additionally, the moving "
"and fixed wall boundaries are plotted."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:420
msgid "**Total running time of the script:** ( 0 minutes  1.119 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:435
msgid ""
":download:`Download Python source code: openfoam-example.py <openfoam-"
"example.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/openfoam-example.rst:441
msgid ""
":download:`Download Jupyter notebook: openfoam-example.ipynb <openfoam-"
"example.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_osmnx-example.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:24
#: ../../pyvista/doc/examples/index.rst:2706
msgid "Plot Open Street Map Data"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:26
msgid ""
"This was originally posted to `pyvista/pyvista-support#486 "
"<https://github.com/pyvista/pyvista-support/issues/486>`_."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:28
msgid "Be sure to check out `osmnx <https://github.com/gboeing/osmnx>`_"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:30
msgid "Start by generating a graph from an address."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:54
msgid "Read in the graph directly from the Open Street Map server."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:77
msgid ""
"Next, convert the edges into pyvista lines using "
":func:`pyvista.lines_from_points`."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:107
msgid "Finally, merge the lines and plot"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:131
msgid "**Total running time of the script:** ( 0 minutes  0.846 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:146
msgid ""
":download:`Download Python source code: osmnx-example.py <osmnx-example.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/osmnx-example.rst:152
msgid ""
":download:`Download Jupyter notebook: osmnx-example.ipynb <osmnx-"
"example.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_ray-trace.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:69
msgid "**Total running time of the script:** ( 0 minutes  0.432 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:84
msgid ":download:`Download Python source code: ray-trace.py <ray-trace.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace.rst:90
msgid ""
":download:`Download Jupyter notebook: ray-trace.ipynb <ray-trace.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_ray-trace-"
"moeller.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:24
#: ../../pyvista/doc/examples/index.rst:2727
msgid "Visualize the Moeller–Trumbore Algorithm"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:26
msgid ""
"This example demonstrates the Moeller–Trumbore intersection algorithm using "
"pyvista."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:29
msgid "For additional details, please reference the following:"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:31
msgid ""
"`Möller–Trumbore intersection algorithm "
"<https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm>`_"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:32
msgid ""
"`Fast Minimum Storage Ray Triangle Intersectio "
"<https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf>`_"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:34
msgid "First, define the ray triangle intersection method."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:160
msgid "Plot the problem setup and the intersection"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:221
msgid "**Total running time of the script:** ( 0 minutes  0.561 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:236
msgid ""
":download:`Download Python source code: ray-trace-moeller.py <ray-trace-"
"moeller.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/ray-trace-moeller.rst:242
msgid ""
":download:`Download Jupyter notebook: ray-trace-moeller.ipynb <ray-trace-"
"moeller.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:8
msgid "**00:01.119** total execution time for **examples_99-advanced** files:"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:11
msgid ""
":ref:`sphx_glr_examples_99-advanced_openfoam-example.py` (``openfoam-"
"example.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:11
msgid "00:01.119"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:13
msgid ""
":ref:`sphx_glr_examples_99-advanced_antarctica-compare.py` (``antarctica-"
"compare.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:15
msgid ""
":ref:`sphx_glr_examples_99-advanced_extending-pyvista.py` (``extending-"
"pyvista.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:17
msgid ""
":ref:`sphx_glr_examples_99-advanced_osmnx-example.py` (``osmnx-example.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:19
msgid ""
":ref:`sphx_glr_examples_99-advanced_ray-trace-moeller.py` (``ray-trace-"
"moeller.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace.py` (``ray-trace.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/sg_execution_times.rst:23
msgid ""
":ref:`sphx_glr_examples_99-advanced_warp-by-vector-eigenmodes.py` (``warp-"
"by-vector-eigenmodes.py``)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_examples_99-advanced_warp-by-vector-"
"eigenmodes.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:22
#: ../../pyvista/doc/examples/index.rst:2769
msgid "Displaying eigenmodes of vibration using ``warp_by_vector``"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:24
msgid ""
"This example applies the ``warp_by_vector`` filter to a cube whose "
"eigenmodes have been computed using the Ritz method, as outlined in "
"Visscher, William M., Albert Migliori, Thomas M. Bell, et Robert A. Reinert."
" \"On the normal modes of free vibration of inhomogeneous and anisotropic "
"elastic objects\". The Journal of the Acoustical Society of America 90, n.4 "
"(october 1991): 2154-62. https://asa.scitation.org/doi/10.1121/1.401643"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:33
msgid ""
"First, let's solve the eigenvalue problem for a vibrating cube. We use a "
"crude approximation (by choosing a low max polynomial order) to get a fast "
"computation."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:235
msgid "Now, let's display a mode on a mesh of the cube."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:295
msgid "Finally, let's make a gallery of the first 8 unique eigenmodes."
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:330
msgid "**Total running time of the script:** ( 0 minutes  9.565 seconds)"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:345
msgid ""
":download:`Download Python source code: warp-by-vector-eigenmodes.py <warp-"
"by-vector-eigenmodes.py>`"
msgstr ""

#: ../../pyvista/doc/examples/99-advanced/warp-by-vector-eigenmodes.rst:351
msgid ""
":download:`Download Jupyter notebook: warp-by-vector-eigenmodes.ipynb <warp-"
"by-vector-eigenmodes.ipynb>`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:10
msgid "Examples"
msgstr "Приклади"

#: ../../pyvista/doc/examples/index.rst:12
msgid ""
"Here is a gallery of several examples demonstrating what PyVista can do!"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:15
msgid "All of these examples are live and available on MyBinder."
msgstr ""

#: ../../pyvista/doc/examples/index.rstNone
msgid "Launch on Binder"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:22
#: ../../pyvista/doc/examples/index.rst:566
#: ../../pyvista/doc/examples/index.rst:1409
#: ../../pyvista/doc/examples/index.rst:2255
#: ../../pyvista/doc/examples/index.rst:2447
#: ../../pyvista/doc/examples/index.rst:2618
#: ../../pyvista/doc/examples/index.rst:2780
msgid "<div class=\"sphx-glr-clear\"></div>"
msgstr "<div class=\"sphx-glr-clear\"></div>"

#: ../../pyvista/doc/examples/index.rst:31
msgid "Mesh Creation"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:33
msgid ""
"These examples demo how to read various file types into PyVista mesh "
"objects, create meshes from NumPy arrays, and how to create primitive "
"geometric objects like spheres, arrows, cubes, ellipsoids and more! Once a "
"mesh is loaded, it is ready for plotting with just a few lines of code - "
"explore these examples to get started with using PyVista for your data."
msgstr ""

#: ../../pyvista/doc/examples/index.rst:42
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an explicit "
"structured grid from NumPy arrays.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:51
msgid ":ref:`sphx_glr_examples_00-load_create-explicit-structured-grid.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:53
#: ../../pyvista/doc/examples/index.rst:74
#: ../../pyvista/doc/examples/index.rst:95
#: ../../pyvista/doc/examples/index.rst:116
#: ../../pyvista/doc/examples/index.rst:137
#: ../../pyvista/doc/examples/index.rst:158
#: ../../pyvista/doc/examples/index.rst:179
#: ../../pyvista/doc/examples/index.rst:200
#: ../../pyvista/doc/examples/index.rst:221
#: ../../pyvista/doc/examples/index.rst:242
#: ../../pyvista/doc/examples/index.rst:263
#: ../../pyvista/doc/examples/index.rst:284
#: ../../pyvista/doc/examples/index.rst:305
#: ../../pyvista/doc/examples/index.rst:326
#: ../../pyvista/doc/examples/index.rst:347
#: ../../pyvista/doc/examples/index.rst:368
#: ../../pyvista/doc/examples/index.rst:389
#: ../../pyvista/doc/examples/index.rst:410
#: ../../pyvista/doc/examples/index.rst:431
#: ../../pyvista/doc/examples/index.rst:452
#: ../../pyvista/doc/examples/index.rst:473
#: ../../pyvista/doc/examples/index.rst:494
#: ../../pyvista/doc/examples/index.rst:515
#: ../../pyvista/doc/examples/index.rst:536
#: ../../pyvista/doc/examples/index.rst:557
#: ../../pyvista/doc/examples/index.rst:602
#: ../../pyvista/doc/examples/index.rst:623
#: ../../pyvista/doc/examples/index.rst:644
#: ../../pyvista/doc/examples/index.rst:665
#: ../../pyvista/doc/examples/index.rst:686
#: ../../pyvista/doc/examples/index.rst:707
#: ../../pyvista/doc/examples/index.rst:728
#: ../../pyvista/doc/examples/index.rst:749
#: ../../pyvista/doc/examples/index.rst:770
#: ../../pyvista/doc/examples/index.rst:791
#: ../../pyvista/doc/examples/index.rst:812
#: ../../pyvista/doc/examples/index.rst:833
#: ../../pyvista/doc/examples/index.rst:854
#: ../../pyvista/doc/examples/index.rst:875
#: ../../pyvista/doc/examples/index.rst:896
#: ../../pyvista/doc/examples/index.rst:917
#: ../../pyvista/doc/examples/index.rst:938
#: ../../pyvista/doc/examples/index.rst:959
#: ../../pyvista/doc/examples/index.rst:980
#: ../../pyvista/doc/examples/index.rst:1001
#: ../../pyvista/doc/examples/index.rst:1022
#: ../../pyvista/doc/examples/index.rst:1043
#: ../../pyvista/doc/examples/index.rst:1064
#: ../../pyvista/doc/examples/index.rst:1085
#: ../../pyvista/doc/examples/index.rst:1106
#: ../../pyvista/doc/examples/index.rst:1127
#: ../../pyvista/doc/examples/index.rst:1148
#: ../../pyvista/doc/examples/index.rst:1169
#: ../../pyvista/doc/examples/index.rst:1190
#: ../../pyvista/doc/examples/index.rst:1211
#: ../../pyvista/doc/examples/index.rst:1232
#: ../../pyvista/doc/examples/index.rst:1253
#: ../../pyvista/doc/examples/index.rst:1274
#: ../../pyvista/doc/examples/index.rst:1295
#: ../../pyvista/doc/examples/index.rst:1316
#: ../../pyvista/doc/examples/index.rst:1337
#: ../../pyvista/doc/examples/index.rst:1358
#: ../../pyvista/doc/examples/index.rst:1379
#: ../../pyvista/doc/examples/index.rst:1400
#: ../../pyvista/doc/examples/index.rst:1448
#: ../../pyvista/doc/examples/index.rst:1469
#: ../../pyvista/doc/examples/index.rst:1490
#: ../../pyvista/doc/examples/index.rst:1511
#: ../../pyvista/doc/examples/index.rst:1532
#: ../../pyvista/doc/examples/index.rst:1553
#: ../../pyvista/doc/examples/index.rst:1574
#: ../../pyvista/doc/examples/index.rst:1595
#: ../../pyvista/doc/examples/index.rst:1616
#: ../../pyvista/doc/examples/index.rst:1637
#: ../../pyvista/doc/examples/index.rst:1658
#: ../../pyvista/doc/examples/index.rst:1679
#: ../../pyvista/doc/examples/index.rst:1700
#: ../../pyvista/doc/examples/index.rst:1721
#: ../../pyvista/doc/examples/index.rst:1742
#: ../../pyvista/doc/examples/index.rst:1763
#: ../../pyvista/doc/examples/index.rst:1784
#: ../../pyvista/doc/examples/index.rst:1805
#: ../../pyvista/doc/examples/index.rst:1826
#: ../../pyvista/doc/examples/index.rst:1847
#: ../../pyvista/doc/examples/index.rst:1868
#: ../../pyvista/doc/examples/index.rst:1889
#: ../../pyvista/doc/examples/index.rst:1910
#: ../../pyvista/doc/examples/index.rst:1931
#: ../../pyvista/doc/examples/index.rst:1952
#: ../../pyvista/doc/examples/index.rst:1973
#: ../../pyvista/doc/examples/index.rst:1994
#: ../../pyvista/doc/examples/index.rst:2015
#: ../../pyvista/doc/examples/index.rst:2036
#: ../../pyvista/doc/examples/index.rst:2057
#: ../../pyvista/doc/examples/index.rst:2078
#: ../../pyvista/doc/examples/index.rst:2099
#: ../../pyvista/doc/examples/index.rst:2120
#: ../../pyvista/doc/examples/index.rst:2141
#: ../../pyvista/doc/examples/index.rst:2162
#: ../../pyvista/doc/examples/index.rst:2183
#: ../../pyvista/doc/examples/index.rst:2204
#: ../../pyvista/doc/examples/index.rst:2225
#: ../../pyvista/doc/examples/index.rst:2246
#: ../../pyvista/doc/examples/index.rst:2291
#: ../../pyvista/doc/examples/index.rst:2312
#: ../../pyvista/doc/examples/index.rst:2333
#: ../../pyvista/doc/examples/index.rst:2354
#: ../../pyvista/doc/examples/index.rst:2375
#: ../../pyvista/doc/examples/index.rst:2396
#: ../../pyvista/doc/examples/index.rst:2417
#: ../../pyvista/doc/examples/index.rst:2438
#: ../../pyvista/doc/examples/index.rst:2483
#: ../../pyvista/doc/examples/index.rst:2504
#: ../../pyvista/doc/examples/index.rst:2525
#: ../../pyvista/doc/examples/index.rst:2546
#: ../../pyvista/doc/examples/index.rst:2567
#: ../../pyvista/doc/examples/index.rst:2588
#: ../../pyvista/doc/examples/index.rst:2609
#: ../../pyvista/doc/examples/index.rst:2645
#: ../../pyvista/doc/examples/index.rst:2666
#: ../../pyvista/doc/examples/index.rst:2687
#: ../../pyvista/doc/examples/index.rst:2708
#: ../../pyvista/doc/examples/index.rst:2729
#: ../../pyvista/doc/examples/index.rst:2750
#: ../../pyvista/doc/examples/index.rst:2771
msgid "</div>"
msgstr "</div>"

#: ../../pyvista/doc/examples/index.rst:63
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The &quot;Hello, "
"world!&quot; of VTK\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:72
msgid ":ref:`sphx_glr_examples_00-load_create-geometric-objects.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:84
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a Kochanek "
"spline/polyline from a numpy array of XYZ vertices.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:93
msgid ":ref:`sphx_glr_examples_00-load_create-kochanek-spline.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:105
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Creating parametric "
"objects\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:114
msgid ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:126
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Here we use pyvista.Box to "
"make `pixel art &lt;https://en.wikipedia.org/wiki/Pixel_art&gt;`_. Pixel "
"s...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:135
msgid ":ref:`sphx_glr_examples_00-load_create-pixel-art.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:147
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista wraps the "
"vtk.vtkPlatonicSolidSource filter as pyvista.PlatonicSolid.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:156
msgid ":ref:`sphx_glr_examples_00-load_create-platonic-solids.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:168
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a pyvista.PolyData "
"object from a point cloud of vertices and scalar arrays for those poi...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:177
msgid ":ref:`sphx_glr_examples_00-load_create-point-cloud.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:189
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"A pyvista.PointSet is a "
"concrete class representing a set of points that specifies the "
"interfac...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:198
msgid ":ref:`sphx_glr_examples_00-load_create-pointset.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:210
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Creating a pyvista.PolyData"
" (surface mesh) from vertices and faces.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:219
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:231
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a spline/polyline "
"from a numpy array of XYZ vertices\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:240
msgid ":ref:`sphx_glr_examples_00-load_create-spline.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:252
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a StructuredGrid "
"surface from NumPy arrays\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:261
msgid ":ref:`sphx_glr_examples_00-load_create-structured-surface.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:273
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Drape a surface (2D array) "
"from a line in 3D space.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:282
msgid ":ref:`sphx_glr_examples_00-load_create-surface-draped.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:294
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a surface from a set"
" of points through a Delaunay triangulation.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:303
msgid ":ref:`sphx_glr_examples_00-load_create-tri-surface.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:315
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot connections between "
"points in 3D as cylinders, colored by scalars.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:324
msgid ":ref:`sphx_glr_examples_00-load_create-truss.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:336
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a simple uniform "
"grid from a 3D NumPy array of values.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:345
msgid ":ref:`sphx_glr_examples_00-load_create-uniform-grid.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:357
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an irregular, "
"unstructured grid from NumPy arrays.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:366
msgid ":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:378
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Note this feature is only "
"available for vtk&gt;=9.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:387
msgid ":ref:`sphx_glr_examples_00-load_load-gltf.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:399
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Working with VRML Files\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:408
msgid ":ref:`sphx_glr_examples_00-load_load-vrml.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:420
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista leverages `meshio`_"
" to read many mesh formats not natively supported by VTK including t...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:429
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:441
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Read a dataset from a known"
" file type.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:450
msgid ":ref:`sphx_glr_examples_00-load_read-file.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:462
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Read and plot image files "
"(JPEG, TIFF, PNG, etc).\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:471
msgid ":ref:`sphx_glr_examples_00-load_read-image.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:483
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The VTK library supports "
"parallel file formats. Reading meshes broken up into several files is ...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:492
msgid ":ref:`sphx_glr_examples_00-load_read-parallel.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:504
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Load data using a Reader\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:513
msgid ":ref:`sphx_glr_examples_00-load_reader.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:525
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a topographic surface "
"to create a 3D terrain-following mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:534
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:546
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"- numpy arrays - "
"trimesh.Trimesh meshes - VTK objects\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:555
msgid ":ref:`sphx_glr_examples_00-load_wrap-trimesh.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:575
msgid "Filtering"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:577
msgid ""
"These examples show case various mesh analysis and filtering routines "
"present in the :ref:`filters_ref` module. Explore these demos to perform "
"tasks such as:"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:580
msgid "Slicing and cutting meshes"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:581
msgid "Computing mesh properties like volume, area, and surface normals"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:582
msgid "Mesh decimation"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:583
msgid "Extract regions of one mesh using another mesh's surface"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:584
msgid "Ray tracing through surface meshes"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:585
msgid "Resampling and interpolating scalar/vector values across meshes"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:586
msgid "Integrating a vector field to generate streamlines"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:587
msgid "Smoothing surfaces"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:591
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perform boolean operations "
"with closed (manifold) surfaces.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:600
msgid ":ref:`sphx_glr_examples_01-filter_boolean-operations.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:612
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract the coordinates of "
"the centers of all cells/faces in a mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:621
msgid ":ref:`sphx_glr_examples_01-filter_cell-centers.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:633
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip any PyVista dataset by"
" a pyvista.PolyData surface mesh using the pyvista.DataSetFilters.cl...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:642
msgid ":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:654
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip/cut any dataset using "
"using planes or boxes.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:663
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:675
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example use the "
"pyvista.PolyDataFilters.collision filter to detect the faces from one "
"sphe...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:684
msgid ":ref:`sphx_glr_examples_01-filter_collisions.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:696
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Compute normals on a "
"surface.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:705
msgid ":ref:`sphx_glr_examples_01-filter_compute-normals.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:717
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Calculate mass properties "
"such as the volume or area of datasets\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:726
msgid ":ref:`sphx_glr_examples_01-filter_compute-volume.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:738
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use the connectivity filter"
" to remove noisy isosurfaces.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:747
msgid ":ref:`sphx_glr_examples_01-filter_connectivity.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:759
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate iso-lines or "
"-surfaces for the scalars of a surface or volume.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:768
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:780
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Decimate a mesh\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:789
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:801
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Compute the average "
"thickness between two surfaces.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:810
msgid ":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:822
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract the cells in a mesh"
" that exist inside or outside a closed surface of another mesh\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:831
msgid ":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:843
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract edges from a "
"surface.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:852
msgid ":ref:`sphx_glr_examples_01-filter_extract-edges.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:864
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"You can extract the surface"
" of nearly any object within pyvista using the extract_surface filte...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:873
msgid ":ref:`sphx_glr_examples_01-filter_extract-surface.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:885
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This takes polygonal data "
"as input and generates polygonal data on output. The input dataset is...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:894
msgid ":ref:`sphx_glr_examples_01-filter_extrude-rotate.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:906
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate a surface from a "
"scalar field using the flying edges and marching cubes filters as pro...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:915
msgid ":ref:`sphx_glr_examples_01-filter_flying_edges.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:927
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perform a Gaussian "
"convolution on a uniformly gridded data set.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:936
msgid ":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:948
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Calculates the geodesic "
"path between two vertices using Dijkstra&#x27;s algorithm\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:957
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:969
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use vectors in a dataset to"
" plot and orient glyphs/geometric objects.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:978
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:990
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"vtk supports tables of "
"glyphs from which glyphs are looked up. This example demonstrates this "
"f...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:999
msgid ":ref:`sphx_glr_examples_01-filter_glyphs_table.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1011
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Estimate the gradient of a "
"scalar or vector field in a data set.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1020
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1032
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Interpolate one mesh&#x27;s"
" point/cell arrays onto another mesh&#x27;s nodes using a Gaussian "
"Kernel.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1041
msgid ":ref:`sphx_glr_examples_01-filter_interpolate.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1053
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Leverage powerful VTK "
"algorithms for computing mesh quality.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1062
msgid ":ref:`sphx_glr_examples_01-filter_mesh-quality.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1074
#: ../../pyvista/doc/examples/index.rst:2739
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Single line segment ray "
"tracing for PolyData objects.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1083
msgid ":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1095
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"pyvista.PolyData surfaces "
"and pointsets can easily be projected to a plane defined by a normal ...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1104
msgid ":ref:`sphx_glr_examples_01-filter_project-plane.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1116
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example reflects a "
"mesh across a plane.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1125
msgid ":ref:`sphx_glr_examples_01-filter_reflect.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1137
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Resample one mesh&#x27;s "
"point/cell arrays onto another mesh&#x27;s nodes.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1146
msgid ":ref:`sphx_glr_examples_01-filter_resample.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1158
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Rotations of a mesh about "
"its axes. In this model, the x axis is from the left to right; the y ...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1167
msgid ":ref:`sphx_glr_examples_01-filter_rotate.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1179
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perlin noise is atype of "
"gradient noise often used by visual effects artists to increase the ap...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1188
msgid ":ref:`sphx_glr_examples_01-filter_sampling_functions_2d.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1200
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Video games like Minecraft "
"use Perlin noise to create terrain.  Here, we create a voxelized mes...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1209
msgid ":ref:`sphx_glr_examples_01-filter_sampling_functions_3d.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1221
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract thin planar slices "
"from a volume.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1230
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1242
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Integrate a vector field to"
" generate streamlines.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1251
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1263
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Integrate a vector field to"
" generate streamlines on a 2D surface.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1272
msgid ":ref:`sphx_glr_examples_01-filter_streamlines_2D.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1284
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Increase the number of "
"triangles in a single, connected triangular mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1293
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1305
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Smoothing rough edges of a "
"surface mesh\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1314
msgid ":ref:`sphx_glr_examples_01-filter_surface-smoothing.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1326
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Surface reconstruction has "
"a dedicated filter in PyVista and is handled by pyvista.PolyDataFilt...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1335
msgid ":ref:`sphx_glr_examples_01-filter_surface_reconstruction.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1347
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Using common filters like "
"thresholding and clipping.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1356
msgid ":ref:`sphx_glr_examples_01-filter_using-filters.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1368
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a voxel model (like "
"legos) of a closed surface or volumetric mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1377
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1389
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example applies the "
"warp_by_vector filter to a sphere mesh that has 3D displacement vector...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1398
msgid ":ref:`sphx_glr_examples_01-filter_warp-by-vector.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1418
msgid "Plotting"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1420
msgid ""
"These examples show case many of the possibilities for altering how you "
"display spatial data. Explore these examples to learn how to leverage our "
"powerful 3D plotting routines to perform tasks like:"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1424
msgid "Color mapping scalar values with ``matplotlib`` colormaps"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1425
msgid "Creating animations as GIFs or movie files"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1426
msgid "Showing the edges and nodes of different mesh types"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1427
msgid ""
"Use sophisticated lighting techniques like smooth shading or Eye Dome "
"Lighting"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1428
msgid ""
"Glyph a vector or scalar field on a mesh (place/orient a mesh on another "
"mesh's nodes and scale/orient based on data values)"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1429
msgid "Label points in 3D space along side your meshes"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1430
msgid "Creating side-by-side comparisons"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1431
msgid "Making a dataset transparent or using a scalar value to map opacity"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1432
msgid "Adding textures/images draped over a mesh (texture mapping)"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1433
msgid "Rendering a depth image"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1437
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Add a background image with"
" pyvista.Plotter.add_background_image.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1446
msgid ":ref:`sphx_glr_examples_02-plot_background_image.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1458
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how "
"different types of charts can be added to the scene. A more complex "
"exam...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1467
msgid ":ref:`sphx_glr_examples_02-plot_chart_basics.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1479
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how you "
"can combine multiple charts as overlays in the same renderer. For an...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1488
msgid ":ref:`sphx_glr_examples_02-plot_chart_overlays.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1500
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"how to remove elements from a scene.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1509
msgid ":ref:`sphx_glr_examples_02-plot_clear.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1521
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a Matplotlib, Colorcet,"
" cmocean, or custom colormap when plotting scalar values.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1530
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1542
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"For this example, we will "
"showcase the difference that depth peeling provides.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1551
msgid ":ref:`sphx_glr_examples_02-plot_depth-peeling.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1563
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Show the edges of all "
"geometries within a mesh\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1572
msgid ":ref:`sphx_glr_examples_02-plot_edges.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1584
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Eye-Dome Lighting (EDL) is "
"a non-photorealistic, image-based shading technique designed to impr...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1593
msgid ":ref:`sphx_glr_examples_02-plot_edl.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1605
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Add a floor/wall at the "
"boundary of the rendering scene.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1614
msgid ":ref:`sphx_glr_examples_02-plot_floors.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1626
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Specify specific cells to "
"hide when plotting.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1635
msgid ":ref:`sphx_glr_examples_02-plot_ghost-cells.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1647
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a GIF Movie\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1656
msgid ":ref:`sphx_glr_examples_02-plot_gif.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1668
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a depth image as "
"viewed from a camera overlooking the &quot;hills&quot; example mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1677
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1689
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The add_mesh function has "
"an interpolate_before_map argument - this affects the way scalar data...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1698
msgid ":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1710
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Make an animation of an "
"isovalue through a volumetric dataset\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1719
msgid ":ref:`sphx_glr_examples_02-plot_isovalue.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1731
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use string arrays in a "
"point set to label points\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1740
msgid ":ref:`sphx_glr_examples_02-plot_labels.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1752
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Control aspects of the "
"rendered mesh&#x27;s lighting such as Ambient, Diffuse, and Specular. These "
"o...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1761
msgid ":ref:`sphx_glr_examples_02-plot_lighting_mesh.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1773
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Linked Views in Subplots\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1782
msgid ":ref:`sphx_glr_examples_02-plot_linked.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1794
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Picking Meshes\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1803
msgid ":ref:`sphx_glr_examples_02-plot_mesh-picking.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1815
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an animated MP4 "
"movie of a rendering scene.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1824
msgid ":ref:`sphx_glr_examples_02-plot_movie.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1836
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a GIF Movie of a "
"Static Object with a Moving Colormap\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1845
msgid ":ref:`sphx_glr_examples_02-plot_moving_cmap.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1857
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Subplotting: having "
"multiple scenes in a single window\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1866
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1878
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a mesh&#x27;s scalar "
"array with an opacity transfer function or opacity mapping based on a "
"scal...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1887
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1899
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Orbit around a scene.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1908
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1920
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"View three orthogonal "
"slices from a mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1929
msgid ":ref:`sphx_glr_examples_02-plot_ortho-slices.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1941
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"VTK 9 introduced Physically"
" Based Rendering (PBR) and we have exposed that functionality in PyV...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1950
msgid ":ref:`sphx_glr_examples_02-plot_pbr.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1962
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Interpolate the scalars of "
"a dataset over a circular arc.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1971
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-circular-arc.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1983
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot the values of a "
"dataset over a line through that dataset\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:1992
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-line.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2004
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Picking points on a mesh\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2013
msgid ":ref:`sphx_glr_examples_02-plot_point-picking.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2025
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Walk through of all the "
"different capabilities of scalar bars and how a user can customize "
"scal...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2034
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2046
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Saving Screenshots\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2055
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2067
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Comparison of default, flat"
" shading vs. smooth shading.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2076
msgid ":ref:`sphx_glr_examples_02-plot_shading.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2088
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract a subset of the "
"edges of a polygonal mesh to generate an outline (silhouette) of a "
"mesh...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2097
msgid ":ref:`sphx_glr_examples_02-plot_silhouette.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2109
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate and visualize "
"meshes from data in longitude-latitude coordinates.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2118
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2130
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This allows you to pick "
"points on the surface of a mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2139
msgid ":ref:`sphx_glr_examples_02-plot_surface-picking.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2151
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a mesh with an image "
"projected onto it as a texture.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2160
msgid ":ref:`sphx_glr_examples_02-plot_texture.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2172
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista allows you to set "
"global and local plotting themes to easily set default plotting param...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2181
msgid ":ref:`sphx_glr_examples_02-plot_themes.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2193
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This is very similar to the"
" ref_texture_example example except it is focused on plotting aerial...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2202
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2214
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a single component of "
"a vector as a scalar array.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2223
msgid ":ref:`sphx_glr_examples_02-plot_vector-component.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2235
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Volume render uniform mesh "
"types like pyvista.UniformGrid or 3D NumPy arrays.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2244
msgid ":ref:`sphx_glr_examples_02-plot_volume.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2266
msgid "Widgets"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2268
msgid ""
"PyVista has several widgets that can be added to the rendering scene to "
"control filters like clipping, slicing, and thresholding - specifically "
"there are widgets to control the positions of boxes, planes, and lines or "
"slider bars which can all be highly customized through the use of custom "
"callback functions."
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2274
msgid ""
"Here we'll take a look at the various widgets, some helper methods that "
"leverage those widgets to do common tasks, and demonstrate how to leverage "
"the widgets for user defined tasks and processing routines."
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2280
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The box widget can be "
"enabled and disabled by the pyvista.Plotter.add_box_widget and "
"pyvista.Pl...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2289
msgid ":ref:`sphx_glr_examples_03-widgets_box-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2301
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a checkbox to turn "
"on/off the visibility of meshes in a scene.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2310
msgid ":ref:`sphx_glr_examples_03-widgets_checkbox-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2322
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The line widget can be "
"enabled and disabled by the pyvista.Plotter.add_line_widget and "
"pyvista....\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2331
msgid ":ref:`sphx_glr_examples_03-widgets_line-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2343
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a class based callback "
"to track multiple slider widgets for updating a single mesh.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2352
msgid ":ref:`sphx_glr_examples_03-widgets_multi-slider-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2364
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The plane widget can be "
"enabled and disabled by the pyvista.Plotter.add_plane_widget and "
"pyvist...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2373
msgid ":ref:`sphx_glr_examples_03-widgets_plane-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2385
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The slider widget can be "
"enabled and disabled by the pyvista.Plotter.add_slider_widget and pyvi...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2394
msgid ":ref:`sphx_glr_examples_03-widgets_slider-bar-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2406
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The sphere widget can be "
"enabled and disabled by the pyvista.Plotter.add_sphere_widget and pyvi...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2415
msgid ":ref:`sphx_glr_examples_03-widgets_sphere-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2427
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" A spline widget can be "
"enabled and disabled by the pyvista.Plotter.add_spline_widget and "
"pyvis...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2436
msgid ":ref:`sphx_glr_examples_03-widgets_spline-widget.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2458
msgid "Lighting"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2460
msgid ""
"These examples demonstrate how to take fine-tuned control over lighting "
"conditions in a scene. Explore them to learn how to go beyond the default "
"lighting setup to truly bring out the best of your visualization:"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2464
msgid "Choose between preset lighting systems for plotters"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2465
msgid "Disable lighting on the mesh level"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2466
msgid "Learn about the different light types"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2467
msgid "Customize the shape of positional lights"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2468
msgid "Use actors to visualize the beams of spotlights"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2472
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Positional lights in "
"PyVista have customizable beam shapes, see the "
"ref_light_beam_shape_exampl...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2481
msgid ":ref:`sphx_glr_examples_04-lights_actors.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2493
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Attenuation is the "
"phenomenon of light&#x27;s intensity being gradually dampened as it "
"propagates th...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2502
msgid ":ref:`sphx_glr_examples_04-lights_attenuation.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2514
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The default directional "
"lights are infinitely distant point sources, for which the only "
"geometr...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2523
msgid ":ref:`sphx_glr_examples_04-lights_beam_shape.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2535
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Lights come in three "
"types:\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2544
msgid ":ref:`sphx_glr_examples_04-lights_light_types.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2556
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Disable mesh lighting.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2565
msgid ":ref:`sphx_glr_examples_04-lights_mesh_lighting.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2577
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The pyvista.Plotter class "
"comes with three options for the default lighting system:\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2586
msgid ":ref:`sphx_glr_examples_04-lights_plotter_builtins.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2598
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Demonstrate the usage of "
"lights and shadows in PyVista.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2607
msgid ":ref:`sphx_glr_examples_04-lights_shadows.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2627
msgid "Advanced"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2629
msgid ""
"Include here are few longer, more advanced examples from our users and "
"developers."
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2634
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Here is some velocity data "
"from a glacier modelling simulation that is compared across nodes in...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2643
msgid ":ref:`sphx_glr_examples_99-advanced_antarctica-compare.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2655
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"A pyvista.DataSet, such as "
"pyvista.PolyData, can be extended by users.  For example, if the use...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2664
msgid ":ref:`sphx_glr_examples_99-advanced_extending-pyvista.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2676
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot OpenFOAM data\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2685
msgid ":ref:`sphx_glr_examples_99-advanced_openfoam-example.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2697
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This was originally posted "
"to `pyvista/pyvista-support#486 "
"&lt;https://github.com/pyvista/pyvista-...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2706
msgid ":ref:`sphx_glr_examples_99-advanced_osmnx-example.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2718
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"the Moeller–Trumbore intersection algorithm using pyvista.\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2727
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace-moeller.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2748
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace.py`"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2760
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example applies the "
"warp_by_vector filter to a cube whose eigenmodes have been computed us...\">"
msgstr ""

#: ../../pyvista/doc/examples/index.rst:2769
msgid ":ref:`sphx_glr_examples_99-advanced_warp-by-vector-eigenmodes.py`"
msgstr ""
