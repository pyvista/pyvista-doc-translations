# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2021, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.29.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-16 01:29+0000\n"
"PO-Revision-Date: 2020-08-05 16:06+0000\n"
"Language-Team: Javanese (https://www.transifex.com/getfem-doc/teams/112279/jv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: jv\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../pyvista/docs/getting-started/installation.rst:4
msgid "Installation"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:6
msgid ""
"PyVista is supported on Python versions 3.6+. Previous versions of Python "
"are no longer supported as outlined in `this issue`_."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:11
msgid ""
"For the best experience, please considering using Anaconda as a virtual "
"environment and package manager for Python and following the instructions to"
" install PyVista with Anaconda."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:16
msgid "Dependencies"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:18
msgid ""
"PyVista is built on top of the Visualization Toolkit (VTK) and NumPy - as "
"such, the following projects are required dependencies of PyVista:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:21
msgid ""
"`vtk <https://pypi.org/project/vtk/>`_ - PyVista directly inherits types "
"from the VTK library."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:22
msgid ""
"`numpy <https://pypi.org/project/numpy/>`_ - NumPy arrays provide a core "
"foundation for PyVista's data array access."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:23
msgid ""
"`imageio <https://pypi.org/project/imageio/>`_ - This library is used for "
"saving screenshots."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:24
msgid ""
"`appdirs <https://pypi.org/project/appdirs/>`_ - Data management for our "
"example datasets so users can download tutorials on the fly."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:25
msgid ""
"`meshio <https://pypi.org/project/meshio/>`_ - Input/Output for many mesh "
"formats."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:26
msgid "`scooby <https://github.com/banesullivan/scooby>`_ - Debugging tools"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:29
msgid "PyPI"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:34
msgid ""
"PyVista can be installed from `PyPI <https://pypi.org/project/pyvista/>`_ "
"using ``pip``::"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:41
msgid "Anaconda"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:46
msgid "To install this package with ``conda`` run::"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:52
msgid "Optional Dependencies"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:54
msgid "The following are a list of optional dependencies and their purpose:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:57
msgid "Package"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:57
msgid "Purpose"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:59
msgid "``matplotlib``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:59
msgid "Using Colormaps"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:61
msgid "``itkwidgets``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:61
#: ../../pyvista/docs/getting-started/installation.rst:63
msgid "Interactive notebook rendering"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:63
msgid "``ipyvtklink``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:65
msgid "``sphinx_gallery``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:65
msgid "Capturing PyVista output for docs"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:67
msgid "``colorcet``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:67
msgid "Perceptually uniform colormaps"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:69
msgid "``cmocean``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:69
msgid "Oceanographic colormaps"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:71
msgid "``imageio-ffmpeg``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:71
msgid "Saving movie files"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:73
msgid "``tqdm``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:73
msgid "Status bars for monitoring filters"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:75
msgid "``trimesh`` ``rtree`` ``pyembree``"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:76
msgid "Vectorised ray tracing"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:82
msgid "Source / Developers"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:84
msgid ""
"Alternatively, you can install the latest version from GitHub by visiting "
"`PyVista <https://github.com/pyvista/pyvista>`_, and downloading the source "
"(cloning) by running::"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:93
msgid ""
"The latest documentation for the ``master`` branch of PyVista can be found "
"at `dev.pyvista.org <https://dev.pyvista.org>`_."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:98
msgid "Test Installation"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:100
msgid "You can test your installation by running an example:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:107
msgid "See other examples and demos:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:122
msgid ""
"A more comprehensive testing suite is available after cloning the source "
"repository. For details on how to clone and test the PyVista source, please "
"see our `Contributing Guide`_ and specifically, the `Testing`_ section."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:131
msgid "Running on CI Services"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:134
msgid ""
"Please head over to `pyvista/gl-ci-hepers`_ for details on setting up CI "
"services like Travis and Azure Pipelines to run PyVista."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:141
msgid "Running on MyBinder"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:143
msgid ""
"This section is for advanced users that would like to install and use "
"PyVista with headless displays on notebook hosting services like MyBinder_."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:146
msgid ""
"Please see `this project`_ for a convenient Cookiecutter_ to get started "
"using PyVista on the notebook hosting service MyBinder_."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:153
msgid ""
"To get started, the Docker container will need to have ``libgl1-mesa-dev`` "
"and ``xvfb`` installed through ``apt-get``. For MyBinder, include the "
"following in a file called ``apt.txt``::"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:160
msgid ""
"Then, you need to configure the headless display, for MyBinder, create a "
"file called ``start`` and include the following set up script that will run "
"every time your Docker container is launched:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:178
msgid ""
"And that's it! Include PyVista in your Python requirements and get to "
"visualizing your data! If you need more help than this on setting up PyVista"
" for these types of services, hop on Slack and chat with the developers or "
"take a look at `this repository`_ that is currently using PyVista on "
"MyBinder."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:187
msgid "Running on Remote Servers"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:189
msgid ""
"Using PyVista on remote servers requires similar setup steps as in the above"
" Docker case. As an example, here are the complete steps to use PyVista on "
"AWS EC2 Ubuntu 18.04 LTS (``ami-0a313d6098716f372`` in ``us-east-1``). Other"
" servers would work similarly."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:194
msgid ""
"After logging into the remote server, install Miniconda and related "
"packages:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:211
msgid "Then, configure the headless display:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:222
msgid "Reconnect to the server with port-forwarding, and start Jupyter:"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:230
msgid "Visit ``localhost:8888`` in the web browser."
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:234
msgid "Running with Sphinx-Gallery"
msgstr ""

#: ../../pyvista/docs/getting-started/installation.rst:236
msgid "In your ``conf.py``, add the following:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:2
msgid "Basic API Usage"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:4
msgid ""
"PyVista provides tools to get started with just about any VTK dataset and "
"wrap that object into an easily accessible data object. Whether you are new "
"to the VTK library or a power user, the best place to get started is with "
"PyVista's :func:`pyvista.wrap` and :func:`pyvista.read` functions to either "
"wrap a VTK data object in memory or read a VTK or VTK-friendly file format."
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:12
msgid "Wrapping a VTK Data Object"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:14
msgid ""
"The wrapping function is under the :mod:`pyvista.utilities` module which is "
"usable from the top level of PyVista. This allows users to quickly wrap any "
"VTK dataset they have as a PyVista object:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:28
msgid "Reading a VTK File"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:30
msgid ""
"PyVista provides a convenience function to read VTK file formats into their "
"respective PyVista data objects. Simply call the :func:`pyvista.read` "
"function passing the filename:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:41
msgid "Accessing the Wrapped Data Object"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:43
msgid ""
"Now that you have a wrapped VTK data object, you can start accessing and "
"modifying the dataset! Some of the most common properties to access include "
"the points and point/cell data (the data attributes assigned to the nodes or"
" cells of the mesh respectively)."
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:48
msgid "First, check out some common meta-properties:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:77
msgid ""
"Access the points by fetching the ``.points`` attribute on any PyVista mesh "
"as a NumPy array:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:93
msgid ""
"Accessing the different data attributes on the nodes and cells of the mesh "
"is interfaced via dictionaries with callbacks to the VTK object. These "
"dictionaries of the different point and cell arrays can be directly accessed"
" and modified as NumPy arrays. In the example below, we load a dataset, "
"access an array on that dataset, then add some more data:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:115
msgid "Plotting"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:117
msgid ""
"PyVista includes numerous plotting routines that are intended to be "
"intuitive and highly controllable with ``matplotlib`` similar syntax and "
"keyword arguments. To get started, try out the :func:`pyvista.plot` "
"convenience method that is binded to each PyVista data object:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:136
msgid ""
"You can also create the plotter to highly control the scene. First, "
"instantiate a plotter such as :class:`pyvista.Plotter` or "
":class:`pyvistaqt.BackgroundPlotter`:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:139
msgid ""
"The :class:`pyvista.Plotter` will create a rendering window that will pause "
"the execution of the code after calling ``show``."
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:149
msgid ""
"Note that the ``show`` method will return the last used camera position of "
"the rendering window in case you want to chose a camera position and use it "
"again later."
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:153
msgid ""
"You can then use this cached camera for additional plotting without having "
"to manually interact with the plotting window:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:164
msgid "Be sure to check out all the available plotters for your use case:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:166
msgid ""
":class:`pyvista.Plotter`: The standard plotter that pauses the code until "
"closed"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:167
msgid ""
":class:`pyvistaqt.BackgroundPlotter`: Creates a rendering window that is "
"interactive and does not pause the code execution (for more information see "
"the `pyvistaqt`_ package)"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:174
msgid "Exporting"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:176
msgid ""
"Any PyVista mesh object can be saved to a VTK file format using the "
"``.save()`` method bound directly on those objects. For example, the mesh "
"used above could be saved like:"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:184
msgid ""
"Or since that mesh is :class:`pyvista.PolyData`, we could use the ``.vtp``, "
"``.stl``, or ``.ply`` formats as well. For more details on which formats are"
" supported in the ``.save()`` method, please refer to the docs for that "
"method on each mesh type."
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:189
msgid ""
"Also note that we can export any PyVista mesh to any file format supported "
"by `meshio <https://github.com/nschloe/meshio>`_. Meshio supports many "
"formats including: Abaqus, ANSYS msh, AVS-UCD, CGNS, DOLFIN XML, Exodus, "
"FLAC3D, H5M, Kratos/MDPA, Medit, MED/Salome, Gmsh (versions 2 and 4), OBJ, "
"OFF, PERMAS, PLY, STL, TetGen .node/.ele, SVG (2D only, output only), UGRID,"
" WKT (TIN), XDMF, and more!"
msgstr ""

#: ../../pyvista/docs/getting-started/simple.rst:196
msgid ""
"To save a PyVista mesh using ``meshio``, use :func:`pyvista.save_meshio`:"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:4
msgid "What is a Mesh?"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:6
msgid ""
"In PyVista, a mesh is any spatially referenced information and usually "
"consists of geometrical representations of a surface or volume in 3D space. "
"We commonly refer to any spatially referenced dataset as a mesh, so often "
"the distinction between a mesh, a grid, and a volume can get fuzzy - but "
"that does not matter in PyVista. If you have a dataset that is a surface "
"mesh with 2D geometries like triangles, we call it a mesh and if you have a "
"dataset with 3D geometries like voxels, tetrahedrals, hexahedrons, etc., "
"then we also call that a mesh! Why? Because it is simple that way."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:15
msgid ""
"In all spatially referenced datasets, there lies an underlying mesh "
"structure - the connectivity or geometry between nodes to define cells. "
"Whether those cells are 2D or 3D is not always of importance and we've "
"worked hard to make PyVista work for datasets of either or mixed geometries "
"so that you as a user do not have to get bogged down in the nuances."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:22
msgid "What is a Node?"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:24
msgid ""
"Nodes are the vertices of the mesh - the XYZ coordinates of the underlying "
"structure. All PyVista datasets (meshes!) have nodes and sometimes, you can "
"have a mesh that only has nodes - like a point cloud."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:28
msgid ""
"For example, you can create a point cloud mesh using the "
":class:`pyvista.PolyData` class which is built for meshes that have 1D and "
"2D cell types (we'll get into what a cell is briefly)."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:32
msgid ""
"Let's start with a point cloud - this is a mesh type that only has vertices."
" You can create one by defining a 2D array XYZ coordinates like so:"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:52
msgid ""
"But it's import to note that most meshes have some sort of connectivity "
"between nodes such as this gridded mesh:"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:71
msgid "Or this triangulated surface:"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:89
msgid "What is a Cell?"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:91
msgid ""
"A cell is the geometry between nodes that defines the connectivity or "
"topology of a mesh. In the examples above, cells are defined by the lines "
"(edges colored in black) connecting nodes (colored in red).  For example, a "
"cell in the beam example is a a voxel defined by region between eight nodes "
"in that mesh:"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:116
msgid ""
"Cells aren't limited to voxels, they could be a triangle between three "
"nodes, a line between two nodes, or even a single node could be its own cell"
" (but that's a special case)."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:122
msgid "What are attributes?"
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:124
msgid ""
"Attributes are data values that live on either the nodes or cells of a mesh."
" In PyVista, we work with both point data and cell data and allow easy "
"access to data dictionaries to hold arrays for attributes that live either "
"on all nodes or on all cells of a mesh. These attributes can be accessed by "
"dictionaries attached to any PyVista mesh called ``.point_arrays`` or "
"``.cell_arrays``."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:132
msgid ""
"Point data refers to arrays of values (scalars, vectors, etc.) that live on "
"each node of the mesh.  The order of this array is crucial! Each element in "
"an attribute array must correspond to a node or cell in the mesh.  Let's "
"create some point data for the beam mesh.  When plotting the values between "
"nodes are interpolated across the cells."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:146
msgid ""
"Cell data refers to arrays of values (scalars, vectors, etc.) that live "
"throughout each cell of the mesh. That is the entire cell (2D face or 3D "
"volume) is assigned the value of that attribute."
msgstr ""

#: ../../pyvista/docs/getting-started/what-is-a-mesh.rst:158
msgid ""
"Here's a comparison of point data vs. cell data and how point data is "
"interpolated across cells when mapping colors. This is unlike cell data "
"which has a single value across the cell's domain:"
msgstr ""
