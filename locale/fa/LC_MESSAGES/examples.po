# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2024, The PyVista Developers
# This file is distributed under the same license as the PyVista package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista 0.44.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-21 12:35+0000\n"
"PO-Revision-Date: 2020-08-05 16:06+0000\n"
"Language-Team: Persian (https://app.transifex.com/tkoyama010/teams/112279/fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-explicit-"
"structured-grid.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:24
msgid "Creating an Explicit Structured Grid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:26
msgid ""
"Create an explicit structured grid from NumPy arrays using "
":class:`pyvista.ExplicitStructuredGrid`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:0
#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:0
#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-file.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-image.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:0
#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:0
#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:0
#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:0
#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:0
#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:0
#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:0
#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:0
#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:0
#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:0
#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:0
#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:0
#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:0
#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:0
#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:0
#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:0
#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:0
#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:0
#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:0
#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:0
#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:0
#: ../../pyvista/doc/source/examples/01-filter/resample.rst:0
#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:0
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:0
#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:0
#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:0
#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:0
#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:0
#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:0
#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:0
#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:0
#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:0
#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:0
#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:0
#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:0
#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:0
#: ../../pyvista/doc/source/examples/02-plot/clear.rst:0
#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:0
#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:0
#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:0
#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:0
#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:0
#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:0
#: ../../pyvista/doc/source/examples/02-plot/edges.rst:0
#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:0
#: ../../pyvista/doc/source/examples/02-plot/floors.rst:0
#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:0
#: ../../pyvista/doc/source/examples/02-plot/gif.rst:0
#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:0
#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:0
#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:0
#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:0
#: ../../pyvista/doc/source/examples/02-plot/movie.rst:0
#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:0
#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:0
#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:0
#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:0
#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:0
#: ../../pyvista/doc/source/examples/02-plot/shading.rst:0
#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:0
#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:0
#: ../../pyvista/doc/source/examples/02-plot/texture.rst:0
#: ../../pyvista/doc/source/examples/02-plot/themes.rst:0
#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:0
#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:0
#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:0
#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:0
#: ../../pyvista/doc/source/examples/04-lights/actors.rst:0
#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:0
#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:0
#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:0
#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:0
#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:0
#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:0
#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:0
msgid "Static Scene"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:0
#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:0
#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:0
#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-file.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-image.rst:0
#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:0
#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:0
#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:0
#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:0
#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:0
#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:0
#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:0
#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:0
#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:0
#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:0
#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:0
#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:0
#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:0
#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:0
#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:0
#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:0
#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:0
#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:0
#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:0
#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:0
#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:0
#: ../../pyvista/doc/source/examples/01-filter/resample.rst:0
#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:0
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:0
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:0
#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:0
#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:0
#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:0
#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:0
#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:0
#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:0
#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:0
#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:0
#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:0
#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:0
#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:0
#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:0
#: ../../pyvista/doc/source/examples/02-plot/clear.rst:0
#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:0
#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:0
#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:0
#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:0
#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:0
#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:0
#: ../../pyvista/doc/source/examples/02-plot/edges.rst:0
#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:0
#: ../../pyvista/doc/source/examples/02-plot/floors.rst:0
#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:0
#: ../../pyvista/doc/source/examples/02-plot/gif.rst:0
#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:0
#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:0
#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:0
#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:0
#: ../../pyvista/doc/source/examples/02-plot/movie.rst:0
#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:0
#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:0
#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:0
#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:0
#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:0
#: ../../pyvista/doc/source/examples/02-plot/shading.rst:0
#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:0
#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:0
#: ../../pyvista/doc/source/examples/02-plot/texture.rst:0
#: ../../pyvista/doc/source/examples/02-plot/themes.rst:0
#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:0
#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:0
#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:0
#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:0
#: ../../pyvista/doc/source/examples/04-lights/actors.rst:0
#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:0
#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:0
#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:0
#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:0
#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:0
#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:0
#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:0
#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:0
msgid "Interactive Scene"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:102
msgid "**Total running time of the script:** (0 minutes 1.117 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:113
msgid ""
":download:`Download Jupyter notebook: create-explicit-structured-grid.ipynb "
"<create-explicit-structured-grid.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:117
msgid ""
":download:`Download Python source code: create-explicit-structured-grid.py "
"<create-explicit-structured-grid.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-explicit-structured-grid.rst:124
#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:164
#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:178
#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1236
#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:215
#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:176
#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:401
#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:214
#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:215
#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:313
#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:352
#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:479
#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:480
#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:257
#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:406
#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:170
#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:207
#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:433
#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:430
#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:157
#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:119
#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:179
#: ../../pyvista/doc/source/examples/00-load/read-file.rst:452
#: ../../pyvista/doc/source/examples/00-load/read-image.rst:180
#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:255
#: ../../pyvista/doc/source/examples/00-load/reader.rst:458
#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:358
#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:191
#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:493
#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:331
#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:282
#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:330
#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:167
#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:236
#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:605
#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:556
#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:341
#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:258
#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:415
#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:220
#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:302
#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:218
#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:235
#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:341
#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:284
#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:198
#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:173
#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:304
#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:146
#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:383
#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:505
#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:291
#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:323
#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:341
#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:160
#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:115
#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:148
#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:151
#: ../../pyvista/doc/source/examples/01-filter/resample.rst:280
#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:389
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:242
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:174
#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:692
#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:517
#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:313
#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:187
#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:354
#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:157
#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:320
#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:368
#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:167
#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:414
#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:382
#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:145
#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:161
#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:253
#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:433
#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:190
#: ../../pyvista/doc/source/examples/02-plot/clear.rst:209
#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:435
#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:362
#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:177
#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:269
#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:239
#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:201
#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:108
#: ../../pyvista/doc/source/examples/02-plot/edges.rst:113
#: ../../pyvista/doc/source/examples/02-plot/edl.rst:260
#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:211
#: ../../pyvista/doc/source/examples/02-plot/floors.rst:102
#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:164
#: ../../pyvista/doc/source/examples/02-plot/gif.rst:182
#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:173
#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:377
#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:229
#: ../../pyvista/doc/source/examples/02-plot/labels.rst:276
#: ../../pyvista/doc/source/examples/02-plot/legend.rst:218
#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:291
#: ../../pyvista/doc/source/examples/02-plot/linked.rst:108
#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:524
#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:248
#: ../../pyvista/doc/source/examples/02-plot/movie.rst:130
#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:186
#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:140
#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:306
#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:519
#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:189
#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:214
#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:211
#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:135
#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:201
#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:336
#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:372
#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:203
#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:195
#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:273
#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:142
#: ../../pyvista/doc/source/examples/02-plot/shading.rst:306
#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:335
#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:339
#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:292
#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:139
#: ../../pyvista/doc/source/examples/02-plot/texture.rst:768
#: ../../pyvista/doc/source/examples/02-plot/themes.rst:758
#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:349
#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:138
#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:307
#: ../../pyvista/doc/source/examples/02-plot/volume.rst:499
#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:111
#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:137
#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:192
#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:229
#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:133
#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:157
#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:340
#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:189
#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:305
#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:134
#: ../../pyvista/doc/source/examples/04-lights/actors.rst:252
#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:262
#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:394
#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:236
#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:165
#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:345
#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:328
#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:182
#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:505
#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:359
#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:525
#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:306
#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:442
#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:363
#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:290
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:451
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:448
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:362
#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:182
#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:254
#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:243
#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:314
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:262
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:113
#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:365
#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:391
#: ../../pyvista/doc/source/examples/index.rst:3003
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-geometric-"
"objects.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:24
msgid "Geometric Objects"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:26
msgid "The \"Hello, world!\" of VTK. Uses objects from :ref:`geometry_api`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:45
msgid ""
"This runs through several of the available geometric objects available in "
"VTK which PyVista provides simple convenience methods for generating."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:48
msgid "Let's run through creating a few geometric objects."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:74
msgid "Now let's plot them all in one window"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:142
msgid "**Total running time of the script:** (0 minutes 0.489 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:153
msgid ""
":download:`Download Jupyter notebook: create-geometric-objects.ipynb "
"<create-geometric-objects.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-geometric-objects.rst:157
msgid ""
":download:`Download Python source code: create-geometric-objects.py <create-"
"geometric-objects.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-kochanek-"
"spline.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:24
msgid "Create a Kochanek Spline"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:26
msgid ""
"Create a Kochanek spline/polyline from a numpy array of XYZ vertices. Uses "
":func:`pyvista.KochanekSpline`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:48
#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:47
msgid "Create a dataset to plot"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:88
msgid "Interpolate those points onto a parametric Kochanek spline"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:156
msgid "**Total running time of the script:** (0 minutes 0.785 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:167
msgid ""
":download:`Download Jupyter notebook: create-kochanek-spline.ipynb <create-"
"kochanek-spline.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-kochanek-spline.rst:171
msgid ""
":download:`Download Python source code: create-kochanek-spline.py <create-"
"kochanek-spline.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-parametric-"
"geometric-objects.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:24
msgid "Parametric Geometric Objects"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:26
msgid "Creating parametric objects from :ref:`parametric_api`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:46
msgid "This example demonstrates how to plot parametric objects using pyvista"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:49
msgid "Supertoroid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:96
msgid "Parametric Ellipsoid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:145
msgid "Partial Parametric Ellipsoid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:202
msgid "Pseudosphere"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:249
msgid "Bohemian Dome"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:297
msgid "Bour"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:344
msgid "Boy's Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:391
msgid "Catalan Minimal"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:438
msgid "Conic Spiral"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:485
msgid "Cross Cap"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:532
msgid "Dini"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:579
msgid "Enneper"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:626
msgid "Figure-8 Klein"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:673
msgid "Henneberg"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:720
msgid "Klein"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:767
msgid "Kuen"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:814
msgid "Mobius"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:861
msgid "Plucker Conoid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:909
msgid "Random Hills"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:956
msgid "Roman"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1003
msgid "Super Ellipsoid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1050
msgid "Torus"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1097
msgid "Circular Arc"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1155
msgid "Extruded Half Arc"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1214
msgid "**Total running time of the script:** (0 minutes 9.226 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1225
msgid ""
":download:`Download Jupyter notebook: create-parametric-geometric-"
"objects.ipynb <create-parametric-geometric-objects.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-parametric-geometric-objects.rst:1229
msgid ""
":download:`Download Python source code: create-parametric-geometric-"
"objects.py <create-parametric-geometric-objects.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-pixel-"
"art.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:24
msgid "Pixel Art of ALIEN MONSTERS"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:26
msgid ""
"Here we use :func:`pyvista.Box` to make `pixel art "
"<https://en.wikipedia.org/wiki/Pixel_art>`_. Pixel string `source "
"<https://commons.wikimedia.org/wiki/File:Noto_Emoji_Pie_1f47e.svg>`_ and "
"`license <https://github.com/googlefonts/noto-emoji/blob/main/LICENSE>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:49
msgid "Convert pixel art to an array"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:90
msgid "Define function to draw pixels"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:91
msgid "Define a helper function to add pixel boxes to plotter."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:131
msgid "Now you can plot a pixel art of ALIEN MONSTERS."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:193
msgid "**Total running time of the script:** (0 minutes 4.190 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:204
msgid ""
":download:`Download Jupyter notebook: create-pixel-art.ipynb <create-pixel-"
"art.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pixel-art.rst:208
msgid ""
":download:`Download Python source code: create-pixel-art.py <create-pixel-"
"art.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-platonic-"
"solids.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:24
msgid "Platonic Solids"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:26
msgid ""
"PyVista wraps the ``vtk.vtkPlatonicSolidSource`` filter as "
":func:`pyvista.PlatonicSolid`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:49
msgid ""
"We can either use the generic :func:`PlatonicSolid() "
"<pyvista.PlatonicSolid>` and specify the different kinds of solids to "
"generate, or we can use the thin wrappers:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:53
msgid ":func:`pyvista.Tetrahedron`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:54
msgid ":func:`pyvista.Octahedron`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:55
msgid ":func:`pyvista.Dodecahedron`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:56
msgid ":func:`pyvista.Icosahedron`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:57
msgid ":func:`pyvista.Cube` (implemented via a different filter)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:59
msgid ""
"Let's generate all the Platonic solids, along with the :func:`teapotahedron "
"<pyvista.examples.downloads.download_teapot>`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:101
msgid "Now let's plot them all."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:104
#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:73
msgid ""
"VTK has known issues when rendering shadows on certain window sizes.  Be "
"prepared to experiment with the ``window_size`` parameter.  An initial "
"window size of ``(1000, 1000)`` seems to work well, which can be manually "
"resized without issue."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:148
msgid ""
"The Platonic solids come with cell scalars that index each face of the "
"solids."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:154
msgid "**Total running time of the script:** (0 minutes 0.870 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:165
msgid ""
":download:`Download Jupyter notebook: create-platonic-solids.ipynb <create-"
"platonic-solids.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-platonic-solids.rst:169
msgid ""
":download:`Download Python source code: create-platonic-solids.py <create-"
"platonic-solids.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-point-"
"cloud.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:24
msgid "Create Point Cloud"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:26
msgid ""
"Create a :class:`pyvista.PolyData` object from a point cloud of vertices and"
" scalar arrays for those points."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:48
msgid ""
"Point clouds are generally constructed in the :class:`pyvista.PolyData` "
"class and can easily have scalar/vector data arrays associated with the "
"point cloud. In this example, we'll work a bit backwards using a point cloud"
" that that is available from our ``examples`` module. This however is no "
"different than creating a PyVista mesh with your own NumPy arrays of vertice"
" locations."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:96
msgid ""
"Now that you have a NumPy array of points/vertices either from our sample "
"data or your own project, creating a PyVista mesh of those points is simply:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:111
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>67841</td></tr>\n"
"<tr><td>N Points</td><td>67841</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>4.809e+05, 4.811e+05</td></tr>\n"
"<tr><td>Y Bounds</td><td>4.400e+06, 4.400e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.754e+03, 1.785e+03</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:133
msgid "And we can even do a sanity check"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:156
msgid ""
"And now that we have a PyVista mesh, we can plot it. Note that we add an "
"option to use eye dome lighting - this is a shading technique to improve "
"depth perception with point clouds (learn more in :ref:`edl`)."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:184
msgid ""
"Now what if you have data attributes (scalar/vector arrays) that you'd like "
"to associate with every node of your mesh? You can easily add NumPy data "
"arrays that have a length equal to the number of points in the mesh along "
"the first axis. For example, lets add a few arrays to this new "
"``point_cloud`` mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:190
msgid ""
"Make an array of scalar values with the same length as the points array. "
"Each element in this array will correspond to points at the same index:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:213
msgid ""
"And now we can plot the point cloud with that random data. PyVista is smart "
"enough to plot the scalar array you added by default. Note that this time, "
"we specify to render every point as its own sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:259
msgid ""
"That data is kind of boring, right? You can also add data arrays with more "
"than one scalar value - perhaps a vector with three elements? Let's make a "
"little function that will compute vectors for every node in the point cloud "
"and add those vectors to the mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:264
msgid "This time, we're going to create a totally new, random point cloud."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:320
msgid ""
"Now we can make arrows using those vectors using the glyph filter (see "
":ref:`glyph_example` for more details)."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:379
msgid "**Total running time of the script:** (0 minutes 3.108 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:390
msgid ""
":download:`Download Jupyter notebook: create-point-cloud.ipynb <create-"
"point-cloud.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-point-cloud.rst:394
msgid ""
":download:`Download Python source code: create-point-cloud.py <create-point-"
"cloud.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-pointset.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:24
msgid "Create a PointSet"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:26
msgid ""
"A :class:`pyvista.PointSet` is a concrete class representing a set of points"
" that specifies the interface for datasets that explicitly use \"point\" "
"arrays to represent geometry. This class is useful for improving the "
"performance of filters on point clouds."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:31
msgid ""
"This example shows the performance improvement when clipping using the "
":func:`pyvista.DataSetFilters.clip` filter on a :class:`pyvista.PointSet`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:66
msgid "Plot the clipped polydata"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:110
msgid ""
"Show the performance improvement when using a PointSet. This is only "
"available with VTK >= 9.1.0."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:142
msgid "Plot the same dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:145
msgid ""
"PyVista must still create an intermediate PolyData to be able to plot, so "
"there is no performance improvement when using a :class:`pyvista.PointSet`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:192
msgid "**Total running time of the script:** (0 minutes 15.967 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:203
msgid ""
":download:`Download Jupyter notebook: create-pointset.ipynb <create-"
"pointset.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-pointset.rst:207
msgid ""
":download:`Download Python source code: create-pointset.py <create-"
"pointset.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-poly.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:24
msgid "Create PolyData"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:26
msgid ""
"Creating a :class:`pyvista.PolyData` (surface mesh) from vertices and faces."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:46
msgid ""
"A PolyData object can be created quickly from numpy arrays.  The vertex "
"array contains the locations of the points in the mesh and the face array "
"contains the number of points of each face and the indices of the vertices "
"which comprise that face."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:117
msgid "Polygonal PolyData"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:118
msgid "Create a three face polygonal mesh directly from points and faces."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:121
msgid ""
"It is generally more efficient to use a numpy array rather than stacking "
"lists for large meshes."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:193
msgid "**Total running time of the script:** (0 minutes 0.566 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:204
msgid ""
":download:`Download Jupyter notebook: create-poly.ipynb <create-poly.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-poly.rst:208
msgid ""
":download:`Download Python source code: create-poly.py <create-poly.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-polydata-"
"strips.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:24
msgid "Triangle Strips"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:26
msgid ""
"This example shows how to build a simple :class:`pyvista.PolyData` using "
"triangle strips."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:29
msgid ""
"Triangle strips are a more efficient way of storing the connectivity of "
"adjacent triangles."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:66
msgid "Build the connectivity of the strips"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:67
msgid ""
"The first element is the number of points in the strip next three elements "
"is the initial triangle the rest of the points is where the strip extends "
"to."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:87
#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:245
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>8</td></tr>\n"
"<tr><td>N Strips</td><td>1</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 3.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:110
msgid "Plot the triangle strips"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:111
msgid ""
"Plot the ``PolyData`` and include the point labels using "
":func:`add_point_labels() <pyvista.Plotter.add_point_labels>` so we can see "
"how the PolyData is constructed using triangle strips."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:146
msgid "Convert strips to triangles"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:147
msgid ""
"You can convert strips to triangle faces using :func:`triangulate "
"<pyvista.DataSetFilters.triangulate>`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:163
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6</td></tr>\n"
"<tr><td>N Points</td><td>8</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 3.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:185
msgid ""
"We can use this new :class:`pyvista.PolyData` to see how VTK represents "
"triangle strips as individual faces."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:188
msgid ""
"See how the faces array is much larger (~3x more) even for this basic "
"example even despite representing the same data."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:192
msgid ""
"The faces array from VTK always contains padding (the number of points in "
"the face) for each face in the face array. This is the initial ``3`` in the "
"following face array."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:226
msgid "Convert triangles to strips"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:227
msgid ""
"Convert faces from a :class:`pyvista.PolyData` to strips using "
":func:`strip() <pyvista.PolyDataFilters.strip>`. Here, for demonstration "
"purposes we convert the triangulated mesh back to a stripped mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:267
msgid ""
"The output from the ``strip`` filter is, as expected, identical to the "
"original ``mesh``."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:291
msgid "**Total running time of the script:** (0 minutes 0.221 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:302
msgid ""
":download:`Download Jupyter notebook: create-polydata-strips.ipynb <create-"
"polydata-strips.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polydata-strips.rst:306
msgid ""
":download:`Download Python source code: create-polydata-strips.py <create-"
"polydata-strips.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-"
"polyhedron.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:24
msgid "Unstructured Grid with Polyhedra"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:26
msgid ""
"This example shows how to build a simple :class:`pyvista.UnstructuredGrid` "
"using polyhedra. We will be using VTK types to determine which type of cells"
" we are building. A list of cell types is given in "
":class:`pyvista.CellType`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:30
msgid "First, we import the required libraries."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:50
msgid "Define Points"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:51
msgid ""
"We will mix several cells in one grid for this example. Here we create the "
"points that will define each cell."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:55
msgid ""
"It is not necessary that each cell has an isolated set of points. This has "
"been done here to create isolated cells for this example."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:112
msgid "Cell connectivity"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:113
msgid ""
"Connectivity describes the indices of the points to compose each cell. The "
"first item in each cell's connectivity is the number of items the cell will "
"have. For example, a quad cell is composed of points ``[0, 1, 2, 3]`` and "
"totaling 4 points, therefore ``[4, 0, 1, 2, 3]`` describes its connectivity."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:119
msgid ""
"This example uses lists for simplicity, but internally PyVista converts "
"these lists to a :class:`numpy.ndarray` with ``dtype=pyvista.ID_TYPE`` and "
"passes it to VTK."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:123
msgid "The same approach can be applied to all the other cell types."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:145
msgid "Polyhedron connectivity array"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:146
msgid ""
"The connectivity array of polyhedra is defined differently from the rest of "
"the cell types. For polyhedra, we need to set the faces with the following "
"format:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:149
msgid ""
"``[NItems, NFaces, Face0NPoints, Face0Point0, Face0Point1..., Face0PointN-1,"
" Face1NPoints, ...]``"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:151
msgid "Where:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:153
msgid ""
"``NItems`` refers to the total number of items in the list needed to "
"describe the polyhedron."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:155
msgid "``NFaces`` is the number of faces the polyhedron will have."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:156
msgid "``Face0NPoints`` is the number of points the first face will have."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:157
msgid ""
"``Face0Point0...Face0PointN-1`` are each of the points that describe "
"``face0``."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:159
msgid ""
"In ``polyhedron_connectivity``, the first item is ``NFaces``. ``NItems`` is "
"added to ``polyhedron``."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:223
msgid "Cells array"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:224
msgid ""
"Now we build the input cells array for the "
":class:`pyvista.UnstructuredGrid`. Here, we join all cells in a flat list. "
"Internally, the ``NItems`` previously described is used to determine which "
"nodes belong to which cells."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:247
msgid "Cell types"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:248
msgid ""
"We need to specify the cell types for each of the cells we define in the "
"cells array."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:251
msgid ""
"The number of items in this list must match the number of cells in the "
"connectivity array."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:272
msgid "Create the grid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:273
msgid ""
"To create the grid, we use the cells array we built, the cell types, and the"
" points that describe the faces."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:293
msgid "Plot the mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:294
msgid ""
"Finally, we can plot the grid we've created. Label each cell at its cell "
"center for clarity."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:330
msgid "**Total running time of the script:** (0 minutes 0.232 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:341
msgid ""
":download:`Download Jupyter notebook: create-polyhedron.ipynb <create-"
"polyhedron.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-polyhedron.rst:345
msgid ""
":download:`Download Python source code: create-polyhedron.py <create-"
"polyhedron.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-spline.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:24
msgid "Creating a Spline"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:26
msgid ""
"Create a spline/polyline from a numpy array of XYZ vertices using "
":func:`pyvista.Spline`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:87
msgid ""
"Now let's make a function that can create line cells on a "
":class:`pyvista.PolyData` mesh given that the points are in order for the "
"segments they make."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:116
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>99</td></tr>\n"
"<tr><td>N Points</td><td>100</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.084e+00, 4.084e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.281e+00, 5.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:181
msgid ""
"That tube has sharp edges at each line segment. This can be mitigated by "
"creating a single PolyLine cell for all of the points"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:241
msgid "You could also interpolate those points onto a parametric spline"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:260
msgid "Plot spline as a tube"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:308
msgid "The spline can also be plotted as a plain line"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:358
msgid "The radius of the tube can be modulated with scalars"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:408
msgid "Ribbons"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:410
msgid ""
"Ayy of the lines from the examples above can be used to create ribbons. Take"
" a look at the :func:`pyvista.PolyDataFilters.ribbon` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:457
msgid "**Total running time of the script:** (0 minutes 1.937 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:468
msgid ""
":download:`Download Jupyter notebook: create-spline.ipynb <create-"
"spline.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-spline.rst:472
msgid ""
":download:`Download Python source code: create-spline.py <create-spline.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-structured-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:24
msgid "Creating a Structured Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:26
msgid ""
"Create a StructuredGrid surface from NumPy arrays using "
":class:`pyvista.StructuredGrid`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:49
msgid "From NumPy Meshgrid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:51
msgid "Create a simple meshgrid using NumPy"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:74
msgid "Now pass the NumPy meshgrid to PyVista"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:163
msgid ""
"Generating a structured grid is a one-liner in this module, and the points "
"from the resulting surface can be accessed as a NumPy array:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:196
msgid "From XYZ Points"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:198
msgid ""
"Quite often, you might be given a set of coordinates (XYZ points) in a "
"simple tabular format where there exists some structure such that grid could"
" be built between the nodes you have. A great example is found in `pyvista-"
"support#16`_ where a structured grid that is rotated from the cartesian "
"reference frame is given as just XYZ points. In these cases, all that is "
"needed to recover the grid is the dimensions of the grid (`nx` by `ny` by "
"`nz`) and that the coordinates are ordered appropriately."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:208
msgid ""
"For this example, we will create a small dataset and rotate the coordinates "
"such that they are not on orthogonal to cartesian reference frame."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:256
msgid ""
"Now pretend that the (n by 3) NumPy array above are coordinates that you "
"have, possibly from a file with three columns of XYZ points."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:259
msgid ""
"We simply need to recover the dimensions of the grid that these points make "
"and then we can generate a :class:`pyvista.StructuredGrid` mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:262
msgid "Let's preview the points to see what we are dealing with:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:291
msgid ""
"In the figure above, we can see some inherit structure to the points and "
"thus we could connect the points as a structured grid. All we need to know "
"are the dimensions of the grid present. In this case, we know (because we "
"made this dataset) the dimensions are ``[29, 32, 1]``, but you might not "
"know the dimensions of your pointset. There are a few ways to figure out the"
" dimensionality of structured grid including:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:298
msgid "manually counting the nodes along the edges of the pointset"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:299
msgid ""
"using a technique like principle component analysis to strip the rotation "
"from the dataset and count the unique values along each axis for the new;y "
"projected dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:356
msgid "Extending a 2D StructuredGrid to 3D"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:358
msgid ""
"A 2D :class:`pyvista.StructuredGrid` mesh can be extended into a 3D mesh. "
"This is highly applicable when wanting to create a terrain following mesh in"
" earth science research applications."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:362
msgid ""
"For example, we could have a :class:`pyvista.StructuredGrid` of a topography"
" surface and extend that surface to a few different levels and connect each "
"\"level\" to create the 3D terrain following mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:366
msgid "Let's start with a simple example by extending the wave mesh to 3D"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:458
msgid "**Total running time of the script:** (0 minutes 1.982 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:469
msgid ""
":download:`Download Jupyter notebook: create-structured-surface.ipynb "
"<create-structured-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-structured-surface.rst:473
msgid ""
":download:`Download Python source code: create-structured-surface.py "
"<create-structured-surface.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-surface-"
"draped.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:24
msgid "Drape 2D Surface From Line"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:26
msgid "Drape a surface (2D array) from a line in 3D space."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:28
msgid ""
"This is a common task to create a 2.5D image/sectional mesh of data like GPR"
" or airborne EM profiles (geophysics applications). This example provides a "
"look into how to create a 2.5D sectional mesh from typical data in those use"
" cases."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:32
msgid ""
"For this example, we have an instrument path on the ground surface (the "
"line) and a 2D array of the collected image under that line."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:35
msgid ""
"Originally posted in `this support issue "
"<https://github.com/pyvista/pyvista-support/issues/135>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:37
msgid ""
"Suppose you have some GPR data (or anything that produces a line of data "
"with values at depth). With these data, you'll have a 2D image/array of your"
" data values and 3D coordinates of where that line/profile is in 3D space "
"(often where you collected the data on the surface of topography). Attached "
"below are some example data for this: 1) XYZ coordinates of a GPR path and "
"2) a 2D array of data values produced from the GPR."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:44
msgid ""
"The data here are wacky (it's difficult to get shareable data of decent "
"quality), so ignore them but pay attention to the structure. The coordinates"
" we have are technically shifted up and we have some NaN filler above the "
"surface - its weird and just ignore it. You'll typically have a more uniform"
" looking profile in 2D with the coordinates associated to the top of each "
"column in your 2D array."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:97
msgid ""
"View the path of the GPR profile from a top-down perspective. Since we have "
"the full coordinates (XY and Z), we can create a structured mesh \"draping\""
" down from those coordinates to hold the GPR image data."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:158
msgid "Make a StructuredGrid from the structured points"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:180
msgid ""
"And now we can plot it, process it, or do anything, because it is a PyVista "
"mesh and the possibilities are endless with PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:235
msgid "**Total running time of the script:** (0 minutes 48.832 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:246
msgid ""
":download:`Download Jupyter notebook: create-surface-draped.ipynb <create-"
"surface-draped.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-surface-draped.rst:250
msgid ""
":download:`Download Python source code: create-surface-draped.py <create-"
"surface-draped.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-tri-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:24
msgid "Create Triangulated Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:26
msgid ""
"Create a surface from a set of points through a Delaunay triangulation. This"
" example uses :func:`pyvista.PolyDataFilters.delaunay_2d`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:48
msgid "Simple Triangulations"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:50
msgid "First, create some points for the surface."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:88
msgid ""
"Now use those points to create a point cloud PyVista data object. This will "
"be encompassed in a :class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:136
msgid ""
"Now that we have a PyVista data structure of the points, we can perform a "
"triangulation to turn those boring discrete points into a connected surface."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:185
msgid "Masked Triangulations"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:208
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>100</td></tr>\n"
"<tr><td>N Points</td><td>100</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>1.463e-02, 9.294e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>1.489e-02, 9.249e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:230
msgid "Run the triangulation on these points"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:276
msgid ""
"Note that some of the outer edges are unconstrained and the triangulation "
"added unwanted triangles. We can mitigate that with the ``alpha`` parameter."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:323
msgid ""
"We could also add a polygon to ignore during the triangulation via the "
"``edge_source`` parameter."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:384
msgid "**Total running time of the script:** (0 minutes 1.154 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:395
msgid ""
":download:`Download Jupyter notebook: create-tri-surface.ipynb <create-tri-"
"surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-tri-surface.rst:399
msgid ""
":download:`Download Python source code: create-tri-surface.py <create-tri-"
"surface.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-truss.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:24
msgid "Plot Truss-like FEA Solution with Cylinders"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:26
msgid ""
"Plot connections between points in 3D as cylinders, colored by scalars. "
"Lines are created in a :class:`pyvista.PolyData` and then rendered as "
"cylinders."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:49
msgid ""
"Define the points and elements of the truss.  Call them ``nodes`` here as it"
" comes from finite element analysis."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:111
msgid "Plot the truss while rendering the lines as tubes."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:148
msgid "**Total running time of the script:** (0 minutes 0.363 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:159
msgid ""
":download:`Download Jupyter notebook: create-truss.ipynb <create-"
"truss.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-truss.rst:163
msgid ""
":download:`Download Python source code: create-truss.py <create-truss.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-uniform-"
"grid.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:22
msgid "Creating a Uniform Grid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:24
msgid ""
"Create a simple uniform grid from a 3D NumPy array of values. This example "
"uses :class:`pyvista.ImageData`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:45
msgid ""
"Take a 3D NumPy array of data values that holds some spatial data where each"
" axis corresponds to the XYZ cartesian axes. This example will create a "
":class:`pyvista.ImageData` object that will hold the spatial reference for a"
" 3D grid which a 3D NumPy array of values can be plotted against."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:52
msgid ""
"Create the 3D NumPy array of spatially referenced data. This is spatially "
"referenced such that the grid is 20 by 5 by 10 (nx by ny by nz)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:117
msgid ""
"Don't like cell data? You could also add the NumPy array to the point data "
"of a :class:`pyvista.ImageData`. Take note of the subtle difference when "
"setting the grid dimensions upon initialization."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:185
msgid "**Total running time of the script:** (0 minutes 0.905 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:196
msgid ""
":download:`Download Jupyter notebook: create-uniform-grid.ipynb <create-"
"uniform-grid.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-uniform-grid.rst:200
msgid ""
":download:`Download Python source code: create-uniform-grid.py <create-"
"uniform-grid.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_create-unstructured-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:24
msgid "Creating an Unstructured Grid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:26
msgid ""
"Create an irregular, unstructured grid from NumPy arrays. This example uses "
":class:`pyvista.UnstructuredGrid`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:48
msgid ""
"An unstructured grid can be created directly from NumPy arrays. This is "
"useful when creating a grid from scratch or copying it from another format."
"  See `vtkUnstructuredGrid "
"<https://www.vtk.org/doc/nightly/html/classvtkUnstructuredGrid.html>`_ for "
"available cell types and their descriptions."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:147
msgid "UnstructuredGrid with Shared Points"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:149
msgid ""
"The next example again creates an unstructured grid containing hexahedral "
"cells, but using common points between the cells."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:220
msgid "Finally, create the unstructured grid and plot it"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:276
msgid "Tetrahedral Grid"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:277
msgid "Here is how we can create an unstructured tetrahedral grid."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:364
msgid ""
"For fun, let's separate all the cells and plot out the individual cells. "
"Shift them a little bit from the center to create an \"exploded view\"."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:411
msgid "**Total running time of the script:** (0 minutes 1.448 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:422
msgid ""
":download:`Download Jupyter notebook: create-unstructured-surface.ipynb "
"<create-unstructured-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/create-unstructured-surface.rst:426
msgid ""
":download:`Download Python source code: create-unstructured-surface.py "
"<create-unstructured-surface.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:6
#: ../../pyvista/doc/source/examples/index.rst:29
msgid "Mesh Creation"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:31
msgid ""
"These examples demo how to read various file types into PyVista mesh "
"objects, create meshes from NumPy arrays, and how to create primitive "
"geometric objects like spheres, arrows, cubes, ellipsoids and more."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:12
#: ../../pyvista/doc/source/examples/index.rst:35
msgid ""
"Once a mesh is loaded, it is ready for plotting with just a few lines of "
"code - explore these examples to get started with using PyVista for your "
"data."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:18
#: ../../pyvista/doc/source/examples/01-filter/index.rst:22
#: ../../pyvista/doc/source/examples/02-plot/index.rst:25
#: ../../pyvista/doc/source/examples/03-widgets/index.rst:22
#: ../../pyvista/doc/source/examples/04-lights/index.rst:22
#: ../../pyvista/doc/source/examples/98-common/index.rst:19
#: ../../pyvista/doc/source/examples/99-advanced/index.rst:13
#: ../../pyvista/doc/source/examples/index.rst:19
#: ../../pyvista/doc/source/examples/index.rst:41
#: ../../pyvista/doc/source/examples/index.rst:543
#: ../../pyvista/doc/source/examples/index.rst:1303
#: ../../pyvista/doc/source/examples/index.rst:2297
#: ../../pyvista/doc/source/examples/index.rst:2492
#: ../../pyvista/doc/source/examples/index.rst:2634
#: ../../pyvista/doc/source/examples/index.rst:2668
msgid "<div class=\"sphx-glr-thumbnails\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:23
#: ../../pyvista/doc/source/examples/index.rst:46
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an explicit "
"structured grid from NumPy arrays using pyvista.ExplicitStructuredGrid.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:32
#: ../../pyvista/doc/source/examples/index.rst:55
msgid ":ref:`sphx_glr_examples_00-load_create-explicit-structured-grid.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:34
#: ../../pyvista/doc/source/examples/index.rst:57
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Creating an Explicit Structured Grid</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:40
#: ../../pyvista/doc/source/examples/index.rst:63
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The &quot;Hello, "
"world!&quot; of VTK. Uses objects from geometry_api.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:49
#: ../../pyvista/doc/source/examples/index.rst:72
msgid ":ref:`sphx_glr_examples_00-load_create-geometric-objects.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:51
#: ../../pyvista/doc/source/examples/index.rst:74
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Geometric Objects</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:57
#: ../../pyvista/doc/source/examples/index.rst:80
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a Kochanek "
"spline/polyline from a numpy array of XYZ vertices. Uses "
"pyvista.KochanekSpli...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:66
#: ../../pyvista/doc/source/examples/index.rst:89
msgid ":ref:`sphx_glr_examples_00-load_create-kochanek-spline.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:68
#: ../../pyvista/doc/source/examples/index.rst:91
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create a Kochanek Spline</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:74
#: ../../pyvista/doc/source/examples/index.rst:97
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Creating parametric objects"
" from parametric_api.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:83
#: ../../pyvista/doc/source/examples/index.rst:106
msgid ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:85
#: ../../pyvista/doc/source/examples/index.rst:108
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Parametric Geometric Objects</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:91
#: ../../pyvista/doc/source/examples/index.rst:114
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Here we use pyvista.Box to "
"make pixel art. Pixel string source and license.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:100
#: ../../pyvista/doc/source/examples/index.rst:123
msgid ":ref:`sphx_glr_examples_00-load_create-pixel-art.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:102
#: ../../pyvista/doc/source/examples/index.rst:125
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Pixel Art of ALIEN MONSTERS</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:108
#: ../../pyvista/doc/source/examples/index.rst:131
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista wraps the "
"vtk.vtkPlatonicSolidSource filter as pyvista.PlatonicSolid.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:117
#: ../../pyvista/doc/source/examples/index.rst:140
msgid ":ref:`sphx_glr_examples_00-load_create-platonic-solids.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:119
#: ../../pyvista/doc/source/examples/index.rst:142
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Platonic Solids</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:125
#: ../../pyvista/doc/source/examples/index.rst:148
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a pyvista.PolyData "
"object from a point cloud of vertices and scalar arrays for those poi...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:134
#: ../../pyvista/doc/source/examples/index.rst:157
msgid ":ref:`sphx_glr_examples_00-load_create-point-cloud.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:136
#: ../../pyvista/doc/source/examples/index.rst:159
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create Point Cloud</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:142
#: ../../pyvista/doc/source/examples/index.rst:165
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"A pyvista.PointSet is a "
"concrete class representing a set of points that specifies the "
"interfac...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:151
#: ../../pyvista/doc/source/examples/index.rst:174
msgid ":ref:`sphx_glr_examples_00-load_create-pointset.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:153
#: ../../pyvista/doc/source/examples/index.rst:176
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create a PointSet</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:159
#: ../../pyvista/doc/source/examples/index.rst:182
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Creating a pyvista.PolyData"
" (surface mesh) from vertices and faces.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:168
#: ../../pyvista/doc/source/examples/index.rst:191
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:170
#: ../../pyvista/doc/source/examples/index.rst:193
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create PolyData</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:176
#: ../../pyvista/doc/source/examples/index.rst:199
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how to "
"build a simple pyvista.PolyData using triangle strips.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:185
#: ../../pyvista/doc/source/examples/index.rst:208
msgid ":ref:`sphx_glr_examples_00-load_create-polydata-strips.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:187
#: ../../pyvista/doc/source/examples/index.rst:210
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Triangle Strips</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:193
#: ../../pyvista/doc/source/examples/index.rst:216
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how to "
"build a simple pyvista.UnstructuredGrid using polyhedra. We will be u...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:202
#: ../../pyvista/doc/source/examples/index.rst:225
msgid ":ref:`sphx_glr_examples_00-load_create-polyhedron.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:204
#: ../../pyvista/doc/source/examples/index.rst:227
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Unstructured Grid with Polyhedra</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:210
#: ../../pyvista/doc/source/examples/index.rst:233
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a spline/polyline "
"from a numpy array of XYZ vertices using pyvista.Spline.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:219
#: ../../pyvista/doc/source/examples/index.rst:242
msgid ":ref:`sphx_glr_examples_00-load_create-spline.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:221
#: ../../pyvista/doc/source/examples/index.rst:244
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Creating a Spline</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:227
#: ../../pyvista/doc/source/examples/index.rst:250
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a StructuredGrid "
"surface from NumPy arrays using pyvista.StructuredGrid.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:236
#: ../../pyvista/doc/source/examples/index.rst:259
msgid ":ref:`sphx_glr_examples_00-load_create-structured-surface.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:238
#: ../../pyvista/doc/source/examples/index.rst:261
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Creating a Structured Surface</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:244
#: ../../pyvista/doc/source/examples/index.rst:267
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Drape a surface (2D array) "
"from a line in 3D space.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:253
#: ../../pyvista/doc/source/examples/index.rst:276
msgid ":ref:`sphx_glr_examples_00-load_create-surface-draped.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:255
#: ../../pyvista/doc/source/examples/index.rst:278
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Drape 2D Surface From Line</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:261
#: ../../pyvista/doc/source/examples/index.rst:284
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a surface from a set"
" of points through a Delaunay triangulation. This example uses pyvis...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:270
#: ../../pyvista/doc/source/examples/index.rst:293
msgid ":ref:`sphx_glr_examples_00-load_create-tri-surface.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:272
#: ../../pyvista/doc/source/examples/index.rst:295
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create Triangulated Surface</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:278
#: ../../pyvista/doc/source/examples/index.rst:301
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot connections between "
"points in 3D as cylinders, colored by scalars. Lines are created in a ...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:287
#: ../../pyvista/doc/source/examples/index.rst:310
msgid ":ref:`sphx_glr_examples_00-load_create-truss.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:289
#: ../../pyvista/doc/source/examples/index.rst:312
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot Truss-like FEA Solution with Cylinders</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:295
#: ../../pyvista/doc/source/examples/index.rst:318
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a simple uniform "
"grid from a 3D NumPy array of values. This example uses "
"pyvista.ImageDa...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:304
#: ../../pyvista/doc/source/examples/index.rst:327
msgid ":ref:`sphx_glr_examples_00-load_create-uniform-grid.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:306
#: ../../pyvista/doc/source/examples/index.rst:329
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Creating a Uniform Grid</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:312
#: ../../pyvista/doc/source/examples/index.rst:335
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an irregular, "
"unstructured grid from NumPy arrays. This example uses "
"pyvista.Unstructure...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:321
#: ../../pyvista/doc/source/examples/index.rst:344
msgid ":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:323
#: ../../pyvista/doc/source/examples/index.rst:346
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Creating an Unstructured Grid</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:329
#: ../../pyvista/doc/source/examples/index.rst:352
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example extends the "
"create_unstructured_example example by including an explanation of lin...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:338
#: ../../pyvista/doc/source/examples/index.rst:361
msgid ":ref:`sphx_glr_examples_00-load_linear-cells.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:340
#: ../../pyvista/doc/source/examples/index.rst:363
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Linear Cells</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:346
#: ../../pyvista/doc/source/examples/index.rst:369
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"First, download the "
"examples.  Note that here we&#x27;re using a high dynamic range texture "
"since gl...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:355
#: ../../pyvista/doc/source/examples/index.rst:378
msgid ":ref:`sphx_glr_examples_00-load_load-gltf.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:357
#: ../../pyvista/doc/source/examples/index.rst:380
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Working with glTF Files</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:363
#: ../../pyvista/doc/source/examples/index.rst:386
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Working with VRML Files\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:372
#: ../../pyvista/doc/source/examples/index.rst:395
msgid ":ref:`sphx_glr_examples_00-load_load-vrml.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:374
#: ../../pyvista/doc/source/examples/index.rst:397
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Working with VRML Files</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:380
#: ../../pyvista/doc/source/examples/index.rst:403
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista leverages `meshio`_"
" to read many mesh formats not natively supported by VTK including t...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:389
#: ../../pyvista/doc/source/examples/index.rst:412
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:391
#: ../../pyvista/doc/source/examples/index.rst:414
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Read FEniCS/Dolfin Meshes</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:397
#: ../../pyvista/doc/source/examples/index.rst:420
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Read a dataset from a known"
" file type.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:406
#: ../../pyvista/doc/source/examples/index.rst:429
msgid ":ref:`sphx_glr_examples_00-load_read-file.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:408
#: ../../pyvista/doc/source/examples/index.rst:431
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Load and Plot from a File</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:414
#: ../../pyvista/doc/source/examples/index.rst:437
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Read and plot image files "
"(JPEG, TIFF, PNG, etc).\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:423
#: ../../pyvista/doc/source/examples/index.rst:446
msgid ":ref:`sphx_glr_examples_00-load_read-image.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:425
#: ../../pyvista/doc/source/examples/index.rst:448
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Read Image Files</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:431
#: ../../pyvista/doc/source/examples/index.rst:454
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The VTK library supports "
"parallel file formats. Reading meshes broken up into several files is ...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:440
#: ../../pyvista/doc/source/examples/index.rst:463
msgid ":ref:`sphx_glr_examples_00-load_read-parallel.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:442
#: ../../pyvista/doc/source/examples/index.rst:465
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Parallel Files</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:448
#: ../../pyvista/doc/source/examples/index.rst:471
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Load data using a Reader\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:457
#: ../../pyvista/doc/source/examples/index.rst:480
msgid ":ref:`sphx_glr_examples_00-load_reader.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:459
#: ../../pyvista/doc/source/examples/index.rst:482
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Load data using a Reader</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:465
#: ../../pyvista/doc/source/examples/index.rst:488
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a topographic surface "
"to create a 3D terrain-following mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:474
#: ../../pyvista/doc/source/examples/index.rst:497
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:476
#: ../../pyvista/doc/source/examples/index.rst:499
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Terrain Following Mesh</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:482
#: ../../pyvista/doc/source/examples/index.rst:505
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"- numpy arrays - "
"trimesh.Trimesh meshes - VTK objects\">"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:491
#: ../../pyvista/doc/source/examples/index.rst:514
msgid ":ref:`sphx_glr_examples_00-load_wrap-trimesh.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:493
#: ../../pyvista/doc/source/examples/index.rst:516
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Wrapping Other Objects</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/index.rst:499
#: ../../pyvista/doc/source/examples/01-filter/index.rst:758
#: ../../pyvista/doc/source/examples/02-plot/index.rst:999
#: ../../pyvista/doc/source/examples/03-widgets/index.rst:197
#: ../../pyvista/doc/source/examples/04-lights/index.rst:146
#: ../../pyvista/doc/source/examples/98-common/index.rst:41
#: ../../pyvista/doc/source/examples/99-advanced/index.rst:324
#: ../../pyvista/doc/source/examples/index.rst:24
#: ../../pyvista/doc/source/examples/index.rst:522
#: ../../pyvista/doc/source/examples/index.rst:1279
#: ../../pyvista/doc/source/examples/index.rst:2277
#: ../../pyvista/doc/source/examples/index.rst:2472
#: ../../pyvista/doc/source/examples/index.rst:2616
#: ../../pyvista/doc/source/examples/index.rst:2656
#: ../../pyvista/doc/source/examples/index.rst:2979
msgid "</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_linear-cells.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:24
msgid "Linear Cells"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:26
msgid ""
"This example extends the :ref:`create_unstructured_example` example by "
"including an explanation of linear VTK cell types and how you can create "
"them in PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:30
msgid ""
"Linear cells are cells where points only occur at the edges of each cell. "
"Non-linear cells contain additional points along the edges of the cell."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:33
msgid ""
"For more details regarding what a :class:`pyvista.UnstructuredGrid` is, "
"please see :ref:`point_sets_api`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:61
msgid "Plot an example cell"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:62
msgid ""
"PyVista contains a simple utility to plot a single cell, which is the "
"fundamental unit of each :class:`pyvista.UnstructuredGrid`. For example, "
"let's plot a simple :func:`Wedge <pyvista.examples.cells.Wedge>`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:92
msgid "This linear cell is composed of 6 points."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:122
msgid ""
"The UnstructuredGrid is also composed of a single cell and the point indices"
" of that cell are defined in :attr:`cells <pyvista.UnstructuredGrid.cells>`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:126
msgid "The leading ``6`` is the number of points in the cell."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:152
msgid "Combine two UnstructuredGrids"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:153
msgid ""
"We can combine two unstructured grids to create a single unstructured grid "
"using the ``+`` operator."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:157
msgid ""
"This is an inefficient way of creating :class:`pyvista.UnstructuredGrid` "
"objects. To see a more efficient implementation see "
":ref:`create_unstructured_example`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:193
msgid ""
"This example helps to illustrate meaning behind the :attr:`cells "
"<pyvista.UnstructuredGrid.cells>` attribute. The first cell, a hexahedron "
"contains 8 points and the hexagonal prism contains 12 points. The ``cells`` "
"attribute shows this along with indices composing each cell."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:223
msgid "Cell Types"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:224
msgid ""
"PyVista contains the :class:`pyvista.CellType` enumerator, which contains "
"all the available VTK cell types mapped to a Python enumerator. These cell "
"types are used when creating cells and also can be used when checking the "
":attr:`celltypes <pyvista.UnstructuredGrid.celltypes>` attribute. For "
"example ``combined.celltypes`` contains both the ``pv.CellType.HEXAHEDRON`` "
"and ``pv.CellType.HEXAGONAL_PRISM`` cell types."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:257
msgid "Create an UnstructuredGrid with a single linear cell"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:258
msgid ""
"Now that you know the three main inputs of an "
":class:`pyvista.UnstructuredGrid`, it's quite straightforward to create an "
"unstructured grid with a one or more cells. If you need to reference point "
"ordering or additional, you can either read the source of `cells.py "
"<https://github.com/pyvista/pyvista/blob/main/pyvista/examples/cells.py>`_ "
"or simply create a cell from the ``pyvista.core.cells`` module and inspect "
"its attributes."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:300
msgid "Plot all linear cell Types"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:301
msgid ""
"Let's create a ``(4, 4)`` :class:`pyvista.Plotter` and plot all 16 linear "
"cells in a single plot."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:408
msgid "**Total running time of the script:** (0 minutes 3.671 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:419
msgid ""
":download:`Download Jupyter notebook: linear-cells.ipynb <linear-"
"cells.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/linear-cells.rst:423
msgid ""
":download:`Download Python source code: linear-cells.py <linear-cells.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_load-gltf.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:24
msgid "Working with glTF Files"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:25
msgid ""
"Import a glTF file directly into a PyVista plotting scene.  For more details"
" regarding the glTF format, see: https://www.khronos.org/gltf/"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:29
msgid ""
"First, download the examples.  Note that here we're using a high dynamic "
"range texture since glTF files generally contain physically based rendering "
"and VTK v9 supports high dynamic range textures."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:54
msgid ""
"Set up the plotter and enable environment textures.  This works well for "
"physically based rendering enabled meshes like the damaged helmet example.  "
"Use :func:`pyvista.Plotter.import_gltf` to import file."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:87
msgid ""
"You can also directly read in gltf files and extract the underlying mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:135
msgid "**Total running time of the script:** (0 minutes 14.279 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:146
msgid ""
":download:`Download Jupyter notebook: load-gltf.ipynb <load-gltf.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-gltf.rst:150
msgid ":download:`Download Python source code: load-gltf.py <load-gltf.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_load-vrml.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:24
msgid "Working with VRML Files"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:25
msgid ""
"Import a VRML file directly into a PyVista plotting scene. For more details "
"regarding the VRML format, see: https://en.wikipedia.org/wiki/VRML"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:49
msgid ""
"Set up the plotter and import VRML file. Use "
":func:`pyvista.Plotter.import_vrml` to import file."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:97
msgid "**Total running time of the script:** (0 minutes 0.719 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:108
msgid ""
":download:`Download Jupyter notebook: load-vrml.ipynb <load-vrml.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/load-vrml.rst:112
msgid ":download:`Download Python source code: load-vrml.py <load-vrml.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_read-dolfin.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:22
msgid "Read FEniCS/Dolfin Meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:24
msgid ""
"PyVista leverages `meshio`_ to read many mesh formats not natively supported"
" by VTK including the `FEniCS/Dolfin`_ XML format. This example uses "
":func:`pyvista.read`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:48
msgid ""
"Let's download an example FEniCS/Dolfin mesh from our example data "
"repository. This will download an XML Dolfin mesh and save it to PyVista's "
"data directory."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:74
msgid ""
"As shown, we now have an XML Dolfin mesh save locally. This filename can be "
"passed directly to PyVista's :func:`pyvista.read` method to be read into a "
"PyVista mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:91
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>5400</td></tr>\n"
"<tr><td>N Points</td><td>2868</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:112
msgid "Now we can work on and plot that Dolfin mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:157
msgid "**Total running time of the script:** (0 minutes 0.418 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:168
msgid ""
":download:`Download Jupyter notebook: read-dolfin.ipynb <read-dolfin.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-dolfin.rst:172
msgid ""
":download:`Download Python source code: read-dolfin.py <read-dolfin.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_read-file.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:24
msgid "Load and Plot from a File"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:26
msgid "Read a dataset from a known file type."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:30
msgid ""
"Loading a mesh is trivial - if your data is in one of the many supported "
"file formats, simply use :func:`pyvista.read` to load your spatially "
"referenced dataset into a PyVista mesh object."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:34
msgid ""
"The following code block uses a built-in example file and displays an "
"airplane mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:54
msgid ""
"The following code block uses a built-in example file, displays an airplane "
"mesh and returns the camera's position:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:81
msgid ""
"Note the above filename, it's a ``.ply`` file - one of the many supported "
"formats in PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:128
msgid ""
"You can also take a screenshot without creating an interactive plot window "
"using the ``Plotter``:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:177
msgid "The points from the mesh are directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:207
msgid "The faces from the mesh are also directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:238
msgid ""
"Loading other files types is just as easy. Simply pass your file path to the"
" :func:`pyvista.read` function and that's it."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:241
msgid ""
"Here are a few other examples - simply replace ``examples.download_*`` in "
"the examples below with ``pyvista.read('path/to/you/file.ext')``"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:246
msgid "Example STL file:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:292
msgid "Example OBJ file"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:338
msgid "Example BYU file"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:384
msgid "Example VTK file"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:430
msgid "**Total running time of the script:** (0 minutes 1.646 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:441
msgid ""
":download:`Download Jupyter notebook: read-file.ipynb <read-file.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-file.rst:445
msgid ":download:`Download Python source code: read-file.py <read-file.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_read-image.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:22
msgid "Read Image Files"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:24
msgid "Read and plot image files (JPEG, TIFF, PNG, etc)."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:42
msgid ""
"PyVista fully supports reading images into their own spatially referenced "
"data objects (this example) as well as supports texture mapping of images "
"onto datasets (see :ref:`texture_example`)."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:46
msgid ""
"Download a JPEG image of a puppy and load it to :class:`pyvista.ImageData`. "
"This could similarly be implemented with any image file by using the "
":func:`pyvista.read` function and passing the path to the image file."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:68
msgid ""
"When plotting images stored in :class:`pyvista.ImageData` objects, it is "
"important to specify using the `rgb` option when plotting to ensure that the"
" image's true colors are used and not mapped."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:158
msgid "**Total running time of the script:** (0 minutes 35.178 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:169
msgid ""
":download:`Download Jupyter notebook: read-image.ipynb <read-image.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-image.rst:173
msgid ":download:`Download Python source code: read-image.py <read-image.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_read-parallel.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:24
msgid "Parallel Files"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:26
msgid ""
"The VTK library supports parallel file formats. Reading meshes broken up "
"into several files is natively supported by VTK and PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:49
msgid ""
"Let's go ahead and download the sample dataset containing an "
":class:`pyvista.UnstructuredGrid` broken up into several files."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:52
msgid ""
"Let's inspect where this downloaded our dataset by setting ``load=False`` "
"and looking at the directory containing the file we downloaded."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:99
msgid ""
"Note that a ``.pvtu`` file is available alongside a directory. This "
"directory contains all the parallel files or pieces that make the whole "
"mesh. We can simply read the ``.pvtu`` file and VTK will handle putting the "
"mesh together. In PyVista, this is accomplished through "
":func:`pyvista.read`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:117
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>39353</td></tr>\n"
"<tr><td>N Points</td><td>48823</td></tr>\n"
"<tr><td>X Bounds</td><td>5.300e+01, 1.210e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.000e+01, 9.700e+01</td></tr>\n"
"<tr><td>Z Bounds</td><td>6.400e+01, 1.820e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>5</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>node_value</td><td>Points</td><td>int32</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td>simerr_type</td><td>Points</td><td>int32</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td>density</td><td>Cells</td><td>float32</td><td>1</td><td>2.203e-01</td><td>5.232e-01</td></tr>\n"
"<tr><td>velocity</td><td>Cells</td><td>float32</td><td>3</td><td>-3.607e-01</td><td>8.989e-02</td></tr>\n"
"<tr><td>shearstress</td><td>Cells</td><td>float32</td><td>1</td><td>6.160e-05</td><td>1.726e-02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:148
msgid "Plot the pieced together mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:233
msgid "**Total running time of the script:** (0 minutes 1.147 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:244
msgid ""
":download:`Download Jupyter notebook: read-parallel.ipynb <read-"
"parallel.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/read-parallel.rst:248
msgid ""
":download:`Download Python source code: read-parallel.py <read-parallel.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_reader.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:24
msgid "Load data using a Reader"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:42
msgid ""
"To have more control over reading data files, use a class based reader. This"
" class allows for more fine-grained control over reading datasets from "
"files.  See :func:`pyvista.get_reader` for a list of file types supported."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:68
msgid ""
"An XML PolyData file in ``.vtp`` format is created.  It will be saved in a "
"temporary file for this example."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:94
msgid ""
":class:`pyvista.Sphere` already includes ``Normals`` point data.  "
"Additionally ``height`` point data and ``id`` cell data is added."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:115
msgid ""
":func:`pyvista.read` function reads all the data in the file. This provides "
"a quick and easy one-liner to read data from files."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:141
msgid ""
"Using :func:`pyvista.get_reader` enables more fine-grained control of "
"reading data files. Reading in a ``.vtp``` file uses the "
":class:`pyvista.XMLPolyDataReader`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:168
msgid ""
"Some reader classes, including this one, offer the ability to inspect the "
"data file before loading all the data. For example, we can access the number"
" and names of point and cell arrays."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:200
msgid ""
"We can select which data to read by selectively disabling or enabling "
"specific arrays or all arrays.  Here we disable all the cell arrays and the "
"``Normals`` point array to leave only the ``height`` point array.  The data "
"is finally read into a pyvista object that only has the ``height`` point "
"array."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:234
msgid ""
"We can reuse the reader object to choose different variables if needed."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:260
msgid ""
"Some Readers support setting different time points or iterations. In both "
"cases, this is done using the time point functionality. The NACA dataset has"
" two such points with density.  This dataset is in EnSight format, which "
"uses the :class:`pyvista.EnSightReader` class."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:294
msgid ""
"First both time points are read in, and then the difference in density is "
"calculated and saved on the second mesh.  The read method of "
":class:`pyvista.EnSightReader` returns a :class:`pyvista.MultiBlock` "
"instance. In this dataset, there are 3 blocks and the new scalar must be "
"applied on each block."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:322
msgid ""
"The value of `DENS` is plotted on the left column for both time points, and "
"the difference on the right."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:367
msgid ""
"Reading time points or iterations can also be utilized to make a movie. "
"Compare to :ref:`gif_movie_example`, but here a set of files are read in "
"through a ParaView Data format file. This file format and reader also return"
" a :class:`pyvista.MultiBlock` mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:396
msgid ""
"For each time point, plot the mesh colored by the height. Put iteration "
"value in top left"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:436
msgid "**Total running time of the script:** (0 minutes 3.569 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:447
msgid ":download:`Download Jupyter notebook: reader.ipynb <reader.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/reader.rst:451
msgid ":download:`Download Python source code: reader.py <reader.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:8
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:8
msgid "Computation times"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:9
msgid ""
"**02:36.213** total execution time for 28 files **from examples/00-load**:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:13
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:13
msgid ""
"<style scoped>\n"
"<link href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css\" rel=\"stylesheet\" />\n"
"<link href=\"https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css\" rel=\"stylesheet\" />\n"
"</style>\n"
"<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\n"
"<script src=\"https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js\"></script>\n"
"<script src=\"https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js\"></script>\n"
"<script type=\"text/javascript\" class=\"init\">\n"
"$(document).ready( function () {\n"
"    $('table.sg-datatable').DataTable({order: [[1, 'desc']]});\n"
"} );\n"
"</script>"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:32
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:32
msgid "Example"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:33
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:33
msgid "Time"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:34
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:34
msgid "Mem (MB)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_00-load_create-surface-draped.py` (``create-surface-"
"draped.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:36
msgid "00:48.832"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:40
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:43
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:46
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:49
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:52
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:55
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:58
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:61
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:64
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:67
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:70
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:73
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:76
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:79
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:82
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:85
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:88
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:91
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:94
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:97
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:100
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:103
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:106
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:109
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:112
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:115
#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:118
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:40
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:43
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:46
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:49
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:52
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:55
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:58
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:61
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:64
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:67
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:70
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:73
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:76
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:79
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:82
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:85
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:88
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:91
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:94
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:97
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:100
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:103
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:106
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:109
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:112
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:115
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:118
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:121
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:124
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:127
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:130
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:133
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:136
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:139
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:142
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:145
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:148
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:151
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:154
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:157
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:160
#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:163
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:40
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:43
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:46
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:49
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:52
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:55
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:58
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:61
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:64
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:67
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:70
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:73
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:76
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:79
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:82
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:85
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:88
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:91
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:94
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:97
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:100
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:103
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:106
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:109
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:112
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:115
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:118
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:121
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:124
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:127
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:130
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:133
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:136
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:139
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:142
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:145
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:148
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:151
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:154
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:157
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:160
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:163
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:166
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:169
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:172
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:175
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:178
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:181
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:184
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:187
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:190
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:193
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:196
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:199
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:202
#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:205
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:40
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:43
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:46
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:49
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:52
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:55
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:58
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:61
#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:64
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:40
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:43
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:46
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:49
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:52
#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:55
#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:37
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:40
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:43
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:46
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:49
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:52
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:55
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:58
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:61
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:64
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:67
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:70
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:73
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:76
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:79
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:82
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:85
#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:88
msgid "0.0"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:38
msgid ":ref:`sphx_glr_examples_00-load_read-image.py` (``read-image.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:39
msgid "00:35.178"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_00-load_create-pointset.py` (``create-pointset.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:42
msgid "00:15.967"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:44
msgid ":ref:`sphx_glr_examples_00-load_load-gltf.py` (``load-gltf.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:45
msgid "00:14.279"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_00-load_create-parametric-geometric-objects.py` "
"(``create-parametric-geometric-objects.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:48
msgid "00:09.226"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_00-load_create-pixel-art.py` (``create-pixel-"
"art.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:51
msgid "00:04.190"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_00-load_linear-cells.py` (``linear-cells.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:54
msgid "00:03.671"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:56
msgid ":ref:`sphx_glr_examples_00-load_reader.py` (``reader.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:57
msgid "00:03.569"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_00-load_create-point-cloud.py` (``create-point-"
"cloud.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:60
msgid "00:03.108"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:62
msgid ""
":ref:`sphx_glr_examples_00-load_create-structured-surface.py` (``create-"
"structured-surface.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:63
msgid "00:01.982"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_examples_00-load_create-spline.py` (``create-spline.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:66
msgid "00:01.937"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:68
msgid ":ref:`sphx_glr_examples_00-load_read-file.py` (``read-file.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:69
msgid "00:01.646"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:71
msgid ""
":ref:`sphx_glr_examples_00-load_create-unstructured-surface.py` (``create-"
"unstructured-surface.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:72
msgid "00:01.448"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:74
msgid ":ref:`sphx_glr_examples_00-load_terrain-mesh.py` (``terrain-mesh.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:75
msgid "00:01.331"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:77
msgid ""
":ref:`sphx_glr_examples_00-load_create-tri-surface.py` (``create-tri-"
"surface.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:78
msgid "00:01.154"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:80
msgid ""
":ref:`sphx_glr_examples_00-load_read-parallel.py` (``read-parallel.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:81
msgid "00:01.147"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:83
msgid ""
":ref:`sphx_glr_examples_00-load_create-explicit-structured-grid.py` "
"(``create-explicit-structured-grid.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:84
msgid "00:01.117"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:86
msgid ""
":ref:`sphx_glr_examples_00-load_create-uniform-grid.py` (``create-uniform-"
"grid.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:87
msgid "00:00.905"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:89
msgid ""
":ref:`sphx_glr_examples_00-load_create-platonic-solids.py` (``create-"
"platonic-solids.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:90
msgid "00:00.870"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:92
msgid ":ref:`sphx_glr_examples_00-load_wrap-trimesh.py` (``wrap-trimesh.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:93
msgid "00:00.865"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:95
msgid ""
":ref:`sphx_glr_examples_00-load_create-kochanek-spline.py` (``create-"
"kochanek-spline.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:96
msgid "00:00.785"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:98
msgid ":ref:`sphx_glr_examples_00-load_load-vrml.py` (``load-vrml.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:99
msgid "00:00.719"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:101
msgid ":ref:`sphx_glr_examples_00-load_create-poly.py` (``create-poly.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:102
msgid "00:00.566"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:104
msgid ""
":ref:`sphx_glr_examples_00-load_create-geometric-objects.py` (``create-"
"geometric-objects.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:105
msgid "00:00.489"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:107
msgid ":ref:`sphx_glr_examples_00-load_read-dolfin.py` (``read-dolfin.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:108
msgid "00:00.418"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:110
msgid ":ref:`sphx_glr_examples_00-load_create-truss.py` (``create-truss.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:111
msgid "00:00.363"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:113
msgid ""
":ref:`sphx_glr_examples_00-load_create-polyhedron.py` (``create-"
"polyhedron.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:114
msgid "00:00.232"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:116
msgid ""
":ref:`sphx_glr_examples_00-load_create-polydata-strips.py` (``create-"
"polydata-strips.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/sg_execution_times.rst:117
msgid "00:00.221"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_terrain-mesh.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:24
msgid "Terrain Following Mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:26
msgid "Use a topographic surface to create a 3D terrain-following mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:28
msgid ""
"Terrain following meshes are common in the environmental sciences, for "
"instance in hydrological modelling (see `Maxwell 2013 "
"<https://www.sciencedirect.com/science/article/abs/pii/S0309170812002564>`_ "
"and `ParFlow <https://parflow.org>`_)."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:34
msgid ""
"In this example, we demonstrate a simple way to make a 3D grid/mesh that "
"follows a given topographic surface. In this example, it is important to "
"note that the given digital elevation model (DEM) is structured (gridded and"
" not triangulated): this is common for DEMs."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:58
msgid "Download a gridded topography surface (DEM)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:72
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1677401</td></tr>\n"
"<tr><td>N Points</td><td>1680000</td></tr>\n"
"<tr><td>X Bounds</td><td>1.810e+06, 1.831e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.640e+06, 5.658e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>Dimensions</td><td>1400, 1200, 1</td></tr>\n"
"<tr><td>Spacing</td><td>1.500e+01, 1.500e+01, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>7.339e+02</td><td>2.787e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:101
msgid ""
"Now let's subsample and extract an area of interest to make this example "
"simple (also the DEM we just load is pretty big). Since the DEM we loaded is"
" a :class:`pyvista.ImageData` mesh, we can use the "
":func:`pyvista.ImageDataFilters.extract_subset` filter:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:150
msgid ""
"Now that we have a region of interest for our terrain following mesh, lets "
"make a 3D surface of that DEM:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:165
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6400</td></tr>\n"
"<tr><td>N Points</td><td>6561</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.441e+03, 2.769e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>81, 81, 1</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.441e+03</td><td>2.769e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:234
msgid ""
"And now we have a 3D structured surface of the terrain. We can now extend "
"that structured surface into a 3D mesh to form a terrain following grid. To "
"do this, we first our cell spacings in the z-direction (these start from the"
" terrain surface). Then we repeat the XYZ structured coordinates of the "
"terrain mesh and decrease each Z level by our Z cell spacing. Once we have "
"those structured coordinates, we can create a "
":class:`pyvista.StructuredGrid`."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:262
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>70400</td></tr>\n"
"<tr><td>N Points</td><td>78732</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.824e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.646e+06, 5.652e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.364e+02, 2.744e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>81, 81, 12</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>Elevation</b></td><td>Points</td><td>float64</td><td>1</td><td>9.364e+02</td><td>2.744e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:336
msgid "**Total running time of the script:** (0 minutes 1.331 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:347
msgid ""
":download:`Download Jupyter notebook: terrain-mesh.ipynb <terrain-"
"mesh.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/terrain-mesh.rst:351
msgid ""
":download:`Download Python source code: terrain-mesh.py <terrain-mesh.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_00-load_wrap-trimesh.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:24
msgid "Wrapping Other Objects"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:25
msgid "You can wrap several other object types using pyvista including:"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:27
msgid "`numpy` arrays"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:28
msgid "`trimesh.Trimesh` meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:29
msgid "VTK objects"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:31
msgid ""
"This allows for the \"best of both worlds\" programming special to Python "
"due to its modularity.  If there's some limitation of pyvista (or trimesh), "
"then you can adapt your scripts to use the best features of more than one "
"module."
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:52
msgid "Wrap a point cloud composed of random points from numpy"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:90
msgid "Wrap an instance of Trimesh"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:126
msgid "Wrap an instance of vtk.vtkPolyData"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:169
msgid "**Total running time of the script:** (0 minutes 0.865 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:180
msgid ""
":download:`Download Jupyter notebook: wrap-trimesh.ipynb <wrap-"
"trimesh.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/00-load/wrap-trimesh.rst:184
msgid ""
":download:`Download Python source code: wrap-trimesh.py <wrap-trimesh.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_boolean-"
"operations.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:24
msgid "Boolean Operations"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:26
msgid "Perform boolean operations with closed (manifold) surfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:28
msgid ""
"Boolean/topological operations (intersect, union, difference) methods are "
"implemented for :class:`pyvista.PolyData` mesh types only and are accessible"
" directly from any :class:`pyvista.PolyData` mesh. Check out "
":class:`pyvista.PolyDataFilters` and take a look at the following filters:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:34
msgid ":func:`pyvista.PolyDataFilters.boolean_difference`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:35
msgid ":func:`pyvista.PolyDataFilters.boolean_union`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:36
msgid ":func:`pyvista.PolyDataFilters.boolean_intersection`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:38
msgid ""
"Essentially, boolean union, difference, and intersection are all the same "
"operation. Just different parts of the objects are kept at the end."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:42
msgid ""
"The ``-`` operator can be used between any two :class:`pyvista.PolyData` "
"meshes in PyVista to cut the first mesh by the second.  These meshes must be"
" all triangle meshes, which you can check with "
":attr:`pyvista.PolyData.is_all_triangles`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:48
msgid ""
"For merging, the ``+`` operator can be used between any two meshes in "
"PyVista which simply calls the ``.merge()`` filter to combine any two "
"meshes.  This is different from ``boolean_union`` as it simply superimposes "
"the two meshes without performing additional calculations on the result."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:55
msgid ""
"If your boolean operations don't react the way you think they should (i.e. "
"the wrong parts disappear), one of your meshes probably has its normals "
"pointing inward. Use :func:`pyvista.PolyDataFilters.plot_normals` to "
"visualize the normals."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:81
msgid "Boolean Union"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:83
msgid ""
"Perform a boolean union of ``A`` and ``B`` using the "
":func:`pyvista.PolyDataFilters.boolean_union` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:86
msgid ""
"The union of two manifold meshes ``A`` and ``B`` is the mesh which is in "
"``A``, in ``B``, or in both ``A`` and ``B``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:89
msgid ""
"Order of operands does not matter for boolean union (the operation is "
"commutative)."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:143
msgid "Boolean Difference"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:145
msgid ""
"Perform a boolean difference of ``A`` and ``B`` using the "
":func:`pyvista.PolyDataFilters.boolean_difference` filter or the ``-`` "
"operator since both meshes are :class:`pyvista.PolyData`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:149
msgid ""
"The difference of two manifold meshes ``A`` and ``B`` is the volume of the "
"mesh in ``A`` not belonging to ``B``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:152
msgid "Order of operands matters for boolean difference."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:205
msgid "Boolean Intersection"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:207
msgid ""
"Perform a boolean intersection of ``A`` and ``B`` using the "
":func:`pyvista.PolyDataFilters.boolean_intersection` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:210
msgid ""
"The intersection of two manifold meshes ``A`` and ``B`` is the mesh which is"
" the volume of ``A`` that is also in ``B``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:213
msgid ""
"Order of operands does not matter for boolean intersection (the operation is"
" commutative)."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:267
msgid "Behavior due to flipped normals"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:268
msgid ""
"Note that these boolean filters behave differently depending on the "
"orientation of the normals."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:271
msgid ""
"Boolean difference with both cube and sphere normals pointed outward.  This "
"is the \"normal\" behavior."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:321
msgid "Boolean difference with cube normals outward, sphere inward."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:371
msgid "Boolean difference with cube normals inward, sphere outward."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:421
msgid "Both cube and sphere normals inward."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:471
msgid "**Total running time of the script:** (0 minutes 5.828 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:482
msgid ""
":download:`Download Jupyter notebook: boolean-operations.ipynb <boolean-"
"operations.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/boolean-operations.rst:486
msgid ""
":download:`Download Python source code: boolean-operations.py <boolean-"
"operations.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_cell-centers.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:24
msgid "Extract Cell Centers"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:26
msgid ""
"Extract the coordinates of the centers of all cells or faces in a mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:28
msgid ""
"Here we use :func:`cell_centers <pyvista.DataSetFilters.cell_centers>`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:48
msgid "First let's fetch the centers of a mesh with 2D geometries (a surface)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:106
msgid "We can also do this for full 3D meshes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:211
msgid "Edge centers"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:212
msgid ""
"You can use :func:`cell_centers <pyvista.DataSetFilters.cell_centers>` in "
"combination with :func:`extract_all_edges "
"<pyvista.DataSetFilters.extract_all_edges>` to get the center of all edges "
"of a mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:275
msgid "Add labels to cells"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:276
msgid ""
"There is not a method to add labels to cells. If you want to label it, you "
"need to extract the position to label it."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:309
msgid "**Total running time of the script:** (0 minutes 1.664 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:320
msgid ""
":download:`Download Jupyter notebook: cell-centers.ipynb <cell-"
"centers.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/cell-centers.rst:324
msgid ""
":download:`Download Python source code: cell-centers.py <cell-centers.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_clipping.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:24
msgid "Clipping with Planes & Boxes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:26
msgid "Clip/cut any dataset using planes or boxes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:47
msgid "Clip with Plane"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:49
msgid ""
"Clip any dataset by a user defined plane using the "
":func:`pyvista.DataSetFilters.clip` filter"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:85
msgid "Clip with Bounds"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:87
msgid ""
"Clip any dataset by a set of XYZ bounds using the "
":func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:124
msgid "Clip with Rotated Box"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:126
msgid ""
"Clip any dataset by an arbitrarily rotated solid box using the "
":func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:161
msgid "Run the box clipping algorithm"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:197
msgid "Crinkled Clipping"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:198
msgid ""
"Crinkled clipping is useful if you don't want the clip filter to truly clip "
"cells on the boundary, but want to preserve the input cell structure and to "
"pass the entire cell on through the boundary."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:202
msgid ""
"This option is available for :func:`pyvista.DataSetFilters.clip`, "
":func:`pyvista.DataSetFilters.clip_box`, and "
":func:`pyvista.DataSetFilters.clip_surface`, but not available when clipping"
" by scalar in :func:`pyvista.DataSetFilters.clip_scalar`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:224
msgid "Define clipping plane"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:242
msgid "Perform a standard clip"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:259
msgid "Perform a crinkled clip"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:276
msgid "Plot comparison"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:308
msgid "**Total running time of the script:** (0 minutes 1.677 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:319
msgid ":download:`Download Jupyter notebook: clipping.ipynb <clipping.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping.rst:323
msgid ":download:`Download Python source code: clipping.py <clipping.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_clipping-with-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:24
msgid "Clipping with a Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:26
msgid ""
"Clip any PyVista dataset by a :class:`pyvista.PolyData` surface mesh using "
"the :func:`pyvista.DataSetFilters.clip_surface` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:29
msgid ""
"Note that we first demonstrate how the clipping is performed by computing an"
" implicit distance and thresholding the mesh. This thresholding is one "
"approach to clip by a surface, and preserve the original geometry of the "
"given mesh, but many folks leverage the ``clip_surface`` filter to "
"triangulate/tessellate the mesh geometries along the clip."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:88
msgid ""
"Take a look at the implicit function used to perform the surface clipping by"
" using the :func:`pyvista.DataSetFilters.compute_implicit_distance` filter. "
"The clipping operation field is performed where the ``implicit_distance`` "
"field is zero and the ``invert`` flag controls which sides of zero to "
"preserve."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:168
msgid ""
"Clip the rectilinear grid dataset using the :class:`pyvista.PolyData` "
"surface mesh via the :func:`pyvista.DataSetFilters.clip_surface` filter. "
"This will triangulate/tessellate the mesh geometries along the clip."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:203
msgid ""
"Here is another example of clipping a mesh by a surface. This time, we'll "
"generate a :class:`pyvista.ImageData` around a topography surface and then "
"clip that grid using the surface to create a closed 3D model of the surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:260
msgid "**Total running time of the script:** (0 minutes 24.160 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:271
msgid ""
":download:`Download Jupyter notebook: clipping-with-surface.ipynb <clipping-"
"with-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/clipping-with-surface.rst:275
msgid ""
":download:`Download Python source code: clipping-with-surface.py <clipping-"
"with-surface.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_collisions.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:24
msgid "Collision"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:25
msgid "Perform a collision detection between two meshes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:27
msgid ""
"This example use the :class:`collision <pyvista.PolyDataFilters.collision>` "
"filter to detect the faces from one sphere colliding with another sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:32
msgid ""
"Due to the nature of the `vtk.vtkCollisionDetectionFilter "
"<https://vtk.org/doc/nightly/html/classvtkCollisionDetectionFilter.html>`_, "
"repeated uses of this method will be slower that using the "
"``vtk.vtkCollisionDetectionFilter`` directly.  The first update of the "
"filter creates two instances of `vtkOBBTree "
"<https://vtk.org/doc/nightly/html/classvtkOBBTree.html>`_, which can be "
"subsequently updated by modifying the transform or matrix of the input "
"meshes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:41
msgid ""
"This method assumes no transform and is easier to use for single collision "
"tests, but it is recommended to use a combination of ``pyvista`` and ``vtk``"
" for rapidly computing repeated collisions.  See the `Collision Detection "
"Example <https://kitware.github.io/vtk-"
"examples/site/Python/Visualization/CollisionDetection/>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:68
msgid "Create the main mesh and the secondary \"moving\" mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:70
msgid ""
"Collision faces will be plotted on this sphere, and to do so we initialize "
"an initial ``\"collisions\"`` mask."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:92
msgid ""
"Set up the plotter open a movie, and write a frame after moving the sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:145
msgid "**Total running time of the script:** (0 minutes 5.542 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:156
msgid ""
":download:`Download Jupyter notebook: collisions.ipynb <collisions.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/collisions.rst:160
msgid ":download:`Download Python source code: collisions.py <collisions.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_compute-"
"normals.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:24
msgid "Computing Surface Normals"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:25
msgid "Compute normals on a surface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:45
msgid ""
"Computing the normals of a surface is quite easy using "
":class:`pyvista.PolyData`'s :func:`pyvista.PolyDataFilters.compute_normals` "
"method."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:93
msgid ""
"Now we have a surface dataset of the globe loaded - unfortunately, the "
"dataset shows the globe with a uniform radius which hides topographic "
"relief. Using :func:`pyvista.PolyDataFilters.compute_normals`, we can "
"compute the normal vectors on the globe at all points in the dataset, then "
"use the values given in the dataset to warp the surface in the normals "
"direction to create some exaggerated topographic relief."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:151
msgid ""
"We could also use face/cell normals to extract all the faces of a mesh "
"facing a general direction. In the following snippet, we take a mesh, "
"compute the normals along its cell faces, and extract the faces that face "
"upward."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:214
msgid "**Total running time of the script:** (0 minutes 50.106 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:225
msgid ""
":download:`Download Jupyter notebook: compute-normals.ipynb <compute-"
"normals.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-normals.rst:229
msgid ""
":download:`Download Python source code: compute-normals.py <compute-"
"normals.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_compute-"
"volume.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:24
msgid "Volumetric Analysis"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:27
msgid "Calculate mass properties such as the volume or area of datasets"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:47
msgid ""
"Computing mass properties such as the volume or area of datasets in PyVista "
"is quite easy using the :func:`pyvista.DataSetFilters.compute_cell_sizes` "
"filter and the :attr:`pyvista.DataSet.volume` property on all PyVista "
"meshes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:51
msgid "Let's get started with a simple gridded mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:157
msgid ""
"We can then calculate the volume of every cell in the array using the "
"``.compute_cell_sizes`` filter which will add arrays to the cell data of the"
" mesh core the volume and area by default."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:181
msgid ""
"We can also compute the total volume of the mesh using the ``.volume`` "
"property:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:201
msgid ""
"But what if we have a dataset that we threshold with two volumetric bodies "
"left over in one dataset? Take this for example:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:249
msgid ""
"We could then assign a classification array for the two bodies, compute the "
"cell sizes, then extract the volumes of each body. Note that there is a "
"simpler implementation of this below in :ref:`split_vol`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:294
msgid ""
"Or better yet, you could simply extract the largest volume from your dataset"
" directly by passing ``'largest'`` to the ``connectivity`` and specifying "
"the scalar range of interest."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:355
msgid "Splitting Volumes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:357
msgid ""
"What if instead, we wanted to split all the different connected bodies / "
"volumes in a dataset like the one above? We could use the "
":func:`pyvista.DataSetFilters.split_bodies` filter to extract all the "
"different connected volumes in a dataset into blocks in a "
":class:`pyvista.MultiBlock` dataset. For example, lets split the thresholded"
" volume in the example above:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:441
msgid "A Real Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:443
msgid ""
"Here is a realistic training dataset of fluvial channels in the subsurface. "
"This will threshold the channels from the dataset then separate each "
"significantly large body and compute the volumes for each."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:447
msgid "Load up the data and threshold the channels:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:466
msgid "Now extract all the different bodies and compute their volumes:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:493
msgid "Print out the volumes for each body:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:538
msgid "And visualize all the different volumes:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:583
msgid "**Total running time of the script:** (0 minutes 4.355 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:594
msgid ""
":download:`Download Jupyter notebook: compute-volume.ipynb <compute-"
"volume.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/compute-volume.rst:598
msgid ""
":download:`Download Python source code: compute-volume.py <compute-"
"volume.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_connectivity.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:24
msgid "Connectivity"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:26
msgid ""
"This example highlights some applications of the "
":func:`~pyvista.DataSetFilters.connectivity` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:32
msgid "Remove Noisy Isosurfaces"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:34
msgid "Use connectivity to remove noisy isosurfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:36
msgid ""
"This section is similar to `this VTK example <https://kitware.github.io/vtk-"
"examples/site/Python/VisualizationAlgorithms/PineRootConnectivity/>`__."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:57
msgid "Load a dataset with noisy isosurfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:108
msgid ""
"The plotted mesh is very noisy. We can extract the largest connected "
"isosurface using the ``'largest'`` ``extraction_mode`` of  the "
":func:`~pyvista.DataSetFilters.connectivity` filter. Equivalently, "
":func:`~pyvista.DataSetFilters.extract_largest` may also be used."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:166
msgid "Extract Small Regions"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:168
msgid ""
"Use connectivity to extract the smaller 'noisy' regions that were removed in"
" the remove noisy isosurfaces example above."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:171
msgid "First, get a list of all region ids."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:189
msgid ""
"Since the region IDs are sorted in descending order (by cell count), we can "
"extract all regions *except* for the largest one using the ``'specified'`` "
"``extraction_mode`` of the :func:`~pyvista.DataSetFilters.connectivity` "
"filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:210
msgid "Plot the noisy regions. For context, also plot the largest region."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:261
msgid "Label Disconnected Regions"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:263
msgid "Use connectivity to label all disconnected regions."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:265
msgid ""
"This section is similar to `this VTK example "
"<https://examples.vtk.org/site/Cxx/PolyData/ColorDisconnectedRegionsDemo/>`__."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:267
msgid "First, load a dataset with disconnected regions."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:284
msgid "Extract all regions."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:301
msgid "Plot the labeled regions."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:360
msgid "Extract Regions From Seed Points"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:362
msgid ""
"Use connectivity to extract regions of interest using scalar data and seed "
"points."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:365
msgid ""
"First, create a dataset with salient features. Here, we create hills and use"
" curvature to define its peaks and valleys."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:384
msgid ""
"Visualize the peaks and valleys. Peaks have large positive curvature (i.e. "
"are convex). Valleys have large negative curvature (i.e. are concave). Flat "
"regions have curvature close to zero."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:436
msgid ""
"Extract a region of interest using the ``'point_seed'`` ``extraction_mode`` "
"of the :func:`~pyvista.DataSetFilters.connectivity` filter. Let's extract "
"the steepest peak using a seed point where the curvature is maximized."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:464
msgid ""
"Let's also extract the closest valley to the steepest peak using the "
"``'closest'`` ``extraction_mode`` of the "
":func:`~pyvista.DataSetFilters.connectivity` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:485
msgid "Plot extracted regions."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:534
msgid "**Total running time of the script:** (0 minutes 9.515 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:545
msgid ""
":download:`Download Jupyter notebook: connectivity.ipynb "
"<connectivity.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/connectivity.rst:549
msgid ""
":download:`Download Python source code: connectivity.py <connectivity.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_contouring.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:24
msgid "Contouring"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:26
msgid ""
"Generate iso-lines or -surfaces for the scalars of a surface or volume."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:28
msgid ""
"3D meshes can have 2D iso-surfaces of a scalar field extracted and 2D "
"surface meshes can have 1D iso-lines of a scalar field extracted."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:51
msgid "Iso-Lines"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:53
msgid "Let's extract 1D iso-lines of a scalar field from a 2D surface mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:106
msgid "Iso-Surfaces"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:108
msgid "Let's extract 2D iso-surfaces of a scalar field from a 3D mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:166
msgid "Banded Contours"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:167
msgid ""
"Create banded contours for surface meshes using :func:`contour_banded() "
"<pyvista.PolyDataFilters.contour_banded>`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:184
msgid "Set number of contours and produce mesh and lines"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:202
msgid "Also make normal vectors"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:268
msgid "Contours from a label map"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:270
msgid ""
"Create labeled surfaces from 3D label maps (e.f. multi-label image "
"segmentation) using :func:`contour_labeled() "
"<pyvista.ImageDataFilters.contour_labeled>`. Requires VTK version 9.3"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:319
msgid "**Total running time of the script:** (0 minutes 23.397 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:330
msgid ""
":download:`Download Jupyter notebook: contouring.ipynb <contouring.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/contouring.rst:334
msgid ":download:`Download Python source code: contouring.py <contouring.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_decimate.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:24
msgid "Decimation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:26
msgid "Decimate a mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:81
msgid ""
"Now let's define a target reduction and compare the "
":func:`pyvista.PolyDataFilters.decimate` and "
":func:`pyvista.PolyDataFilters.decimate_pro` filters."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:193
msgid "Side by side comparison:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:236
msgid "**Total running time of the script:** (0 minutes 1.143 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:247
msgid ":download:`Download Jupyter notebook: decimate.ipynb <decimate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/decimate.rst:251
msgid ":download:`Download Python source code: decimate.py <decimate.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_distance-between-"
"surfaces.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:22
msgid "Distance Between Two Surfaces"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:24
msgid "Compute the average thickness between two surfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:26
msgid ""
"For example, you might have two surfaces that represent the boundaries of "
"lithological layers in a subsurface geological model and you want to know "
"the average thickness of a unit between those boundaries."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:30
msgid ""
"A clarification on terminology in this example is important.  A mesh point "
"exists on the vertex of each cell on the mesh.  See :ref:`what_is_a_mesh`. "
"Each cell in this example encompasses a 2D region of space which contains an"
" infinite number of spatial points; these spatial points are not mesh "
"points. The distance between two surfaces can mean different things "
"depending on context and usage.  Each example here explores different "
"aspects of the distance from the vertex points of the bottom mesh to the top"
" mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:38
msgid ""
"First, we will demo a method where we compute the normals on the vertex "
"points of the bottom surface, and then project a ray to the top surface to "
"compute the distance along the surface normals. This ray will usually "
"intersect the top surface at a spatial point inside a cell of the mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:43
msgid ""
"Second, we will use a KDTree to compute the distance from every vertex point"
" in the bottom mesh to its closest vertex point in the top mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:46
msgid ""
"Lastly, we will use a PyVista filter, "
":func:`pyvista.DataSet.find_closest_cell` to calculate the distance from "
"every vertex point in the bottom mesh to the closest spatial point inside a "
"cell of the top mesh.  This will be the shortest distance from the vertex "
"point to the top surface, unlike the first two examples."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:130
msgid "Ray Tracing Distance"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:132
msgid "Compute normals of lower surface at vertex points"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:149
msgid ""
"Travel along normals to the other surface and compute the thickness on each "
"vector."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:232
msgid "Nearest Neighbor Distance"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:234
msgid ""
"You could also use a KDTree to compare the distance between each vertex "
"point of the upper surface and the nearest neighbor vertex point of the "
"lower surface. This will be noticeably faster than a ray trace, especially "
"for large surfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:311
msgid "Using PyVista Filter"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:313
msgid ""
"The :func:`pyvista.DataSet.find_closest_cell` filter returns the spatial "
"points inside the cells of the top surface that are closest to the vertex "
"points of the bottom surface.  ``closest_points`` is returned when using "
"``return_closest_point=True``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:344
msgid ""
"As expected there is only a small difference between this method and the "
"KDTree method."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:393
msgid "**Total running time of the script:** (0 minutes 2.425 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:404
msgid ""
":download:`Download Jupyter notebook: distance-between-surfaces.ipynb "
"<distance-between-surfaces.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/distance-between-surfaces.rst:408
msgid ""
":download:`Download Python source code: distance-between-surfaces.py "
"<distance-between-surfaces.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_extract-cells-"
"inside-surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:22
msgid "Extract Cells Inside Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:24
msgid ""
"Extract the cells in a mesh that exist inside or outside a closed surface of"
" another mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:85
msgid "Mark points inside with 1 and outside with a 0"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:99
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>3263</td></tr>\n"
"<tr><td>N Points</td><td>2903</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.446e+00, 5.998e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.637e+00, 2.760e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-1.701e+00, 1.701e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>SelectedPoints</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:127
msgid ""
"Extract two meshes, one completely inside and one completely outside the "
"enclosing surface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:147
msgid "display the results"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:198
msgid "**Total running time of the script:** (0 minutes 0.709 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:209
msgid ""
":download:`Download Jupyter notebook: extract-cells-inside-surface.ipynb "
"<extract-cells-inside-surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-cells-inside-surface.rst:213
msgid ""
":download:`Download Python source code: extract-cells-inside-surface.py "
"<extract-cells-inside-surface.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_extract-edges.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:24
msgid "Extract Edges"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:26
msgid "Extract edges from a surface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:45
msgid "From vtk documentation, the edges of a mesh are one of the following:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:47
msgid "boundary (used by one polygon) or a line cell"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:48
msgid "non-manifold (used by three or more polygons)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:49
msgid ""
"feature edges (edges used by two triangles and whose dihedral angle > "
"feature_angle)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:50
msgid "manifold edges (edges used by exactly two polygons)."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:52
msgid ""
"The :func:`extract_feature_edges() "
"<pyvista.DataSetFilters.extract_feature_edges>` filter will extract those "
"edges given a feature angle and return a dataset with lines that represent "
"the edges of the original mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:56
msgid ""
"To demonstrate, we will first extract the edges around a sample CAD model:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:111
msgid ""
"We can do this analysis for any :class:`pyvista.PolyData` object. Let's try "
"the cow mesh example:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:165
msgid ""
"We can leverage the :any:`pyvista.PolyData.n_open_edges` property and "
":func:`pyvista.DataSetFilters.extract_feature_edges` filter to count and "
"extract the open edges on a :class:`pyvista.PolyData` mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:183
#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:460
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>69451</td></tr>\n"
"<tr><td>N Points</td><td>35947</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-9.469e-02, 6.101e-02</td></tr>\n"
"<tr><td>Y Bounds</td><td>3.299e-02, 1.873e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-6.187e-02, 5.880e-02</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:205
msgid "We can get a count of the open edges with:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:229
msgid ""
"And we can extract those edges with the ``boundary_edges`` option of "
":func:`pyvista.DataSetFilters.extract_feature_edges`:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:280
msgid "**Total running time of the script:** (0 minutes 1.530 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:291
msgid ""
":download:`Download Jupyter notebook: extract-edges.ipynb <extract-"
"edges.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-edges.rst:295
msgid ""
":download:`Download Python source code: extract-edges.py <extract-edges.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_extract-"
"surface.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:24
msgid "Extract Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:26
msgid ""
"You can extract the surface of nearly any object within ``pyvista`` using "
"the ``extract_surface`` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:50
msgid "Create a quadratic cell and extract its surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:51
msgid ""
"Here we create a single quadratic hexahedral cell and then extract its "
"surface to demonstrate how to extract the surface of an UnstructuredGrid."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:145
msgid "Nonlinear Surface Subdivision"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:146
msgid ""
"Should your UnstructuredGrid contain quadratic cells, you can generate a "
"smooth surface based on the position of the \"mid-edge\" nodes.  This allows"
" the plotting of cells containing curvature.  For additional reference, "
"please see: https://prod.sandia.gov/techlib-noauth/access-"
"control.cgi/2004/041617.pdf"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:196
msgid "**Total running time of the script:** (0 minutes 0.537 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:207
msgid ""
":download:`Download Jupyter notebook: extract-surface.ipynb <extract-"
"surface.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extract-surface.rst:211
msgid ""
":download:`Download Python source code: extract-surface.py <extract-"
"surface.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_extrude-"
"rotate.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:22
msgid "Extrude Rotation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:23
msgid ""
"Sweep polygonal data creating \"skirt\" from free edges and lines, and lines"
" from vertices."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:26
msgid ""
"This takes polygonal data as input and generates polygonal data on output. "
"The input dataset is swept around the z-axis to create new polygonal "
"primitives. These primitives form a \"skirt\" or swept surface. For example,"
" sweeping a line results in a cylindrical shell, and sweeping a circle "
"creates a torus."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:59
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>2</td></tr>\n"
"<tr><td>N Points</td><td>33</td></tr>\n"
"<tr><td>N Strips</td><td>2</td></tr>\n"
"<tr><td>X Bounds</td><td>-1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-9.511e-01, 9.511e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"<tr><td><b>Distance</b></td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:89
msgid "Plot the extruded line"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:138
msgid "Create a spring"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:213
msgid "**Total running time of the script:** (0 minutes 0.591 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:224
msgid ""
":download:`Download Jupyter notebook: extrude-rotate.ipynb <extrude-"
"rotate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-rotate.rst:228
msgid ""
":download:`Download Python source code: extrude-rotate.py <extrude-"
"rotate.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_extrude-trim.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:24
msgid "Extrude Trim"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:25
msgid ""
"Extrude a :class:`pyvista.PolyData` with a :func:`pyvista.Plane` using "
":func:`extrude_trim() <pyvista.PolyDataFilters.extrude_trim>`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:45
msgid "Generate an Extruded Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:71
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>39600</td></tr>\n"
"<tr><td>N Points</td><td>20000</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-1.000e+01, 1.000e+01</td></tr>\n"
"<tr><td>Y Bounds</td><td>-2.309e-14, 2.000e+01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-5.000e+00, 7.725e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:94
msgid "Plot the Extruded Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:95
msgid "Plot the resulting :class:`pyvista.PolyData`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:136
msgid "Extruding All Edges"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:137
msgid ""
"The previous example used the default ``extrusion='boundary_edges'``, which "
"only generates faces on the boundary. When using ``extrusion='all_edges'``, "
"interior edges are also created."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:179
msgid "Plot"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:180
msgid ""
"Show the additional interior faces by plotting with ``style='wireframe'``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:219
msgid "Extrude a Line"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:220
msgid ""
"You can also extrude lines. Observe that the output from extruded lines is "
"still a :class:`pyvista.PolyData`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:239
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>4</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.000e-01, 5.000e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.500e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"<tr><td><b>Distance</b></td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:269
msgid "Plot the Extruded Line"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:270
msgid "Note how the scalars are copied to the extruded line."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:319
msgid "**Total running time of the script:** (0 minutes 1.235 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:330
msgid ""
":download:`Download Jupyter notebook: extrude-trim.ipynb <extrude-"
"trim.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/extrude-trim.rst:334
msgid ""
":download:`Download Python source code: extrude-trim.py <extrude-trim.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_flying_edges.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:24
msgid "Marching Cubes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:26
msgid ""
"Generate a surface from a scalar field using the flying edges and marching "
"cubes filters as provided by the :func:`contour "
"<pyvista.DataSetFilters.contour>` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:30
msgid ""
"Special thanks to GitHub user `stla <https://gist.github.com/stla>`_ for "
"providing examples."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:52
msgid "Spider Cage"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:53
msgid ""
"Use the marching cubes algorithm to extract the isosurface generated from "
"the spider cage function."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:127
msgid "Barth Sextic"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:128
msgid ""
"Use the flying edges algorithm to extract the isosurface generated from the "
"Barth sextic function."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:209
msgid "Animate Barth Sextic"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:210
msgid ""
"Show 20 frames of various isocurves extracted from the Barth sextic "
"function."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:262
msgid "**Total running time of the script:** (0 minutes 7.120 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:273
msgid ""
":download:`Download Jupyter notebook: flying_edges.ipynb "
"<flying_edges.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/flying_edges.rst:277
msgid ""
":download:`Download Python source code: flying_edges.py <flying_edges.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_gaussian-"
"smoothing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:24
msgid "Gaussian Smoothing"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:26
msgid "Perform a Gaussian convolution on a uniformly gridded data set."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:28
msgid ""
":class:`pyvista.ImageData` data sets (a.k.a. images) a can be smoothed by "
"convolving the image data set with a Gaussian for one- to three-dimensional "
"inputs. This is commonly referred to as Gaussian blurring and typically used"
" to reduce noise or decrease the detail of an image dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:33
msgid "See also :func:`pyvista.ImageDataFilters.gaussian_smooth`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:58
msgid ""
"Let's apply the Gaussian smoothing with different values of standard "
"deviation."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:128
#: ../../pyvista/doc/source/examples/02-plot/volume.rst:24
msgid "Volume Rendering"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:129
msgid "Now let's see an example on a 3D dataset with volume rendering:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:176
msgid "**Total running time of the script:** (0 minutes 13.411 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:187
msgid ""
":download:`Download Jupyter notebook: gaussian-smoothing.ipynb <gaussian-"
"smoothing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gaussian-smoothing.rst:191
msgid ""
":download:`Download Python source code: gaussian-smoothing.py <gaussian-"
"smoothing.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_geodesic.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:24
msgid "Geodesic Paths"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:26
msgid ""
"Calculates the geodesic path between two vertices using Dijkstra's algorithm"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:48
msgid "Get the geodesic path as a new :class:`pyvista.PolyData` object:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:72
msgid "Render the path along the land surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:127
msgid "How long is that path?"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:151
msgid "**Total running time of the script:** (0 minutes 10.366 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:162
msgid ":download:`Download Jupyter notebook: geodesic.ipynb <geodesic.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/geodesic.rst:166
msgid ":download:`Download Python source code: geodesic.py <geodesic.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_glyphs.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:24
msgid "Plotting Glyphs (Vectors or PolyData)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:26
msgid "Use vectors in a dataset to plot and orient glyphs/geometric objects."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:47
msgid ""
"Glyphying can be done via the :func:`pyvista.DataSetFilters.glyph` filter"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:111
msgid ""
"Another approach is to load the vectors directly to the mesh object and then"
" access the :attr:`pyvista.DataSet.arrows` property."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:173
msgid "Plot the arrows and the sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:223
msgid "Subset of Glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:225
msgid ""
"Sometimes you might not want glyphs for every node in the input dataset. In "
"this case, you can choose to build glyphs for a subset of the input dataset "
"by using a merging tolerance. Here we specify a merging tolerance of five "
"percent which equates to five percent of the bounding box's length."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:282
msgid "**Total running time of the script:** (0 minutes 12.033 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:293
msgid ":download:`Download Jupyter notebook: glyphs.ipynb <glyphs.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs.rst:297
msgid ":download:`Download Python source code: glyphs.py <glyphs.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_glyphs_table.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:24
msgid "Table of Glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:26
msgid ""
"``vtk`` supports tables of glyphs from which glyphs are looked up. This "
"example demonstrates this functionality."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:47
msgid ""
"We can allow tables of glyphs in a backward-compatible way by allowing a "
"sequence of geometries as well as single (scalar) geometries to be passed as"
" the ``geom`` kwarg of :func:`pyvista.DataSetFilters.glyph`. An ``indices`` "
"optional keyword specifies the index of each glyph geometry in the table, "
"and it has to be the same length as ``geom`` if specified. If it is absent a"
" default value of ``range(len(geom))`` is assumed."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:124
msgid "**Total running time of the script:** (0 minutes 4.009 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:135
msgid ""
":download:`Download Jupyter notebook: glyphs_table.ipynb "
"<glyphs_table.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/glyphs_table.rst:139
msgid ""
":download:`Download Python source code: glyphs_table.py <glyphs_table.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_gradients.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:24
msgid "Compute Gradients of a Field"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:26
msgid "Estimate the gradient of a scalar or vector field in a data set."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:28
msgid ""
"The ordering for the output gradient tuple will be {du/dx, du/dy, du/dz, "
"dv/dx, dv/dy, dv/dz, dw/dx, dw/dy, dw/dz} for an input array {u, v, w}."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:32
msgid "Showing the :func:`pyvista.DataSetFilters.compute_derivative` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:52
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>158400</td></tr>\n"
"<tr><td>N Points</td><td>167580</td></tr>\n"
"<tr><td>X Bounds</td><td>1.000e+02, 1.750e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.000e+01, 1.280e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.000e+00, 4.500e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>76, 49, 45</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>5.800e+02</td></tr>\n"
"<tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-2.263e+01</td><td>1.662e+01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:82
msgid ""
"Now compute the gradients of the ``vectors`` vector field in the point data "
"of that mesh. This is as simple as calling "
":func:`pyvista.DataSetFilters.compute_derivative`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:121
msgid ""
"You can also use :func:`pyvista.DataSetFilters.compute_derivative` for "
"computing other derivative based quantities, such as divergence, vorticity, "
"and Q-criterion. See function documentation for options."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:127
msgid ""
"``mesh_g[\"gradient\"]`` is an ``N`` by 9 NumPy array of the gradients, so "
"we could make a dictionary of NumPy arrays of the gradients like:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:174
msgid ""
"And we can add all of those components as individual arrays back to the mesh"
" by:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:189
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>158400</td></tr>\n"
"<tr><td>N Points</td><td>167580</td></tr>\n"
"<tr><td>X Bounds</td><td>1.000e+02, 1.750e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>8.000e+01, 1.280e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.000e+00, 4.500e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>76, 49, 45</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>12</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>5.800e+02</td></tr>\n"
"<tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-2.263e+01</td><td>1.662e+01</td></tr>\n"
"<tr><td>gradient</td><td>Points</td><td>float32</td><td>9</td><td>-1.585e+01</td><td>1.536e+01</td></tr>\n"
"<tr><td>du/dx</td><td>Points</td><td>float32</td><td>1</td><td>-8.293e+00</td><td>8.336e+00</td></tr>\n"
"<tr><td>du/dy</td><td>Points</td><td>float32</td><td>1</td><td>-1.084e+01</td><td>8.334e+00</td></tr>\n"
"<tr><td>du/dz</td><td>Points</td><td>float32</td><td>1</td><td>-8.300e+00</td><td>8.317e+00</td></tr>\n"
"<tr><td>dv/dx</td><td>Points</td><td>float32</td><td>1</td><td>-1.133e+01</td><td>1.536e+01</td></tr>\n"
"<tr><td>dv/dy</td><td>Points</td><td>float32</td><td>1</td><td>-1.585e+01</td><td>1.170e+01</td></tr>\n"
"<tr><td>dv/dz</td><td>Points</td><td>float32</td><td>1</td><td>-1.131e+01</td><td>7.459e+00</td></tr>\n"
"<tr><td>dw/dx</td><td>Points</td><td>float32</td><td>1</td><td>-8.738e+00</td><td>1.212e+01</td></tr>\n"
"<tr><td>dw/dy</td><td>Points</td><td>float32</td><td>1</td><td>-8.734e+00</td><td>8.740e+00</td></tr>\n"
"<tr><td>dw/dz</td><td>Points</td><td>float32</td><td>1</td><td>-1.124e+01</td><td>8.728e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:280
msgid ""
"And there you have it, the gradients for a vector field. We could also do "
"this for a scalar  field like for the ``scalars`` field in the given "
"dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:361
msgid "**Total running time of the script:** (0 minutes 3.547 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:372
msgid ""
":download:`Download Jupyter notebook: gradients.ipynb <gradients.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/gradients.rst:376
msgid ":download:`Download Python source code: gradients.py <gradients.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_image-fft.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:24
msgid "Fast Fourier Transform"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:26
#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:26
msgid ""
"This example shows how to apply a Fast Fourier Transform (FFT) to a "
":class:`pyvista.ImageData` using :func:`pyvista.ImageDataFilters.fft` "
"filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:30
msgid ""
"Here, we demonstrate FFT usage by denoising an image, effectively removing "
"any \"high frequency\" content by performing a `low pass filter "
"<https://en.wikipedia.org/wiki/Low-pass_filter>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:34
msgid ""
"This example was inspired by `Image denoising by FFT <https://scipy-"
"lectures.org/intro/scipy/auto_examples/solutions/plot_fft_image_denoise.html>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:58
msgid "Load the example Moon landing image and plot it."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:107
msgid "Apply FFT to the image"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:108
msgid ""
"FFT will be applied to the active scalars, ``'PNGImage'``, the default "
"scalars name when loading a PNG image."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:111
msgid ""
"The output from the filter is a complex array stored by the same name unless"
" specified using ``output_scalars_name``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:146
msgid "Plot the FFT of the image"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:147
msgid "Plot the absolute value of the FFT of the image."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:149
msgid ""
"Note that we are effectively viewing the \"frequency\" of the data in this "
"image, where the four corners contain the low frequency content of the "
"image, and the middle is the high frequency content of the image."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:186
msgid "Remove the noise from the ``fft_image``"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:187
msgid ""
"Effectively, we want to remove high frequency (noisy) data from our image. "
"First, let's reshape by the size of the image."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:190
msgid ""
"Next, perform a low pass filter by removing the middle 80% of the content of"
" the image. Note that the high frequency content is in the middle of the "
"array."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:194
msgid ""
"It is easier and more efficient to use the existing "
":func:`pyvista.ImageDataFilters.low_pass` filter. This section is here for "
"demonstration purposes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:239
msgid "Convert to the spatial domain using reverse FFT"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:240
msgid ""
"Finally, convert the image data back to the \"spatial\" domain and plot it."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:269
msgid "**Total running time of the script:** (0 minutes 13.641 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:280
msgid ""
":download:`Download Jupyter notebook: image-fft.ipynb <image-fft.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft.rst:284
msgid ":download:`Download Python source code: image-fft.py <image-fft.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_image-fft-perlin-"
"noise.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:24
msgid "Fast Fourier Transform with Perlin Noise"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:30
msgid ""
"Here, we demonstrate FFT usage by first generating Perlin noise using "
":func:`pyvista.sample_function() "
"<pyvista.core.utilities.features.sample_function>` to sample "
":func:`pyvista.perlin_noise <pyvista.core.utilities.features.perlin_noise>`,"
" and then performing FFT of the sampled noise to show the frequency content "
"of that noise."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:55
msgid "Generate Perlin Noise"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:56
msgid ""
"Start by generating some `Perlin Noise "
"<https://en.wikipedia.org/wiki/Perlin_noise>`_ as in "
":ref:`perlin_noise_2d_example` example."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:60
msgid ""
"Note that we are generating it in a flat plane and using a frequency of 10 "
"in the x direction and 5 in the y direction. The unit of frequency is "
"``1/pixel``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:64
msgid ""
"Also note that the dimensions of the image are powers of 2. This is because "
"the FFT is much more efficient for arrays sized as a power of 2."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:119
msgid "Perform FFT of Perlin Noise"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:120
msgid ""
"Next, perform an FFT of the noise and plot the frequency content. For the "
"sake of simplicity, we will only plot the content in the first quadrant."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:124
msgid "Note the usage of :func:`numpy.fft.fftfreq` to get the frequencies."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:149
msgid "Plot the Frequency Domain"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:150
msgid ""
"Now, plot the noise in the frequency domain. Note how there is more high "
"frequency content in the x direction and this matches the frequencies given "
"to :func:`pyvista.perlin_noise "
"<pyvista.core.utilities.features.perlin_noise>`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:215
msgid "Low Pass Filter"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:216
msgid ""
"Let's perform a low pass filter on the frequency content and then convert it"
" back into the space (pixel) domain by immediately applying a reverse FFT."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:219
msgid ""
"When converting back, keep only the real content. The imaginary content has "
"no physical meaning in the physical domain. PyVista will drop the imaginary "
"content, but will warn you of it."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:223
msgid "As expected, we only see low frequency noise."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:273
msgid "High Pass Filter"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:274
msgid ""
"This time, let's perform a high pass filter on the frequency content and "
"then convert it back into the space (pixel) domain by immediately applying a"
" reverse FFT."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:278
msgid ""
"When converting back, keep only the real content. The imaginary content has "
"no physical meaning in the pixel domain."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:281
msgid ""
"As expected, we only see the high frequency noise content as the low "
"frequency noise has been attenuated."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:332
msgid "Sum Low and High Pass"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:333
msgid ""
"Show that the sum of the low and high passes equals the original noise."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:400
msgid "Animate"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:401
msgid "Animate the variation of the cutoff frequency."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:468
msgid ""
"The left mesh in the above animation warps based on the raw values of the "
"FFT amplitude. This emphasizes how taking into account more and more "
"frequencies as the animation progresses, we recover a gradually larger "
"proportion of the full noise sample. This is why the mesh starts \"flat\" "
"and grows larger as the frequency cutoff is increased."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:474
msgid ""
"In contrast, the right mesh is always warped to the same visible height, "
"irrespective of the cutoff frequency. This highlights how the typical "
"wavelength (size of the features) of the Perlin noise decreases as the "
"frequency cutoff is increased since wavelength and frequency are inversely "
"proportional."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:483
msgid "**Total running time of the script:** (0 minutes 54.702 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:494
msgid ""
":download:`Download Jupyter notebook: image-fft-perlin-noise.ipynb <image-"
"fft-perlin-noise.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/image-fft-perlin-noise.rst:498
msgid ""
":download:`Download Python source code: image-fft-perlin-noise.py <image-"
"fft-perlin-noise.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:6
#: ../../pyvista/doc/source/examples/index.rst:527
msgid "Filtering"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:529
msgid ""
"These examples show case various mesh analysis and filtering routines "
"present in the :ref:`filters` module. Explore these demos to perform tasks "
"such as:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:11
#: ../../pyvista/doc/source/examples/index.rst:532
msgid "Slicing and cutting meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:12
#: ../../pyvista/doc/source/examples/index.rst:533
msgid "Computing mesh properties like volume, area, and surface normals"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:13
#: ../../pyvista/doc/source/examples/index.rst:534
msgid "Mesh decimation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:14
#: ../../pyvista/doc/source/examples/index.rst:535
msgid "Extract regions of one mesh using another mesh's surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:15
#: ../../pyvista/doc/source/examples/index.rst:536
msgid "Ray tracing through surface meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:16
#: ../../pyvista/doc/source/examples/index.rst:537
msgid "Resampling and interpolating scalar/vector values across meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:17
#: ../../pyvista/doc/source/examples/index.rst:538
msgid "Integrating a vector field to generate streamlines"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:18
#: ../../pyvista/doc/source/examples/index.rst:539
msgid "Smoothing surfaces"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:27
#: ../../pyvista/doc/source/examples/index.rst:548
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perform boolean operations "
"with closed (manifold) surfaces.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:36
#: ../../pyvista/doc/source/examples/index.rst:557
msgid ":ref:`sphx_glr_examples_01-filter_boolean-operations.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:38
#: ../../pyvista/doc/source/examples/index.rst:559
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Boolean Operations</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:44
#: ../../pyvista/doc/source/examples/index.rst:565
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract the coordinates of "
"the centers of all cells or faces in a mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:53
#: ../../pyvista/doc/source/examples/index.rst:574
msgid ":ref:`sphx_glr_examples_01-filter_cell-centers.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:55
#: ../../pyvista/doc/source/examples/index.rst:576
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extract Cell Centers</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:61
#: ../../pyvista/doc/source/examples/index.rst:582
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip any PyVista dataset by"
" a pyvista.PolyData surface mesh using the pyvista.DataSetFilters.cl...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:70
#: ../../pyvista/doc/source/examples/index.rst:591
msgid ":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:72
#: ../../pyvista/doc/source/examples/index.rst:593
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Clipping with a Surface</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:78
#: ../../pyvista/doc/source/examples/index.rst:599
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip/cut any dataset using "
"planes or boxes.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:87
#: ../../pyvista/doc/source/examples/index.rst:608
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:89
#: ../../pyvista/doc/source/examples/index.rst:610
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Clipping with Planes & Boxes</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:95
#: ../../pyvista/doc/source/examples/index.rst:616
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example use the "
"pyvista.PolyDataFilters.collision filter to detect the faces from one "
"sphe...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:104
#: ../../pyvista/doc/source/examples/index.rst:625
msgid ":ref:`sphx_glr_examples_01-filter_collisions.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:106
#: ../../pyvista/doc/source/examples/index.rst:627
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Collision</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:112
#: ../../pyvista/doc/source/examples/index.rst:633
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Computing Surface Normals\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:121
#: ../../pyvista/doc/source/examples/index.rst:642
msgid ":ref:`sphx_glr_examples_01-filter_compute-normals.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:123
#: ../../pyvista/doc/source/examples/index.rst:644
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Computing Surface Normals</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:129
#: ../../pyvista/doc/source/examples/index.rst:650
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Calculate mass properties "
"such as the volume or area of datasets\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:138
#: ../../pyvista/doc/source/examples/index.rst:659
msgid ":ref:`sphx_glr_examples_01-filter_compute-volume.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:140
#: ../../pyvista/doc/source/examples/index.rst:661
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Volumetric Analysis</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:146
#: ../../pyvista/doc/source/examples/index.rst:667
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example highlights "
"some applications of the connectivity filter.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:155
#: ../../pyvista/doc/source/examples/index.rst:676
msgid ":ref:`sphx_glr_examples_01-filter_connectivity.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:157
#: ../../pyvista/doc/source/examples/index.rst:678
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Connectivity</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:163
#: ../../pyvista/doc/source/examples/index.rst:684
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate iso-lines or "
"-surfaces for the scalars of a surface or volume.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:172
#: ../../pyvista/doc/source/examples/index.rst:693
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:174
#: ../../pyvista/doc/source/examples/index.rst:695
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Contouring</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:180
#: ../../pyvista/doc/source/examples/index.rst:701
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Decimate a mesh\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:189
#: ../../pyvista/doc/source/examples/index.rst:710
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:191
#: ../../pyvista/doc/source/examples/index.rst:712
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Decimation</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:197
#: ../../pyvista/doc/source/examples/index.rst:718
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Compute the average "
"thickness between two surfaces.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:206
#: ../../pyvista/doc/source/examples/index.rst:727
msgid ":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:208
#: ../../pyvista/doc/source/examples/index.rst:729
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Distance Between Two Surfaces</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:214
#: ../../pyvista/doc/source/examples/index.rst:735
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract the cells in a mesh"
" that exist inside or outside a closed surface of another mesh\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:223
#: ../../pyvista/doc/source/examples/index.rst:744
msgid ":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:225
#: ../../pyvista/doc/source/examples/index.rst:746
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extract Cells Inside Surface</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:231
#: ../../pyvista/doc/source/examples/index.rst:752
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract edges from a "
"surface.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:240
#: ../../pyvista/doc/source/examples/index.rst:761
msgid ":ref:`sphx_glr_examples_01-filter_extract-edges.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:242
#: ../../pyvista/doc/source/examples/index.rst:763
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extract Edges</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:248
#: ../../pyvista/doc/source/examples/index.rst:769
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"You can extract the surface"
" of nearly any object within pyvista using the extract_surface filte...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:257
#: ../../pyvista/doc/source/examples/index.rst:778
msgid ":ref:`sphx_glr_examples_01-filter_extract-surface.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:259
#: ../../pyvista/doc/source/examples/index.rst:780
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extract Surface</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:265
#: ../../pyvista/doc/source/examples/index.rst:786
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This takes polygonal data "
"as input and generates polygonal data on output. The input dataset is...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:274
#: ../../pyvista/doc/source/examples/index.rst:795
msgid ":ref:`sphx_glr_examples_01-filter_extrude-rotate.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:276
#: ../../pyvista/doc/source/examples/index.rst:797
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extrude Rotation</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:282
#: ../../pyvista/doc/source/examples/index.rst:803
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extrude Trim\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:291
#: ../../pyvista/doc/source/examples/index.rst:812
msgid ":ref:`sphx_glr_examples_01-filter_extrude-trim.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:293
#: ../../pyvista/doc/source/examples/index.rst:814
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extrude Trim</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:299
#: ../../pyvista/doc/source/examples/index.rst:820
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate a surface from a "
"scalar field using the flying edges and marching cubes filters as pro...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:308
#: ../../pyvista/doc/source/examples/index.rst:829
msgid ":ref:`sphx_glr_examples_01-filter_flying_edges.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:310
#: ../../pyvista/doc/source/examples/index.rst:831
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Marching Cubes</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:316
#: ../../pyvista/doc/source/examples/index.rst:837
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perform a Gaussian "
"convolution on a uniformly gridded data set.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:325
#: ../../pyvista/doc/source/examples/index.rst:846
msgid ":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:327
#: ../../pyvista/doc/source/examples/index.rst:848
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Gaussian Smoothing</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:333
#: ../../pyvista/doc/source/examples/index.rst:854
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Calculates the geodesic "
"path between two vertices using Dijkstra&#x27;s algorithm\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:342
#: ../../pyvista/doc/source/examples/index.rst:863
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:344
#: ../../pyvista/doc/source/examples/index.rst:865
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Geodesic Paths</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:350
#: ../../pyvista/doc/source/examples/index.rst:871
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use vectors in a dataset to"
" plot and orient glyphs/geometric objects.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:359
#: ../../pyvista/doc/source/examples/index.rst:880
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:361
#: ../../pyvista/doc/source/examples/index.rst:882
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plotting Glyphs (Vectors or PolyData)</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:367
#: ../../pyvista/doc/source/examples/index.rst:888
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"vtk supports tables of "
"glyphs from which glyphs are looked up. This example demonstrates this "
"f...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:376
#: ../../pyvista/doc/source/examples/index.rst:897
msgid ":ref:`sphx_glr_examples_01-filter_glyphs_table.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:378
#: ../../pyvista/doc/source/examples/index.rst:899
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Table of Glyphs</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:384
#: ../../pyvista/doc/source/examples/index.rst:905
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Estimate the gradient of a "
"scalar or vector field in a data set.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:393
#: ../../pyvista/doc/source/examples/index.rst:914
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:395
#: ../../pyvista/doc/source/examples/index.rst:916
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Compute Gradients of a Field</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:401
#: ../../pyvista/doc/source/examples/01-filter/index.rst:418
#: ../../pyvista/doc/source/examples/index.rst:922
#: ../../pyvista/doc/source/examples/index.rst:939
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how to "
"apply a Fast Fourier Transform (FFT) to a pyvista.ImageData using pyv...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:410
#: ../../pyvista/doc/source/examples/index.rst:931
msgid ":ref:`sphx_glr_examples_01-filter_image-fft-perlin-noise.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:412
#: ../../pyvista/doc/source/examples/index.rst:933
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Fast Fourier Transform with Perlin Noise</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:427
#: ../../pyvista/doc/source/examples/index.rst:948
msgid ":ref:`sphx_glr_examples_01-filter_image-fft.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:429
#: ../../pyvista/doc/source/examples/index.rst:950
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Fast Fourier Transform</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:435
#: ../../pyvista/doc/source/examples/index.rst:956
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Integrate data over a "
"surface using the pyvista.DataSetFilters.integrate_data filter.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:444
#: ../../pyvista/doc/source/examples/index.rst:965
msgid ":ref:`sphx_glr_examples_01-filter_integrate-data.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:446
#: ../../pyvista/doc/source/examples/index.rst:967
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Integrate Data</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:452
#: ../../pyvista/doc/source/examples/01-filter/index.rst:537
#: ../../pyvista/doc/source/examples/index.rst:973
#: ../../pyvista/doc/source/examples/index.rst:1058
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"There are two main methods "
"of interpolating or sampling data from a target mesh in PyVista. pyv...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:461
#: ../../pyvista/doc/source/examples/index.rst:982
msgid ":ref:`sphx_glr_examples_01-filter_interpolate.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:463
#: ../../pyvista/doc/source/examples/index.rst:984
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Interpolating</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:469
#: ../../pyvista/doc/source/examples/index.rst:990
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Leverage powerful VTK "
"algorithms for computing mesh quality.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:478
#: ../../pyvista/doc/source/examples/index.rst:999
msgid ":ref:`sphx_glr_examples_01-filter_mesh-quality.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:480
#: ../../pyvista/doc/source/examples/index.rst:1001
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Computing Mesh Quality</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:486
#: ../../pyvista/doc/source/examples/99-advanced/index.rst:273
#: ../../pyvista/doc/source/examples/index.rst:1007
#: ../../pyvista/doc/source/examples/index.rst:2928
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Single line segment ray "
"tracing for PolyData objects.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:495
#: ../../pyvista/doc/source/examples/index.rst:1016
msgid ":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:497
#: ../../pyvista/doc/source/examples/99-advanced/index.rst:284
#: ../../pyvista/doc/source/examples/index.rst:1018
#: ../../pyvista/doc/source/examples/index.rst:2939
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Ray Tracing</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:503
#: ../../pyvista/doc/source/examples/index.rst:1024
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"pyvista.PolyData surfaces "
"and pointsets can easily be projected to a plane defined by a normal ...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:512
#: ../../pyvista/doc/source/examples/index.rst:1033
msgid ":ref:`sphx_glr_examples_01-filter_project-plane.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:514
#: ../../pyvista/doc/source/examples/index.rst:1035
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Project to a Plane</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:520
#: ../../pyvista/doc/source/examples/index.rst:1041
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example reflects a "
"mesh across a plane.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:529
#: ../../pyvista/doc/source/examples/index.rst:1050
msgid ":ref:`sphx_glr_examples_01-filter_reflect.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:531
#: ../../pyvista/doc/source/examples/index.rst:1052
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Reflect Meshes</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:546
#: ../../pyvista/doc/source/examples/index.rst:1067
msgid ":ref:`sphx_glr_examples_01-filter_resample.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:548
#: ../../pyvista/doc/source/examples/index.rst:1069
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Resampling</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:554
#: ../../pyvista/doc/source/examples/index.rst:1075
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Rotations of a mesh about "
"its axes. In this model, the x axis is from the left to right; the y ...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:563
#: ../../pyvista/doc/source/examples/index.rst:1084
msgid ":ref:`sphx_glr_examples_01-filter_rotate.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:565
#: ../../pyvista/doc/source/examples/index.rst:1086
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Rotations</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:571
#: ../../pyvista/doc/source/examples/index.rst:1092
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Perlin noise is atype of "
"gradient noise often used by visual effects artists to increase the ap...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:580
#: ../../pyvista/doc/source/examples/index.rst:1101
msgid ":ref:`sphx_glr_examples_01-filter_sampling_functions_2d.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:582
#: ../../pyvista/doc/source/examples/index.rst:1103
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Sample Function: Perlin Noise in 2D</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:588
#: ../../pyvista/doc/source/examples/index.rst:1109
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Video games like Minecraft "
"use Perlin noise to create terrain.  Here, we create a voxelized mes...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:597
#: ../../pyvista/doc/source/examples/index.rst:1118
msgid ":ref:`sphx_glr_examples_01-filter_sampling_functions_3d.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:599
#: ../../pyvista/doc/source/examples/index.rst:1120
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Sample Function: Perlin Noise in 3D</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:605
#: ../../pyvista/doc/source/examples/index.rst:1126
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract thin planar slices "
"from a volume.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:614
#: ../../pyvista/doc/source/examples/index.rst:1135
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:616
#: ../../pyvista/doc/source/examples/index.rst:1137
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Slicing</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:622
#: ../../pyvista/doc/source/examples/index.rst:1143
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Integrate a vector field to"
" generate streamlines.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:631
#: ../../pyvista/doc/source/examples/index.rst:1152
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:633
#: ../../pyvista/doc/source/examples/index.rst:1154
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Streamlines</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:639
#: ../../pyvista/doc/source/examples/index.rst:1160
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Integrate a vector field to"
" generate streamlines on a 2D surface.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:648
#: ../../pyvista/doc/source/examples/index.rst:1169
msgid ":ref:`sphx_glr_examples_01-filter_streamlines_2D.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:650
#: ../../pyvista/doc/source/examples/index.rst:1171
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">2D Streamlines</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:656
#: ../../pyvista/doc/source/examples/index.rst:1177
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Increase the number of "
"triangles in a single, connected triangular mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:665
#: ../../pyvista/doc/source/examples/index.rst:1186
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:667
#: ../../pyvista/doc/source/examples/index.rst:1188
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Subdivide Cells</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:673
#: ../../pyvista/doc/source/examples/index.rst:1194
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Smoothing rough edges of a "
"surface mesh\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:682
#: ../../pyvista/doc/source/examples/index.rst:1203
msgid ":ref:`sphx_glr_examples_01-filter_surface-smoothing.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:684
#: ../../pyvista/doc/source/examples/index.rst:1205
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Surface Smoothing</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:690
#: ../../pyvista/doc/source/examples/index.rst:1211
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Surface reconstruction has "
"a dedicated filter in PyVista and is handled by pyvista.PolyDataFilt...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:699
#: ../../pyvista/doc/source/examples/index.rst:1220
msgid ":ref:`sphx_glr_examples_01-filter_surface_reconstruction.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:701
#: ../../pyvista/doc/source/examples/index.rst:1222
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Surface Reconstruction</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:707
#: ../../pyvista/doc/source/examples/index.rst:1228
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Using common filters like "
"thresholding and clipping.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:716
#: ../../pyvista/doc/source/examples/index.rst:1237
msgid ":ref:`sphx_glr_examples_01-filter_using-filters.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:718
#: ../../pyvista/doc/source/examples/index.rst:1239
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Using Common Filters</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:724
#: ../../pyvista/doc/source/examples/index.rst:1245
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a voxel model (like "
"legos) of a closed surface or volumetric mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:733
#: ../../pyvista/doc/source/examples/index.rst:1254
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:735
#: ../../pyvista/doc/source/examples/index.rst:1256
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Voxelize a Surface Mesh</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:741
#: ../../pyvista/doc/source/examples/index.rst:1262
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example applies the "
"warp_by_vector filter to a sphere mesh that has 3D displacement vector...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:750
#: ../../pyvista/doc/source/examples/index.rst:1271
msgid ":ref:`sphx_glr_examples_01-filter_warp-by-vector.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/index.rst:752
#: ../../pyvista/doc/source/examples/index.rst:1273
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Warping by Vectors</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_integrate-"
"data.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:24
msgid "Integrate Data"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:26
msgid ""
"Integrate data over a surface using the "
":func:`pyvista.DataSetFilters.integrate_data` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:46
msgid ""
"This example calculates the total flow rate and average velocity inside a "
"blood vessel.  The boundary object is only used for plotting the shape of "
"the dataset geometry.  The inlet surface is generated by slicing the domain."
" Fluid flowing into the domain is in the negative z-direction, so a new "
"array, ``normal_velocity``, is created."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:71
msgid "The velocity in the inlet is shown."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:127
msgid ""
"The total flow rate is calculated using the "
":func:`pyvista.DataSetFilters.integrate_data` filter.  Note that the data is"
" a :class:`pyvista.UnstructuredGrid` object with only 1 point and 1 cell."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:143
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>1</td></tr>\n"
"<tr><td>X Bounds</td><td>8.095e+01, 8.095e+01</td></tr>\n"
"<tr><td>Y Bounds</td><td>6.007e+01, 6.007e+01</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.820e+02, 1.820e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>7</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>node_value</td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>0.000e+00</td></tr>\n"
"<tr><td>simerr_type</td><td>Points</td><td>float64</td><td>1</td><td>1.672e+02</td><td>1.672e+02</td></tr>\n"
"<tr><td>density</td><td>Cells</td><td>float64</td><td>1</td><td>1.369e+02</td><td>1.369e+02</td></tr>\n"
"<tr><td>normal_velocity</td><td>Cells</td><td>float64</td><td>1</td><td>2.580e+01</td><td>2.580e+01</td></tr>\n"
"<tr><td>shearstress</td><td>Cells</td><td>float64</td><td>1</td><td>9.470e-01</td><td>9.470e-01</td></tr>\n"
"<tr><td>velocity</td><td>Cells</td><td>float64</td><td>3</td><td>-2.580e+01</td><td>1.285e+00</td></tr>\n"
"<tr><td>Area</td><td>Cells</td><td>float64</td><td>1</td><td>2.650e+02</td><td>2.650e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:176
msgid "Each array in ``integrated_data`` stores the integrated data."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:199
msgid "An additional ``Area`` or ``Volume`` array is added."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:225
msgid ""
"Display the total flow rate, area of inlet surface, and average velocity."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:257
msgid "Volume Integration"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:258
msgid ""
"You can also integrate over a volume. Here, we effectively sum the cell and "
"point data across the entire volume. You can use this to compute mean values"
" by dividing by the volume of the dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:262
msgid ""
"Note that the calculated volume is the same as "
":attr:`pyvista.DataSet.volume`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:264
msgid ""
"Also note that the center of the dataset is the \"point\" of the integrated "
"volume."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:301
msgid "**Total running time of the script:** (0 minutes 0.640 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:312
msgid ""
":download:`Download Jupyter notebook: integrate-data.ipynb <integrate-"
"data.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/integrate-data.rst:316
msgid ""
":download:`Download Python source code: integrate-data.py <integrate-"
"data.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_interpolate.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:24
msgid "Interpolating"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:26
#: ../../pyvista/doc/source/examples/01-filter/resample.rst:26
msgid ""
"There are two main methods of interpolating or sampling data from a target "
"mesh in PyVista. :func:`pyvista.DataSetFilters.interpolate` uses a distance "
"weighting kernel to interpolate point data from nearby points of the target "
"mesh onto the desired points. :func:`pyvista.DataSetFilters.sample` "
"interpolates data using the interpolation scheme of the enclosing cell from "
"the target mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:33
#: ../../pyvista/doc/source/examples/01-filter/resample.rst:33
msgid ""
"If the target mesh is a point cloud, i.e. there is no connectivity in the "
"cell structure, then :func:`pyvista.DataSetFilters.interpolate` is typically"
" preferred.  If interpolation is desired within the cells of the target "
"mesh, then :func:`pyvista.DataSetFilters.sample` is typically desired."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:39
msgid ""
"This example uses :func:`pyvista.DataSetFilters.interpolate`. For "
":func:`pyvista.DataSetFilters.sample`, see :ref:`resampling_example`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:42
msgid ""
"Interpolate one mesh's point/cell arrays onto another mesh's nodes using a "
"Gaussian Kernel."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:63
msgid "Simple Surface Interpolation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:64
msgid "Resample the points' arrays onto a surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:116
msgid "Run the interpolation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:169
msgid "Complex Interpolation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:170
msgid ""
"In this example, we will in interpolate sparse points in 3D space into a "
"volume. These data are from temperature probes in the subsurface and the "
"goal is to create an approximate 3D model of the temperature field in the "
"subsurface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:175
msgid ""
"This approach is a great for back-of-the-hand estimations but pales in "
"comparison to kriging"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:195
msgid "Create the interpolation grid around the sparse data"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:266
msgid "Run an interpolation"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:283
msgid "Visualize the results"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:319
msgid "**Total running time of the script:** (0 minutes 6.120 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:330
msgid ""
":download:`Download Jupyter notebook: interpolate.ipynb <interpolate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/interpolate.rst:334
msgid ""
":download:`Download Python source code: interpolate.py <interpolate.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_mesh-quality.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:24
msgid "Computing Mesh Quality"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:26
msgid "Leverage powerful VTK algorithms for computing mesh quality."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:28
msgid ""
"Here we will use the :func:`pyvista.DataSetFilters.compute_cell_quality` "
"filter to compute the cell qualities. For a full list of the various quality"
" metrics available, please refer to the documentation for that filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:56
msgid ""
"Compute the cell quality. Note that there are many different quality "
"measures"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:70
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1740</td></tr>\n"
"<tr><td>N Points</td><td>871</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.389e+00, 6.005e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.648e+00, 2.761e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-1.701e+00, 1.701e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>CellQuality</b></td><td>Cells</td><td>float64</td><td>1</td><td>6.197e-02</td><td>9.911e-01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:138
msgid "**Total running time of the script:** (0 minutes 0.301 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:149
msgid ""
":download:`Download Jupyter notebook: mesh-quality.ipynb <mesh-"
"quality.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/mesh-quality.rst:153
msgid ""
":download:`Download Python source code: mesh-quality.py <mesh-quality.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_poly-ray-"
"trace.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:24
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:22
msgid "Ray Tracing"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:26
#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:24
msgid "Single line segment ray tracing for PolyData objects."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:93
msgid "**Total running time of the script:** (0 minutes 0.327 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:104
msgid ""
":download:`Download Jupyter notebook: poly-ray-trace.ipynb <poly-ray-"
"trace.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/poly-ray-trace.rst:108
msgid ""
":download:`Download Python source code: poly-ray-trace.py <poly-ray-"
"trace.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_project-plane.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:22
msgid "Project to a Plane"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:24
msgid ""
":class:`pyvista.PolyData` surfaces and pointsets can easily be projected to "
"a plane defined by a normal and origin"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:74
msgid "Project that surface to a plane underneath the surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:126
msgid "**Total running time of the script:** (0 minutes 1.076 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:137
msgid ""
":download:`Download Jupyter notebook: project-plane.ipynb <project-"
"plane.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/project-plane.rst:141
msgid ""
":download:`Download Python source code: project-plane.py <project-plane.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_reflect.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:24
msgid "Reflect Meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:26
msgid "This example reflects a mesh across a plane."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:45
msgid "This example demonstrates how to reflect a mesh across a plane."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:47
msgid "Load an example mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:64
msgid ""
"Reflect the mesh across a plane parallel to Z plane and coincident with (0, "
"0, -100)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:82
msgid "Plot the reflected mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:129
msgid "**Total running time of the script:** (0 minutes 0.242 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:140
msgid ":download:`Download Jupyter notebook: reflect.ipynb <reflect.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/reflect.rst:144
msgid ":download:`Download Python source code: reflect.py <reflect.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_resample.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:24
msgid "Resampling"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:39
msgid ""
"This example uses :func:`pyvista.DataSetFilters.sample`. For "
":func:`pyvista.DataSetFilters.interpolate`, see :ref:`interpolate_example`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:43
msgid "Resample one mesh's point/cell arrays onto another mesh's nodes."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:47
msgid ""
"This example will resample a volumetric mesh's scalar data onto the surface "
"of a sphere contained in that volume."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:68
msgid "Simple Resample"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:69
msgid "Query a grid's points onto a sphere"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:87
msgid "Plot the two datasets"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:134
msgid "Run the algorithm and plot the result"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:183
msgid "Complex Resample"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:184
msgid ""
"Take a volume of data and create a grid of lower resolution to resample on"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:258
msgid "**Total running time of the script:** (0 minutes 6.748 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:269
msgid ":download:`Download Jupyter notebook: resample.ipynb <resample.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/resample.rst:273
msgid ":download:`Download Python source code: resample.py <resample.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_rotate.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:24
msgid "Rotations"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:26
msgid ""
"Rotations of a mesh about its axes. In this model, the x axis is from the "
"left to right; the y axis is from bottom to top; and the z axis emerges from"
" the image. The camera location is the same in all four images."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:48
msgid "Define camera and axes"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:50
msgid "Define camera and axes. Setting axes origin to ``(3.0, 3.0, 3.0)``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:77
msgid "Original Mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:79
msgid "Plot original mesh. Add axes actor to Plotter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:132
msgid "Rotation about the x axis"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:134
msgid ""
"Plot the mesh rotated about the x axis every 60 degrees. Add the axes actor "
"to the Plotter and set the axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:191
msgid "Rotation about the y axis"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:193
msgid ""
"Plot the mesh rotated about the y axis every 60 degrees. Add the axes actor "
"to the Plotter and set the axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:250
msgid "Rotation about the z axis"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:252
msgid ""
"Plot the mesh rotated about the z axis every 60 degrees. Add axes actor to "
"the Plotter and set the axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:309
msgid "Rotation about a custom vector"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:311
msgid ""
"Plot the mesh rotated about a custom vector every 60 degrees. Add the axes "
"actor to the Plotter and set axes origin to the point of rotation."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:367
msgid "**Total running time of the script:** (0 minutes 2.063 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:378
msgid ":download:`Download Jupyter notebook: rotate.ipynb <rotate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/rotate.rst:382
msgid ":download:`Download Python source code: rotate.py <rotate.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_01-filter_sampling_functions_2d.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:24
msgid "Sample Function: Perlin Noise in 2D"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:25
#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:23
msgid ""
"Here we use :func:`pyvista.core.utilities.features.sample_function` to "
"sample Perlin noise over a region to generate random terrain."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:28
msgid ""
"Perlin noise is atype of gradient noise often used by visual effects artists"
" to increase the appearance of realism in computer graphics. Source: `Perlin"
" Noise Wikipedia <https://en.wikipedia.org/wiki/Perlin_noise>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:32
msgid ""
"The development of Perlin Noise has allowed computer graphics artists to "
"better represent the complexity of natural phenomena in visual effects for "
"the motion picture industry."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:53
msgid "Generate Perlin Noise over a StructuredGrid"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:54
msgid ""
"Feel free to change the values of ``freq`` to change the shape of the "
"\"mountains\".  For example, lowering the frequency will make the terrain "
"seem more like hills rather than mountains."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:77
msgid "Warp by scalar"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:78
msgid ""
"Here we warp by scalar to give the terrain some height based on the value of"
" the Perlin noise.  This is necessary to the terrain its shape."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:111
msgid "Show the terrain as a contour plot"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:171
msgid "Show the terrain with custom lighting and shadows"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:220
msgid "**Total running time of the script:** (0 minutes 6.148 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:231
msgid ""
":download:`Download Jupyter notebook: sampling_functions_2d.ipynb "
"<sampling_functions_2d.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_2d.rst:235
msgid ""
":download:`Download Python source code: sampling_functions_2d.py "
"<sampling_functions_2d.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_01-filter_sampling_functions_3d.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:22
msgid "Sample Function: Perlin Noise in 3D"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:26
msgid ""
"Video games like Minecraft use Perlin noise to create terrain.  Here, we "
"create a voxelized mesh similar to a Minecraft \"cave\"."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:46
msgid "Generate Perlin Noise over a 3D StructuredGrid"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:47
msgid ""
"Feel free to change the values of ``freq`` to change the shape of the "
"\"caves\".  For example, lowering the frequency will make the caves larger "
"and more expansive, while a higher frequency in any direction will make the "
"caves appear more \"vein-like\" and less open."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:52
msgid ""
"Change the threshold to reduce or increase the percent of the terrain that "
"is open or closed"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:71
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>109863</td></tr>\n"
"<tr><td>N Points</td><td>121638</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 3.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float64</td><td>1</td><td>-6.143e-02</td><td>9.082e-01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:98
msgid "color limits without blue"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:152
msgid "**Total running time of the script:** (0 minutes 0.650 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:163
msgid ""
":download:`Download Jupyter notebook: sampling_functions_3d.ipynb "
"<sampling_functions_3d.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sampling_functions_3d.rst:167
msgid ""
":download:`Download Python source code: sampling_functions_3d.py "
"<sampling_functions_3d.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:9
msgid ""
"**05:41.226** total execution time for 43 files **from examples/01-filter**:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_01-filter_image-fft-perlin-noise.py` (``image-fft-"
"perlin-noise.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:36
msgid "00:54.702"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_01-filter_compute-normals.py` (``compute-"
"normals.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:39
msgid "00:50.106"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_01-filter_clipping-with-surface.py` (``clipping-"
"with-surface.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:42
msgid "00:24.160"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:44
msgid ":ref:`sphx_glr_examples_01-filter_contouring.py` (``contouring.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:45
msgid "00:23.397"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_01-filter_streamlines.py` (``streamlines.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:48
msgid "00:21.460"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:50
msgid ":ref:`sphx_glr_examples_01-filter_slicing.py` (``slicing.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:51
msgid "00:15.822"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_01-filter_image-fft.py` (``image-fft.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:54
msgid "00:13.641"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_examples_01-filter_gaussian-smoothing.py` (``gaussian-"
"smoothing.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:57
msgid "00:13.411"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_01-filter_glyphs.py` (``glyphs.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:60
msgid "00:12.033"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:62
msgid ":ref:`sphx_glr_examples_01-filter_geodesic.py` (``geodesic.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:63
msgid "00:10.366"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:65
msgid ":ref:`sphx_glr_examples_01-filter_voxelize.py` (``voxelize.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:66
msgid "00:10.098"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:68
msgid ""
":ref:`sphx_glr_examples_01-filter_using-filters.py` (``using-filters.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:69
msgid "00:09.603"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:71
msgid ""
":ref:`sphx_glr_examples_01-filter_connectivity.py` (``connectivity.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:72
msgid "00:09.515"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:74
msgid ""
":ref:`sphx_glr_examples_01-filter_flying_edges.py` (``flying_edges.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:75
msgid "00:07.120"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:77
msgid ":ref:`sphx_glr_examples_01-filter_resample.py` (``resample.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:78
msgid "00:06.748"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:80
msgid ""
":ref:`sphx_glr_examples_01-filter_sampling_functions_2d.py` "
"(``sampling_functions_2d.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:81
msgid "00:06.148"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:83
msgid ":ref:`sphx_glr_examples_01-filter_interpolate.py` (``interpolate.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:84
msgid "00:06.120"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:86
msgid ""
":ref:`sphx_glr_examples_01-filter_boolean-operations.py` (``boolean-"
"operations.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:87
msgid "00:05.828"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:89
msgid ":ref:`sphx_glr_examples_01-filter_collisions.py` (``collisions.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:90
msgid "00:05.542"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:92
msgid ""
":ref:`sphx_glr_examples_01-filter_compute-volume.py` (``compute-volume.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:93
msgid "00:04.355"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:95
msgid ""
":ref:`sphx_glr_examples_01-filter_glyphs_table.py` (``glyphs_table.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:96
msgid "00:04.009"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:98
msgid ":ref:`sphx_glr_examples_01-filter_gradients.py` (``gradients.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:99
msgid "00:03.547"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:101
msgid ""
":ref:`sphx_glr_examples_01-filter_distance-between-surfaces.py` (``distance-"
"between-surfaces.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:102
msgid "00:02.425"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:104
msgid ""
":ref:`sphx_glr_examples_01-filter_streamlines_2D.py` (``streamlines_2D.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:105
msgid "00:02.306"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:107
msgid ":ref:`sphx_glr_examples_01-filter_rotate.py` (``rotate.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:108
msgid "00:02.063"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:110
msgid ":ref:`sphx_glr_examples_01-filter_subdivide.py` (``subdivide.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:111
msgid "00:01.814"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:113
msgid ":ref:`sphx_glr_examples_01-filter_clipping.py` (``clipping.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:114
msgid "00:01.677"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:116
msgid ""
":ref:`sphx_glr_examples_01-filter_cell-centers.py` (``cell-centers.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:117
msgid "00:01.664"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:119
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-edges.py` (``extract-edges.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:120
msgid "00:01.530"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:122
msgid ""
":ref:`sphx_glr_examples_01-filter_surface-smoothing.py` (``surface-"
"smoothing.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:123
msgid "00:01.370"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:125
msgid ""
":ref:`sphx_glr_examples_01-filter_extrude-trim.py` (``extrude-trim.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:126
msgid "00:01.235"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:128
msgid ":ref:`sphx_glr_examples_01-filter_decimate.py` (``decimate.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:129
msgid "00:01.143"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:131
msgid ""
":ref:`sphx_glr_examples_01-filter_project-plane.py` (``project-plane.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:132
msgid "00:01.076"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:134
msgid ""
":ref:`sphx_glr_examples_01-filter_warp-by-vector.py` (``warp-by-vector.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:135
msgid "00:00.842"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:137
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-cells-inside-surface.py` "
"(``extract-cells-inside-surface.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:138
msgid "00:00.709"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:140
msgid ""
":ref:`sphx_glr_examples_01-filter_sampling_functions_3d.py` "
"(``sampling_functions_3d.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:141
msgid "00:00.650"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:143
msgid ""
":ref:`sphx_glr_examples_01-filter_integrate-data.py` (``integrate-data.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:144
msgid "00:00.640"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:146
msgid ""
":ref:`sphx_glr_examples_01-filter_extrude-rotate.py` (``extrude-rotate.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:147
msgid "00:00.591"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:149
msgid ""
":ref:`sphx_glr_examples_01-filter_extract-surface.py` (``extract-"
"surface.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:150
msgid "00:00.537"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:152
msgid ""
":ref:`sphx_glr_examples_01-filter_surface_reconstruction.py` "
"(``surface_reconstruction.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:153
msgid "00:00.355"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:155
msgid ""
":ref:`sphx_glr_examples_01-filter_poly-ray-trace.py` (``poly-ray-trace.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:156
msgid "00:00.327"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:158
msgid ""
":ref:`sphx_glr_examples_01-filter_mesh-quality.py` (``mesh-quality.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:159
msgid "00:00.301"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:161
msgid ":ref:`sphx_glr_examples_01-filter_reflect.py` (``reflect.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/sg_execution_times.rst:162
msgid "00:00.242"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_slicing.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:24
msgid "Slicing"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:26
msgid "Extract thin planar slices from a volume."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:48
msgid ""
"PyVista meshes have several slicing filters bound directly to all datasets. "
"These filters allow you to slice through a volumetric dataset to extract and"
" view sections through the volume of data."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:52
msgid ""
"One of the most common slicing filters used in PyVista is the "
":func:`pyvista.DataSetFilters.slice_orthogonal` filter which creates three "
"orthogonal slices through the dataset parallel to the three Cartesian "
"planes. For example, let's slice through the sample geostatistical training "
"image volume. First, load up the volume and preview it:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:112
msgid ""
"Note that this dataset is a 3D volume and there might be regions within this"
" volume that we would like to inspect. We can create slices through the mesh"
" to gain further insight about the internals of the volume."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:162
msgid "The orthogonal slices can be easily translated throughout the volume:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:207
msgid ""
"We can also add just a single slice of the volume by specifying the origin "
"and normal of the slicing plane with the "
":func:`pyvista.DataSetFilters.slice` filter:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:259
msgid ""
"Adding slicing planes uniformly across an axial direction can also be "
"automated with the :func:`pyvista.DataSetFilters.slice_along_axis` filter:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:309
msgid "Slice Along Line"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:311
msgid ""
"We can also slice a dataset along a :func:`pyvista.Spline` or "
":func:`pyvista.Line` using the "
":func:`pyvista.DataSetFilters.slice_along_line` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:314
msgid ""
"First, define a line source through the dataset of interest. Please note "
"that this type of slicing is computationally expensive and might take a "
"while if there are a lot of points in the line - try to keep the resolution "
"of the line low."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:346
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>15</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.475e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.400e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>9.000e+00, 1.100e+01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>arc_length</td><td>Points</td><td>float32</td><td>1</td><td>0.000e+00</td><td>3.605e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:374
msgid "Then run the filter"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:388
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>49100</td></tr>\n"
"<tr><td>N Points</td><td>49692</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.415e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>facies</b></td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>4.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:462
msgid "Multiple Slices in Vector Direction"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:464
msgid "Slice a mesh along a vector direction perpendicularly."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:547
msgid "Slice At Different Bearings"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:549
msgid ""
"From `pyvista-support#23 <https://github.com/pyvista/pyvista-"
"support/issues/23>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:551
msgid ""
"An example of how to get many slices at different bearings all centered "
"around a user-chosen location."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:554
msgid "Create a point to orient slices around"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:572
msgid ""
"Now generate a few normal vectors to rotate a slice around the z-axis. Use "
"equation for circle since its about the Z-axis."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:593
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Information</th><th>Blocks</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>MultiBlock</th><th>Values</th></tr>\n"
"<tr><td>N Blocks</td><td>6</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000, 250.000</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000, 250.000</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000, 100.000</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Index</th><th>Name</th><th>Type</th></tr>\n"
"<tr><th>0</th><th>Bearing: 0.00</th><th>PolyData</th></tr>\n"
"<tr><th>1</th><th>Bearing: 30.00</th><th>PolyData</th></tr>\n"
"<tr><th>2</th><th>Bearing: 60.00</th><th>PolyData</th></tr>\n"
"<tr><th>3</th><th>Bearing: 90.00</th><th>PolyData</th></tr>\n"
"<tr><th>4</th><th>Bearing: 120.00</th><th>PolyData</th></tr>\n"
"<tr><th>5</th><th>Bearing: 150.00</th><th>PolyData</th></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:623
msgid "And now display it."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:670
msgid "**Total running time of the script:** (0 minutes 15.822 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:681
msgid ":download:`Download Jupyter notebook: slicing.ipynb <slicing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/slicing.rst:685
msgid ":download:`Download Python source code: slicing.py <slicing.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_streamlines.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:24
msgid "Streamlines"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:26
msgid "Integrate a vector field to generate streamlines."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:30
msgid ""
"This example generates streamlines of blood velocity. An isosurface of speed"
" provides context. The starting positions for the streamtubes were "
"determined by experimenting with the data."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:54
msgid "Carotid"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:55
msgid ""
"Download a sample dataset containing a vector field that can be integrated."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:73
msgid ""
"Run the stream line filtering algorithm using random seed points inside a "
"sphere with radius of 2.0."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:100
msgid ""
"Display the results. Please note that because this dataset's velocity field "
"was measured with low resolution, many streamlines travel outside the "
"artery."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:154
msgid "Blood Vessels"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:155
msgid "Here is another example of blood flow:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:229
msgid ""
"A source mesh can also be provided using the "
":func:`pyvista.DataSetFilters.streamlines_from_source` filter, for example "
"if an inlet surface is available.  In this example, the inlet surface is "
"extracted just inside the domain for use as the seed for the streamlines."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:264
msgid "Plot streamlines colored by the time along the streamlines."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:323
msgid "Kitchen"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:404
msgid "Custom 3D Vector Field"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:495
msgid "**Total running time of the script:** (0 minutes 21.460 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:506
msgid ""
":download:`Download Jupyter notebook: streamlines.ipynb <streamlines.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines.rst:510
msgid ""
":download:`Download Python source code: streamlines.py <streamlines.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_01-filter_streamlines_2D.py>` to download the "
"full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:24
msgid "2D Streamlines"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:26
msgid "Integrate a vector field to generate streamlines on a 2D surface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:44
msgid ""
"This example generates streamlines of flow around a cylinder in cross flow."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:63
msgid ""
"The data is multiblock with the fluid data as the first block. The data lies"
" in the `xy` plane, i.e. `z=0`, with no `z` velocity."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:96
msgid ""
"The default behavior of the :func:`streamlines() "
"<pyvista.DataSetFilters.streamlines>` filter is to use a 3D sphere source as"
" the seed points.  This often will not generate any seed points on the 2D "
"plane of interest.  Instead, a single streamline can be generated using the "
"``start_position`` argument. The ``surface_streamlines=True`` argument is "
"also needed if the dataset has nonzero normal velocity component.  This is "
"not the case in this dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:161
msgid ""
"To generate multiple streamlines, a line source can be used with the "
"``pointa`` and ``pointb`` parameters."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:220
msgid ""
"The behavior immediately downstream of the cylinder is still not apparent "
"using streamlines at the inlet."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:223
msgid ""
"Another method is to use :func:`streamlines_evenly_spaced_2D() "
"<pyvista.DataSetFilters.streamlines_evenly_spaced_2D>`. This filter only "
"works with 2D data that lies on the xy plane. This method can quickly run of"
" memory, so particular attention must be paid to the input parameters.  The "
"defaults are in cell length units."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:284
msgid ""
"The streamlines are only approximately evenly spaced and capture the vortex "
"pair downstream of the cylinder with appropriate choice of "
"``start_position``."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:291
msgid "**Total running time of the script:** (0 minutes 2.306 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:302
msgid ""
":download:`Download Jupyter notebook: streamlines_2D.ipynb "
"<streamlines_2D.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/streamlines_2D.rst:306
msgid ""
":download:`Download Python source code: streamlines_2D.py "
"<streamlines_2D.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_subdivide.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:24
msgid "Subdivide Cells"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:26
msgid ""
"Increase the number of triangles in a single, connected triangular mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:28
msgid ""
"The :func:`pyvista.PolyDataFilters.subdivide` filter utilizes three "
"different subdivision algorithms to subdivide a mesh's cells: `butterfly`, "
"`loop`, or `linear`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:49
msgid ""
"First, let's load a **triangulated** mesh to subdivide. We can use the "
":func:`pyvista.DataSetFilters.triangulate` filter to ensure the mesh we are "
"using is purely triangles."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:74
msgid ""
"Now, lets do a few subdivisions with the mesh and compare the results. Below"
" is a helper function to make a comparison plot of thee different "
"subdivisions."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:118
msgid "Run the subdivisions for 1 and 3 levels."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:165
msgid "**Total running time of the script:** (0 minutes 1.814 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:176
msgid ""
":download:`Download Jupyter notebook: subdivide.ipynb <subdivide.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/subdivide.rst:180
msgid ":download:`Download Python source code: subdivide.py <subdivide.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_surface-"
"smoothing.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:24
msgid "Surface Smoothing"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:26
msgid "Smoothing rough edges of a surface mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:45
msgid ""
"Suppose you extract a volumetric subset of a dataset that has roughly "
"defined edges. Perhaps you'd like a smooth representation of that model "
"region. This can be achieved by extracting the bounding surface of the "
"volume and applying a :func:`pyvista.PolyDataFilters.smooth` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:50
msgid ""
"The below code snippet loads a sample roughly edged volumetric dataset:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:102
msgid ""
"Extract the outer surface of the volume using the "
":func:`pyvista.DataSetFilters.extract_geometry` filter and then apply the "
"smoothing filter:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:154
msgid ""
"Not smooth enough? Try increasing the number of iterations for the Laplacian"
" smoothing algorithm:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:203
msgid ""
"Still not smooth enough? Increase the number of iterations for the Laplacian"
" smoothing algorithm to a crazy high value. Note how this causes the mesh to"
" \"shrink\":"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:262
msgid "Taubin Smoothing"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:263
msgid ""
"You can reduce the amount of surface shrinkage by using Taubin smoothing "
"rather than the default laplacian smoothing implemented in :func:`smooth() "
"<pyvista.PolyDataFilters.smooth>`. In this example, you can see how Taubin "
"smoothing maintains the volume relative to the original mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:268
msgid ""
"Also, note that the number of iterations can be reduced to get the same "
"approximate amount of smoothing. This is because Taubin smoothing is more "
"efficient."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:332
msgid "**Total running time of the script:** (0 minutes 1.370 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:343
msgid ""
":download:`Download Jupyter notebook: surface-smoothing.ipynb <surface-"
"smoothing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface-smoothing.rst:347
msgid ""
":download:`Download Python source code: surface-smoothing.py <surface-"
"smoothing.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_01-filter_surface_reconstruction.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:24
msgid "Surface Reconstruction"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:26
msgid ""
"Surface reconstruction has a dedicated filter in PyVista and is handled by "
":func:`pyvista.PolyDataFilters.reconstruct_surface`. This tends to perform "
"much better than :func:`pyvista.DataSetFilters.delaunay_3d`."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:46
msgid ""
"Create a point cloud from a sphere and then reconstruct a surface from it."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:62
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>832</td></tr>\n"
"<tr><td>N Points</td><td>418</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.989e-01, 4.995e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>-4.986e-01, 4.986e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-4.985e-01, 4.985e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:84
msgid "Plot the point cloud and the reconstructed sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:135
msgid "**Total running time of the script:** (0 minutes 0.355 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:146
msgid ""
":download:`Download Jupyter notebook: surface_reconstruction.ipynb "
"<surface_reconstruction.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/surface_reconstruction.rst:150
msgid ""
":download:`Download Python source code: surface_reconstruction.py "
"<surface_reconstruction.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_using-filters.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:24
msgid "Using Common Filters"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:26
msgid "Using common filters like thresholding and clipping."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:45
msgid ""
"PyVista wrapped data objects have a suite of common filters ready for "
"immediate use directly on the object. These filters include the following "
"(see :ref:`filters` for a complete list):"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:49
msgid ""
"``slice``: creates a single slice through the input dataset on a user "
"defined plane"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:50
msgid ""
"``slice_orthogonal``: creates a ``MultiBlock`` dataset of three orthogonal "
"slices"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:51
msgid ""
"``slice_along_axis``: creates a ``MultiBlock`` dataset of many slices along "
"a specified axis"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:52
msgid ""
"``threshold``: Thresholds a dataset by a single value or range of values"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:53
msgid "``threshold_percent``: Threshold by percentages of the scalar range"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:54
msgid "``clip``: Clips the dataset by a user defined plane"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:55
msgid "``outline_corners``: Outlines the corners of the data extent"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:56
msgid "``extract_geometry``: Extract surface geometry"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:58
msgid ""
"To use these filters, call the method of your choice directly on your data "
"object:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:83
msgid ""
"And now there is a thresholded version of the input dataset in the new "
"``threshed`` object. To learn more about what keyword arguments are "
"available to alter how filters are executed, print the docstring for any "
"filter attached to PyVista objects with either ``help(dataset.threshold)`` "
"or using ``shift+tab`` in an IPython environment."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:89
msgid ""
"We can now plot this filtered dataset along side an outline of the original "
"dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:140
msgid ""
"What about other filters? Let's collect a few filter results and compare "
"them:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:219
#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:163
msgid "Filter Pipeline"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:221
msgid ""
"In VTK, filters are often used in a pipeline where each algorithm passes its"
" output to the next filtering algorithm. In PyVista, we can mimic the "
"filtering pipeline through a chain; attaching each filter to the last "
"filter. In the following example, several filters are chained together:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:226
msgid "First, and empty ``threshold`` filter to clean out any ``NaN`` values."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:227
msgid ""
"Use an ``elevation`` filter to generate scalar values corresponding to "
"height."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:228
msgid "Use the ``clip`` filter to cut the dataset in half."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:229
msgid ""
"Create three slices along each axial plane using the ``slice_orthogonal`` "
"filter."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:248
msgid ""
"And to view this filtered data, simply call the ``plot`` method "
"(``result.plot()``) or create a rendering scene:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:298
msgid "**Total running time of the script:** (0 minutes 9.603 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:309
msgid ""
":download:`Download Jupyter notebook: using-filters.ipynb <using-"
"filters.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/using-filters.rst:313
msgid ""
":download:`Download Python source code: using-filters.py <using-filters.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_voxelize.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:24
msgid "Voxelize a Surface Mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:26
msgid ""
"Create a voxel model (like legos) of a closed surface or volumetric mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:28
msgid ""
"This example also demonstrates how to compute an implicit distance from a "
"bounding :class:`pyvista.PolyData` surface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:51
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>4204</td></tr>\n"
"<tr><td>N Points</td><td>2154</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.633e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.860e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.126e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:120
msgid "Create a voxel model of the bounding surface"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:170
msgid ""
"We could even add a scalar field to that new voxel model in case we wanted "
"to create grids for modelling. In this case, let's add a scalar field for "
"bone density noting:"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:186
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>93041</td></tr>\n"
"<tr><td>N Points</td><td>113192</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.584e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.858e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.097e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>3</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>4.002e+03</td><td>7.213e+05</td></tr>\n"
"<tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>3.980e+03</td><td>6.947e+05</td></tr>\n"
"<tr><td><b>density</b></td><td>Cells</td><td>float64</td><td>1</td><td>3.650e+00</td><td>3.650e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:256
msgid ""
"A constant scalar field is kind of boring, so let's get a little fancier by "
"added a scalar field that varies by the distance from the bounding surface."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:271
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>93041</td></tr>\n"
"<tr><td>N Points</td><td>113192</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.633e+00, 5.584e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-1.860e+00, 1.858e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.125e+00, 2.097e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>4</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>4.002e+03</td><td>7.213e+05</td></tr>\n"
"<tr><td>implicit_distance</td><td>Points</td><td>float64</td><td>1</td><td>-6.951e-01</td><td>4.148e-01</td></tr>\n"
"<tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>3.980e+03</td><td>6.947e+05</td></tr>\n"
"<tr><td><b>density</b></td><td>Cells</td><td>float64</td><td>1</td><td>3.650e+00</td><td>3.650e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:346
msgid "**Total running time of the script:** (0 minutes 10.098 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:357
msgid ":download:`Download Jupyter notebook: voxelize.ipynb <voxelize.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/voxelize.rst:361
msgid ":download:`Download Python source code: voxelize.py <voxelize.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_01-filter_warp-by-"
"vector.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:24
msgid "Warping by Vectors"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:26
msgid ""
"This example applies the ``warp_by_vector`` filter to a sphere mesh that has"
" 3D displacement vectors defined at each node."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:31
msgid "We first compare the unwarped sphere to the warped sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:91
msgid ""
"We then use several values for the scale factor applied to the warp "
"operation. Applying a warping factor that is too high can often lead to "
"unrealistic results."
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:145
msgid "**Total running time of the script:** (0 minutes 0.842 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:156
msgid ""
":download:`Download Jupyter notebook: warp-by-vector.ipynb <warp-by-"
"vector.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/01-filter/warp-by-vector.rst:160
msgid ""
":download:`Download Python source code: warp-by-vector.py <warp-by-"
"vector.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_anti-aliasing.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:24
msgid "Anti-Aliasing"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:25
msgid "Demonstrate anti-aliasing within PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:27
msgid "PyVista supports three types of anti-aliasing:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:29
msgid "SSAA - Super-Sample Anti-Aliasing"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:30
msgid "MSAA - Multi-Sample Anti-Aliasing"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:31
msgid "FXAA - Fast Approximate Anti-Aliasing"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:33
msgid ""
"By default, MSAA anti-aliasing is enabled using 8 samples. This is the "
"default for VTK."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:42
msgid "You can enable additional line smoothing by enabling SSAA or FXAA"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:44
msgid "**Which anti-aliasing technique should you use?**"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:46
msgid ""
"Normally, the default MSAA anti-aliasing should be sufficient as it strikes "
"a balance between efficiency and quality. If you desire additional "
"smoothing, you can either increase the number of ``multi_samples`` or use "
"SSAA. Low-end PCs should consider FXAA."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:70
msgid "No Anti-Aliasing"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:71
msgid "First, let's show a plot without any anti-aliasing."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:122
msgid "Default: Multi-Sample Anti-Aliasing (MSAA)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:123
msgid ""
"Next, let's show the default anti-aliasing configuration. By default, "
"PyVista uses 8 samples of MSAA."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:126
msgid ""
"MSAA, or Multi-Sample Anti-Aliasing is an optimization of SSAA that reduces "
"the amount of pixel shader evaluations that need to be computed by focusing "
"on overlapping regions of the scene. The result is anti-aliasing along edges"
" that is on par with SSAA and less anti-aliasing along surfaces as these "
"make up the bulk of SSAA computations. MSAA is substantially less "
"computationally expensive than SSAA and results in comparable image quality."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:180
msgid "You can increase the smoothing by increasing multi_samples"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:231
msgid "Fast Approximate Anti-Aliasing (FXAA)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:232
msgid ""
"FXAA is the most performant of all three anti-aliasing techniques. This is "
"because, in terms of hardware or GPU, FXAA is not that demanding. It "
"directly smooths the 2D image and this reduces the strain on the GPU, making"
" it best for low-end PCs."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:237
msgid ""
"Because FXAA only operates on the rendered image, FXAA may result in "
"smoothing out parts of the visual overlay that are usually kept sharp for "
"reasons of clarity as well as smoothing out textures. In general, FXAA is "
"inferior to MSAA and SSAA."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:242
#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:301
msgid "Note how the line width has been adjusted for consistency."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:293
msgid "Super-Sample Anti-Aliasing (SSAA)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:294
msgid ""
"SSAA, or Super-Sample Anti-Aliasing is a brute force method of anti-"
"aliasing. It results in the best image quality but comes at a tremendous "
"resource cost. SSAA works by rendering the scene at a higher resolution. The"
" final image is produced by downsampling the massive source image using an "
"averaging filter. This acts as a low pass filter which removes the high "
"frequency components that would cause jaggedness."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:352
msgid "Compare render time"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:353
msgid ""
"You can compare the time to render for each one of the anti-aliasing "
"approaches with:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:377
msgid ""
"Here are the timings from an NVIDIA Quadro P2000 and a Intel(R) Xeon(R) "
"E-2288G CPU @ 3.70GHz:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:392
msgid "**Total running time of the script:** (0 minutes 1.562 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:403
msgid ""
":download:`Download Jupyter notebook: anti-aliasing.ipynb <anti-"
"aliasing.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/anti-aliasing.rst:407
msgid ""
":download:`Download Python source code: anti-aliasing.py <anti-aliasing.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_backface_props.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:24
msgid "Setting Backface Properties"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:26
msgid ""
"By default front and backface rendering uses the same properties. In certain"
" situations it can be useful to set different properties for backfaces than "
"for frontfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:30
msgid ""
"One straightforward example is when a closed (or close enough) surface has a"
" different color on the inside. Note that the notion of \"inside\" and "
"\"outside\" depend on the orientation of the surface normals:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:74
msgid ""
"A more interesting use case is helping visualize the orientation of complex,"
" self-intersecting surfaces. For instance :func:`Catalan's minimal surface "
"<pyvista.ParametricCatalanMinimal>` has a complex shape, and coloring the "
"front and backfaces differently helps viewers comprehend the intricate "
"structure of the surface. This example also demonstrates use of the "
":attr:`backface_prop <pyvista.Actor.backface_prop>` property of the "
":class:`pyvista.Actor` class."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:133
msgid ""
"In the case of non-orientable surfaces, adding specific backface properties "
"can make the non-orientable quality very obvious by the emergence of "
"\"seams\" where the face properties are discontinuous."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:186
msgid ""
"Of course we aren't constrained to only setting distinct colors for "
"backfaces; most :class:`pyvista.Property` attributes can be overridden. "
"However, some of these have no effect, while others merely don't make any "
"sense. For instance, most objects have the same opacity no matter which "
"direction you look at them. Here is a GIF animation circling around such an "
"asymmetrically opaque Möbius strip:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:227
msgid "Apply Backface Properties to Textured Meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:228
msgid ""
"Backface textures can also be applied to meshes that have textures applied "
"to them. For this example we load the globe texture with "
":func:`pyvista.examples.load_globe() "
"<pyvista.examples.examples.load_globe>`, clip it, and then apply a different"
" color to the interior surface."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:233
msgid ""
"The lighting has been disabled for this example to demonstrate how you can "
"make the interior of the surface appear occluded without any directional "
"lighting simply by providing a different color for backface."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:294
msgid "Backface Properties and Physically Based Rendering"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:295
msgid ""
"Note that backfaces are automatically culled when physically based rendering"
" is enabled, regardless of the settings of backface parameters."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:354
msgid ""
"See also the :ref:`sphere_eversion_example` example which relies on "
"distinguishing the inside and the outside of a sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:360
msgid "**Total running time of the script:** (0 minutes 20.409 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:371
msgid ""
":download:`Download Jupyter notebook: backface_props.ipynb "
"<backface_props.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/backface_props.rst:375
msgid ""
":download:`Download Python source code: backface_props.py "
"<backface_props.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_02-plot_background_image.py>` to download the "
"full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:24
msgid "Background Image"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:26
msgid ""
"Add a background image with :func:`pyvista.Plotter.add_background_image`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:46
msgid "Plot an airplane with the map of the earth in the background"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:76
msgid "Plot several earth related plots"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:123
msgid "**Total running time of the script:** (0 minutes 27.095 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:134
msgid ""
":download:`Download Jupyter notebook: background_image.ipynb "
"<background_image.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/background_image.rst:138
msgid ""
":download:`Download Python source code: background_image.py "
"<background_image.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_blurring.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:24
msgid "Blurring"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:25
msgid ""
"This example shows how you can use :func:`add_blurring "
"<pyvista.Plotter.add_blurring>` to blur a plot, or use "
":func:`enable_depth_of_field <pyvista.Plotter.enable_depth_of_field>` to "
"highlight part of your plot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:48
msgid "Create several spheres"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:72
msgid "Blur the plot"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:73
msgid "Add a few blur passes to blur the plot"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:107
msgid ""
"Note how this is different than selectively blurring part of the mesh behind"
" the focal plane"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:139
msgid "**Total running time of the script:** (0 minutes 7.237 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:150
msgid ":download:`Download Jupyter notebook: blurring.ipynb <blurring.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/blurring.rst:154
msgid ":download:`Download Python source code: blurring.py <blurring.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_bounds.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:24
msgid "Plotting Bounds"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:26
msgid ""
"This example demonstrates to show bounds within a :class:`pyvista.Plotter` "
"using :func:`show_grid() <pyvista.Plotter.show_grid>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:48
msgid "Show All Bounds"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:49
msgid ""
"In this plot we show the bounds for all axes by setting ``location='all'``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:99
msgid "Override Shown Values Limits"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:100
msgid ""
"In this example, we override the values shown along the X and Y axes with "
"our own custom values. This can be useful when you wish to display different"
" values along the axes without having to scale the dataset. Also, note how "
"we hide the Z labels by setting ``show_zlabels=False``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:163
msgid "Show Bounds for Only One Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:164
msgid ""
"This example shows only the bounds for a single dataset. Again we use "
"``axes_ranges`` here since in this example we want to show the size of the "
"single central gear."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:231
msgid "**Total running time of the script:** (0 minutes 1.287 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:242
msgid ":download:`Download Jupyter notebook: bounds.ipynb <bounds.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/bounds.rst:246
msgid ":download:`Download Python source code: bounds.py <bounds.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_chart_basics.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:24
msgid "Chart Basics"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:26
msgid ""
"This example shows how different types of charts can be added to the scene. "
"A more complex example, showing how to combine multiple charts as overlays "
"in the same renderer, is given in :ref:`chart_overlays_example`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:50
msgid ""
"This example shows how to create a 2D scatter plot from 100 randomly sampled"
" datapoints. By default, the chart automatically rescales its axes such that"
" all plotted data is visible. By right clicking on the chart you can enable "
"zooming and panning of the chart."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:83
msgid ""
"To connect datapoints with lines, you can create a 2D line plot as shown in "
"the example below. You can also dynamically 'zoom in' on the plotted data by"
" specifying a custom axis range yourself."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:116
msgid ""
"You can also easily combine scatter and line plots using the general "
":func:`pyvista.Chart2D.plot` function, specifying both the line and marker "
"style at once."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:149
msgid ""
"The following example shows how to create filled areas between two "
"polylines."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:183
msgid ""
"Bar charts are also supported. Multiple bar plots are placed next to each "
"other."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:234
msgid ""
"In case you want to stack the bars, instead of drawing them next to each "
"other, pass a sequence of y values."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:270
msgid ""
"In a similar way, you can stack multiple area plots on top of each other."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:301
msgid ""
"Beside the flexible Chart2D used in the previous examples, there are a "
"couple other dedicated charts you can create. The example below shows how a "
"pie chart can be created."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:332
msgid "To summarize statistics of datasets, you can easily create a boxplot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:361
msgid ""
"If you would like to add other types of chart that are currently not "
"supported by pyvista or VTK, you can resort to matplotlib to create your "
"custom chart and afterwards embed it into a pyvista plotting window. The "
"below example shows how you can do this."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:411
msgid "**Total running time of the script:** (0 minutes 2.821 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:422
msgid ""
":download:`Download Jupyter notebook: chart_basics.ipynb "
"<chart_basics.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_basics.rst:426
msgid ""
":download:`Download Python source code: chart_basics.py <chart_basics.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_chart_overlays.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:24
msgid "Chart Overlays"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:26
msgid ""
"This example shows how you can combine multiple charts as overlays in the "
"same renderer. For an overview of the different chart types you can use, "
"please refer to :ref:`chart_basics_example`. Interaction with a chart can be"
" enabled by a double left click on top of it. Note that this will disable "
"interaction with the 3D scene. To stop interacting with the chart, perform "
"another double left click. This will either enable interaction with another "
"chart (if clicked on top of it) or re-enable interaction with the 3D scene."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:55
msgid "Data to display"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:74
msgid ""
"Define a Matplotlib figure. Use a tight layout to keep axis labels visible "
"on smaller figures."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:97
msgid ""
"Define plotter, add the created matplotlib figure as the first (left) chart "
"to the scene, and define a second (right) chart."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:168
msgid "**Total running time of the script:** (0 minutes 4.564 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:179
msgid ""
":download:`Download Jupyter notebook: chart_overlays.ipynb "
"<chart_overlays.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/chart_overlays.rst:183
msgid ""
":download:`Download Python source code: chart_overlays.py "
"<chart_overlays.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_clear.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:22
msgid "Clearing a Mesh or the Entire Plot"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:24
msgid "This example demonstrates how to remove elements from a scene."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:87
msgid "Clearing the entire plotting window:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:137
msgid ""
"Or you can give any actor a ``name`` when adding it and if an actor is added"
" with that same name at a later time, it will replace the previous actor:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:187
msgid "**Total running time of the script:** (0 minutes 0.526 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:198
msgid ":download:`Download Jupyter notebook: clear.ipynb <clear.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/clear.rst:202
msgid ":download:`Download Python source code: clear.py <clear.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_cmap.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:24
msgid "Colormap Choices"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:26
msgid ""
"Use a Matplotlib, Colorcet, cmocean, or custom colormap when plotting scalar"
" values."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:50
msgid ""
"Any colormap built for ``matplotlib``, ``colorcet``, or ``cmocean`` is fully"
" compatible with PyVista. Colormaps are typically specified by passing the "
"string name of the colormap to the plotting routine via the ``cmap`` "
"argument."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:55
msgid ""
"See `Matplotlib's complete list of available colormaps`_, `Colorcet's "
"complete list`_, and `cmocean's complete list`_."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:65
msgid "Custom Made Colormaps"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:67
msgid ""
"To get started using a custom colormap, download some data with scalar "
"values to plot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:88
msgid ""
"Build a custom colormap - here we make a colormap with 5 discrete colors and"
" we specify the ranges where those colors fall:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:123
msgid "Simply pass the colormap to the plotting routine."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:167
msgid ""
"Or you could make a simple colormap... any Matplotlib colormap can be passed"
" to PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:220
msgid ""
"You can also pass a list of color strings to the color map.  This approach "
"divides up the colormap into 5 equal parts."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:265
msgid ""
"If you still wish to have control of the separation of values, you can do "
"this by creating a scalar array and passing that to the plotter along with "
"the colormap"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:319
msgid "Matplotlib vs. Colorcet"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:321
msgid ""
"Let's compare Colorcet's perceptually uniform \"fire\" colormap to "
"Matplotlib's \"hot\" colormap much like the example on the `first page of "
"Colorcet's docs`_."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:326
msgid ""
"The \"hot\" version washes out detail at the high end, as if the image is "
"overexposed, while \"fire\" makes detail visible throughout the data range."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:329
msgid ""
"Please note that in order to use Colorcet's colormaps including \"fire\", "
"you must have Colorcet installed in your Python environment: ``pip install "
"colorcet``"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:413
msgid "**Total running time of the script:** (0 minutes 12.378 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:424
msgid ":download:`Download Jupyter notebook: cmap.ipynb <cmap.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/cmap.rst:428
msgid ":download:`Download Python source code: cmap.py <cmap.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_color_cycler.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:24
msgid "Color Cycling"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:26
msgid "Cycle through colors when sequentially adding meshes to a plotter."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:30
msgid ""
"Many plotting libraries like Matplotlib cycle through a predefined list of "
"colors to colorize the data being added to the graphic. PyVista supports "
"this in much the same way as Matplotlib."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:50
msgid ""
"Turn on color cycling in PyVista's theme and set it to use the default "
"cycler."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:68
msgid "List the available colors in the cycler"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:81
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table><th>'color'</th><tr><td>'#1f77b4'</td></tr><tr><td>'#ff7f0e'</td></tr><tr><td>'#2ca02c'</td></tr><tr><td>'#d62728'</td></tr><tr><td>'#9467bd'</td></tr><tr><td>'#8c564b'</td></tr><tr><td>'#e377c2'</td></tr><tr><td>'#7f7f7f'</td></tr><tr><td>'#bcbd22'</td></tr><tr><td>'#17becf'</td></tr></table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:91
msgid ""
"Create a plotter and add data to the scene. You'll notice that each "
"``add_mesh`` call iterates over the colors in "
"``pv.global_theme.color_cycler``"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:141
msgid ""
"Reset the theme to not use a cycler and instead set on individual plotters."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:158
msgid ""
"If you do not want to set a global color cycler but instead just want to use"
" a cycler for a single plotter, you can set this on with "
":func:`set_color_cycler() <pyvista.Plotter.set_color_cycler>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:213
msgid ""
"Further, you can control this on a per-renderer basis by calling "
":func:`set_color_cycler() <pyvista.Renderer.set_color_cycler>` on the active"
" ``renderer``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:278
msgid ""
"You can also change the colors of actors after they are added to the scene."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:280
msgid ""
"ProTip: you could place the for-loop below in an event callback for a key "
"event to cycle through the colors on-demand. Or better yet, have your cycler"
" randomly select colors."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:340
msgid "**Total running time of the script:** (0 minutes 1.126 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:351
msgid ""
":download:`Download Jupyter notebook: color_cycler.ipynb "
"<color_cycler.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/color_cycler.rst:355
msgid ""
":download:`Download Python source code: color_cycler.py <color_cycler.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_composite-"
"picking.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:24
msgid "Composite Picking"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:26
msgid ""
"Demonstrate how to pick individual blocks of a :class:`pyvista.MultiBlock` "
"using :func:`pyvista.Plotter.enable_block_picking`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:48
msgid "Create a MultiBlock Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:49
msgid ""
"Create 100 superellipsoids using :func:`pyvista.ParametricSuperEllipsoid`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:110
msgid "Enable Block Picking"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:111
msgid ""
"Add ``blocks`` to a :class:`pyvista.Plotter` and enable block picking.  For "
"fun, let's also enable physically based rendering and set the callback to "
"set the block color to red when the block is clicked and unset the color if "
"the color has already been set for the block."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:155
msgid "**Total running time of the script:** (0 minutes 2.271 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:166
msgid ""
":download:`Download Jupyter notebook: composite-picking.ipynb <composite-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/composite-picking.rst:170
msgid ""
":download:`Download Python source code: composite-picking.py <composite-"
"picking.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_depth-peeling.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:24
msgid "Depth Peeling"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:25
msgid ""
"Depth peeling is a technique to correctly render translucent geometry.  This"
" is not enabled by default in :attr:`pyvista.global_theme "
"<pyvista.plotting.themes.Theme>` as some operating systems and versions of "
"VTK have issues with this routine."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:30
msgid ""
"For this example, we will showcase the difference that depth peeling "
"provides."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:122
msgid ""
"The following room surfaces example mesh, provided courtesy of `Sam Potter "
"<https://github.com/sampotter>`_ has coincident topology and depth rendering"
" helps correctly render those geometries when a global opacity value is "
"used."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:186
msgid ""
"And here is another example wheen rendering many translucent contour "
"surfaces."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:247
msgid "**Total running time of the script:** (0 minutes 36.829 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:258
msgid ""
":download:`Download Jupyter notebook: depth-peeling.ipynb <depth-"
"peeling.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth-peeling.rst:262
msgid ""
":download:`Download Python source code: depth-peeling.py <depth-peeling.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_depth_of_field.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:24
msgid "Depth of Field Plotting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:26
msgid ""
"This example shows how you can use :func:`enable_depth_of_field "
"<pyvista.Plotter.enable_depth_of_field>` to highlight part of your plot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:50
msgid "Generate a bunch of bunnies"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:51
msgid ""
"Create many bunnies using the :func:`glyph <pyvista.DataSetFilters.glyph>` "
"filter."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:76
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>2500236</td></tr>\n"
"<tr><td>N Points</td><td>1294092</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-2.475e-01, 9.235e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-3.788e-01, 2.244e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.319e-01, 2.749e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:99
msgid "Show the plot without enabling depth of field"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:165
msgid "Show the plot while enabling depth of field"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:217
msgid "**Total running time of the script:** (1 minutes 11.146 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:228
msgid ""
":download:`Download Jupyter notebook: depth_of_field.ipynb "
"<depth_of_field.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/depth_of_field.rst:232
msgid ""
":download:`Download Python source code: depth_of_field.py "
"<depth_of_field.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_distance-along-"
"spline.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:24
msgid "Label based on Distance on Line"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:26
msgid ""
"Create a spline and generate labels along the spline based on distance along"
" a spline."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:29
msgid "This is an extension of the :ref:`create_spline_example`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:50
msgid "Create a spline"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:51
msgid "Create a spline using :func:`pyvista.Spline`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:95
msgid "Determine the coordinates matching distance along a spline"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:96
msgid ""
"Here we write a simple function that gets the closest point matching a "
"distance along a spline and then generate labels for those points."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:139
msgid "Plot with Labels"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:140
msgid "Plot the spline with labeled points"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:179
msgid "**Total running time of the script:** (0 minutes 0.431 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:190
msgid ""
":download:`Download Jupyter notebook: distance-along-spline.ipynb <distance-"
"along-spline.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance-along-spline.rst:194
msgid ""
":download:`Download Python source code: distance-along-spline.py <distance-"
"along-spline.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_02-plot_distance_measurement.py>` to download "
"the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:24
msgid "Measuring distance"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:25
msgid ""
"This example demonstrates how to measure distance between two points. "
":func:`add_measurement_widget() <pyvista.Plotter.add_measurement_widget>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:86
msgid "**Total running time of the script:** (0 minutes 0.211 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:97
msgid ""
":download:`Download Jupyter notebook: distance_measurement.ipynb "
"<distance_measurement.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/distance_measurement.rst:101
msgid ""
":download:`Download Python source code: distance_measurement.py "
"<distance_measurement.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_edges.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:24
msgid "Show Edges"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:26
msgid "Show the edges of all geometries within a mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:30
msgid ""
"Sometimes it can be useful to show all of the edges of a mesh when rendering"
" to communicate aspects of the dataset like resolution."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:33
msgid ""
"Showing the edges for any rendered dataset is as simple as specifying the "
"the ``show_edges`` keyword argument to ``True`` when plotting a dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:91
msgid "**Total running time of the script:** (0 minutes 12.258 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:102
msgid ":download:`Download Jupyter notebook: edges.ipynb <edges.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edges.rst:106
msgid ":download:`Download Python source code: edges.py <edges.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_edl.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:24
msgid "Eye Dome Lighting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:26
msgid ""
"Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading "
"technique designed to improve depth perception in scientific visualization "
"images. To learn more, please see `this blog post`_."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:51
msgid "Statue"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:53
msgid ""
"Eye-Dome Lighting can dramatically improve depth perception when plotting "
"incredibly sophisticated meshes like the creative commons Queen Nefertiti "
"statue:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:82
msgid "Here we will compare a EDL shading side by side with normal shading"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:124
msgid "Point Cloud"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:126
msgid ""
"When plotting a simple point cloud, it can be difficult to perceive depth. "
"Take this Lidar point cloud for example:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:146
msgid "And now plot this point cloud as-is:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:176
msgid ""
"We can improve the depth mapping by enabling eye dome lighting on the "
"renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:208
msgid "The eye dome lighting mode can also handle plotting scalar arrays:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:238
msgid "**Total running time of the script:** (1 minutes 12.948 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:249
msgid ":download:`Download Jupyter notebook: edl.ipynb <edl.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/edl.rst:253
msgid ":download:`Download Python source code: edl.py <edl.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_element-picking.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:24
msgid "Picking elements of a mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:25
msgid ""
"This example demonstrates how to pick different elements on meshes using "
":func:`enable_element_picking() <pyvista.Plotter.enable_element_picking>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:28
msgid "The different elements of a mesh are:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:30
msgid ""
"Mesh: pick the entire mesh (equivalent to :func:`enable_mesh_picking() "
"<pyvista.Plotter.enable_mesh_picking>`.)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:31
msgid ""
"Cell: pick a cell of the mesh (equivalent to :func:`enable_cell_picking() "
"<pyvista.Plotter.enable_cell_picking>`.)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:32
msgid "Face: pick a single face of a cell on the mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:33
msgid "Edge: pick a single edge of a cell on the mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:34
msgid "Point: pick a single point on the mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:36
msgid ""
"These types are captured in the :class:`pyvista.plotting.opts.ElementType` "
"enum class."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:56
msgid "Pick Face on Voxel Cell"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:123
msgid "Pick an Edge of a Cell"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:189
msgid "**Total running time of the script:** (0 minutes 0.942 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:200
msgid ""
":download:`Download Jupyter notebook: element-picking.ipynb <element-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/element-picking.rst:204
msgid ""
":download:`Download Python source code: element-picking.py <element-"
"picking.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/floors.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_floors.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/floors.rst:24
msgid "Plot with Floors"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/floors.rst:26
msgid "Add a floor/wall at the boundary of the rendering scene."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/floors.rst:80
msgid "**Total running time of the script:** (0 minutes 5.747 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/floors.rst:91
msgid ":download:`Download Jupyter notebook: floors.ipynb <floors.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/floors.rst:95
msgid ":download:`Download Python source code: floors.py <floors.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_ghost-cells.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:22
msgid "Hide Cells with Ghosting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:24
msgid "Specify specific cells to hide when plotting."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:26
msgid ""
"This is a lightweight alternative to thresholding to quickly hide cells in a"
" mesh without creating a new mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:29
msgid ""
"Notably, the mesh must be cast to an :class:`pyvista.UnstructuredGrid` type "
"for this to work (use the ``cast_to_unstructured_grid`` filter)."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:53
msgid ""
"Decide which cells are ghosted with a criteria (feel free to adjust this or "
"manually create this array to hide specific cells)."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:70
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1065589</td></tr>\n"
"<tr><td>N Points</td><td>1336015</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.500e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.000e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>facies</b></td><td>Cells</td><td>int64</td><td>1</td><td>1.000e+00</td><td>4.000e+00</td></tr>\n"
"<tr><td>vtkGhostType</td><td>Cells</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>0.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:98
msgid "Now we can plot the mesh and those cells will be hidden"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:142
msgid "**Total running time of the script:** (0 minutes 7.744 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:153
msgid ""
":download:`Download Jupyter notebook: ghost-cells.ipynb <ghost-cells.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ghost-cells.rst:157
msgid ""
":download:`Download Python source code: ghost-cells.py <ghost-cells.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_gif.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:24
msgid "Create a GIF Movie"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:25
msgid "Generate a moving gif from an active plotter."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:28
msgid ""
"Use ``lighting=False`` to reduce the size of the color space to avoid "
"\"jittery\" GIFs, especially for the scalar bar."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:51
#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:106
msgid "Create a structured grid"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:52
msgid ""
"Create a structured grid and make a \"wave\" my shifting the Z position "
"based on the cartesian distance from the origin."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:109
msgid "Generate a GIF"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:110
msgid "Generate a GIF using ``off_screen=True`` parameter."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:160
msgid "**Total running time of the script:** (0 minutes 2.194 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:171
msgid ":download:`Download Jupyter notebook: gif.ipynb <gif.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/gif.rst:175
msgid ":download:`Download Python source code: gif.py <gif.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_image_depth.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:22
msgid "Render a depth image"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:24
msgid ""
"Plot a depth image as viewed from a camera overlooking the \"hills\" example"
" mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:81
msgid "Record depth image without and with a custom fill value"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:99
msgid "Visualize depth images"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:151
msgid "**Total running time of the script:** (0 minutes 0.679 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:162
msgid ""
":download:`Download Jupyter notebook: image_depth.ipynb <image_depth.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/image_depth.rst:166
msgid ""
":download:`Download Python source code: image_depth.py <image_depth.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:6
#: ../../pyvista/doc/source/examples/index.rst:1284
msgid "Plotting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:1286
msgid ""
"These examples show case many of the possibilities for altering how you "
"display spatial data. Explore these examples to learn how to leverage our "
"powerful 3D plotting routines to perform tasks like:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:12
#: ../../pyvista/doc/source/examples/index.rst:1290
msgid "Color mapping scalar values with ``matplotlib`` colormaps"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:13
#: ../../pyvista/doc/source/examples/index.rst:1291
msgid "Creating animations as GIFs or movie files"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:14
#: ../../pyvista/doc/source/examples/index.rst:1292
msgid "Showing the edges and nodes of different mesh types"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:15
#: ../../pyvista/doc/source/examples/index.rst:1293
msgid ""
"Use sophisticated lighting techniques like smooth shading or Eye Dome "
"Lighting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:16
#: ../../pyvista/doc/source/examples/index.rst:1294
msgid ""
"Glyph a vector or scalar field on a mesh (place/orient a mesh on another "
"mesh's nodes and scale/orient based on data values)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:17
#: ../../pyvista/doc/source/examples/index.rst:1295
msgid "Label points in 3D space along side your meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:18
#: ../../pyvista/doc/source/examples/index.rst:1296
msgid "Creating side-by-side comparisons"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:19
#: ../../pyvista/doc/source/examples/index.rst:1297
msgid "Making a dataset transparent or using a scalar value to map opacity"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:20
#: ../../pyvista/doc/source/examples/index.rst:1298
msgid "Adding textures/images draped over a mesh (texture mapping)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:21
#: ../../pyvista/doc/source/examples/index.rst:1299
msgid "Rendering a depth image"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:30
#: ../../pyvista/doc/source/examples/index.rst:1308
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista supports three "
"types of anti-aliasing:\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:39
#: ../../pyvista/doc/source/examples/index.rst:1317
msgid ":ref:`sphx_glr_examples_02-plot_anti-aliasing.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:41
#: ../../pyvista/doc/source/examples/index.rst:1319
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Anti-Aliasing</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:47
#: ../../pyvista/doc/source/examples/index.rst:1325
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"By default front and "
"backface rendering uses the same properties. In certain situations it can "
"...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:56
#: ../../pyvista/doc/source/examples/index.rst:1334
msgid ":ref:`sphx_glr_examples_02-plot_backface_props.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:58
#: ../../pyvista/doc/source/examples/index.rst:1336
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Setting Backface Properties</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:64
#: ../../pyvista/doc/source/examples/index.rst:1342
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Add a background image with"
" pyvista.Plotter.add_background_image.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:73
#: ../../pyvista/doc/source/examples/index.rst:1351
msgid ":ref:`sphx_glr_examples_02-plot_background_image.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:75
#: ../../pyvista/doc/source/examples/index.rst:1353
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Background Image</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:81
#: ../../pyvista/doc/source/examples/index.rst:1359
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Blurring\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:90
#: ../../pyvista/doc/source/examples/index.rst:1368
msgid ":ref:`sphx_glr_examples_02-plot_blurring.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:92
#: ../../pyvista/doc/source/examples/index.rst:1370
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Blurring</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:98
#: ../../pyvista/doc/source/examples/index.rst:1376
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"to show bounds within a pyvista.Plotter using pyvista.Plotter.show_gr...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:107
#: ../../pyvista/doc/source/examples/index.rst:1385
msgid ":ref:`sphx_glr_examples_02-plot_bounds.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:109
#: ../../pyvista/doc/source/examples/index.rst:1387
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plotting Bounds</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:115
#: ../../pyvista/doc/source/examples/index.rst:1393
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how "
"different types of charts can be added to the scene. A more complex "
"exam...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:124
#: ../../pyvista/doc/source/examples/index.rst:1402
msgid ":ref:`sphx_glr_examples_02-plot_chart_basics.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:126
#: ../../pyvista/doc/source/examples/index.rst:1404
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Chart Basics</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:132
#: ../../pyvista/doc/source/examples/index.rst:1410
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how you "
"can combine multiple charts as overlays in the same renderer. For an...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:141
#: ../../pyvista/doc/source/examples/index.rst:1419
msgid ":ref:`sphx_glr_examples_02-plot_chart_overlays.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:143
#: ../../pyvista/doc/source/examples/index.rst:1421
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Chart Overlays</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:149
#: ../../pyvista/doc/source/examples/index.rst:1427
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"how to remove elements from a scene.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:158
#: ../../pyvista/doc/source/examples/index.rst:1436
msgid ":ref:`sphx_glr_examples_02-plot_clear.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:160
#: ../../pyvista/doc/source/examples/index.rst:1438
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Clearing a Mesh or the Entire Plot</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:166
#: ../../pyvista/doc/source/examples/index.rst:1444
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a Matplotlib, Colorcet,"
" cmocean, or custom colormap when plotting scalar values.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:175
#: ../../pyvista/doc/source/examples/index.rst:1453
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:177
#: ../../pyvista/doc/source/examples/index.rst:1455
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Colormap Choices</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:183
#: ../../pyvista/doc/source/examples/index.rst:1461
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Cycle through colors when "
"sequentially adding meshes to a plotter.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:192
#: ../../pyvista/doc/source/examples/index.rst:1470
msgid ":ref:`sphx_glr_examples_02-plot_color_cycler.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:194
#: ../../pyvista/doc/source/examples/index.rst:1472
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Color Cycling</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:200
#: ../../pyvista/doc/source/examples/index.rst:1478
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Demonstrate how to pick "
"individual blocks of a pyvista.MultiBlock using "
"pyvista.Plotter.enable_...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:209
#: ../../pyvista/doc/source/examples/index.rst:1487
msgid ":ref:`sphx_glr_examples_02-plot_composite-picking.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:211
#: ../../pyvista/doc/source/examples/index.rst:1489
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Composite Picking</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:217
#: ../../pyvista/doc/source/examples/index.rst:1495
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"For this example, we will "
"showcase the difference that depth peeling provides.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:226
#: ../../pyvista/doc/source/examples/index.rst:1504
msgid ":ref:`sphx_glr_examples_02-plot_depth-peeling.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:228
#: ../../pyvista/doc/source/examples/index.rst:1506
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Depth Peeling</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:234
#: ../../pyvista/doc/source/examples/index.rst:1512
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example shows how you "
"can use pyvista.Plotter.enable_depth_of_field to highlight part of y...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:243
#: ../../pyvista/doc/source/examples/index.rst:1521
msgid ":ref:`sphx_glr_examples_02-plot_depth_of_field.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:245
#: ../../pyvista/doc/source/examples/index.rst:1523
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Depth of Field Plotting</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:251
#: ../../pyvista/doc/source/examples/index.rst:1529
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a spline and "
"generate labels along the spline based on distance along a spline.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:260
#: ../../pyvista/doc/source/examples/index.rst:1538
msgid ":ref:`sphx_glr_examples_02-plot_distance-along-spline.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:262
#: ../../pyvista/doc/source/examples/index.rst:1540
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Label based on Distance on Line</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:268
#: ../../pyvista/doc/source/examples/index.rst:1546
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Measuring distance\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:277
#: ../../pyvista/doc/source/examples/index.rst:1555
msgid ":ref:`sphx_glr_examples_02-plot_distance_measurement.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:279
#: ../../pyvista/doc/source/examples/index.rst:1557
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Measuring distance</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:285
#: ../../pyvista/doc/source/examples/index.rst:1563
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Show the edges of all "
"geometries within a mesh\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:294
#: ../../pyvista/doc/source/examples/index.rst:1572
msgid ":ref:`sphx_glr_examples_02-plot_edges.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:296
#: ../../pyvista/doc/source/examples/index.rst:1574
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Show Edges</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:302
#: ../../pyvista/doc/source/examples/index.rst:1580
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Eye-Dome Lighting (EDL) is "
"a non-photorealistic, image-based shading technique designed to impr...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:311
#: ../../pyvista/doc/source/examples/index.rst:1589
msgid ":ref:`sphx_glr_examples_02-plot_edl.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:313
#: ../../pyvista/doc/source/examples/index.rst:1591
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Eye Dome Lighting</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:319
#: ../../pyvista/doc/source/examples/index.rst:1597
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The different elements of a"
" mesh are:\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:328
#: ../../pyvista/doc/source/examples/index.rst:1606
msgid ":ref:`sphx_glr_examples_02-plot_element-picking.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:330
#: ../../pyvista/doc/source/examples/index.rst:1608
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Picking elements of a mesh</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:336
#: ../../pyvista/doc/source/examples/index.rst:1614
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Add a floor/wall at the "
"boundary of the rendering scene.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:345
#: ../../pyvista/doc/source/examples/index.rst:1623
msgid ":ref:`sphx_glr_examples_02-plot_floors.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:347
#: ../../pyvista/doc/source/examples/index.rst:1625
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot with Floors</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:353
#: ../../pyvista/doc/source/examples/index.rst:1631
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Specify specific cells to "
"hide when plotting.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:362
#: ../../pyvista/doc/source/examples/index.rst:1640
msgid ":ref:`sphx_glr_examples_02-plot_ghost-cells.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:364
#: ../../pyvista/doc/source/examples/index.rst:1642
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Hide Cells with Ghosting</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:370
#: ../../pyvista/doc/source/examples/index.rst:1648
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a GIF Movie\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:379
#: ../../pyvista/doc/source/examples/index.rst:1657
msgid ":ref:`sphx_glr_examples_02-plot_gif.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:381
#: ../../pyvista/doc/source/examples/index.rst:1659
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create a GIF Movie</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:387
#: ../../pyvista/doc/source/examples/index.rst:1665
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a depth image as "
"viewed from a camera overlooking the &quot;hills&quot; example mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:396
#: ../../pyvista/doc/source/examples/index.rst:1674
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:398
#: ../../pyvista/doc/source/examples/index.rst:1676
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Render a depth image</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:404
#: ../../pyvista/doc/source/examples/index.rst:1682
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The "
"pyvista.Plotter.add_mesh method has an interpolate_before_map argument that "
"affects the way...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:413
#: ../../pyvista/doc/source/examples/index.rst:1691
msgid ":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:415
#: ../../pyvista/doc/source/examples/index.rst:1693
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Interpolate Before Mapping</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:421
#: ../../pyvista/doc/source/examples/index.rst:1699
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Make an animation of an "
"isovalue through a volumetric dataset\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:430
#: ../../pyvista/doc/source/examples/index.rst:1708
msgid ":ref:`sphx_glr_examples_02-plot_isovalue.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:432
#: ../../pyvista/doc/source/examples/index.rst:1710
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Moving Isovalue</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:438
#: ../../pyvista/doc/source/examples/index.rst:1716
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use string arrays in a "
"point set to label points\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:447
#: ../../pyvista/doc/source/examples/index.rst:1725
msgid ":ref:`sphx_glr_examples_02-plot_labels.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:449
#: ../../pyvista/doc/source/examples/index.rst:1727
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Label Points</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:455
#: ../../pyvista/doc/source/examples/index.rst:1733
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Using custom legends and "
"glyphs within PyVista.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:464
#: ../../pyvista/doc/source/examples/index.rst:1742
msgid ":ref:`sphx_glr_examples_02-plot_legend.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:466
#: ../../pyvista/doc/source/examples/index.rst:1744
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Legends and glyphs</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:472
#: ../../pyvista/doc/source/examples/index.rst:1750
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Control aspects of the "
"rendered mesh&#x27;s lighting such as Ambient, Diffuse, and Specular. These "
"o...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:481
#: ../../pyvista/doc/source/examples/index.rst:1759
msgid ":ref:`sphx_glr_examples_02-plot_lighting_mesh.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:483
#: ../../pyvista/doc/source/examples/index.rst:1761
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Lighting Properties</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:489
#: ../../pyvista/doc/source/examples/index.rst:1767
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Linked Views in Subplots\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:498
#: ../../pyvista/doc/source/examples/index.rst:1776
msgid ":ref:`sphx_glr_examples_02-plot_linked.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:500
#: ../../pyvista/doc/source/examples/index.rst:1778
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Linked Views in Subplots</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:506
#: ../../pyvista/doc/source/examples/index.rst:1784
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The pyvista.LookupTable can"
" be used to have fine-tuned control over the mapping between a pyvis...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:515
#: ../../pyvista/doc/source/examples/index.rst:1793
msgid ":ref:`sphx_glr_examples_02-plot_lookup-table.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:517
#: ../../pyvista/doc/source/examples/index.rst:1795
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Lookup Tables</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:523
#: ../../pyvista/doc/source/examples/index.rst:1801
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Picking Meshes\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:532
#: ../../pyvista/doc/source/examples/index.rst:1810
msgid ":ref:`sphx_glr_examples_02-plot_mesh-picking.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:534
#: ../../pyvista/doc/source/examples/index.rst:1812
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Picking Meshes</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:540
#: ../../pyvista/doc/source/examples/index.rst:1818
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an animated MP4 "
"movie of a rendering scene.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:549
#: ../../pyvista/doc/source/examples/index.rst:1827
msgid ":ref:`sphx_glr_examples_02-plot_movie.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:551
#: ../../pyvista/doc/source/examples/index.rst:1829
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create a MP4 Movie</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:557
#: ../../pyvista/doc/source/examples/index.rst:1835
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create an animated GIF by "
"generating glyphs using pyvista.DataSetFilters.glyph using pyvista.Sp...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:566
#: ../../pyvista/doc/source/examples/index.rst:1844
msgid ":ref:`sphx_glr_examples_02-plot_movie_glyphs.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:568
#: ../../pyvista/doc/source/examples/index.rst:1846
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Save a Movie Using Glyphs</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:574
#: ../../pyvista/doc/source/examples/index.rst:1852
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Create a GIF Movie of a "
"Static Object with a Moving Colormap\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:583
#: ../../pyvista/doc/source/examples/index.rst:1861
msgid ":ref:`sphx_glr_examples_02-plot_moving_cmap.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:585
#: ../../pyvista/doc/source/examples/index.rst:1863
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Create a GIF Movie of a Static Object with a Moving Colormap</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:591
#: ../../pyvista/doc/source/examples/index.rst:1869
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" Subplotting: having "
"multiple scenes in a single window\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:600
#: ../../pyvista/doc/source/examples/index.rst:1878
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:602
#: ../../pyvista/doc/source/examples/index.rst:1880
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Multi-Window Plot</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:608
#: ../../pyvista/doc/source/examples/index.rst:1886
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a mesh&#x27;s scalar "
"array with an opacity transfer function or opacity mapping based on a "
"scal...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:617
#: ../../pyvista/doc/source/examples/index.rst:1895
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:619
#: ../../pyvista/doc/source/examples/index.rst:1897
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot with Opacity</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:625
#: ../../pyvista/doc/source/examples/index.rst:1903
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Orbit around a scene.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:634
#: ../../pyvista/doc/source/examples/index.rst:1912
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:636
#: ../../pyvista/doc/source/examples/index.rst:1914
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Orbiting</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:642
#: ../../pyvista/doc/source/examples/index.rst:1920
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"View three orthogonal "
"slices from a mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:651
#: ../../pyvista/doc/source/examples/index.rst:1929
msgid ":ref:`sphx_glr_examples_02-plot_ortho-slices.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:653
#: ../../pyvista/doc/source/examples/index.rst:1931
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Orthogonal Slices</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:659
#: ../../pyvista/doc/source/examples/index.rst:1937
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"VTK 9 introduced Physically"
" Based Rendering (PBR) and we have exposed that functionality in PyV...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:668
#: ../../pyvista/doc/source/examples/index.rst:1946
msgid ":ref:`sphx_glr_examples_02-plot_pbr.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:670
#: ../../pyvista/doc/source/examples/index.rst:1948
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Physically Based Rendering</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:676
#: ../../pyvista/doc/source/examples/index.rst:1954
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Interpolate the scalars of "
"a dataset over a circular arc.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:685
#: ../../pyvista/doc/source/examples/index.rst:1963
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-circular-arc.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:687
#: ../../pyvista/doc/source/examples/index.rst:1965
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot Scalars Over a Circular Arc</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:693
#: ../../pyvista/doc/source/examples/index.rst:1971
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot the values of a "
"dataset over a line through that dataset\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:702
#: ../../pyvista/doc/source/examples/index.rst:1980
msgid ":ref:`sphx_glr_examples_02-plot_plot-over-line.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:704
#: ../../pyvista/doc/source/examples/index.rst:1982
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot Over Line</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:710
#: ../../pyvista/doc/source/examples/index.rst:1988
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"how to add point scalars for each individual cell to a dataset.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:719
#: ../../pyvista/doc/source/examples/index.rst:1997
msgid ":ref:`sphx_glr_examples_02-plot_point-cell-scalars.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:721
#: ../../pyvista/doc/source/examples/index.rst:1999
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Point Cell Scalars</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:727
#: ../../pyvista/doc/source/examples/index.rst:2005
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plotting Point Clouds\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:736
#: ../../pyvista/doc/source/examples/index.rst:2014
msgid ":ref:`sphx_glr_examples_02-plot_point-clouds.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:738
#: ../../pyvista/doc/source/examples/index.rst:2016
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plotting Point Clouds</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:744
#: ../../pyvista/doc/source/examples/index.rst:2022
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Picking points on a mesh\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:753
#: ../../pyvista/doc/source/examples/index.rst:2031
msgid ":ref:`sphx_glr_examples_02-plot_point-picking.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:755
#: ../../pyvista/doc/source/examples/index.rst:2033
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Picking points on a mesh</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:761
#: ../../pyvista/doc/source/examples/index.rst:2039
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Scaled Gaussian Points\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:770
#: ../../pyvista/doc/source/examples/index.rst:2048
msgid ":ref:`sphx_glr_examples_02-plot_points-gaussian-scale.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:772
#: ../../pyvista/doc/source/examples/index.rst:2050
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Scaled Gaussian Points</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:778
#: ../../pyvista/doc/source/examples/index.rst:2056
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Walk through of all the "
"different capabilities of scalar bars and how a user can customize "
"scal...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:787
#: ../../pyvista/doc/source/examples/index.rst:2065
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:789
#: ../../pyvista/doc/source/examples/index.rst:2067
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Customize Scalar Bars</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:795
#: ../../pyvista/doc/source/examples/index.rst:2073
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Saving Screenshots\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:804
#: ../../pyvista/doc/source/examples/index.rst:2082
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:806
#: ../../pyvista/doc/source/examples/index.rst:2084
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Saving Screenshots</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:812
#: ../../pyvista/doc/source/examples/index.rst:2090
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Comparison of default, flat"
" shading vs. smooth shading.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:821
#: ../../pyvista/doc/source/examples/index.rst:2099
msgid ":ref:`sphx_glr_examples_02-plot_shading.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:823
#: ../../pyvista/doc/source/examples/index.rst:2101
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Types of Shading</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:829
#: ../../pyvista/doc/source/examples/index.rst:2107
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Extract a subset of the "
"edges of a polygonal mesh to generate an outline (silhouette) of a "
"mesh...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:838
#: ../../pyvista/doc/source/examples/index.rst:2116
msgid ":ref:`sphx_glr_examples_02-plot_silhouette.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:840
#: ../../pyvista/doc/source/examples/index.rst:2118
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Silhouette Highlight</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:846
#: ../../pyvista/doc/source/examples/index.rst:2124
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Generate and visualize "
"meshes from data in longitude-latitude coordinates.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:855
#: ../../pyvista/doc/source/examples/index.rst:2133
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:857
#: ../../pyvista/doc/source/examples/index.rst:2135
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot data in spherical coordinates</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:863
#: ../../pyvista/doc/source/examples/index.rst:2141
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Demonstrate the usage of "
"surface space ambient occlusion.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:872
#: ../../pyvista/doc/source/examples/index.rst:2150
msgid ":ref:`sphx_glr_examples_02-plot_ssao.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:874
#: ../../pyvista/doc/source/examples/index.rst:2152
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Surface Space Ambient Occlusion</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:880
#: ../../pyvista/doc/source/examples/index.rst:2158
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This allows you to pick "
"points on the surface of a mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:889
#: ../../pyvista/doc/source/examples/index.rst:2167
msgid ":ref:`sphx_glr_examples_02-plot_surface-picking.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:891
#: ../../pyvista/doc/source/examples/index.rst:2169
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Picking a Point on the Surface of a Mesh</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:897
#: ../../pyvista/doc/source/examples/index.rst:2175
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a mesh with an image "
"projected onto it as a texture.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:906
#: ../../pyvista/doc/source/examples/index.rst:2184
msgid ":ref:`sphx_glr_examples_02-plot_texture.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:908
#: ../../pyvista/doc/source/examples/index.rst:2186
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Applying Textures</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:914
#: ../../pyvista/doc/source/examples/index.rst:2192
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"PyVista allows you to set "
"global and local plotting themes to easily set default plotting param...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:923
#: ../../pyvista/doc/source/examples/index.rst:2201
msgid ":ref:`sphx_glr_examples_02-plot_themes.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:925
#: ../../pyvista/doc/source/examples/index.rst:2203
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Control Global and Local Plotting Themes</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:931
#: ../../pyvista/doc/source/examples/index.rst:2209
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This is very similar to the"
" texture_example example except it is focused on plotting aerial ima...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:940
#: ../../pyvista/doc/source/examples/index.rst:2218
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:942
#: ../../pyvista/doc/source/examples/index.rst:2220
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Topographic Map</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:948
#: ../../pyvista/doc/source/examples/index.rst:2226
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot a single component of "
"a vector as a scalar array.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:957
#: ../../pyvista/doc/source/examples/index.rst:2235
msgid ":ref:`sphx_glr_examples_02-plot_vector-component.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:959
#: ../../pyvista/doc/source/examples/index.rst:2237
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot Vector Component</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:965
#: ../../pyvista/doc/source/examples/index.rst:2243
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Display vertices on a mesh "
"in the same fashion as edge visibility.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:974
#: ../../pyvista/doc/source/examples/index.rst:2252
msgid ":ref:`sphx_glr_examples_02-plot_vertices.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:976
#: ../../pyvista/doc/source/examples/index.rst:2254
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Visible Vertices</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:982
#: ../../pyvista/doc/source/examples/index.rst:2260
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Volume render uniform mesh "
"types like pyvista.ImageData or 3D NumPy arrays.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:991
#: ../../pyvista/doc/source/examples/index.rst:2269
msgid ":ref:`sphx_glr_examples_02-plot_volume.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/index.rst:993
#: ../../pyvista/doc/source/examples/index.rst:2271
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Volume Rendering</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_interpolate-before-"
"map.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:24
msgid "Interpolate Before Mapping"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:26
msgid ""
"The :func:`add_mesh <pyvista.Plotter.add_mesh>` method has an "
"``interpolate_before_map`` argument that affects the way scalar data is "
"visualized with colors.  The effect of this can vary depending on the "
"dataset's topology and the chosen colormap."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:31
msgid ""
"This example serves to demo the difference and why we've chosen to enable "
"this by default."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:34
msgid ""
"For more details, please see `What is InterpolateScalarsBeforeMapping in "
"VTK? <https://www.kitware.com/what-is-interpolatescalarsbeforemapping-in-"
"vtk/>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:53
msgid ""
"Meshes are colored by the data on their nodes or cells - when coloring a "
"mesh by data on its nodes, the values must be interpolated across the faces "
"of cells. The process by which those scalars are interpolated is critical. "
"If the ``interpolate_before_map`` is left off, the color mapping occurs at "
"polygon points and  colors are interpolated, which is generally less "
"accurate whereas if the ``interpolate_before_map`` is on, then the scalars "
"will be interpolated across the topology of the dataset which is more "
"accurate."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:61
msgid ""
"To summarize, when ``interpolate_before_map`` is off, the colors are "
"interpolated after rendering and when ``interpolate_before_map`` is on, the "
"scalars are interpolated across the mesh and those values are mapped to "
"colors."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:66
msgid "So lets take a look at the difference:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:133
msgid ""
"Shown in the figure above, when not interpolating the scalars before "
"mapping, the colors (RGB values, not scalars) are interpolated between the "
"vertices by the underlying graphics library (OpenGL), and the colors shown "
"are not accurate."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:138
msgid "The same interpolation effect occurs for wireframe visualization too:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:202
msgid ""
"The cylinder mesh above is a great example dataset for this as it has a wide"
" spread between the vertices (points are only at the top and bottom of the "
"cylinder) which means high surface are of the mesh has to be interpolated."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:206
msgid ""
"However, most meshes don't have such a wide spread and the effects of color "
"interpolating are harder to notice. Let's take a look at a wavelet example "
"and try to figure out how the ``interpolate_before_map`` option affects its "
"rendering."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:274
msgid ""
"This time is pretty difficult to notice the differences - they are there, "
"subtle, but present. The differences become more apparent when we decrease "
"the number of colors in colormap. Let's take a look at the differences when "
"using eight discrete colors via the ``n_colors`` argument:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:341
msgid ""
"Left, ``interpolate_before_map`` OFF.  Right, ``interpolate_before_map`` ON."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:343
msgid ""
"Now that is much more compelling. On the right, the contours of the scalar "
"field are visible, but on the left, the contours are obscured due to the "
"color interpolation by OpenGL. In both cases, the colors at the vertices are"
" the same, the difference is how color is assigned between the vertices."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:348
msgid ""
"In our opinion, color interpolation is not a preferred default for "
"scientific visualization and is why we have chosen to set the "
"``interpolate_before_map`` flag to ``True``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:355
msgid "**Total running time of the script:** (0 minutes 1.794 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:366
msgid ""
":download:`Download Jupyter notebook: interpolate-before-map.ipynb "
"<interpolate-before-map.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/interpolate-before-map.rst:370
msgid ""
":download:`Download Python source code: interpolate-before-map.py "
"<interpolate-before-map.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_isovalue.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:24
msgid "Moving Isovalue"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:26
msgid "Make an animation of an isovalue through a volumetric dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:46
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>6998400</td></tr>\n"
"<tr><td>N Points</td><td>7109137</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.800e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.160e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.800e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>181, 217, 181</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>image_data</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>2.550e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:75
msgid ""
"Now lets make an array of all of the isovalues for which we want to show."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:92
msgid "Now let's create an initial isosurface that we can plot and move"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:109
msgid "Precompute the surfaces"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:126
msgid "Set a single surface as the one being plotted that can be overwritten"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:207
msgid "**Total running time of the script:** (0 minutes 26.410 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:218
msgid ":download:`Download Jupyter notebook: isovalue.ipynb <isovalue.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/isovalue.rst:222
msgid ":download:`Download Python source code: isovalue.py <isovalue.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_labels.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:22
msgid "Label Points"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:24
msgid "Use string arrays in a point set to label points"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:48
msgid "Label String Array"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:50
msgid ""
"This example will label the nodes of a mesh with a given array of string "
"labels for each of the nodes."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:70
msgid ""
"Add string labels to the point data - this associates a label with every "
"node:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:86
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>10</td></tr>\n"
"<tr><td>N Points</td><td>10</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>3.027e-01, 8.050e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.057e-02, 7.946e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>4.000e-02, 5.969e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>My Labels</td><td>Points</td><td><U7</td><td>1</td><td>nan</td><td>nan</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:114
msgid "Now plot the points with labels:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:144
msgid "Label Node Locations"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:146
msgid ""
"This example will label the nodes of a mesh with their coordinate locations"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:166
msgid "Create plotting class and add the unstructured grid"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:203
msgid "Label Scalar Values"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:205
msgid "This example will label each point with their scalar values"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:254
msgid "**Total running time of the script:** (0 minutes 0.820 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:265
msgid ":download:`Download Jupyter notebook: labels.ipynb <labels.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/labels.rst:269
msgid ":download:`Download Python source code: labels.py <labels.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_legend.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:22
msgid "Legends and glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:24
msgid "Using custom legends and glyphs within PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:46
msgid "Default legend for glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:48
msgid ""
"The method :func:`pyvista.PolyData.add_legend` is able to retrieve and use "
"the glyphs for each plot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:98
msgid "Using custom legends"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:100
msgid "You can use specific labels with :func:`pyvista.PolyData.add_legend`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:147
msgid "Using custom legend and glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:149
msgid ""
"You can use specific labels or glyphs even if they have been specified "
"before."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:196
msgid "**Total running time of the script:** (0 minutes 1.529 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:207
msgid ":download:`Download Jupyter notebook: legend.ipynb <legend.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/legend.rst:211
msgid ":download:`Download Python source code: legend.py <legend.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_lighting_mesh.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:24
msgid "Lighting Properties"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:26
msgid ""
"Control aspects of the rendered mesh's lighting such as Ambient, Diffuse, "
"and Specular. These options only work if the ``lighting`` argument to "
"``add_mesh`` is ``True`` (it's ``True`` by default)."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:30
msgid ""
"You can turn off all lighting for the given mesh by passing "
"``lighting=False`` to ``add_mesh``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:54
msgid "First, lets take a look at the mesh with default lighting conditions"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:98
msgid "What about with no lighting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:142
msgid "Demonstration of the specular property"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:182
msgid "Just specular"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:209
msgid "Specular power"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:236
msgid "Demonstration of all three in use"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:263
msgid ""
"For detailed control over lighting conditions in general see the "
":ref:`light_examples` examples."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:269
msgid "**Total running time of the script:** (0 minutes 12.582 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:280
msgid ""
":download:`Download Jupyter notebook: lighting_mesh.ipynb "
"<lighting_mesh.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lighting_mesh.rst:284
msgid ""
":download:`Download Python source code: lighting_mesh.py <lighting_mesh.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/linked.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_linked.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/linked.rst:24
msgid "Linked Views in Subplots"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/linked.rst:86
msgid "**Total running time of the script:** (0 minutes 2.186 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/linked.rst:97
msgid ":download:`Download Jupyter notebook: linked.ipynb <linked.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/linked.rst:101
msgid ":download:`Download Python source code: linked.py <linked.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_lookup-table.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:24
msgid "Lookup Tables"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:25
msgid "Demonstrate the usage of a lookup table within PyVista"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:27
msgid ""
"The :class:`pyvista.LookupTable` can be used to have fine-tuned control over"
" the mapping between a :class:`pyvista.DataSet`'s scalars and RGBA colors."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:49
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>56786</td></tr>\n"
"<tr><td>N Points</td><td>102578</td></tr>\n"
"<tr><td>X Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 3.250e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>Equivalent (von-Mises) Stress (psi)</b></td><td>Points</td><td>float32</td><td>1</td><td>1.437e-02</td><td>2.327e+01</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:77
msgid "Default Color Map - Lookup Table"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:78
msgid ""
"First, let's plot using the default color map, \"viridis\". Internally, "
"PyVista will automatically create a lookup table to map the scalars (stored "
"here within `point_data`) to RGBA colors. This is shown here as a nested "
"attribute to the :class:`pyvista.DataSetMapper` and it has a helpful "
"``repr`` method:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:124
msgid "Plot the Lookup Table"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:125
msgid ""
"You can also plot lookup table to see the mapping between the scalar values "
"(here, between 0 and 23.3) and RGBA colors."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:164
msgid "Plot the DataSet"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:165
msgid "Let's plot the dataset using the automatically generated lookup table."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:195
msgid "Create a Custom Lookup Table using a Matplotlib Color Map"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:196
msgid ""
"Here we create a lookup table with a narrow table range (same as ``clim``) "
"and color values above and below the range."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:229
#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:298
msgid "Plot the bracket with the custom colormap"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:230
msgid ""
"You can set assign the lookup table when using ``add_mesh`` with ``cmap=``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:261
msgid "Create a Custom Lookup Table using VTK's Methods"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:262
msgid ""
"If you want to create a completely unique color map, you can use attributes "
"like :attr:`pyvista.LookupTable.hue_range` and "
":attr:`pyvista.LookupTable.value_range` to create your own lookup table."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:299
msgid ""
"Assign this custom color map to the plotter and disable lighting to improve "
"the plot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:330
msgid "Custom colormap with widgets"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:331
msgid ""
"Here we plot the scalars and dynamically change the lookup table through "
"widgets. We create several overlapping single slider widgets to simulate a "
"double ended slider widget."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:335
msgid "This example just controls the alpha channel."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:405
msgid "Control Several Lookup Table Attributes"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:406
msgid ""
"Demonstrate the use of several slider bar widgets with lookup table "
"callbacks."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:502
msgid "**Total running time of the script:** (0 minutes 7.412 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:513
msgid ""
":download:`Download Jupyter notebook: lookup-table.ipynb <lookup-"
"table.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/lookup-table.rst:517
msgid ""
":download:`Download Python source code: lookup-table.py <lookup-table.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_mesh-picking.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:24
msgid "Picking Meshes"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:25
msgid ""
"This example demonstrates how to pick meshes using "
":func:`enable_mesh_picking() <pyvista.Plotter.enable_mesh_picking>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:45
msgid "Pick either a cube or a sphere using \"p\""
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:100
msgid "Deform the mesh after picking"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:101
msgid ""
"Pick to trigger a callback that \"shrinks\" the mesh each time it's "
"selected."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:159
msgid "Pick based on Actors"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:160
msgid "Return the picked actor to the callback"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:226
msgid "**Total running time of the script:** (0 minutes 0.770 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:237
msgid ""
":download:`Download Jupyter notebook: mesh-picking.ipynb <mesh-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/mesh-picking.rst:241
msgid ""
":download:`Download Python source code: mesh-picking.py <mesh-picking.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_movie.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:24
msgid "Create a MP4 Movie"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:26
msgid "Create an animated MP4 movie of a rendering scene."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:29
msgid ""
"This movie will appear static since MP4 movies will not be rendered on a "
"sphinx gallery example."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:108
msgid "**Total running time of the script:** (0 minutes 10.113 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:119
msgid ":download:`Download Jupyter notebook: movie.ipynb <movie.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie.rst:123
msgid ":download:`Download Python source code: movie.py <movie.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_movie_glyphs.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:24
msgid "Save a Movie Using Glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:26
msgid ""
"Create an animated GIF by generating glyphs using :func:`glyph() "
"<pyvista.DataSetFilters.glyph>` using :func:`pyvista.Sphere`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:49
msgid "Create sphere glyphs"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:109
msgid "Create the movie"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:164
msgid "**Total running time of the script:** (0 minutes 15.605 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:175
msgid ""
":download:`Download Jupyter notebook: movie_glyphs.ipynb "
"<movie_glyphs.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/movie_glyphs.rst:179
msgid ""
":download:`Download Python source code: movie_glyphs.py <movie_glyphs.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_moving_cmap.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:24
msgid "Create a GIF Movie of a Static Object with a Moving Colormap"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:25
msgid ""
"Generate a gif movie of a Hopf torus with a moving colormap, by updating the"
" scalars."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:118
msgid "**Total running time of the script:** (0 minutes 9.926 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:129
msgid ""
":download:`Download Jupyter notebook: moving_cmap.ipynb <moving_cmap.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/moving_cmap.rst:133
msgid ""
":download:`Download Python source code: moving_cmap.py <moving_cmap.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_multi-window.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:22
msgid "Multi-Window Plot"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:25
msgid "Subplotting: having multiple scenes in a single window"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:46
msgid ""
"This example shows how to create a multi-window plotter by specifying the "
"``shape`` parameter.  The window generated is a two by two window by setting"
" ``shape=(2, 2)``. Use the :func:`pyvista.Plotter.subplot` method to select "
"the subplot you wish to be the active subplot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:137
msgid ""
"Split the rendering window in half and subdivide it in a nr. of vertical or "
"horizontal subplots."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:191
msgid ""
"To get full flexibility over the layout grid, you can define the relative "
"weighting of rows and columns and register groups that can span over "
"multiple rows and columns. A group is defined through a tuple "
"``(rows,cols)`` of row and column indices or slices. The group always spans "
"from the smallest to the largest (row or column) id that is passed through "
"the list or slice."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:284
msgid "**Total running time of the script:** (0 minutes 2.656 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:295
msgid ""
":download:`Download Jupyter notebook: multi-window.ipynb <multi-"
"window.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/multi-window.rst:299
msgid ""
":download:`Download Python source code: multi-window.py <multi-window.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_opacity.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:24
msgid "Plot with Opacity"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:26
msgid ""
"Plot a mesh's scalar array with an opacity transfer function or opacity "
"mapping based on a scalar array."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:52
msgid "Global Value"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:54
msgid ""
"You can also apply a global opacity value to the mesh by passing a single "
"float between 0 and 1 which would enable you to see objects behind the mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:106
msgid ""
"Note that you can specify ``use_transparency=True`` to convert opacities to "
"transparencies in any of the following examples."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:112
msgid "Transfer Functions"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:114
msgid ""
"It's possible to apply an opacity mapping to any scalar array plotted. You "
"can specify either a single static value to make the mesh transparent on all"
" cells, or use a transfer function where the scalar array plotted is mapped "
"to the opacity. We have several predefined transfer functions."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:119
msgid "Opacity transfer functions are:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:121
msgid ""
"``'linear'``: linearly vary (increase) opacity across the plotted scalar "
"range from low to high"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:122
msgid ""
"``'linear_r'``: linearly vary (increase) opacity across the plotted scalar "
"range from high to low"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:123
msgid ""
"``'geom'``: on a log scale, vary (increase) opacity across the plotted "
"scalar range from low to high"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:124
msgid ""
"``'geom_r'``: on a log scale, vary (increase) opacity across the plotted "
"scalar range from high to low"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:125
msgid ""
"``'sigmoid'``: vary (increase) opacity on a sigmoidal s-curve across the "
"plotted scalar range from low to high"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:126
msgid ""
"``'sigmoid_r'``: vary (increase) opacity on a sigmoidal s-curve across the "
"plotted scalar range from high to low"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:214
msgid ""
"It's also possible to use your own transfer function that will be linearly "
"mapped to the scalar array plotted. For example, we can create an opacity "
"mapping as:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:233
msgid ""
"When given a minimized opacity mapping like that above, PyVista interpolates"
" it across a range of how many colors are shown when mapping the scalars. If"
" ``scipy`` is available, then a quadratic interpolation is used - otherwise,"
" a simple linear interpolation is used. Curious what that opacity transfer "
"function looks like? You can fetch it:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:269
msgid ""
"That opacity mapping will have an opacity of 0.0 at the minimum scalar "
"range, a value or 0.9 at the middle of the scalar range, and a value of 0.3 "
"at the maximum of the scalar range:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:316
msgid ""
"Opacity mapping is often useful when plotting DICOM images. For example, "
"download the sample knee DICOM image:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:334
msgid ""
"And here we inspect the DICOM image with a few different opacity mappings:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:396
msgid "Opacity by Array"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:398
msgid ""
"You can also use a scalar array associated with the mesh to give each cell "
"its own opacity/transparency value derived from a scalar field. For example,"
" an uncertainty array from a modelling result could be used to hide regions "
"of a mesh that are uncertain and highlight regions that are well resolved."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:403
msgid ""
"The following is a demonstration of plotting a mesh with colored values and "
"using a second array to control the transparency of the mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:430
msgid ""
"Make sure to flag ``use_transparency=True`` since we want areas of high "
"variance to have high transparency."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:433
msgid ""
"Also, since the opacity array must be between 0 and 1, we normalize the "
"temperature variance array by the maximum value.  That way high variance "
"will be completely transparent."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:497
msgid "**Total running time of the script:** (0 minutes 23.227 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:508
msgid ":download:`Download Jupyter notebook: opacity.ipynb <opacity.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/opacity.rst:512
msgid ":download:`Download Python source code: opacity.py <opacity.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_orbit.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:24
msgid "Orbiting"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:26
msgid "Orbit around a scene."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:29
msgid ""
"The quality of the movie will be better when using "
"``p.open_movie('orbit.mp4')`` instead of ``p.open_gif('orbit.gif')``"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:33
msgid ""
"For orbiting to work you first have to show the scene and leave the plotter "
"open with ``.show(auto_close=False)``.  You may also have to set "
"``pv.Plotter(off_screen=True)``"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:38
msgid ""
"Use ``lighting=False`` to reduce the size of the color space to avoid "
"\"jittery\" GIFs when showing the scalar bar."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:60
msgid "Orbit around the Mt. St Helens dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:167
msgid "**Total running time of the script:** (0 minutes 59.201 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:178
msgid ":download:`Download Jupyter notebook: orbit.ipynb <orbit.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/orbit.rst:182
msgid ":download:`Download Python source code: orbit.py <orbit.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_ortho-slices.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:24
msgid "Orthogonal Slices"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:26
msgid "View three orthogonal slices from a mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:28
msgid ""
"Use the :func:`pyvista.DataSetFilters.slice_orthogonal` filter to create "
"these slices simultaneously."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:57
msgid ""
"Create three slices. Easily control their locations with the ``x``, ``y``, "
"and ``z`` arguments."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:192
msgid "**Total running time of the script:** (0 minutes 3.158 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:203
msgid ""
":download:`Download Jupyter notebook: ortho-slices.ipynb <ortho-"
"slices.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ortho-slices.rst:207
msgid ""
":download:`Download Python source code: ortho-slices.py <ortho-slices.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_pbr.py>` to download"
" the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:24
msgid "Physically Based Rendering"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:26
msgid ""
"VTK 9 introduced Physically Based Rendering (PBR) and we have exposed that "
"functionality in PyVista. Read the `blog about PBR "
"<https://blog.kitware.com/vtk-pbr/>`_ for more details."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:30
msgid ""
"PBR is only supported for :class:`pyvista.PolyData` and can be triggered via"
" the ``pbr`` keyword argument of ``add_mesh``. Also use the ``metallic`` and"
" ``roughness`` arguments for further control."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:34
msgid ""
"Let's show off this functionality by rendering a high quality mesh of a "
"statue as though it were metallic."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:65
msgid ""
"Let's render the mesh with a base color of \"linen\" to give it a metal "
"looking finish."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:100
msgid "Show the variation of the metallic and roughness parameters."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:102
msgid ""
"Plot with metallic increasing from left to right and roughness increasing "
"from bottom to top."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:140
msgid "Combine custom lighting and physically based rendering."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:189
msgid "**Total running time of the script:** (0 minutes 49.241 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:200
msgid ":download:`Download Jupyter notebook: pbr.ipynb <pbr.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/pbr.rst:204
msgid ":download:`Download Python source code: pbr.py <pbr.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_plot-over-circular-"
"arc.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:22
msgid "Plot Scalars Over a Circular Arc"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:24
msgid "Interpolate the scalars of a dataset over a circular arc."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:45
#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:47
msgid "Volumetric Mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:47
msgid "Add the height scalars to a uniform 3D mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:91
msgid "Run the filter and produce a line plot."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:113
msgid "**Total running time of the script:** (0 minutes 0.300 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:124
msgid ""
":download:`Download Jupyter notebook: plot-over-circular-arc.ipynb <plot-"
"over-circular-arc.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-circular-arc.rst:128
msgid ""
":download:`Download Python source code: plot-over-circular-arc.py <plot-"
"over-circular-arc.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_plot-over-line.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:24
msgid "Plot Over Line"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:26
msgid "Plot the values of a dataset over a line through that dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:49
msgid "First a 3D mesh example to demonstrate"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:86
#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:150
msgid "Run the filter and produce a line plot"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:110
msgid "Flat Surface"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:112
msgid "We could also plot the values of a mesh that lies on a flat surface"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:179
msgid "**Total running time of the script:** (0 minutes 2.453 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:190
msgid ""
":download:`Download Jupyter notebook: plot-over-line.ipynb <plot-over-"
"line.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/plot-over-line.rst:194
msgid ""
":download:`Download Python source code: plot-over-line.py <plot-over-"
"line.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_point-cell-"
"scalars.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:24
msgid "Point Cell Scalars"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:26
msgid ""
"This example demonstrates how to add point scalars for each individual cell "
"to a dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:47
msgid ""
"load the first 4 cells from the example UnstructuredGrid. Note how the "
"number of points is less than 32 since all the points are joined in the "
"center."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:63
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>4</td></tr>\n"
"<tr><td>N Points</td><td>18</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 5.000e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>5</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>sample_point_scalars</td><td>Points</td><td>int64</td><td>1</td><td>1.000e+00</td><td>2.860e+02</td></tr>\n"
"<tr><td>VTKorigID</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>\n"
"<tr><td><b>sample_cell_scalars</b></td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>4.000e+00</td></tr>\n"
"<tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:95
msgid "Plot Point Scalars"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:96
msgid ""
"At this point it's possible to assign only point or cell scalars to this "
"dataset. First, let's just plot some simple point scalars."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:145
msgid "Plot Cell Scalars"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:146
msgid ""
"Next, let's plot cell scalars. We're simply assigning based on the cell "
"index."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:194
msgid "Splitting the Cells"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:195
msgid ""
"If you wanted to assign data to each point of each cell and plot that, it's "
"simply not possible since these hexahedral cells all share the same points. "
"To split up individual cells, separate them using "
":func:`pyvista.DataSetFilters.separate_cells`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:200
msgid ""
"With this filter the resulting :class:`pyvista.UnstructuredGrid` now "
"contains 32 points, or 8 for each cell. They are now fully separated with no"
" shared points."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:218
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>4</td></tr>\n"
"<tr><td>N Points</td><td>32</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 5.000e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>7</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>sample_point_scalars</td><td>Points</td><td>int64</td><td>1</td><td>1.000e+00</td><td>2.860e+02</td></tr>\n"
"<tr><td>VTKorigID</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>\n"
"<tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.000e+01</td></tr>\n"
"<tr><td>Point Data</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>1.700e+01</td></tr>\n"
"<tr><td>sample_cell_scalars</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>4.000e+00</td></tr>\n"
"<tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"<tr><td><b>Cell Data</b></td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:252
msgid "Plot Point Cell Data"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:253
msgid ""
"Now we can plot values for each point for each cell. This will still be "
"assigned to the point data."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:256
msgid ""
"Here we use :func:`numpy.hstack` for clarity, but as long as the length of "
"the data matches the number of points, you'll be able to use this approach."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:259
msgid ""
"See how the plotted values appear continuous within a cell and discontinuous"
" between cells. This matches how stresses and strains are calculated from "
"finite element solutions."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:314
msgid "**Total running time of the script:** (0 minutes 0.848 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:325
msgid ""
":download:`Download Jupyter notebook: point-cell-scalars.ipynb <point-cell-"
"scalars.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-cell-scalars.rst:329
msgid ""
":download:`Download Python source code: point-cell-scalars.py <point-cell-"
"scalars.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_point-clouds.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:24
msgid "Plotting Point Clouds"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:25
msgid ""
"This example shows you how to plot point clouds using PyVista using both the"
" ``'points'`` and ``'points_gaussian'`` styles."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:49
msgid "Compare the Plotting methods"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:50
msgid ""
"First, let's create a sample point cloud using :func:`numpy.random.random`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:84
msgid "Basic Plot"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:85
msgid ""
"We can simply plot this point cloud using the convenience "
":func:`pyvista.plot` function."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:114
msgid "Plot with Scalars"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:115
msgid ""
"That's quite boring, so let's spice things up by adding color. We can either"
" use a single scalar to plot the points. For example, the z coordinates."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:118
msgid "For fun, let's also render the points as spheres."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:151
msgid "Plot with RGBA"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:152
msgid ""
"Alternatively, we can color the point cloud using an RGBA array. This has "
"been normalized from (0, 1), but we could have also used a ``numpy.uint8`` "
"array from 0-255."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:182
msgid "Point Cloud Plot Styles"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:183
msgid ""
"PyVista supports the ``'points_gaussian'`` style, which renders points as "
"individual soft sprites. You have the option of displaying these as tight "
"\"spheres\" using ``render_points_as_spheres=True`` (default), or disabling "
"it to create softer points at the expense of render performance."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:188
msgid ""
"Here's the basic plot again, but with the style as ``'points_gaussian'``:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:214
msgid ""
"Here's a plotter with four combinations of the options side-by-side so you "
"can see for yourself the different options available when plotting these "
"points. PyVista tries to achieve sensible defaults, but should you find "
"these insufficient for your needs, feel free to play around with the various"
" options and find something that works for you."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:304
msgid "Orbit a Point Cloud"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:305
msgid ""
"Generate a plot orbiting around a point cloud. Color based on the distance "
"from the center of the cloud."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:350
msgid "**Total running time of the script:** (0 minutes 10.885 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:361
msgid ""
":download:`Download Jupyter notebook: point-clouds.ipynb <point-"
"clouds.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-clouds.rst:365
msgid ""
":download:`Download Python source code: point-clouds.py <point-clouds.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_point-picking.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:24
msgid "Picking points on a mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:25
msgid ""
"This example demonstrates how to pick points on meshes using "
":func:`enable_point_picking() <pyvista.Plotter.enable_point_picking>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:46
msgid "Pick points on a sphere"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:78
msgid "Ignore the 3D window"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:80
msgid ""
"In the above example, both points on the mesh and points in the 3d window "
"can be selected. It is possible instead pick only points on the mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:112
msgid "Modify which actors are pickable"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:114
msgid "After enabling point picking, we can modify which actors are pickable."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:150
msgid "Pick using the left-mouse button"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:181
msgid "**Total running time of the script:** (0 minutes 0.941 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:192
msgid ""
":download:`Download Jupyter notebook: point-picking.ipynb <point-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/point-picking.rst:196
msgid ""
":download:`Download Python source code: point-picking.py <point-picking.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_points-gaussian-"
"scale.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:23
msgid "Scaled Gaussian Points"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:24
msgid ""
"This example demonstrates how to plot spheres using the "
"``'points_gaussian'`` style and scale them by a dynamic radius."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:46
msgid ""
"First, generate the sphere positions and radii randomly on the edge of a "
"torus."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:77
msgid ""
"Next, create a PolyData object and add the sphere positions and radii as "
"data arrays."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:98
msgid ""
"Finally, plot the spheres using the ``points_gaussian`` style and scale them"
" by radius."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:136
msgid "Show the same plot with ``emissive=True``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:173
msgid "**Total running time of the script:** (0 minutes 0.614 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:184
msgid ""
":download:`Download Jupyter notebook: points-gaussian-scale.ipynb <points-"
"gaussian-scale.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/points-gaussian-scale.rst:188
msgid ""
":download:`Download Python source code: points-gaussian-scale.py <points-"
"gaussian-scale.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_scalar-bars.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:24
msgid "Customize Scalar Bars"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:26
msgid ""
"Walk through of all the different capabilities of scalar bars and how a user"
" can customize scalar bars."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:47
msgid ""
"By default, when plotting a dataset with a scalar array, a scalar bar for "
"that array is added. To turn off this behavior, a user could specify "
"``show_scalar_bar=False`` when calling ``.add_mesh()``. Let's start with a "
"sample dataset provide via PyVista to demonstrate the default behavior of "
"scalar bar plotting:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:85
msgid ""
"We could also plot the scene with an interactive scalar bar to move around "
"and place where we like by specifying passing keyword arguments to control "
"the scalar bar via the ``scalar_bar_args`` parameter in "
":func:`pyvista.Plotter.add_mesh`. The keyword arguments to control the "
"scalar bar are defined in :func:`pyvista.Plotter.add_scalar_bar`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:117
msgid "Or manually define the scalar bar's location:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:148
msgid "The text properties of the scalar bar can also be controlled:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:188
msgid "Labelling values outside of the scalar range"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:216
msgid ""
"Annotate values of interest using a dictionary. The key of the dictionary "
"must be the value to annotate, and the value must be the string label."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:251
msgid "**Total running time of the script:** (0 minutes 10.952 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:262
msgid ""
":download:`Download Jupyter notebook: scalar-bars.ipynb <scalar-bars.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/scalar-bars.rst:266
msgid ""
":download:`Download Python source code: scalar-bars.py <scalar-bars.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_screenshot.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:22
msgid "Saving Screenshots"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:48
msgid ""
"You can also take a screenshot without creating an interactive plot window "
"using the :class:`pyvista.Plotter`:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:96
msgid ""
"The ``img`` array can be used to plot the screenshot in ``matplotlib``:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:120
msgid "**Total running time of the script:** (0 minutes 0.372 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:131
msgid ""
":download:`Download Jupyter notebook: screenshot.ipynb <screenshot.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/screenshot.rst:135
msgid ":download:`Download Python source code: screenshot.py <screenshot.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:9
msgid ""
"**11:05.174** total execution time for 57 files **from examples/02-plot**:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_02-plot_edl.py` (``edl.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:36
msgid "01:12.948"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_02-plot_depth_of_field.py` (``depth_of_field.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:39
msgid "01:11.146"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_02-plot_orbit.py` (``orbit.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:42
msgid "00:59.201"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:44
msgid ":ref:`sphx_glr_examples_02-plot_pbr.py` (``pbr.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:45
msgid "00:49.241"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_02-plot_depth-peeling.py` (``depth-peeling.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:48
msgid "00:36.829"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:50
msgid ":ref:`sphx_glr_examples_02-plot_topo-map.py` (``topo-map.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:51
msgid "00:34.466"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_02-plot_volume.py` (``volume.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:54
msgid "00:33.924"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_examples_02-plot_background_image.py` "
"(``background_image.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:57
msgid "00:27.095"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:59
msgid ":ref:`sphx_glr_examples_02-plot_isovalue.py` (``isovalue.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:60
msgid "00:26.410"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:62
msgid ":ref:`sphx_glr_examples_02-plot_opacity.py` (``opacity.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:63
msgid "00:23.227"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_examples_02-plot_backface_props.py` (``backface_props.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:66
msgid "00:20.409"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:68
msgid ":ref:`sphx_glr_examples_02-plot_ssao.py` (``ssao.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:69
msgid "00:17.053"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:71
msgid ":ref:`sphx_glr_examples_02-plot_movie_glyphs.py` (``movie_glyphs.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:72
msgid "00:15.605"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:74
msgid ""
":ref:`sphx_glr_examples_02-plot_lighting_mesh.py` (``lighting_mesh.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:75
msgid "00:12.582"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:77
msgid ":ref:`sphx_glr_examples_02-plot_cmap.py` (``cmap.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:78
msgid "00:12.378"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:80
msgid ":ref:`sphx_glr_examples_02-plot_edges.py` (``edges.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:81
msgid "00:12.258"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:83
msgid ":ref:`sphx_glr_examples_02-plot_scalar-bars.py` (``scalar-bars.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:84
msgid "00:10.952"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:86
msgid ":ref:`sphx_glr_examples_02-plot_point-clouds.py` (``point-clouds.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:87
msgid "00:10.885"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:89
msgid ":ref:`sphx_glr_examples_02-plot_themes.py` (``themes.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:90
msgid "00:10.658"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:92
msgid ":ref:`sphx_glr_examples_02-plot_movie.py` (``movie.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:93
msgid "00:10.113"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:95
msgid ":ref:`sphx_glr_examples_02-plot_moving_cmap.py` (``moving_cmap.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:96
msgid "00:09.926"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:98
msgid ":ref:`sphx_glr_examples_02-plot_silhouette.py` (``silhouette.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:99
msgid "00:09.918"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:101
msgid ":ref:`sphx_glr_examples_02-plot_texture.py` (``texture.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:102
msgid "00:07.806"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:104
msgid ":ref:`sphx_glr_examples_02-plot_ghost-cells.py` (``ghost-cells.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:105
msgid "00:07.744"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:107
msgid ":ref:`sphx_glr_examples_02-plot_lookup-table.py` (``lookup-table.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:108
msgid "00:07.412"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:110
msgid ":ref:`sphx_glr_examples_02-plot_blurring.py` (``blurring.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:111
msgid "00:07.237"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:113
msgid ":ref:`sphx_glr_examples_02-plot_floors.py` (``floors.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:114
msgid "00:05.747"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:116
msgid ""
":ref:`sphx_glr_examples_02-plot_chart_overlays.py` (``chart_overlays.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:117
msgid "00:04.564"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:119
msgid ":ref:`sphx_glr_examples_02-plot_ortho-slices.py` (``ortho-slices.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:120
msgid "00:03.158"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:122
msgid ":ref:`sphx_glr_examples_02-plot_chart_basics.py` (``chart_basics.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:123
msgid "00:02.821"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:125
msgid ":ref:`sphx_glr_examples_02-plot_multi-window.py` (``multi-window.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:126
msgid "00:02.656"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:128
msgid ""
":ref:`sphx_glr_examples_02-plot_plot-over-line.py` (``plot-over-line.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:129
msgid "00:02.453"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:131
msgid ""
":ref:`sphx_glr_examples_02-plot_composite-picking.py` (``composite-"
"picking.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:132
msgid "00:02.271"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:134
msgid ":ref:`sphx_glr_examples_02-plot_gif.py` (``gif.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:135
msgid "00:02.194"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:137
msgid ":ref:`sphx_glr_examples_02-plot_linked.py` (``linked.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:138
msgid "00:02.186"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:140
msgid ""
":ref:`sphx_glr_examples_02-plot_interpolate-before-map.py` (``interpolate-"
"before-map.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:141
msgid "00:01.794"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:143
msgid ""
":ref:`sphx_glr_examples_02-plot_anti-aliasing.py` (``anti-aliasing.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:144
msgid "00:01.562"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:146
msgid ":ref:`sphx_glr_examples_02-plot_shading.py` (``shading.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:147
msgid "00:01.531"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:149
msgid ":ref:`sphx_glr_examples_02-plot_legend.py` (``legend.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:150
msgid "00:01.529"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:152
msgid ":ref:`sphx_glr_examples_02-plot_bounds.py` (``bounds.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:153
msgid "00:01.287"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:155
msgid ":ref:`sphx_glr_examples_02-plot_spherical.py` (``spherical.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:156
msgid "00:01.190"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:158
msgid ":ref:`sphx_glr_examples_02-plot_color_cycler.py` (``color_cycler.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:159
msgid "00:01.126"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:161
msgid ":ref:`sphx_glr_examples_02-plot_vertices.py` (``vertices.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:162
msgid "00:00.946"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:164
msgid ""
":ref:`sphx_glr_examples_02-plot_element-picking.py` (``element-picking.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:165
msgid "00:00.942"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:167
msgid ""
":ref:`sphx_glr_examples_02-plot_point-picking.py` (``point-picking.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:168
msgid "00:00.941"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:170
msgid ""
":ref:`sphx_glr_examples_02-plot_point-cell-scalars.py` (``point-cell-"
"scalars.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:171
msgid "00:00.848"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:173
msgid ":ref:`sphx_glr_examples_02-plot_labels.py` (``labels.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:174
msgid "00:00.820"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:176
msgid ""
":ref:`sphx_glr_examples_02-plot_vector-component.py` (``vector-"
"component.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:177
msgid "00:00.813"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:179
msgid ":ref:`sphx_glr_examples_02-plot_mesh-picking.py` (``mesh-picking.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:180
msgid "00:00.770"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:182
msgid ":ref:`sphx_glr_examples_02-plot_image_depth.py` (``image_depth.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:183
msgid "00:00.679"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:185
msgid ""
":ref:`sphx_glr_examples_02-plot_points-gaussian-scale.py` (``points-"
"gaussian-scale.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:186
msgid "00:00.614"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:188
msgid ":ref:`sphx_glr_examples_02-plot_clear.py` (``clear.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:189
msgid "00:00.526"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:191
msgid ""
":ref:`sphx_glr_examples_02-plot_surface-picking.py` (``surface-picking.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:192
msgid "00:00.467"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:194
msgid ""
":ref:`sphx_glr_examples_02-plot_distance-along-spline.py` (``distance-along-"
"spline.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:195
msgid "00:00.431"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:197
msgid ":ref:`sphx_glr_examples_02-plot_screenshot.py` (``screenshot.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:198
msgid "00:00.372"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:200
msgid ""
":ref:`sphx_glr_examples_02-plot_plot-over-circular-arc.py` (``plot-over-"
"circular-arc.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:201
msgid "00:00.300"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:203
msgid ""
":ref:`sphx_glr_examples_02-plot_distance_measurement.py` "
"(``distance_measurement.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/sg_execution_times.rst:204
msgid "00:00.211"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_shading.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:24
msgid "Types of Shading"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:26
msgid "Comparison of default, flat shading vs. smooth shading."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:45
msgid ""
"PyVista supports two types of shading: flat and smooth shading that uses "
"VTK's Phong shading algorithm."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:48
msgid "This is a plot with the default flat shading."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:94
msgid "Here's the same sphere with smooth shading."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:139
msgid ""
"Note how smooth shading makes edges that should be sharp look odd, it's "
"because the points of these normals are averaged between two faces that have"
" a sharp angle between them.  You can avoid this by enabling "
"``split_sharp_edges``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:145
msgid ""
"You can configure the splitting angle with the optional ``feature_angle`` "
"keyword argument."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:191
msgid ""
"We can even plot the edges that will be split using "
":func:`extract_feature_edges "
"<pyvista.DataSetFilters.extract_feature_edges>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:251
msgid ""
"The ``split_sharp_edges`` keyword argument is compatible with physically "
"based rendering as well."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:284
msgid "**Total running time of the script:** (0 minutes 1.531 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:295
msgid ":download:`Download Jupyter notebook: shading.ipynb <shading.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/shading.rst:299
msgid ":download:`Download Python source code: shading.py <shading.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_silhouette.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:24
msgid "Silhouette Highlight"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:26
msgid ""
"Extract a subset of the edges of a polygonal mesh to generate an outline "
"(silhouette) of a mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:46
msgid "Prepare a triangulated ``PolyData``"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:63
msgid "Now we can display the silhouette of the mesh and compare the result:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:117
msgid ""
"Maybe the default parameters are not enough to really notice the silhouette."
" But by using a ``dict``, it is possible to modify the properties of the "
"outline. For example, color and width could be specified like so:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:171
msgid ""
"By default, PyVista uses a pretty aggressive decimation level but we might "
"want to disable it. It is also possible to display sharp edges:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:247
msgid "Here is another example:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:313
msgid "**Total running time of the script:** (0 minutes 9.918 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:324
msgid ""
":download:`Download Jupyter notebook: silhouette.ipynb <silhouette.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/silhouette.rst:328
msgid ":download:`Download Python source code: silhouette.py <silhouette.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_spherical.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:22
msgid "Plot data in spherical coordinates"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:24
msgid ""
"Generate and visualize meshes from data in longitude-latitude coordinates."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:160
msgid "Visualize vectors in spherical coordinates Vertical wind"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:244
msgid "Isurfaces of 3D data in spherical coordinates"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:317
msgid "**Total running time of the script:** (0 minutes 1.190 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:328
msgid ""
":download:`Download Jupyter notebook: spherical.ipynb <spherical.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/spherical.rst:332
msgid ":download:`Download Python source code: spherical.py <spherical.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_ssao.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:24
msgid "Surface Space Ambient Occlusion"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:26
msgid "Demonstrate the usage of surface space ambient occlusion."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:28
msgid ""
"Surface space ambient occlusion (SSAO) can approximate shadows more "
"efficiently than ray-tracing and produce similar results. Use this when you "
"wish to plot the occlusion effect that nearby meshes have on each other by "
"blocking nearby light sources."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:33
msgid ""
"See `Kitware: Screen-Space Ambient Occlusion "
"<https://www.kitware.com/ssao/>`_ for more details"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:60
msgid "Plot with defaults"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:61
msgid ""
"Let's plot this without SSAO. Note how the lighting is identical for each "
"cube."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:92
#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:199
msgid "Plot with SSAO"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:93
msgid ""
"Now plot this with SSAO. Note how adjacent cubes affect the lighting of each"
" other to make it look less artificial."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:96
msgid ""
"With a low ``kernel_size``, the image will be rendered quickly at the "
"expense of quality."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:128
msgid "Improve the SSAO rendering"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:129
msgid ""
"Here we've increased the ``kernel_size`` to improve the quality of the SSAO "
"and also enabled SSAA anti-aliasing to smooth out any of the artifacts "
"created from SSAO."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:163
msgid "Plot a CAD model without SSAO"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:164
msgid ""
"Here's another example without SSAO. This is a CAD model of a Raspberry PI "
"case."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:200
msgid ""
"Here's the same CAD model with SSAO. Note how we had to increase both "
"``radius`` and ``bias`` due to the relative scene size."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:203
msgid ""
"Note that the occlusion still seems quite small. In the next example we will"
" increase the ``radius`` to increase the effect of the occlusion."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:237
msgid "Increase the Radius"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:238
msgid ""
"Here we've increased the ``radius`` to the point where the case occlusion "
"now seems realistic without it becoming overwhelming."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:270
msgid "**Total running time of the script:** (0 minutes 17.053 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:281
msgid ":download:`Download Jupyter notebook: ssao.ipynb <ssao.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/ssao.rst:285
msgid ":download:`Download Python source code: ssao.py <ssao.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_surface-picking.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:24
msgid "Picking a Point on the Surface of a Mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:25
msgid ""
"This example demonstrates how to pick meshes using "
":func:`enable_surface_point_picking() "
"<pyvista.Plotter.enable_surface_point_picking>`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:28
msgid "This allows you to pick points on the surface of a mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:47
msgid "Create a mesh and enable picking using the default settings."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:79
msgid ""
"Enable a callback that creates a cube at the right-clicked point and add a "
"label at the point as well it."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:117
msgid "**Total running time of the script:** (0 minutes 0.467 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:128
msgid ""
":download:`Download Jupyter notebook: surface-picking.ipynb <surface-"
"picking.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/surface-picking.rst:132
msgid ""
":download:`Download Python source code: surface-picking.py <surface-"
"picking.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_texture.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:24
msgid "Applying Textures"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:26
msgid "Plot a mesh with an image projected onto it as a texture."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:48
msgid ""
"Texture mapping is easily implemented using PyVista. Many of the geometric "
"objects come preloaded with texture coordinates, so quickly creating a "
"surface and displaying an image is simply:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:102
msgid ""
"But what if your dataset doesn't have texture coordinates? Then you can "
"harness the :func:`pyvista.DataSetFilters.texture_map_to_plane` filter to "
"properly map an image to a dataset's surface. For example, let's map that "
"same image of bricks to a curvey surface:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:161
msgid ""
"Display scalar data along with a texture by ensuring the "
"``interpolate_before_map`` setting is ``False`` and specifying both the "
"``texture`` and ``scalars`` arguments."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:211
msgid "Note that this process can be completed with any image texture."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:260
msgid "Textures from Files"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:262
msgid ""
"What about loading your own texture from an image? This is often most easily"
" done using the :func:`pyvista.read_texture` function - simply pass an image"
" file's path, and this function with handle making a ``vtkTexture`` for you "
"to use."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:314
msgid "NumPy Arrays as Textures"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:316
msgid ""
"Want to use a programmatically built image? :class:`pyvista.ImageData` "
"objects can be converted to textures using :func:`pyvista.image_to_texture` "
"and 3D NumPy (X by Y by RGB) arrays can be converted to textures using "
":func:`pyvista.numpy_to_texture`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:388
msgid "Create a GIF Movie with updating textures"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:389
msgid "Generate a moving gif from an active plotter with updating textures."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:448
msgid "Textures with Transparency"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:450
msgid ""
"Textures can also specify per-pixel opacity values. The image must contain a"
" 4th channel specifying the opacity value from 0 [transparent] to 255 [fully"
" visible]. To enable this feature just pass the opacity array as the 4th "
"channel of the image as a 3 dimensional matrix with shape [nrows, ncols, 4] "
":func:`pyvista.numpy_to_texture`."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:456
msgid "Here we can download an image that has an alpha channel:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:524
msgid "Repeating Textures"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:526
msgid ""
"What if you have a single texture that you'd like to repeat across a mesh? "
"Simply define the texture coordinates for all nodes explicitly."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:529
msgid ""
"Here we create the texture coordinates to fill up the grid with several "
"mappings of a single texture. In order to do this we must define texture "
"coordinates outside of the typical ``(0, 1)`` range:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:554
msgid ""
"By defining texture coordinates that range ``(0, 4)`` on each axis, we will "
"produce 4 repetitions of the same texture on this mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:557
msgid ""
"Then we must associate those texture coordinates with the mesh through the "
":attr:`pyvista.DataSet.active_texture_coordinates` property."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:576
msgid "Now display all the puppies."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:625
msgid "Spherical Texture Coordinates"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:626
msgid ""
"We have a built in convienance method for mapping textures to spherical "
"coordinate systems much like the planar mapping demoed above."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:676
msgid ""
"The helper method above does not always produce the desired texture "
"coordinates, so sometimes it must be done manually. Here is a great, user "
"contributed example from `this support issue "
"<https://github.com/pyvista/pyvista-support/issues/257>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:680
msgid ""
"Manually create the texture coordinates for a globe map. First, we create "
"the mesh that will be used as the globe. Note the `start_theta` for a slight"
" overlappig"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:746
msgid "**Total running time of the script:** (0 minutes 7.806 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:757
msgid ":download:`Download Jupyter notebook: texture.ipynb <texture.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/texture.rst:761
msgid ":download:`Download Python source code: texture.py <texture.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_themes.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:24
msgid "Control Global and Local Plotting Themes"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:26
msgid ""
"PyVista allows you to set global and local plotting themes to easily set "
"default plotting parameters."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:46
msgid "Define a simple plotting routine for comparing the themes."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:72
msgid ""
"PyVista's default color theme is chosen to be generally easy on your eyes "
"and is best used when working long hours on your visualization project.  The"
" grey background and warm colormaps are chosen to make sure 3D renderings do"
" not drastically change the brightness of your screen when working in dark "
"environments."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:78
msgid ""
"Here's an example of our default plotting theme - this is what you would see"
" by default after running any of our examples locally."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:125
msgid "PyVista also ships with a few plotting themes:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:127
msgid ""
"``'ParaView'``: this is designed to mimic ParaView's default plotting theme."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:128
msgid ""
"``'dark'``: this is designed to be night-mode friendly with dark backgrounds"
" and color schemes."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:129
msgid ""
"``'document'``: this is built for use in document style plotting and making "
"publication quality figures."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:133
msgid "Demo the ``'ParaView'`` theme."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:181
msgid "Demo the ``'dark'`` theme."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:228
msgid ""
"Demo the ``'document'`` theme.  This theme is used on our online examples."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:275
msgid ""
"Note that you can also use color gradients for the background of the "
"plotting window."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:327
msgid "Modifying the Global Theme"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:328
msgid ""
"You can control how meshes are displayed by setting individual parameters "
"when plotting like ``mesh.plot(show_edges=True)``, or by setting a global "
"theme.  You can also control individual parameters how all meshes are "
"displayed by default via ``pyvista.global_theme``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:333
msgid ""
"Here, we print out the current global defaults for all ``pyvista`` meshes.  "
"These values have been changed by the previous \"Document\" theme."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:445
msgid ""
"By default, edges are not shown on meshes unless explicitly specified when "
"plotting a mesh via ``show_edges=True``.  You can change this default "
"behavior globally by changing the default parameter."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:495
msgid ""
"You can reset pyvista to default behavior with ``restore_defaults``. Note "
"that the figure's color was reset to the default \"white\" color rather than"
" the 'lightblue' color default with the document theme.  Under the hood, "
"each theme applied changes the global plot defaults stored within "
"``pyvista.global_theme.``"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:547
msgid "Creating a Custom Theme and Applying it Globally"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:548
msgid ""
"You can create a custom theme by modifying one of the existing themes and "
"then loading it into the global plotting defaults."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:551
msgid ""
"Here, we create a dark theme that plots meshes red by default while showing "
"edges."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:608
msgid "Creating a Custom Theme and Applying it to a Single Plotter"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:609
msgid ""
"In this example, we create a custom theme from the base \"default\" theme "
"and then apply it to a single plotter.  Note that this does not change the "
"behavior of the global \"defaults\", which are still set to the modified "
"``DarkTheme``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:614
msgid ""
"This approach carries the advantage that you can maintain several themes and"
" apply them to one or more plotters."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:670
msgid "Alternatively, set the theme of an instance of ``Plotter``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:719
msgid "Reset to use the document theme"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:736
msgid "**Total running time of the script:** (0 minutes 10.658 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:747
msgid ":download:`Download Jupyter notebook: themes.ipynb <themes.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/themes.rst:751
msgid ":download:`Download Python source code: themes.py <themes.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_topo-map.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:24
msgid "Topographic Map"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:26
msgid ""
"This is very similar to the :ref:`texture_example` example except it is "
"focused on plotting aerial imagery from a GeoTIFF on top of some topography "
"mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:51
msgid "Start by loading the elevation data and a topographic map."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:71
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>StructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1677401</td></tr>\n"
"<tr><td>N Points</td><td>1680000</td></tr>\n"
"<tr><td>X Bounds</td><td>1.810e+06, 1.831e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.640e+06, 5.658e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>7.339e+02, 2.787e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>1400, 1200, 1</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>7.339e+02</td><td>2.787e+03</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:99
msgid "Let's inspect the imagery that we just loaded."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:130
msgid ""
"Once you have a topography mesh loaded as a surface mesh (we use a "
":class:`pyvista.StructuredGrid` here) and an image loaded as a "
":class:`pyvista.Texture` using :func:`pyvista.read_texture`, then you can "
"map that imagery to the surface mesh as follows:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:152
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>436733</td></tr>\n"
"<tr><td>N Points</td><td>222110</td></tr>\n"
"<tr><td>X Bounds</td><td>1.818e+06, 1.825e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>5.645e+06, 5.653e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.381e+03, 2.787e+03</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalar1of1</b></td><td>Points</td><td>float64</td><td>1</td><td>1.381e+03</td><td>2.787e+03</td></tr>\n"
"<tr><td>Texture Coordinates</td><td>Points</td><td>float32</td><td>2</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:180
msgid "Now display it. Note that the imagery is aligned as we expect."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:224
msgid "And here is a 3D perspective."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:268
msgid ""
"We could also display the entire region by extracting the surrounding region"
" and plotting the texture mapped local topography and the outside area"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:327
msgid "**Total running time of the script:** (0 minutes 34.466 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:338
msgid ":download:`Download Jupyter notebook: topo-map.ipynb <topo-map.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/topo-map.rst:342
msgid ":download:`Download Python source code: topo-map.py <topo-map.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_vector-"
"component.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:22
msgid "Plot Vector Component"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:24
msgid "Plot a single component of a vector as a scalar array."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:26
msgid ""
"We can plot individual components of multi-component arrays with the "
"``component`` argument  of the ``add_mesh`` method."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:48
msgid "Download an example notched beam stress"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:66
msgid ""
"The default behavior with no component specified is to use the vector "
"magnitude. We can access each component by specifying the component "
"argument."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:116
msgid "**Total running time of the script:** (0 minutes 0.813 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:127
msgid ""
":download:`Download Jupyter notebook: vector-component.ipynb <vector-"
"component.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vector-component.rst:131
msgid ""
":download:`Download Python source code: vector-component.py <vector-"
"component.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_vertices.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:22
msgid "Visible Vertices"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:24
msgid "Display vertices on a mesh in the same fashion as edge visibility."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:47
msgid ""
"We can easily display all vertices of a mesh with a ``points`` style "
"representation when plotting:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:95
msgid ""
"However, we often want to see the vertices of a mesh rendered atop the "
"surface geometry. Much like how we can render the edges of a mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:143
msgid ""
"In order to display the vertices atop a mesh's surface geometry, simply pass"
" ``show_vertices=True`` to render them along side the original geometry."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:147
msgid ""
"Vertex styling can be changed using ``vertex_color``, ``vertex_opacity``, "
"and ``vertex_style``."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:202
msgid ""
"If you wish to have further control over the way surface points are plotted "
"alongside the surface geometry, extract the surface points and plot them "
"separately."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:206
msgid ""
"The first step is to extract the outer surface geometry of the mesh then "
"grab all the points of that extraction."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:225
msgid ""
"Now that we have the vertices extracted, we can use :func:`add_points() "
"<pyvista.Plotter.add_points>` to render them along side the original "
"geometry."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:229
msgid "Color the points by their Y position."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:285
msgid "**Total running time of the script:** (0 minutes 0.946 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:296
msgid ":download:`Download Jupyter notebook: vertices.ipynb <vertices.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/vertices.rst:300
msgid ":download:`Download Python source code: vertices.py <vertices.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_02-plot_volume.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:26
msgid ""
"Volume render uniform mesh types like :class:`pyvista.ImageData` or 3D NumPy"
" arrays."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:29
msgid ""
"This also explores how to extract a volume of interest (VOI) from a "
":class:`pyvista.ImageData` using the "
":func:`pyvista.ImageDataFilters.extract_subset` filter."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:51
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>10225800</td></tr>\n"
"<tr><td>N Points</td><td>10368384</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.497e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.786e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 2.000e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>208, 248, 201</td></tr>\n"
"<tr><td>Spacing</td><td>7.230e-01, 7.230e-01, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>SLCImage</b></td><td>Points</td><td>uint8</td><td>1</td><td>0.000e+00</td><td>1.740e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:81
msgid "Simple Volume Render"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:113
msgid "Opacity Mappings"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:115
msgid ""
"Or use the :func:`pyvista.Plotter.add_volume` method like below. Note that "
"here we use a non-default opacity mapping to a sigmoid:"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:145
msgid "You can also use a custom opacity mapping"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:175
msgid ""
"We can also use a shading technique when volume rendering with the ``shade``"
" option"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:210
msgid "Cool Volume Examples"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:212
msgid "Here are a few more cool volume rendering examples."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:217
msgid "Head Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:251
msgid "Bolt-Nut MultiBlock Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:253
msgid ""
"See how we set interpolation to ``'linear'`` here to smooth out scalars of "
"each individual cell to make a more appealing plot. Two actor are returned "
"by ``add_volume`` because ``bolt_nut`` is a :class:`pyvista.MultiBlock` "
"dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:291
msgid "Frog Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:325
msgid "Extracting a VOI"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:327
msgid ""
"Use the :func:`pyvista.ImageDataFilters.extract_subset` filter to extract a "
"volume of interest/subset volume to volume render. This is ideal when "
"dealing with particularly large volumes and you want to volume render only a"
" specific region."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:346
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>11003760</td></tr>\n"
"<tr><td>N Points</td><td>11156040</td></tr>\n"
"<tr><td>X Bounds</td><td>4.130e+05, 6.920e+05</td></tr>\n"
"<tr><td>Y Bounds</td><td>3.864e+06, 4.096e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>-5.479e+04, 5.302e+03</td></tr>\n"
"<tr><td>Dimensions</td><td>280, 233, 171</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+03, 1.000e+03, 3.535e+02</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>data</b></td><td>Points</td><td>float32</td><td>1</td><td>9.782e-15</td><td>1.000e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:408
msgid ""
"Woah, that's a big volume. We probably don't want to volume render the whole"
" thing. So let's extract a region of interest under the volcano."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:411
msgid ""
"The region we will extract will be between nodes 175 and 200 on the x-axis, "
"between nodes 105 and 132 on the y-axis, and between nodes 98 and 170 on the"
" z-axis."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:444
msgid "Ah, much better. Let's now volume render that region of interest."
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:477
msgid "**Total running time of the script:** (0 minutes 33.924 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:488
msgid ":download:`Download Jupyter notebook: volume.ipynb <volume.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/02-plot/volume.rst:492
msgid ":download:`Download Python source code: volume.py <volume.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_animation.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:24
msgid "Animation"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:26
msgid ""
"This example demonstrates how to create a simple animation. A timer is used "
"to move a sphere across a scene."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:29
msgid ""
"Inspired by `VTK Animation Examples "
"<https://examples.vtk.org/site/Python/Utilities/Animation/>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:89
msgid "**Total running time of the script:** (0 minutes 0.185 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:100
msgid ""
":download:`Download Jupyter notebook: animation.ipynb <animation.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/animation.rst:104
msgid ":download:`Download Python source code: animation.py <animation.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_box-widget.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:24
msgid "Box Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:26
msgid ""
"The box widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_box_widget` and "
":func:`pyvista.Plotter.clear_box_widgets` methods respectively. When "
"enabling the box widget, you must provide a custom callback function "
"otherwise the box would appear and do nothing - the callback functions are "
"what allow us to leverage the widget to perform a task like "
"clipping/cropping."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:33
msgid ""
"Considering that using a box to clip/crop a mesh is one of the most common "
"use cases, we have included a helper method that will allow you to add a "
"mesh to a scene with a box widget that controls its extent, the "
":func:`pyvista.Plotter.add_mesh_clip_box` method."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:86
#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:67
msgid "After interacting with the scene, the clipped mesh is available as:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:115
msgid "**Total running time of the script:** (0 minutes 17.639 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:126
msgid ""
":download:`Download Jupyter notebook: box-widget.ipynb <box-widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/box-widget.rst:130
msgid ":download:`Download Python source code: box-widget.py <box-widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_checkbox-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:24
msgid "Checkbox Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:26
msgid "Use a checkbox to turn on/off the visibility of meshes in a scene."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:28
msgid ""
"See :func:`pyvista.Plotter.add_checkbox_button_widget` for more details."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:48
msgid "Single Checkbox"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:86
msgid "Multiple Checkboxes"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:88
msgid ""
"In this example, we will add many meshes to a scene with unique colors and "
"create corresponding checkboxes for those meshes of the same color to toggle"
" their visibility in the scene."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:170
msgid "**Total running time of the script:** (0 minutes 0.796 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:181
msgid ""
":download:`Download Jupyter notebook: checkbox-widget.ipynb <checkbox-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/checkbox-widget.rst:185
msgid ""
":download:`Download Python source code: checkbox-widget.py <checkbox-"
"widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_clip-volume.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:24
msgid "Clip Volume Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:25
msgid ""
"If you have a structured dataset like a :class:`pyvista.ImageData` or "
":class:`pyvista.RectilinearGrid`, you can clip it using the "
":func:`pyvista.Plotter.add_volume_clip_plane` widget to better see the "
"internal structure of the dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:49
msgid "Create the Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:50
msgid ""
"Create a dense :class:`pyvista.ImageData` with dimensions ``(200, 200, "
"200)`` and set the active scalars to distance from the :attr:`center "
"<pyvista.DataSet.center>` of the grid."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:73
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>7880599</td></tr>\n"
"<tr><td>N Points</td><td>8000000</td></tr>\n"
"<tr><td>X Bounds</td><td>0.000e+00, 1.990e+02</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 1.990e+02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 1.990e+02</td></tr>\n"
"<tr><td>Dimensions</td><td>200, 200, 200</td></tr>\n"
"<tr><td>Spacing</td><td>1.000e+00, 1.000e+00, 1.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>scalars</b></td><td>Points</td><td>float64</td><td>1</td><td>8.660e-01</td><td>1.723e+02</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:103
msgid "Generate the Opacity Array"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:104
msgid ""
"Create a banded opacity array such that our dataset shows \"rings\" at "
"certain values. Have this increase such that higher values (values farther "
"away from the center) are more opaque."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:127
msgid "Plot a Single Clip Plane Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:128
msgid "Plot the volume with a single clip plane."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:130
msgid ""
"Reverse the opacity array such that portions closer to the center are more "
"opaque."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:161
msgid "Plot Multiple Clip Planes"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:162
msgid ""
"Plot the dataset using the :func:`pyvista.Plotter.add_volume_clip_plane` "
"with the output from :func:`pyvista.Plotter.add_volume` Enable constant "
"interaction by setting the ``interaction_event`` to ``'always'``."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:166
msgid ""
"Disable the arrows to make the plot a bit clearer and flip the opacity "
"array."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:207
msgid "**Total running time of the script:** (0 minutes 15.401 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:218
msgid ""
":download:`Download Jupyter notebook: clip-volume.ipynb <clip-volume.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/clip-volume.rst:222
msgid ""
":download:`Download Python source code: clip-volume.py <clip-volume.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:2283
msgid "Widgets"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:10
#: ../../pyvista/doc/source/examples/index.rst:2285
msgid ""
"PyVista has several widgets that can be added to the rendering scene to "
"control filters like clipping, slicing, and thresholding - specifically "
"there are widgets to control the positions of boxes, planes, and lines or "
"slider bars which can all be highly customized through the use of custom "
"callback functions."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:16
#: ../../pyvista/doc/source/examples/index.rst:2291
msgid ""
"Here we'll take a look at the various widgets, some helper methods that "
"leverage those widgets to do common tasks, and demonstrate how to leverage "
"the widgets for user defined tasks and processing routines."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:27
#: ../../pyvista/doc/source/examples/index.rst:2302
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"how to create a simple animation. A timer is used to move a sphere ac...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:36
#: ../../pyvista/doc/source/examples/index.rst:2311
msgid ":ref:`sphx_glr_examples_03-widgets_animation.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:38
#: ../../pyvista/doc/source/examples/index.rst:2313
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Animation</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:44
#: ../../pyvista/doc/source/examples/index.rst:2319
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The box widget can be "
"enabled and disabled by the pyvista.Plotter.add_box_widget and "
"pyvista.Pl...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:53
#: ../../pyvista/doc/source/examples/index.rst:2328
msgid ":ref:`sphx_glr_examples_03-widgets_box-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:55
#: ../../pyvista/doc/source/examples/index.rst:2330
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Box Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:61
#: ../../pyvista/doc/source/examples/index.rst:2336
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a checkbox to turn "
"on/off the visibility of meshes in a scene.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:70
#: ../../pyvista/doc/source/examples/index.rst:2345
msgid ":ref:`sphx_glr_examples_03-widgets_checkbox-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:72
#: ../../pyvista/doc/source/examples/index.rst:2347
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Checkbox Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:78
#: ../../pyvista/doc/source/examples/index.rst:2353
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Clip Volume Widget\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:87
#: ../../pyvista/doc/source/examples/index.rst:2362
msgid ":ref:`sphx_glr_examples_03-widgets_clip-volume.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:89
#: ../../pyvista/doc/source/examples/index.rst:2364
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Clip Volume Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:95
#: ../../pyvista/doc/source/examples/index.rst:2370
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The line widget can be "
"enabled and disabled by the pyvista.Plotter.add_line_widget and "
"pyvista....\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:104
#: ../../pyvista/doc/source/examples/index.rst:2379
msgid ":ref:`sphx_glr_examples_03-widgets_line-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:106
#: ../../pyvista/doc/source/examples/index.rst:2381
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Line Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:112
#: ../../pyvista/doc/source/examples/index.rst:2387
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Use a class based callback "
"to track multiple slider widgets for updating a single mesh.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:121
#: ../../pyvista/doc/source/examples/index.rst:2396
msgid ":ref:`sphx_glr_examples_03-widgets_multi-slider-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:123
#: ../../pyvista/doc/source/examples/index.rst:2398
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Multiple Slider Widgets</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:129
#: ../../pyvista/doc/source/examples/index.rst:2404
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The plane widget can be "
"enabled and disabled by the pyvista.Plotter.add_plane_widget and "
"pyvist...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:138
#: ../../pyvista/doc/source/examples/index.rst:2413
msgid ":ref:`sphx_glr_examples_03-widgets_plane-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:140
#: ../../pyvista/doc/source/examples/index.rst:2415
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plane Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:146
#: ../../pyvista/doc/source/examples/index.rst:2421
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The slider widget can be "
"enabled and disabled by the pyvista.Plotter.add_slider_widget and pyvi...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:155
#: ../../pyvista/doc/source/examples/index.rst:2430
msgid ":ref:`sphx_glr_examples_03-widgets_slider-bar-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:157
#: ../../pyvista/doc/source/examples/index.rst:2432
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Slider Bar Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:163
#: ../../pyvista/doc/source/examples/index.rst:2438
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The sphere widget can be "
"enabled and disabled by the pyvista.Plotter.add_sphere_widget and pyvi...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:172
#: ../../pyvista/doc/source/examples/index.rst:2447
msgid ":ref:`sphx_glr_examples_03-widgets_sphere-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:174
#: ../../pyvista/doc/source/examples/index.rst:2449
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Sphere Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:180
#: ../../pyvista/doc/source/examples/index.rst:2455
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\" A spline widget can be "
"enabled and disabled by the pyvista.Plotter.add_spline_widget and "
"pyvis...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:189
#: ../../pyvista/doc/source/examples/index.rst:2464
msgid ":ref:`sphx_glr_examples_03-widgets_spline-widget.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/index.rst:191
#: ../../pyvista/doc/source/examples/index.rst:2466
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Spline Widget</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_line-widget.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:24
msgid "Line Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:26
msgid ""
"The line widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_line_widget` and "
":func:`pyvista.Plotter.clear_line_widgets` methods respectively. "
"Unfortunately, PyVista does not have any helper methods to utilize this "
"widget, so it is necessary to pass a custom callback method."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:32
msgid ""
"One particularly fun example is to use the line widget to create a source "
"for the :func:`pyvista.DataSetFilters.streamlines` filter. Again note the "
"use of the ``name`` argument in ``add_mesh``."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:104
#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:96
#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:159
#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:212
#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:113
#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:160
#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:108
#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:170
#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:276
msgid "And here is a screen capture of a user interacting with this"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:111
msgid "**Total running time of the script:** (0 minutes 0.558 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:122
msgid ""
":download:`Download Jupyter notebook: line-widget.ipynb <line-widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/line-widget.rst:126
msgid ""
":download:`Download Python source code: line-widget.py <line-widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_multi-slider-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:22
msgid "Multiple Slider Widgets"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:24
msgid ""
"Use a class based callback to track multiple slider widgets for updating a "
"single mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:27
msgid ""
"In this example we simply change a few parameters for the "
":func:`pyvista.Sphere` method, but this could easily be applied to any mesh-"
"generating/altering code."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:135
msgid "**Total running time of the script:** (0 minutes 0.251 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:146
msgid ""
":download:`Download Jupyter notebook: multi-slider-widget.ipynb <multi-"
"slider-widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/multi-slider-widget.rst:150
msgid ""
":download:`Download Python source code: multi-slider-widget.py <multi-"
"slider-widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_plane-widget.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:24
msgid "Plane Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:26
msgid ""
"The plane widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_plane_widget` and "
":func:`pyvista.Plotter.clear_plane_widgets` methods respectively. As with "
"all widgets, you must provide a custom callback method to utilize that "
"plane. Considering that planes are most commonly used for clipping and "
"slicing meshes, we have included two helper methods for doing those tasks."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:33
msgid "Let's use a plane to clip a mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:102
msgid "Or you could slice a mesh using the plane widget:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:129
msgid "After interacting with the scene, the slice is available as:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:165
msgid ""
"Or you could leverage the plane widget for some custom task like glyphing a "
"vector field along that plane. Note that we have to pass a ``name`` when "
"calling ``add_mesh`` to ensure that there is only one set of glyphs plotted "
"at a time."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:218
msgid ""
"Further, a user can disable the arrow vector by setting the "
"``normal_rotation`` argument to ``False``. For example, here we "
"programmatically set the normal vector on which we want to translate the "
"plane and we disable the arrow to prevent its rotation."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:249
msgid ""
"The vector is also forcibly disabled anytime the ``assign_to_axis`` argument"
" is set."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:278
msgid ""
"Additionally, users can modify the interaction event that triggers the "
"callback functions handled by the different plane widget helpers through the"
" ``interaction_event`` keyword argument when available. For example, we can "
"have continuous slicing by using the ``InteractionEvent`` observer."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:310
msgid ""
"And here is a screen capture of a user interacting with this continuously "
"via the ``InteractionEvent`` observer:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:318
msgid "**Total running time of the script:** (0 minutes 10.619 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:329
msgid ""
":download:`Download Jupyter notebook: plane-widget.ipynb <plane-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/plane-widget.rst:333
msgid ""
":download:`Download Python source code: plane-widget.py <plane-widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:9
msgid ""
"**00:50.428** total execution time for 10 files **from "
"examples/03-widgets**:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_03-widgets_box-widget.py` (``box-widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:36
msgid "00:17.639"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_03-widgets_clip-volume.py` (``clip-volume.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:39
msgid "00:15.401"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_03-widgets_plane-widget.py` (``plane-widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:42
msgid "00:10.619"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_examples_03-widgets_slider-bar-widget.py` (``slider-bar-"
"widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:45
msgid "00:03.354"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_03-widgets_sphere-widget.py` (``sphere-widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:48
msgid "00:01.227"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_03-widgets_checkbox-widget.py` (``checkbox-"
"widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:51
msgid "00:00.796"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_examples_03-widgets_line-widget.py` (``line-widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:54
msgid "00:00.558"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_examples_03-widgets_spline-widget.py` (``spline-widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:57
msgid "00:00.397"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_03-widgets_multi-slider-widget.py` (``multi-slider-"
"widget.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:60
msgid "00:00.251"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:62
msgid ":ref:`sphx_glr_examples_03-widgets_animation.py` (``animation.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sg_execution_times.rst:63
msgid "00:00.185"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_slider-bar-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:24
msgid "Slider Bar Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:26
msgid ""
"The slider widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_slider_widget` and "
":func:`pyvista.Plotter.clear_slider_widgets` methods respectively. This is "
"one of the most versatile widgets as it can control a value that can be used"
" for just about anything."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:49
msgid ""
"One helper method we've added is the "
":func:`pyvista.Plotter.add_mesh_threshold` method which leverages the slider"
" widget to control a thresholding value."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:84
msgid "After interacting with the scene, the threshold mesh is available as:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:120
msgid "Custom Callback"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:122
msgid ""
"Or you could leverage a custom callback function that takes a single value "
"from the slider as its argument to do something like control the resolution "
"of a mesh. Again note the use of the ``name`` argument in ``add_mesh``:"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:167
msgid "**Total running time of the script:** (0 minutes 3.354 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:178
msgid ""
":download:`Download Jupyter notebook: slider-bar-widget.ipynb <slider-bar-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/slider-bar-widget.rst:182
msgid ""
":download:`Download Python source code: slider-bar-widget.py <slider-bar-"
"widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_sphere-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:22
msgid "Sphere Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:24
msgid ""
"The sphere widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_sphere_widget` and "
":func:`pyvista.Plotter.clear_sphere_widgets` methods respectively. This is a"
" very versatile widget as it can control vertex location that can be used to"
" control or update the location of just about anything."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:30
msgid ""
"We don't have any convenient helper methods that utilize this widget out of "
"the box, but we have added a lot of ways to use this widget so that you can "
"easily add several widgets to a scene."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:34
msgid "Let's look at a few use cases that all update a surface mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:54
msgid "Example A"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:56
msgid "Use a single sphere widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:115
msgid "Example B"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:117
msgid "Use several sphere widgets at once"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:177
msgid "Example C"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:179
msgid ""
"This one is the coolest - use four sphere widgets to update perturbations on"
" a surface and interpolate between them with some boundary conditions"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:283
msgid "**Total running time of the script:** (0 minutes 1.227 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:294
msgid ""
":download:`Download Jupyter notebook: sphere-widget.ipynb <sphere-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/sphere-widget.rst:298
msgid ""
":download:`Download Python source code: sphere-widget.py <sphere-widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_03-widgets_spline-"
"widget.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:22
msgid "Spline Widget"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:25
msgid ""
"A spline widget can be enabled and disabled by the "
":func:`pyvista.Plotter.add_spline_widget` and "
":func:`pyvista.Plotter.clear_spline_widgets` methods respectively. This "
"widget allows users to interactively create a poly line (spline) through a "
"scene and use that spline."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:31
msgid ""
"A common task with splines is to slice a volumetric dataset using an "
"irregular path. To do this, we have added a convenient helper method which "
"leverages the :func:`pyvista.DataSetFilters.slice_along_line` filter named "
":func:`pyvista.Plotter.add_mesh_slice_spline`."
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:112
msgid "**Total running time of the script:** (0 minutes 0.397 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:123
msgid ""
":download:`Download Jupyter notebook: spline-widget.ipynb <spline-"
"widget.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/03-widgets/spline-widget.rst:127
msgid ""
":download:`Download Python source code: spline-widget.py <spline-widget.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_04-lights_actors.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:24
msgid "Light Actors"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:26
msgid ""
"Positional lights in PyVista have customizable beam shapes, see the "
":ref:`light_beam_shape_example` example. Spotlights are special in the sense"
" that they are unidirectional lights with a finite position, so they can be "
"visualized using a cone."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:31
msgid ""
"This is exactly the purpose of a ``vtk.vtkLightActor``, the functionality of"
" which can be enabled for spotlights:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:102
msgid ""
"Light actors can be very useful when designing complex scenes where "
"spotlights are involved in lighting."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:167
msgid ""
"One thing to watch out for is that the light actors are represented such "
"that their cone has a fixed height. This implies that for very large cone "
"angles we typically end up with enormous light actors, in which case setting"
" a manual camera position before rendering is usually a good idea. "
"Increasing the first example's cone angle and omitting the manual camera "
"positioning exemplifies the problem:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:230
msgid "**Total running time of the script:** (0 minutes 1.169 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:241
msgid ":download:`Download Jupyter notebook: actors.ipynb <actors.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/actors.rst:245
msgid ":download:`Download Python source code: actors.py <actors.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_04-lights_attenuation.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:24
msgid "Attenuation"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:26
msgid ""
"Attenuation is the phenomenon of light's intensity being gradually dampened "
"as it propagates through a medium. In PyVista positional lights can show "
"attenuation. The quadratic attenuation model uses three parameters to "
"describe attenuation: a constant, a linear and a quadratic parameter. These "
"parameters describe the decrease of the beam intensity as a function of the "
"distance, `I(r)`. In a broad sense the constant, linear and quadratic "
"components correspond to `I(r) = 1`, `I(r) = 1/r` and `I(r) = 1/r^2` decay "
"of the intensity with distance from the point source. In all cases a larger "
"attenuation value (of a given kind) means stronger dampening (weaker light "
"at a given distance)."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:36
msgid ""
"So the constant attenuation parameter corresponds roughly to a constant "
"intensity component. The linear and the quadratic attenuation parameters "
"correspond to intensity components that decay with distance from the source."
" For the same parameter value the quadratic attenuation produces a beam that"
" is shorter in range than that produced by linear attenuation."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:42
msgid "Three spotlights with three different attenuation profiles each:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:105
msgid ""
"It's not too obvious but it's visible that the rightmost light with "
"quadratic attenuation has a shorter range than the middle one with linear "
"attenuation. Although it seems that even the leftmost light with constant "
"attenuation loses its brightness gradually, this partly has to do with the "
"fact that we sliced the light beams very close to their respective axes, "
"meaning that light hits the surface in a very small angle. Altering the "
"scene such that the lights are further away from the plane changes this:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:171
msgid "Now the relationship of the three kinds of attenuation seems clearer."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:173
msgid ""
"For a more practical comparison, let's look at planes that are perpendicular"
" to the axis of each light (making use of the fact that shadowing between "
"objects is not handled by default):"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:240
msgid "**Total running time of the script:** (0 minutes 0.681 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:251
msgid ""
":download:`Download Jupyter notebook: attenuation.ipynb <attenuation.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/attenuation.rst:255
msgid ""
":download:`Download Python source code: attenuation.py <attenuation.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_04-lights_beam_shape.py>` to"
" download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:24
msgid "Beam Shape"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:26
msgid ""
"The default directional lights are infinitely distant point sources, for "
"which the only geometric customization option is the choice of beam "
"direction defined by the light's position and focal point. Positional "
"lights, however, have more options for beam customization."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:31
msgid "Consider two hemispheres:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:88
msgid ""
"We can see that the default lighting does a very good job of articulating "
"the shape of the hemispheres."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:91
msgid ""
"Let's shine a directional light on them, positioned between the hemispheres "
"and oriented along their centers:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:150
msgid ""
"Both hemispheres have their surface lit on the side that faces the light. "
"This is consistent with the point source positioned at infinity, directed "
"from the light's nominal position toward the focal point."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:154
msgid ""
"Now let's change the light to a positional light (but not a spotlight):"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:214
msgid ""
"Now the inner surface of both hemispheres is lit. A positional light with a "
"cone angle of 90 degrees (or more) acts as a point source located at the "
"light's nominal position. It could still display attenuation, see the "
":ref:`attenuation_example` example."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:219
msgid ""
"Switching to a spotlight (i.e. a positional light with a cone angle less "
"than 90 degrees) will enable beam shaping using the "
":py:attr:`pyvista.Light.exponent` property. Let's put our hemispheres side "
"by side for this, and put a light in the center of each: one spotlight, one "
"merely positional."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:293
msgid ""
"Even though the two lights only differ by a fraction of a degree in cone "
"angle, the beam shaping effect enabled for spotlights causes a marked "
"difference in the result."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:297
msgid ""
"Once we have a spotlight we can change its :py:attr:`pyvista.Light.exponent`"
" to make the beam shape sharper or broader. Three spotlights with varying "
"sharpness:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:366
msgid ""
"The spotlight with exponent 0.3 is practically uniform, and the one with "
"exponent 5 is visibly focused along the axis of the light."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:372
msgid "**Total running time of the script:** (0 minutes 1.306 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:383
msgid ""
":download:`Download Jupyter notebook: beam_shape.ipynb <beam_shape.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/beam_shape.rst:387
msgid ":download:`Download Python source code: beam_shape.py <beam_shape.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:2478
msgid "Lighting"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:10
#: ../../pyvista/doc/source/examples/index.rst:2480
msgid ""
"These examples demonstrate how to take fine-tuned control over lighting "
"conditions in a scene. Explore them to learn how to go beyond the default "
"lighting setup to truly bring out the best of your visualization:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:14
#: ../../pyvista/doc/source/examples/index.rst:2484
msgid "Choose between preset lighting systems for plotters"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:15
#: ../../pyvista/doc/source/examples/index.rst:2485
msgid "Disable lighting on the mesh level"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:16
#: ../../pyvista/doc/source/examples/index.rst:2486
msgid "Learn about the different light types"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:17
#: ../../pyvista/doc/source/examples/index.rst:2487
msgid "Customize the shape of positional lights"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:18
#: ../../pyvista/doc/source/examples/index.rst:2488
msgid "Use actors to visualize the beams of spotlights"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:27
#: ../../pyvista/doc/source/examples/index.rst:2497
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Positional lights in "
"PyVista have customizable beam shapes, see the light_beam_shape_example "
"ex...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:36
#: ../../pyvista/doc/source/examples/index.rst:2506
msgid ":ref:`sphx_glr_examples_04-lights_actors.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:38
#: ../../pyvista/doc/source/examples/index.rst:2508
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Light Actors</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:44
#: ../../pyvista/doc/source/examples/index.rst:2514
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Attenuation is the "
"phenomenon of light&#x27;s intensity being gradually dampened as it "
"propagates th...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:53
#: ../../pyvista/doc/source/examples/index.rst:2523
msgid ":ref:`sphx_glr_examples_04-lights_attenuation.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:55
#: ../../pyvista/doc/source/examples/index.rst:2525
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Attenuation</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:61
#: ../../pyvista/doc/source/examples/index.rst:2531
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The default directional "
"lights are infinitely distant point sources, for which the only "
"geometr...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:70
#: ../../pyvista/doc/source/examples/index.rst:2540
msgid ":ref:`sphx_glr_examples_04-lights_beam_shape.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:72
#: ../../pyvista/doc/source/examples/index.rst:2542
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Beam Shape</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:78
#: ../../pyvista/doc/source/examples/index.rst:2548
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Lights come in three "
"types:\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:87
#: ../../pyvista/doc/source/examples/index.rst:2557
msgid ":ref:`sphx_glr_examples_04-lights_light_types.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:89
#: ../../pyvista/doc/source/examples/index.rst:2559
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Light Types</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:95
#: ../../pyvista/doc/source/examples/index.rst:2565
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Disable mesh lighting.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:104
#: ../../pyvista/doc/source/examples/index.rst:2574
msgid ":ref:`sphx_glr_examples_04-lights_mesh_lighting.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:106
#: ../../pyvista/doc/source/examples/index.rst:2576
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Disabling Mesh Lighting</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:112
#: ../../pyvista/doc/source/examples/index.rst:2582
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The pyvista.Plotter class "
"comes with three options for the default lighting system:\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:121
#: ../../pyvista/doc/source/examples/index.rst:2591
msgid ":ref:`sphx_glr_examples_04-lights_plotter_builtins.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:123
#: ../../pyvista/doc/source/examples/index.rst:2593
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plotter Lighting Systems</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:129
#: ../../pyvista/doc/source/examples/index.rst:2599
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Demonstrate the usage of "
"lights and shadows in PyVista.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:138
#: ../../pyvista/doc/source/examples/index.rst:2608
msgid ":ref:`sphx_glr_examples_04-lights_shadows.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/index.rst:140
#: ../../pyvista/doc/source/examples/index.rst:2610
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Shadows</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_04-lights_light_types.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:24
msgid "Light Types"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:26
msgid "Lights come in three types:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:28
msgid ""
"headlights, the axis of which always coincides with the view of the camera,"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:29
msgid ""
"camera lights, which move together with the camera, but which can occupy any"
" fixed relative position with respect to the camera,"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:31
msgid ""
"scene lights, the position of which is fixed to the scene, and which is thus"
" unaffected by moving the camera. This is the default type."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:35
msgid "Headlight"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:37
msgid ""
"For headlights the :py:attr:`pyvista.Camera.position` and "
":py:attr:`pyvista.Camera.focal_point` properties are meaningless. No matter "
"where you move the camera, the light always emanates from the view point:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:100
msgid "Camera light"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:102
msgid ""
"Camera lights define their :py:attr:`pyvista.Camera.position` and "
":py:attr:`pyvista.Camera.focal_point` properties in a coordinate system that"
" is local to the camera. The coordinates in the scene's coordinate system "
"can be accessed through the :py:attr:`pyvista.Light.world_position` and "
":py:attr:`pyvista.Light.world_focal_point` read-only properties, "
"respectively. For specifics of the local coordinate system used for the "
"coordinates please see the documentation of "
":func:`pyvista.Light.set_camera_light`."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:161
msgid "Scene light"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:163
msgid ""
"Scene lights are attached to the scene, their position and focal point are "
"interpreted as global coordinates:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:214
msgid "**Total running time of the script:** (0 minutes 2.275 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:225
msgid ""
":download:`Download Jupyter notebook: light_types.ipynb <light_types.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/light_types.rst:229
msgid ""
":download:`Download Python source code: light_types.py <light_types.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_04-lights_mesh_lighting.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:24
msgid "Disabling Mesh Lighting"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:26
msgid "Disable mesh lighting."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:28
msgid ""
"While plotters have a default set of lights and there are many options for "
"customizing lighting conditions in general, meshes have the option to opt "
"out of lighting altogether. Pass ``lighting=False`` to "
":func:`pyvista.Plotter.add_mesh` to disable lighting for the given mesh:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:89
msgid ""
"Due to the obvious lack of depth detail this mostly makes sense for meshes "
"with non-trivial colors or textures. If it weren't for the edges being "
"drawn, the second mesh would be practically impossible to understand even "
"with the option to interactively explore the surface:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:137
msgid ""
"For further examples about fine-tuning mesh properties that affect light "
"rendering, see the :ref:`lighting_properties_example` example."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:143
msgid "**Total running time of the script:** (0 minutes 0.773 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:154
msgid ""
":download:`Download Jupyter notebook: mesh_lighting.ipynb "
"<mesh_lighting.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/mesh_lighting.rst:158
msgid ""
":download:`Download Python source code: mesh_lighting.py <mesh_lighting.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_04-lights_plotter_builtins.py>` to download the "
"full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:24
msgid "Plotter Lighting Systems"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:26
msgid ""
"The :class:`pyvista.Plotter` class comes with three options for the default "
"lighting system:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:29
msgid "a light kit consisting of a headlight and four camera lights,"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:30
msgid ""
"an illumination system containing three lights arranged around the camera,"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:31
msgid "no lighting."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:33
msgid ""
"With meshes that don't have depth information encoded in their color the "
"importance of an appropriate lighting setup becomes paramount for accurate "
"visualization."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:38
msgid "Light kit"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:40
msgid ""
"The default ``lighting='light kit'`` option recreates a lighting setup that "
"corresponds to a ``vtk.vtkLightKit``. We can check what type of lights this "
"lighting comprises:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:77
msgid "Add a white terrain to the scene:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:127
msgid "Three-lights illumination"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:129
msgid ""
"Switching to three-lights illumination gives a different character to the "
"figure, in this case showing less contrast when viewing the mountain from "
"the top, but having more contrast with views closer to the side. This "
"becomes especially clear when exploring the figures interactively."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:179
msgid "Again we can check what kind of lights this setting uses:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:211
msgid "Custom lighting"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:213
msgid ""
"We can introduce our own lighting from scratch by disabling any lighting on "
"plotter initialization. Adding a single scene light to a scene will often "
"result in ominous visuals due to objects having larger regions in shadow."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:268
msgid "Custom lighting with shadows"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:270
msgid ""
"Here, we ``enable_shadows`` to enhance the effect that the lighting angle "
"has.  It has a subtle, but realistic effect.  Notice the sharp shadows due "
"to the mountaintop."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:323
msgid "**Total running time of the script:** (0 minutes 7.520 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:334
msgid ""
":download:`Download Jupyter notebook: plotter_builtins.ipynb "
"<plotter_builtins.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/plotter_builtins.rst:338
msgid ""
":download:`Download Python source code: plotter_builtins.py "
"<plotter_builtins.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:9
msgid ""
"**00:21.970** total execution time for 7 files **from examples/04-lights**:"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_04-lights_shadows.py` (``shadows.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:36
msgid "00:08.245"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_04-lights_plotter_builtins.py` "
"(``plotter_builtins.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:39
msgid "00:07.520"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_04-lights_light_types.py` (``light_types.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:42
msgid "00:02.275"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:44
msgid ":ref:`sphx_glr_examples_04-lights_beam_shape.py` (``beam_shape.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:45
msgid "00:01.306"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:47
msgid ":ref:`sphx_glr_examples_04-lights_actors.py` (``actors.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:48
msgid "00:01.169"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_04-lights_mesh_lighting.py` (``mesh_lighting.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:51
msgid "00:00.773"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:53
msgid ":ref:`sphx_glr_examples_04-lights_attenuation.py` (``attenuation.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/sg_execution_times.rst:54
msgid "00:00.681"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_04-lights_shadows.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:24
msgid "Shadows"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:26
msgid "Demonstrate the usage of lights and shadows in PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:48
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>871414</td></tr>\n"
"<tr><td>N Points</td><td>437645</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-6.182e-02, 6.692e-02</td></tr>\n"
"<tr><td>Y Bounds</td><td>-9.431e-02, 7.927e-02</td></tr>\n"
"<tr><td>Z Bounds</td><td>5.273e-02, 1.972e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:70
msgid "Using two lights, plot the Stanford Dragon with shadows."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:169
msgid ""
"Show light penetrating several planes.  Adjust the light intensity and the "
"``shadow_attenuation`` to change how many planes the light can go through."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:238
msgid ""
"Here, we use a lower shadow_attenuation value to demonstrate how the light "
"can travel through more planes."
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:306
msgid "**Total running time of the script:** (0 minutes 8.245 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:317
msgid ":download:`Download Jupyter notebook: shadows.ipynb <shadows.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/04-lights/shadows.rst:321
msgid ":download:`Download Python source code: shadows.py <shadows.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/index.rst:6
#: ../../pyvista/doc/source/examples/index.rst:2621
msgid "Common"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:2623
msgid ""
"The following are a collection of examples addressing common tasks and "
"frequently asked questions when working with PyVista. These examples, while "
"possibly complex, focus on single-purpose solutions to help users understand"
" specific functionality."
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/index.rst:13
#: ../../pyvista/doc/source/examples/index.rst:2628
msgid ""
"Feel free to contribute examples or explore the FAQ-like structure, and "
"check out our `GitHub Discussions "
"<https://github.com/pyvista/pyvista/discussions>`_ for more context."
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/index.rst:24
#: ../../pyvista/doc/source/examples/index.rst:2639
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Using pyvista and numpy, "
"generate a 3D point cloud, project it to a plane, and tessellate it.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/index.rst:33
#: ../../pyvista/doc/source/examples/index.rst:2648
msgid ":ref:`sphx_glr_examples_98-common_project-points-tessellate.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/index.rst:35
#: ../../pyvista/doc/source/examples/index.rst:2650
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Project points to a plane and Tessellate</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_98-common_project-points-"
"tessellate.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:22
msgid "Project points to a plane and Tessellate"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:24
msgid ""
"Using pyvista and numpy, generate a 3D point cloud, project it to a plane, "
"and tessellate it."
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:27
msgid ""
"This demonstrates how to use "
":class:`pyvista.UnstructuredGridFilters.delaunay_2d` and a simple numpy "
"function that projects points to a plane."
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:50
msgid "Project Points"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:51
msgid "Create a point cloud and project it to a plane."
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:93
msgid "Visualize the Result"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:160
msgid "**Total running time of the script:** (0 minutes 0.349 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:171
msgid ""
":download:`Download Jupyter notebook: project-points-tessellate.ipynb "
"<project-points-tessellate.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/project-points-tessellate.rst:175
msgid ""
":download:`Download Python source code: project-points-tessellate.py "
"<project-points-tessellate.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:9
msgid ""
"**00:00.349** total execution time for 1 file **from examples/98-common**:"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_examples_98-common_project-points-tessellate.py` (``project-"
"points-tessellate.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/98-common/sg_execution_times.rst:36
msgid "00:00.349"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_add-example.py>`"
" to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:24
msgid "Adding a New Gallery Example"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:25
msgid ""
"This example demonstrates how to add a new PyVista `Sphinx Gallery "
"<https://sphinx-gallery.github.io/>`_ example as well as being a template "
"that can be used in their creation."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:29
msgid "Each example should have a reference tag/key in the form:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:31
msgid "``.. _<example-name>_example:``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:33
msgid ""
"The ``.. _`` is necessary. Everything that follows is your reference tag, "
"which can potentially be used within a docstring. As convention, we keep all"
" references all in ``snake_case``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:37
msgid ""
"This section should give a brief overview of what the example is about "
"and/or demonstrates.  The title should be changed to reflect the topic your "
"example covers."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:41
msgid "New examples should be added as python scripts to:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:43
msgid "``examples/<index>-<directory-name>/<some-example>.py``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:46
msgid ""
"Avoid creating new directories unless absolutely necessary.If you *must* "
"create a new folder, make sure to add a ``README.txt`` containing a "
"reference, a title and a single sentence description of the folder. "
"Otherwise the new folder will be ignored by Sphinx."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:51
msgid "Example file names should be hyphen separated snake case:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:53
msgid "``some-example.py``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:55
msgid ""
"After this preamble is complete, the first code block begins. This is where "
"you typically set up your imports."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:59
msgid ""
"By default, the documentation scrapper will generate both a static image and"
" an interactive widget for each plot. If you want to turn this feature off "
"define at the top of your file:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:64
msgid "``# sphinx_gallery_start_ignore``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:66
msgid "``PYVISTA_GALLERY_FORCE_STATIC_IN_DOCUMENT = True``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:68
msgid "``# sphinx_gallery_end_ignore``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:70
msgid ""
"If you want to use static images only for some of your plots. Define "
"``PYVISTA_GALLERY_FORCE_STATIC`` before the ``plot``/``show`` command that "
"produces the image you want to turn into static."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:100
msgid "Section Title"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:101
msgid ""
"Code blocks can be broken up with text \"sections\" which are interpreted as"
" restructured text."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:104
msgid ""
"This will also be translated into a markdown cell in the generated jupyter "
"notebook or the HTML page."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:107
msgid ""
"Sections can contain any information you may have regarding the example such"
" as step-by-step comments or notes regarding motivations etc."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:110
msgid ""
"As in Jupyter notebooks, if a statement is unassigned at the end of a code "
"block, output will be generated and printed to the screen according to its "
"``__repr__`` method.  Otherwise, you can use ``print()`` to output text."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:129
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1680</td></tr>\n"
"<tr><td>N Points</td><td>842</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-4.993e-01, 4.993e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>-4.965e-01, 4.965e-01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-5.000e-01, 5.000e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>1</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>Normals</td><td>Points</td><td>float32</td><td>3</td><td>-1.000e+00</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:158
msgid "Plots and images"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:159
msgid ""
"If you use anything that outputs an image (for example, "
":func:`pyvista.Plotter.show`) the resulting image will be rendered within "
"the output HTML."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:164
msgid ""
"Unless ``sphinx_gallery_thumbnail_number = <int>`` is included at the top of"
" the example script, first figure (this one) will be used for the gallery "
"thumbnail image."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:168
msgid "Also note that this image number uses one based indexing."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:215
msgid "Caveat - Plotter must be within One Cell"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:216
msgid ""
"It's not possible for a single :class:`pyvista.Plotter` object across "
"multiple cells because these are closed out automatically at the end of a "
"cell."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:220
msgid ""
"Here we just exercise the :class:`pyvista.Actor` ``repr`` for demonstrating "
"why you might want to instantiate a plotter without showing it in the same "
"cell."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:310
msgid "This Cell Cannot Run the Plotter"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:311
msgid "The plotter will already be closed by ``sphinx_gallery``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:336
msgid "Animations"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:337
msgid ""
"You can even create animations, and while there is a full example in "
":ref:`movie_example`, this cell explains how you can create an animation "
"within a single cell."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:341
msgid "Here, we explode a simple sphere."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:389
msgid "Adding Example Files"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:390
msgid ""
"PyVista has a variety of example files all stored at `pyvista/vtk_data "
"<https://github.com/pyvista/vtk-data>`_, and you can add the file by "
"following the directions there."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:394
msgid ""
"Under the hood, PyVista uses `pooch <https://github.com/fatiando/pooch>`_, "
"and you can easily access any files added with "
":func:`pyvista.examples.downloads.download_file`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:423
msgid "Adding a Wrapped Example"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:424
msgid ""
"While it's possible to simply download a file and then read it in, it's "
"better for you to write a wrapped ``download_<example-dataset>()`` within "
"``/pyvista/examples/downloads.py``. For example :func:`download_bunny() "
"<pyvista.examples.downloads.download_bunny>` downloads and reads with "
":func:`pyvista.read`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:430
msgid ""
"If you intend on adding an example file, you should add a new function in "
"``downloads.py`` to make it easy for users to add example files."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:483
msgid "**Total running time of the script:** (0 minutes 2.391 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:494
msgid ""
":download:`Download Jupyter notebook: add-example.ipynb <add-example.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/add-example.rst:498
msgid ""
":download:`Download Python source code: add-example.py <add-example.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_antarctica-"
"compare.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:24
msgid "Compare Field Across Mesh Regions"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:26
msgid ""
"Here is some velocity data from a glacier modelling simulation that is "
"compared across nodes in the simulation. We have simplified the mesh to have"
" the simulation node value already on the mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:30
msgid ""
"This was originally posted to `pyvista/pyvista-support#83 "
"<https://github.com/pyvista/pyvista-support/issues/83>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:32
msgid ""
"The modeling results are courtesy of `Urruty Benoit "
"<https://github.com/BenoitURRUTY>`_ and  are from the `Elmer/Ice "
"<http://elmerice.elmerfem.org>`_ simulation software."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:58
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1106948</td></tr>\n"
"<tr><td>N Points</td><td>557470</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>-2.506e+06, 2.743e+06</td></tr>\n"
"<tr><td>Y Bounds</td><td>-2.143e+06, 2.240e+06</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>\n"
"<tr><td>N Arrays</td><td>3</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>ssavelocity</b></td><td>Points</td><td>float64</td><td>3</td><td>-4.341e+03</td><td>9.677e+03</td></tr>\n"
"<tr><td>node_value</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>2.300e+01</td></tr>\n"
"<tr><td>magnitude</td><td>Points</td><td>float64</td><td>1</td><td>6.649e-03</td><td>1.013e+04</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:88
msgid ""
"Here is a helper to extract regions of the mesh based on the simulation "
"node."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:202
msgid "plot vectors without mesh"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:237
msgid ""
"Compare directions. Normalize them so we can get a reasonable direction "
"comparison."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:281
msgid "flow_a that agrees with the mean flow path of flow_b"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:337
msgid "**Total running time of the script:** (0 minutes 30.652 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:348
msgid ""
":download:`Download Jupyter notebook: antarctica-compare.ipynb <antarctica-"
"compare.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/antarctica-compare.rst:352
msgid ""
":download:`Download Python source code: antarctica-compare.py <antarctica-"
"compare.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_atomic-"
"orbitals.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:24
msgid "Plot Atomic Orbitals"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:25
msgid "Visualize the wave functions (orbitals) of the hydrogen atom."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:30
msgid "Import"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:31
msgid "Import the applicable libraries."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:34
msgid ""
"This example is modeled off of `Matplotlib: Hydrogen Wave Function "
"<http://staff.ustc.edu.cn/~zqj/posts/Hydrogen-Wavefunction/>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:37
msgid ""
"This example requires `sympy <https://www.sympy.org/>`_. Install it with:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:63
msgid "Generate the Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:64
msgid ""
"Generate the dataset by evaluating the analytic hydrogen wave function from "
"``sympy``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:67
msgid ""
"\\begin{equation}\n"
"    \\psi_{n\\ell m}(r,\\theta,\\phi)\n"
"    =\n"
"    \\sqrt{\n"
"        \\left(\\frac{2}{na_0}\\right)^3\\, \\frac{(n-\\ell-1)!}{2n[(n+\\ell)!]}\n"
"    }\n"
"    e^{-r / na_0}\n"
"    \\left(\\frac{2r}{na_0}\\right)^\\ell\n"
"    L_{n-\\ell-1}^{2\\ell+1} \\cdot Y_\\ell^m(\\theta, \\phi)\n"
"\\end{equation}\n"
"\n"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:79
msgid ""
"See `Hydrogen atom <https://en.wikipedia.org/wiki/Hydrogen_atom>`_ for more "
"details."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:82
msgid ""
"This dataset evaluates this function for the hydrogen orbital "
":math:`3d_{xy}`, with the following quantum numbers:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:85
msgid "Principal quantum number: ``n=3``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:86
msgid "Azimuthal quantum number: ``l=2``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:87
msgid "Magnetic quantum number: ``m=-2``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:103
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>ImageData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>970299</td></tr>\n"
"<tr><td>N Points</td><td>1000000</td></tr>\n"
"<tr><td>X Bounds</td><td>-2.350e+01, 2.350e+01</td></tr>\n"
"<tr><td>Y Bounds</td><td>-2.350e+01, 2.350e+01</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.350e+01, 2.350e+01</td></tr>\n"
"<tr><td>Dimensions</td><td>100, 100, 100</td></tr>\n"
"<tr><td>Spacing</td><td>4.747e-01, 4.747e-01, 4.747e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>2</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>real_wf</b></td><td>Points</td><td>float64</td><td>1</td><td>-1.689e-02</td><td>1.689e-02</td></tr>\n"
"<tr><td>wf</td><td>Points</td><td>complex128</td><td>1</td><td>-1.689e-02+1.353e-03j</td><td>1.689e-02+1.353e-03j</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:134
msgid "Plot the Orbital"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:135
msgid ""
"Plot the orbital using :func:`add_volume() <pyvista.Plotter.add_volume>` and"
" using the default scalars contained in ``grid``, ``real_wf``. This way we "
"can plot more than just the probability of the electron, but also the phase "
"of the electron wave function."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:141
msgid ""
"Since the real value of evaluated wave function for this orbital varies "
"between ``[-<value>, <value>]``, we cannot use the default opacity "
"``opacity='linear'``. Instead, we use ``[1, 0, 1]`` since we would like the "
"opacity to be proportional to the absolute value of the scalars."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:178
msgid "Plot the Orbital Contours as an Isosurface"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:179
msgid ""
"Generate the contour plot for the orbital by determining when the orbital "
"equals 10% the maximum value of the orbital. This effectively captures the "
"most likely locations of the electron for this orbital."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:183
msgid ""
"Note how we use the absolute value of the scalars when evaluating "
":func:`contour() <pyvista.DataSetFilters.contour>` to capture where the "
"positive and negative phases cross ``eval_at``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:242
msgid "Volumetric Plot: Plot the Orbitals using RGBA"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:243
msgid ""
"Let's now combine some of the best parts of the two above plots. The "
"volumetric plot is great for showing the probability of the \"electron "
"cloud\" orbitals, but the colormap doesn't quite match reality as well as "
"the isosurface plot."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:248
msgid ""
"For this example we're going to use an RGBA colormap to tightly control the "
"way the orbitals are plotted. For this, the opacity will be mapped to the "
"probability of the electron being at a location in the grid, which we can do"
" by taking the absolute value squared of the orbital's wave function. We can"
" set the color of the orbital based on the phase, which we can get simply "
"with ``orbital['real_wf'] < 0``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:255
msgid "Let's start with a simple one, the :math:`3p_z` orbital."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:318
msgid "Volumetric Plot: :math:`4d_{z^2}` orbital"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:347
msgid "Volumetric Plot: :math:`4d_{xz}` orbital"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:376
msgid "Plot an Orbital Using a Density Plot"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:377
msgid ""
"We can also plot atomic orbitals using a 3D density plot. For this, we will "
"use :func:`numpy.random.choice` to sample all the points of our "
":class:`pyvista.ImageData` based on the probability of the electron being at"
" that coordinate."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:465
msgid "Density Plot - Gaussian Points Representation"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:466
msgid ""
"Finally, let's plot the same data using the \"Gaussian points\" "
"representation."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:503
msgid "**Total running time of the script:** (0 minutes 21.907 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:514
msgid ""
":download:`Download Jupyter notebook: atomic-orbitals.ipynb <atomic-"
"orbitals.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/atomic-orbitals.rst:518
msgid ""
":download:`Download Python source code: atomic-orbitals.py <atomic-"
"orbitals.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_customization-"
"trame-toolbar.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:24
msgid "Customize Trame toolbar"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:26
msgid "Bring more of the power of trame to the jupyter view."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:47
msgid ""
"Let's first create the menu items we want to add to the trame's toolbar. "
"Here we want a \"play\" button that will be later connected to a slider "
"through the ``button_play`` function. The slider itself will represent the "
"\"resolution\" of the model we will render, a text field where the value of "
"the \"resolution\" will be displayed. We will also add a dropdown menu to "
"toggle the visibility of the model. The dividers are the same as already "
"used to divide and organize the toolbar."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:110
msgid ""
"The button callback function ``button_play`` needs to be created before "
"starting the server. This function will toggle the boolean state variable "
"``play`` and flush the server, i.e. \"force\" the server to see the change. "
"We will see more on the state variables in a bit, but we need to create the "
"function here otherwise the server will complain ``button_play`` does not "
"exist."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:136
msgid "We will do a simple rendering of a Cone using `ConeSouce`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:138
msgid ""
"When using the ``pl.show`` method. The function we created ``custom_tools`` "
"should be passed as a ``jupyter_kwargs`` argument under the key "
"``add_menu_items``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:189
msgid "To interact with ``trame``'s server we need to get the server's state."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:191
msgid ""
"We initialize the ``play`` variable in the shared state and this will be "
"controlled by the play button we created. Note that when creating the "
"``slider``, the ``text_field`` and the ``select`` tools, we passed something"
" like ``model=(\"variable\", value). This will automatically create the "
"variable \"variable\" with value ``value`` in the server's shared state, so "
"we do not need to create ``state.resolution`` or ``state.visibility``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:216
msgid "Now we can create the callback functions for our menu items."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:218
msgid ""
"The functions are decorated with a ``state.change(\"variable\")``. This "
"means they will be called when this specific variable has its value changed "
"in the server's shared state. When ``resolution`` changes, we want to update"
" the resolution of our cone algorithm. When ``visibility`` changes, we want "
"to toggle the visibility of our cone."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:224
msgid ""
"The ``play`` variable is a little bit trickier. We want to start something "
"like a timer so that an animation can be set to play. To do that with "
"``trame`` we need to have an asynchronous function so we can continue to do "
"stuff while the \"timer\" function is running. The ``_play`` function will "
"be called when the ``play`` variable is changed (when we click the play "
"button, through the ``button_play`` callback). While ``state.play`` is "
"``True`` we want to play the animation. We change the ``state.resolution`` "
"value, but to really call the ``update_resolution`` function we need to "
"``flush`` the server and force it to see the change in the shared variables."
" When ``state.play`` changes to ``False``, the animation stops."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:234
msgid ""
"Note that using ``while play: ...`` would not work here because it is not "
"the actual state variable, but only an argument value passed to the callback"
" function."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:284
msgid "**Total running time of the script:** (0 minutes 0.191 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:295
msgid ""
":download:`Download Jupyter notebook: customization-trame-toolbar.ipynb "
"<customization-trame-toolbar.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/customization-trame-toolbar.rst:299
msgid ""
":download:`Download Python source code: customization-trame-toolbar.py "
"<customization-trame-toolbar.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_extending-"
"pyvista.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:24
msgid "Extending PyVista"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:26
msgid ""
"A :class:`pyvista.DataSet`, such as :class:`pyvista.PolyData`, can be "
"extended by users.  For example, if the user wants to keep track of the "
"location of the maximum point in the (1, 0, 1) direction on the mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:30
msgid ""
"There are two methods by which users can handle subclassing.  One is "
"directly managing the types objects.  This may require checking types during"
" filter operations."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:34
msgid ""
"The second is automatic managing of types.  Users can control whether user "
"defined classes are nearly always used for particular types of DataSets."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:38
msgid ""
"This is for advanced usage only.  Automatic managing of types will not work "
"in all situations, in particular when a builtin dataset is directly "
"instantiated.  See examples below."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:63
msgid ""
"A user defined subclass of :class:`pyvista.PolyData`, ``FooData`` is "
"defined. It includes a property to keep track of the point on the mesh that "
"is furthest along in the (1, 0, 1) direction."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:90
msgid "Directly Managing Types"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:92
msgid ""
"Now a ``foo_sphere`` object is created of type ``FooData``. The index of the"
" point and location of the point of interest can be obtained directly. The "
"sphere has a radius of 0.5, so the maximum extent in the direction (1, 0, 1)"
" is :math:`0.5\\sqrt{0.5}\\approx0.354`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:127
msgid ""
"Using an inplace operation like :func:`pyvista.DataSet.rotate_y` does not "
"affect the type of the object."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:160
msgid ""
"However, filter operations can return different ``DataSet`` types including "
"ones that differ from the original type.  In this case, the :func:`decimate "
"<pyvista.PolyDataFilters.decimate>` method returns a "
":class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:191
msgid "It is now required to explicitly wrap the object into ``FooData``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:221
msgid "Automatically Managing Types"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:223
msgid ""
"The default :class:`pyvista.DataSet` type can be set using "
"``pyvista._wrappers``. In general, it is best to use this method when it is "
"expected to primarily use the user defined class."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:227
msgid ""
"In this example, all objects that would have been created as "
":class:`pyvista.PolyData` would now be created as a ``FooData`` object. "
"Note, that the key is the underlying vtk object."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:247
msgid ""
"It is no longer necessary to specifically wrap :class:`pyvista.PolyData` "
"objects to obtain a ``FooData`` object."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:279
msgid ""
"Using an inplace operation like :func:`rotate_y <pyvista.DataSet.rotate_y>` "
"does not affect the type of the object."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:312
msgid ""
"Filter operations that return :class:`pyvista.PolyData` now return "
"``FooData``"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:345
msgid ""
"Users can still create a native :class:`pyvista.PolyData` object, but using "
"this method may incur unintended consequences.  In this case, it is "
"recommended to use the directly managing types method."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:378
msgid ""
"Usage of ``pyvista._wrappers`` may require resetting the default value to "
"avoid leaking the setting into cases where it is unused."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:397
msgid ""
"For instances where a localized usage is preferred, a tear-down method is "
"recommended.  One example is a ``try...finally`` block."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:420
msgid "**Total running time of the script:** (0 minutes 0.152 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:431
msgid ""
":download:`Download Jupyter notebook: extending-pyvista.ipynb <extending-"
"pyvista.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/extending-pyvista.rst:435
msgid ""
":download:`Download Python source code: extending-pyvista.py <extending-"
"pyvista.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_fea-hertzian-"
"contact-pressure.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:24
msgid "Visualize Hertzian Contact Stress"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:25
msgid ""
"The following example demonstrates how to use PyVista to visualize Hertzian "
"contact stress between a cylinder and a flat plate."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:28
msgid ""
"This example loads a dataset, constructs a line to represent the point of "
"contact between the cylinder and the block, and samples the stress along "
"that line. Finally, it plots the dataset and the stress distribution."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:32
msgid ""
"**Background** Hertzian contact stress refers to the stress that occurs "
"between two curved surfaces that are in contact with each other. It is named"
" after Heinrich Rudolf Hertz, a German physicist who first described the "
"phenomenon in the late 1800s. Hertzian contact stress is an important "
"concept in materials science, engineering, and other fields where the "
"behavior of materials under stress is a critical consideration."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:61
#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:60
msgid "Load the dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:62
msgid ""
"Start by loading the dataset using :mod:`pyvista.examples` module. This "
"module provides access to a range of datasets, including FEA (finite element"
" analysis) datasets that are useful for stress analysis."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:80
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>132258</td></tr>\n"
"<tr><td>N Points</td><td>34185</td></tr>\n"
"<tr><td>X Bounds</td><td>-0.000e+00, 2.000e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>0.000e+00, 2.500e-02</td></tr>\n"
"<tr><td>Z Bounds</td><td>0.000e+00, 3.000e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>16</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td>Displacement</td><td>Points</td><td>float64</td><td>3</td><td>-5.000e-04</td><td>2.945e-05</td></tr>\n"
"<tr><td>vonMises</td><td>Points</td><td>float64</td><td>1</td><td>1.316e+02</td><td>1.707e+09</td></tr>\n"
"<tr><td>Stress</td><td>Points</td><td>float64</td><td>6</td><td>-3.055e+09</td><td>5.274e+08</td></tr>\n"
"<tr><td>Strain</td><td>Points</td><td>float64</td><td>6</td><td>-1.937e-02</td><td>1.894e-02</td></tr>\n"
"<tr><td>PrincipalStress 1</td><td>Points</td><td>float64</td><td>1</td><td>-1.787e+09</td><td>2.586e+08</td></tr>\n"
"<tr><td>PrincipalStress 2</td><td>Points</td><td>float64</td><td>1</td><td>-2.594e+09</td><td>3.531e+07</td></tr>\n"
"<tr><td>PrincipalStress 3</td><td>Points</td><td>float64</td><td>1</td><td>-3.078e+09</td><td>1.995e+06</td></tr>\n"
"<tr><td>PrincipalStrain 1</td><td>Points</td><td>float64</td><td>1</td><td>-6.976e-04</td><td>1.448e-02</td></tr>\n"
"<tr><td>PrincipalStrain 2</td><td>Points</td><td>float64</td><td>1</td><td>-1.145e-02</td><td>8.690e-04</td></tr>\n"
"<tr><td>PrincipalStrain 3</td><td>Points</td><td>float64</td><td>1</td><td>-2.787e-02</td><td>-8.375e-10</td></tr>\n"
"<tr><td>StrainEnergyDensity</td><td>Points</td><td>float64</td><td>1</td><td>1.172e-07</td><td>2.307e+07</td></tr>\n"
"<tr><td>PlasticStrain</td><td>Points</td><td>float64</td><td>6</td><td>0.000e+00</td><td>0.000e+00</td></tr>\n"
"<tr><td>EquivalentPlasticStrain</td><td>Points</td><td>float64</td><td>1</td><td>0.000e+00</td><td>0.000e+00</td></tr>\n"
"<tr><td>Rank</td><td>Cells</td><td>float64</td><td>1</td><td>0.000e+00</td><td>1.500e+01</td></tr>\n"
"<tr><td>Material</td><td>Cells</td><td>float64</td><td>1</td><td>0.000e+00</td><td>1.000e+00</td></tr>\n"
"<tr><td>PartID</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>2.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:123
#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:119
msgid "Plot the Dataset"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:124
msgid "Plot the dataset by part ID."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:171
msgid "Creating a Line to Denote the Point of Contact"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:172
msgid ""
"Construct a line to represent the point of contact between the cylinder and "
"the plate."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:192
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"\n"
"<table style='width: 100%;'>\n"
"<tr><th>PolyData</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>1</td></tr>\n"
"<tr><td>N Points</td><td>101</td></tr>\n"
"<tr><td>N Strips</td><td>0</td></tr>\n"
"<tr><td>X Bounds</td><td>9.500e-02, 1.000e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>2.400e-02, 2.400e-02</td></tr>\n"
"<tr><td>Z Bounds</td><td>1.999e-01, 1.999e-01</td></tr>\n"
"<tr><td>N Arrays</td><td>0</td></tr>\n"
"</table>\n"
"\n"
"\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:215
msgid "Sampling the Stress along the Line"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:216
msgid ""
"We can sample the Z component stress along the contact edge and compare it "
"with expected pressure."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:219
msgid ""
"The expected values array is the Hertzian contact pressure and is the "
"analytical solution to the non-adhesive contact problem. Computation of "
"these values is an exercise left up to the reader (the radius of the "
"cylinder is 0.05). See `Contact Mechanics "
"<https://en.wikipedia.org/wiki/Contact_mechanics>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:279
msgid "Visualizing the Z Stress Distribution"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:280
msgid ""
"You can now visualize the Z stress distribution. Use "
":class:`pyvista.Plotter` to create a plot window and add the dataset to it."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:341
msgid "**Total running time of the script:** (0 minutes 2.634 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:352
msgid ""
":download:`Download Jupyter notebook: fea-hertzian-contact-pressure.ipynb "
"<fea-hertzian-contact-pressure.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/fea-hertzian-contact-pressure.rst:356
msgid ""
":download:`Download Python source code: fea-hertzian-contact-pressure.py "
"<fea-hertzian-contact-pressure.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:6
#: ../../pyvista/doc/source/examples/index.rst:2661
msgid "Advanced"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:8
#: ../../pyvista/doc/source/examples/index.rst:2663
msgid ""
"Include here are few longer, more advanced examples from our users and "
"developers."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:18
#: ../../pyvista/doc/source/examples/index.rst:2673
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Each example should have a "
"reference tag/key in the form:\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:27
#: ../../pyvista/doc/source/examples/index.rst:2682
msgid ":ref:`sphx_glr_examples_99-advanced_add-example.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:29
#: ../../pyvista/doc/source/examples/index.rst:2684
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Adding a New Gallery Example</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:35
#: ../../pyvista/doc/source/examples/index.rst:2690
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Here is some velocity data "
"from a glacier modelling simulation that is compared across nodes in...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:44
#: ../../pyvista/doc/source/examples/index.rst:2699
msgid ":ref:`sphx_glr_examples_99-advanced_antarctica-compare.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:46
#: ../../pyvista/doc/source/examples/index.rst:2701
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Compare Field Across Mesh Regions</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:52
#: ../../pyvista/doc/source/examples/index.rst:2707
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot Atomic Orbitals\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:61
#: ../../pyvista/doc/source/examples/index.rst:2716
msgid ":ref:`sphx_glr_examples_99-advanced_atomic-orbitals.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:63
#: ../../pyvista/doc/source/examples/index.rst:2718
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot Atomic Orbitals</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:69
#: ../../pyvista/doc/source/examples/index.rst:2724
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Bring more of the power of "
"trame to the jupyter view.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:78
#: ../../pyvista/doc/source/examples/index.rst:2733
msgid ":ref:`sphx_glr_examples_99-advanced_customization-trame-toolbar.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:80
#: ../../pyvista/doc/source/examples/index.rst:2735
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Customize Trame toolbar</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:86
#: ../../pyvista/doc/source/examples/index.rst:2741
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"A pyvista.DataSet, such as "
"pyvista.PolyData, can be extended by users.  For example, if the use...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:95
#: ../../pyvista/doc/source/examples/index.rst:2750
msgid ":ref:`sphx_glr_examples_99-advanced_extending-pyvista.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:97
#: ../../pyvista/doc/source/examples/index.rst:2752
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Extending PyVista</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:103
#: ../../pyvista/doc/source/examples/index.rst:2758
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example loads a "
"dataset, constructs a line to represent the point of contact between the "
"c...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:112
#: ../../pyvista/doc/source/examples/index.rst:2767
msgid ":ref:`sphx_glr_examples_99-advanced_fea-hertzian-contact-pressure.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:114
#: ../../pyvista/doc/source/examples/index.rst:2769
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Visualize Hertzian Contact Stress</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:120
#: ../../pyvista/doc/source/examples/index.rst:2775
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"The following example "
"demonstrates how PyVista can be used to plot a magnetic field.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:129
#: ../../pyvista/doc/source/examples/index.rst:2784
msgid ":ref:`sphx_glr_examples_99-advanced_magnetic-fields.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:131
#: ../../pyvista/doc/source/examples/index.rst:2786
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot a Magnetic Field</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:137
#: ../../pyvista/doc/source/examples/index.rst:2792
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example dataset was "
"read using the pyvista.POpenFOAMReader and post processed according to...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:146
#: ../../pyvista/doc/source/examples/index.rst:2801
msgid ":ref:`sphx_glr_examples_99-advanced_openfoam-cooling.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:148
#: ../../pyvista/doc/source/examples/index.rst:2803
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Electronics Cooling CFD</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:154
#: ../../pyvista/doc/source/examples/index.rst:2809
msgid "<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot OpenFOAM data\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:163
#: ../../pyvista/doc/source/examples/index.rst:2818
msgid ":ref:`sphx_glr_examples_99-advanced_openfoam-example.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:165
#: ../../pyvista/doc/source/examples/index.rst:2820
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot OpenFOAM data</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:171
#: ../../pyvista/doc/source/examples/index.rst:2826
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example dataset was "
"read using the pyvista.POpenFOAMReader. See openfoam_example for a ful...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:180
#: ../../pyvista/doc/source/examples/index.rst:2835
msgid ":ref:`sphx_glr_examples_99-advanced_openfoam-tubes.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:182
#: ../../pyvista/doc/source/examples/index.rst:2837
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot CFD Data</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:188
#: ../../pyvista/doc/source/examples/index.rst:2843
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This was originally posted "
"to pyvista/pyvista-support#486.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:197
#: ../../pyvista/doc/source/examples/index.rst:2852
msgid ":ref:`sphx_glr_examples_99-advanced_osmnx-example.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:199
#: ../../pyvista/doc/source/examples/index.rst:2854
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plot Open Street Map Data</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:205
#: ../../pyvista/doc/source/examples/index.rst:2860
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Plot the solar system in "
"PyVista.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:214
#: ../../pyvista/doc/source/examples/index.rst:2869
msgid ":ref:`sphx_glr_examples_99-advanced_planets.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:216
#: ../../pyvista/doc/source/examples/index.rst:2871
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">3D Earth and Celestial Bodies</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:222
#: ../../pyvista/doc/source/examples/index.rst:2877
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Pass a vtkAlgorithm to the "
"Plotter for dynamic visualizations.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:231
#: ../../pyvista/doc/source/examples/index.rst:2886
msgid ":ref:`sphx_glr_examples_99-advanced_plotting-algorithms.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:233
#: ../../pyvista/doc/source/examples/index.rst:2888
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Plotting with VTK Algorithms</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:239
#: ../../pyvista/doc/source/examples/index.rst:2894
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"Background Modal analysis "
"is the study of the dynamic properties of mechanical structures in th...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:248
#: ../../pyvista/doc/source/examples/index.rst:2903
msgid ":ref:`sphx_glr_examples_99-advanced_pump-bracket.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:250
#: ../../pyvista/doc/source/examples/index.rst:2905
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Visualize Modal Analysis of a Pump Bracket</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:256
#: ../../pyvista/doc/source/examples/index.rst:2911
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example demonstrates "
"the Moeller-Trumbore intersection algorithm using pyvista.\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:265
#: ../../pyvista/doc/source/examples/index.rst:2920
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace-moeller.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:267
#: ../../pyvista/doc/source/examples/index.rst:2922
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Visualize the Moeller-Trumbore Algorithm</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:282
#: ../../pyvista/doc/source/examples/index.rst:2937
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:290
#: ../../pyvista/doc/source/examples/index.rst:2945
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"There are several videos "
"online talking about how a sphere can be turned inside out in a contin...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:299
#: ../../pyvista/doc/source/examples/index.rst:2954
msgid ":ref:`sphx_glr_examples_99-advanced_sphere_eversion.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:301
#: ../../pyvista/doc/source/examples/index.rst:2956
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Turning the sphere inside out</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:307
#: ../../pyvista/doc/source/examples/index.rst:2962
msgid ""
"<div class=\"sphx-glr-thumbcontainer\" tooltip=\"This example applies the "
"pyvista.DataSetFilters.warp_by_vector filter to a cube whose eigenmode...\">"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:316
#: ../../pyvista/doc/source/examples/index.rst:2971
msgid ":ref:`sphx_glr_examples_99-advanced_warp-by-vector-eigenmodes.py`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/index.rst:318
#: ../../pyvista/doc/source/examples/index.rst:2973
msgid ""
"  <div class=\"sphx-glr-thumbnail-title\">Display Eigenmodes of Vibration</div>\n"
"</div>"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_magnetic-"
"fields.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:24
msgid "Plot a Magnetic Field"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:26
msgid ""
"The following example demonstrates how PyVista can be used to plot a "
"magnetic field."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:29
msgid ""
"This example relies on :func:`streamlines_from_source() "
"<pyvista.PolyDataFilters.streamlines_from_source>` to generate streamlines "
"and :func:`add_volume() <pyvista.Plotter.add_volume>` to plot the strength "
"of the magnetic field."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:34
msgid ""
"This dataset was created from the `Coil Field Lines "
"<https://magpylib.readthedocs.io/en/latest/examples/examples_30_coil_field_lines.html>`_"
" example from the awesome `magpylib <https://github.com/magpylib/magpylib>`_"
" library."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:60
msgid "Download the DataSet"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:61
msgid ""
"Let's first download the example dataset and show that it's a "
":class:`pyvista.ImageData` with the magnetic field stored as the ``'B'`` "
"array in ``point_data``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:97
msgid "Create Coils"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:98
msgid ""
"Create several hoops to represent the coil. This matches the geometry in the"
" original example."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:148
msgid "Compute and Plot Field Lines"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:149
msgid ""
"Next, let's compute streamlines from the center of the coil to represent the"
" direction of the magnetic force. For this, we can create a simple "
":func:`pyvista.Disc` and use that as the source of the streamlines."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:215
msgid "Plot the Magnet Field Strength"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:216
msgid ""
"Finally, let's bring this all together by plotting the magnetic field "
"strength while also plotting the streamlines and the coil."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:268
msgid "**Total running time of the script:** (0 minutes 14.092 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:279
msgid ""
":download:`Download Jupyter notebook: magnetic-fields.ipynb <magnetic-"
"fields.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/magnetic-fields.rst:283
msgid ""
":download:`Download Python source code: magnetic-fields.py <magnetic-"
"fields.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_openfoam-"
"cooling.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:23
msgid "Electronics Cooling CFD"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:24
msgid ""
"Plot an electronics cooling CFD example from OpenFoam hosted on the public "
"SimScale examples at `SimScale Project Library "
"<https://www.simscale.com/projects/>`_ and generated from the `Thermal "
"Management Tutorial: CHT Analysis of an Electronics Box "
"<https://www.simscale.com/docs/tutorials/thermal-management-cht-analysis-"
"electronics-box/>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:30
msgid ""
"This example dataset was read using the :class:`pyvista.POpenFOAMReader` and"
" post processed according to this `README.md "
"<https://github.com/pyvista/vtk-"
"data/blob/master/Data/fvm/cooling_electronics/README.md>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:54
msgid "Load the Datasets"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:55
msgid "Download and load the datasets."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:57
msgid ""
"The ``structure`` dataset consists of a box with several components, being "
"cooled down by a fan, while the ``air`` dataset is the air, containing "
"several scalar arrays including the velocity and temperature of the air."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:99
msgid "Plot the Electronics"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:100
msgid ""
"Here we plot the temperature of the electronics using the ``\"reds\"`` "
"colormap and improve the look of the plot using surface space ambient "
"occlusion with :func:`enable_ssao() <pyvista.Plotter.enable_ssao>`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:160
msgid "Plot Air Velocity"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:161
msgid "Let's plot the velocity of the air."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:163
msgid ""
"Start by clipping the air dataset with :func:`clip() "
"<pyvista.DataSetFilters.clip>` and plotting it alongside the electronics."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:166
msgid ""
"As you can see, the air enters from the front of the case (left) and is "
"being pushed out of the \"back\" of the case via a fan."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:225
msgid "Plot Air Temperature"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:226
msgid ""
"Let's also plot the temperature of the air. This time, let's also plot the "
"temperature of the components."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:294
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:150
msgid "Plot Streamlines - Flow Velocity"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:295
msgid ""
"Now, let's plot the streamlines of this dataset so we can see how the air is"
" flowing through the case."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:298
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:151
msgid ""
"Generate streamlines using :func:`streamlines_from_source() "
"<pyvista.DataSetFilters.streamlines_from_source>`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:368
msgid "Volumetric Plot - Visualize High Temperatures"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:369
msgid "Show a 3D plot of areas of temperature."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:371
#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:282
msgid ""
"For this example, we will first sample the results from the "
":class:`pyvista.UnstructuredGrid` onto a :class:`pyvista.ImageData` using "
":func:`sample() <pyvista.DataSetFilters.sample>`. This is so we can "
"visualize it using :func:`add_volume() <pyvista.Plotter.add_volume>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:429
msgid "**Total running time of the script:** (0 minutes 27.168 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:440
msgid ""
":download:`Download Jupyter notebook: openfoam-cooling.ipynb <openfoam-"
"cooling.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-cooling.rst:444
msgid ""
":download:`Download Python source code: openfoam-cooling.py <openfoam-"
"cooling.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_openfoam-"
"example.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:24
msgid "Plot OpenFOAM data"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:43
msgid ""
"This example uses data from a lid-driven cavity flow.  It is recommended to "
"use :class:`pyvista.POpenFOAMReader` for reading OpenFOAM files for more "
"control over reading data."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:47
msgid ""
"This example will only run correctly in versions of vtk>=9.1.0.  The names "
"of the patch arrays and resulting keys in the read mesh will be different in"
" prior versions."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:68
msgid ""
"OpenFOAM datasets include multiple sub-datasets including the internal mesh "
"and patches, typically boundaries.  This can be inspected before reading the"
" data."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:95
msgid ""
"This data is represented as a :class:`pyvista.MultiBlock` object. The "
"internal mesh will be located in the top-level MultiBlock mesh."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:122
msgid "In this case the internal mesh is a :class:`pyvista.UnstructuredGrid`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:152
msgid ""
"Additional Patch meshes are nested inside another MultiBlock mesh.  The name"
" of the sub-level MultiBlock mesh depends on the vtk version."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:193
msgid ""
"The default in OpenFOAMReader is to translate the existing cell data to "
"point data.  Therefore, the cell data arrays are duplicated in point data."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:241
msgid "This behavior can be turned off if only cell data is required."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:288
msgid "Now we will read in all the data at the last time point."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:317
msgid ""
"This OpenFOAM simulation is in 3D with only 1 cell in the z-direction.  "
"First, the solution is sliced in the center of the z-direction. "
":func:`pyvista.DataSetFilters.streamlines_evenly_spaced_2D` requires the "
"data to lie in the z=0 plane.  So, after the domain sliced, it is translated"
" to ``z=0``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:351
msgid "Streamlines are generated using the point data \"U\"."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:374
msgid ""
"Plot streamlines colored by velocity magnitude.  Additionally, the moving "
"and fixed wall boundaries are plotted."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:426
msgid "**Total running time of the script:** (0 minutes 0.442 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:437
msgid ""
":download:`Download Jupyter notebook: openfoam-example.ipynb <openfoam-"
"example.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-example.rst:441
msgid ""
":download:`Download Python source code: openfoam-example.py <openfoam-"
"example.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_openfoam-"
"tubes.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:23
msgid "Plot CFD Data"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:24
msgid ""
"Plot a CFD example from OpenFoam hosted on the public SimScale examples at "
"`SimScale Project Library <https://www.simscale.com/projects/>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:27
msgid ""
"This example dataset was read using the :class:`pyvista.POpenFOAMReader`. "
"See :ref:`openfoam_example` for a full example using this reader."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:49
msgid "Download and load the example dataset."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:65
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Information</th><th>Blocks</th></tr><tr><td>\n"
"<table>\n"
"<tr><th>MultiBlock</th><th>Values</th></tr>\n"
"<tr><td>N Blocks</td><td>2</td></tr>\n"
"<tr><td>X Bounds</td><td>-0.128, 0.128</td></tr>\n"
"<tr><td>Y Bounds</td><td>-0.028, 0.028</td></tr>\n"
"<tr><td>Z Bounds</td><td>-0.014, 0.249</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table>\n"
"<tr><th>Index</th><th>Name</th><th>Type</th></tr>\n"
"<tr><th>0</th><th>internalMesh</th><th>UnstructuredGrid</th></tr>\n"
"<tr><th>1</th><th>boundary</th><th>MultiBlock</th></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:92
msgid "Plot Cross Section"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:93
msgid ""
"Plot the outline of the dataset along with a cross section of the flow "
"velocity."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:205
msgid ""
"Now, actually generate the streamlines. Since the original inlet contains "
"1000 points, let's reduce this to around 200 points by using every 5th "
"point."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:209
msgid ""
"If we wanted a uniform subsampling of the inlet, we could use "
"`pyvista/pyacvd <https://github.com/pyvista/pyacvd>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:277
msgid "Volumetric Plot - Visualize Turbulent Kinematic Viscosity"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:278
msgid ""
"The turbulent kinematic viscosity of a fluid is a derived quantity used in "
"turbulence modeling to describe the effect of turbulent motion on the "
"momentum transport within the fluid."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:340
msgid "**Total running time of the script:** (0 minutes 9.085 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:351
msgid ""
":download:`Download Jupyter notebook: openfoam-tubes.ipynb <openfoam-"
"tubes.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/openfoam-tubes.rst:355
msgid ""
":download:`Download Python source code: openfoam-tubes.py <openfoam-"
"tubes.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_osmnx-"
"example.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:24
msgid "Plot Open Street Map Data"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:26
msgid ""
"This was originally posted to `pyvista/pyvista-support#486 "
"<https://github.com/pyvista/pyvista-support/issues/486>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:28
msgid "Be sure to check out `osmnx <https://github.com/gboeing/osmnx>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:30
msgid "Start by generating a graph from an address."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:54
msgid "Read in the graph directly from the Open Street Map server."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:84
msgid ""
"Next, convert the edges into pyvista lines using "
":func:`pyvista.lines_from_points`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:114
msgid "Finally, merge the lines and plot"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:160
msgid "**Total running time of the script:** (0 minutes 0.316 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:171
msgid ""
":download:`Download Jupyter notebook: osmnx-example.ipynb <osmnx-"
"example.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/osmnx-example.rst:175
msgid ""
":download:`Download Python source code: osmnx-example.py <osmnx-example.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_planets.py>` to "
"download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:24
msgid "3D Earth and Celestial Bodies"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:26
msgid "Plot the solar system in PyVista."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:28
msgid ""
"This example is inspired by `planet3D-MATLAB "
"<https://github.com/tamaskis/planet3D-MATLAB>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:32
msgid ""
"The purpose of this example is to demonstrate plotting celestial bodies and "
"may lack astronomical precision. There may be inaccuracies in the "
"representation, so please take care when reusing or repurposing this "
"example."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:37
msgid ""
"Please take a look at libraries like `astropy <https://www.astropy.org/>`_ "
"if you wish to use Python for astronomical calculations."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:59
msgid "Plot the Solar System with Stars in the Background"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:60
msgid ""
"This section relies on calculations in `Visualizing Celestial Bodies in 3D "
"<https://tamaskis.github.io/files/Visualizing_Celestial_Bodies_in_3D.pdf>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:147
msgid "Plot the Planets and their Textures"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:148
msgid ""
"Each planet here is in a different subplot. The planet's textures are from "
"`Solar Textures <https://www.solarsystemscope.com/textures/>`_."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:193
msgid "Plot the Atmosphere and Surface of Venus"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:194
msgid "Here we plot Venus with and without its atmosphere."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:232
msgid "**Total running time of the script:** (2 minutes 32.141 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:243
msgid ":download:`Download Jupyter notebook: planets.ipynb <planets.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/planets.rst:247
msgid ":download:`Download Python source code: planets.py <planets.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_plotting-"
"algorithms.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:22
msgid "Plotting with VTK Algorithms"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:24
msgid "Pass a ``vtkAlgorithm`` to the ``Plotter`` for dynamic visualizations."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:27
msgid ""
"By \"dynamic visualization\" we mean that as the input data/source changes, "
"so will the visualization in real time."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:30
msgid ""
"A ``vtkAlgorithm`` is the superclass for all sources, filters, and sinks in "
"VTK. It defines a generalized interface for executing data processing "
"algorithms. Pipeline connections are associated with input and output ports "
"that are independent of the type of data passing through the connections."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:36
msgid ""
"We can connect the output port of a ``vtkAlgorithm`` to PyVista's rendering "
"pipeline when adding data to the scene through methods like "
":func:`add_mesh() <pyvista.Plotter.add_mesh>`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:40
msgid ""
"This example will walk through using a few ``vtkAlgorithm`` filters directly"
" and passing them to PyVista for dynamic visualization."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:63
msgid ""
"Use ``vtkConeSource`` as a source algorithm. This source will dynamically "
"create a cone object depending on the instances's parameters. In this "
"example, we will connect a callback to set the cone source algorithm's "
"resolution via ``vtkConeSource.SetResolution()``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:90
msgid ""
"Pass the ``vtkConeSource`` (a ``vtkAlgorithm`` subclass) directly to the "
"plotter and connect a slider widget to our callback that adjusts the "
"resolution."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:120
msgid "Here is another example using ``vtkRegularPolygonSource``."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:164
msgid ""
"We can do this with any ``vtkAlgorithm`` subclass for dynamically generating"
" or filtering data. Here is an example of executing a pipeline of VTK "
"filters together."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:221
msgid "**Total running time of the script:** (0 minutes 5.310 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:232
msgid ""
":download:`Download Jupyter notebook: plotting-algorithms.ipynb <plotting-"
"algorithms.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/plotting-algorithms.rst:236
msgid ""
":download:`Download Python source code: plotting-algorithms.py <plotting-"
"algorithms.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_pump-"
"bracket.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:23
msgid "Visualize Modal Analysis of a Pump Bracket"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:24
msgid ""
"The following example demonstrates how to use PyVista to visualize the modal"
" analysis of a pump bracket based on point arrays representing mode shapes "
"for different modes of vibration."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:28
msgid ""
"**Background** Modal analysis is the study of the dynamic properties of "
"mechanical structures in the frequency domain. It is a common technique in "
"structural dynamics, particularly for automotive, aerospace, and civil "
"engineering applications."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:33
msgid ""
"A mode shape is the deformation pattern that occurs at a specific natural "
"frequency, or mode, of a structure. When a structure is excited by an "
"external force, it responds at all its natural frequencies with each mode "
"shape being independent of the others. In this example, we will visualize "
"the mode shapes to get an understanding of how the pump bracket responds to "
"different modes of vibration."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:61
msgid ""
"Start by loading the dataset using :func:`download_pump_bracket() "
"<pyvista.examples.downloads.download_pump_bracket>`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:64
msgid ""
"This example demonstrates the visualization of the pump bracket's mode "
"shape, the representation of its magnitude, and an animation of its "
"displacement. The dataset used in this example contains 10 mode shapes "
"(disp_0 to disp_9)."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:82
msgid ""
"<div class=\"output_subarea output_html rendered_html output_result\">\n"
"<table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>UnstructuredGrid</th><th>Information</th></tr>\n"
"<tr><td>N Cells</td><td>124806</td></tr>\n"
"<tr><td>N Points</td><td>250487</td></tr>\n"
"<tr><td>X Bounds</td><td>-5.000e-01, 5.000e-01</td></tr>\n"
"<tr><td>Y Bounds</td><td>-4.000e-01, 0.000e+00</td></tr>\n"
"<tr><td>Z Bounds</td><td>-2.500e-02, 2.500e-02</td></tr>\n"
"<tr><td>N Arrays</td><td>10</td></tr>\n"
"</table>\n"
"\n"
"</td><td>\n"
"<table style='width: 100%;'>\n"
"<tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>\n"
"<tr><td><b>disp_0</b></td><td>Points</td><td>float32</td><td>3</td><td>-5.702e-02</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_1</td><td>Points</td><td>float32</td><td>3</td><td>-9.769e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_2</td><td>Points</td><td>float32</td><td>3</td><td>-9.165e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_3</td><td>Points</td><td>float32</td><td>3</td><td>-9.808e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_4</td><td>Points</td><td>float32</td><td>3</td><td>-9.494e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_5</td><td>Points</td><td>float32</td><td>3</td><td>-9.759e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_6</td><td>Points</td><td>float32</td><td>3</td><td>-7.134e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_7</td><td>Points</td><td>float32</td><td>3</td><td>-8.740e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_8</td><td>Points</td><td>float32</td><td>3</td><td>-6.784e-01</td><td>1.000e+00</td></tr>\n"
"<tr><td>disp_9</td><td>Points</td><td>float32</td><td>3</td><td>-8.212e-01</td><td>1.000e+00</td></tr>\n"
"</table>\n"
"\n"
"</td></tr> </table>\n"
"</div>\n"
"<br />\n"
"<br />"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:120
msgid ""
"Choose a mode shape from the available arrays in the dataset. Each "
"\"disp_N\" array represents an eigen solution or a single mode shape for a "
"given mode of vibration."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:124
msgid ""
"Plot the 4th mode of the dataset. This is the first torsional mode for the "
"bracket."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:184
msgid "Visualize Displaced Mode Shape"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:185
msgid ""
"We will now visualize the mode shapes of the pump bracket by displacing the "
"original dataset using :func:`warp_by_vector "
"<pyvista.DataSetFilters.warp_by_vector>`."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:245
msgid "Animate the Mode Shape Displacement"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:246
msgid ""
"Animate the mode shape's displacement by updating the vertex positions at "
"each time step. For a more realistic animation, we use a sinusoidal function"
" to vary the displacement."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:292
msgid "**Total running time of the script:** (0 minutes 17.124 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:303
msgid ""
":download:`Download Jupyter notebook: pump-bracket.ipynb <pump-"
"bracket.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/pump-bracket.rst:307
msgid ""
":download:`Download Python source code: pump-bracket.py <pump-bracket.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_ray-trace.py>` "
"to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:91
msgid "**Total running time of the script:** (0 minutes 0.270 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:102
msgid ""
":download:`Download Jupyter notebook: ray-trace.ipynb <ray-trace.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace.rst:106
msgid ":download:`Download Python source code: ray-trace.py <ray-trace.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_ray-trace-"
"moeller.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:24
msgid "Visualize the Moeller-Trumbore Algorithm"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:26
msgid ""
"This example demonstrates the Moeller-Trumbore intersection algorithm using "
"pyvista."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:29
msgid "For additional details, please reference the following:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:31
msgid ""
"`Moeller-Trumbore intersection algorithm "
"<https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:32
msgid ""
"`Fast Minimum Storage Ray Triangle Intersectio "
"<https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf>`_"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:34
msgid "First, define the ray triangle intersection method."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:158
msgid "Plot the problem setup and the intersection"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:240
msgid "**Total running time of the script:** (0 minutes 0.351 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:251
msgid ""
":download:`Download Jupyter notebook: ray-trace-moeller.ipynb <ray-trace-"
"moeller.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/ray-trace-moeller.rst:255
msgid ""
":download:`Download Python source code: ray-trace-moeller.py <ray-trace-"
"moeller.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:9
msgid ""
"**05:31.667** total execution time for 18 files **from "
"examples/99-advanced**:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_99-advanced_planets.py` (``planets.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:36
msgid "02:32.141"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_99-advanced_sphere_eversion.py` "
"(``sphere_eversion.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:39
msgid "00:41.006"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_examples_99-advanced_antarctica-compare.py` (``antarctica-"
"compare.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:42
msgid "00:30.652"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_examples_99-advanced_openfoam-cooling.py` (``openfoam-"
"cooling.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:45
msgid "00:27.168"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_99-advanced_atomic-orbitals.py` (``atomic-"
"orbitals.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:48
msgid "00:21.907"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_99-advanced_pump-bracket.py` (``pump-bracket.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:51
msgid "00:17.124"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_examples_99-advanced_magnetic-fields.py` (``magnetic-"
"fields.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:54
msgid "00:14.092"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_examples_99-advanced_openfoam-tubes.py` (``openfoam-"
"tubes.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:57
msgid "00:09.085"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_99-advanced_warp-by-vector-eigenmodes.py` (``warp-"
"by-vector-eigenmodes.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:60
msgid "00:06.436"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:62
msgid ""
":ref:`sphx_glr_examples_99-advanced_plotting-algorithms.py` (``plotting-"
"algorithms.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:63
msgid "00:05.310"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_examples_99-advanced_fea-hertzian-contact-pressure.py` "
"(``fea-hertzian-contact-pressure.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:66
msgid "00:02.634"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:68
msgid ""
":ref:`sphx_glr_examples_99-advanced_add-example.py` (``add-example.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:69
msgid "00:02.391"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:71
msgid ""
":ref:`sphx_glr_examples_99-advanced_openfoam-example.py` (``openfoam-"
"example.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:72
msgid "00:00.442"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:74
msgid ""
":ref:`sphx_glr_examples_99-advanced_ray-trace-moeller.py` (``ray-trace-"
"moeller.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:75
msgid "00:00.351"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:77
msgid ""
":ref:`sphx_glr_examples_99-advanced_osmnx-example.py` (``osmnx-example.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:78
msgid "00:00.316"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:80
msgid ":ref:`sphx_glr_examples_99-advanced_ray-trace.py` (``ray-trace.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:81
msgid "00:00.270"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:83
msgid ""
":ref:`sphx_glr_examples_99-advanced_customization-trame-toolbar.py` "
"(``customization-trame-toolbar.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:84
msgid "00:00.191"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:86
msgid ""
":ref:`sphx_glr_examples_99-advanced_extending-pyvista.py` (``extending-"
"pyvista.py``)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sg_execution_times.rst:87
msgid "00:00.152"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_examples_99-advanced_sphere_eversion.py>` to download the"
" full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:24
msgid "Turning the sphere inside out"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:26
msgid ""
"There are several videos online talking about how a sphere can be turned "
"inside out in a continuous fashion, for instance in `this YouTube video "
"<https://www.youtube.com/watch?v=OI-To1eUtuU>`_.  Thanks to `an excellent "
"paper by Adam Bednorz and Witold Bednorz, Differential and its Applications "
"64, 59 (2019) <https://doi.org/10.1016/j.difgeo.2019.02.004>`_ (also "
"available `on arXiv <https://arxiv.org/abs/1711.10466>`_), we can plot this "
"so-called eversion of a sphere (turning it inside out without pinching or "
"tearing the surface, in other words by preserving its topology)."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:35
msgid ""
"The mathematics involved can seem a bit, well, involved. What matters is the"
" overall process visible in the animation: first the sphere is corrugated "
"and stretched out a bit to allow some legroom for the smooth transformation,"
" then the lobes are twisted around through each other, and the process is "
"reversed in order to unfold the sphere. It's not obvious that the "
"transformation is truly smooth; this was proved in the paper by Bednorz and "
"Bednorz."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:70
msgid ""
"Let's define the chain of mappings we'll need for implementing the eversion:"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:189
msgid ""
"Now chain the functions by performing the process in Table 1 of the paper. "
"Start from the bottom for ``t = -1/Q``, keep stepping up, linearly changing "
"parameters that change from row to row, then at the top go from ``t = -1/Q``"
" to ``t = 1/Q``, then go back from top to bottom. Save each frame to a GIF."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:194
msgid ""
"We make good use of the ``backface_params`` keyword parameter of "
":func:`pyvista.Plotter.add_mesh`, allowing us to plot the inside and the "
"outside with different colors."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:304
msgid ""
"Looking at the still image of the middle state with ``t = 0``, we see a nice"
" symmetric configuration where two \"inside\" and two \"outside\" lobes of "
"the sphere are visible."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:343
msgid "**Total running time of the script:** (0 minutes 41.006 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:354
msgid ""
":download:`Download Jupyter notebook: sphere_eversion.ipynb "
"<sphere_eversion.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/sphere_eversion.rst:358
msgid ""
":download:`Download Python source code: sphere_eversion.py "
"<sphere_eversion.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_99-advanced_warp-by-vector-"
"eigenmodes.py>` to download the full example code"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:23
msgid "Display Eigenmodes of Vibration"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:25
msgid ""
"This example applies the :func:`warp_by_vector "
"<pyvista.DataSetFilters.warp_by_vector>` filter to a cube whose eigenmodes "
"have been computed using the Ritz method, as outlined in Visscher, William "
"M., Albert Migliori, Thomas M. Bell, et Robert A. Reinert. \"On the normal "
"modes of free vibration of inhomogeneous and anisotropic elastic objects\". "
"The Journal of the Acoustical Society of America 90, n.4 (October 1991): "
"2154-62. https://asa.scitation.org/doi/10.1121/1.401643"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:35
msgid ""
"First, let's solve the eigenvalue problem for a vibrating cube. We use a "
"crude approximation (by choosing a low max polynomial order) to get a fast "
"computation."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:231
msgid "Now, let's display a mode on a mesh of the cube."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:313
msgid "Finally, let's make a gallery of the first 8 unique eigenmodes."
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:369
msgid "**Total running time of the script:** (0 minutes 6.436 seconds)"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:380
msgid ""
":download:`Download Jupyter notebook: warp-by-vector-eigenmodes.ipynb <warp-"
"by-vector-eigenmodes.ipynb>`"
msgstr ""

#: ../../pyvista/doc/source/examples/99-advanced/warp-by-vector-eigenmodes.rst:384
msgid ""
":download:`Download Python source code: warp-by-vector-eigenmodes.py <warp-"
"by-vector-eigenmodes.py>`"
msgstr ""

#: ../../pyvista/doc/source/examples/index.rst:6
msgid "Examples"
msgstr ""

#: ../../pyvista/doc/source/examples/index.rst:8
msgid ""
"Here is a gallery of several examples demonstrating what PyVista can do."
msgstr ""

#: ../../pyvista/doc/source/examples/index.rst:11
msgid "All of these examples are live and available on MyBinder."
msgstr ""

#: ../../pyvista/doc/source/examples/index.rst-1
msgid "Launch on Binder"
msgstr ""

#: ../../pyvista/doc/source/examples/sg_execution_times.rst:9
msgid "**00:00.000** total execution time for 0 files **from examples**:"
msgstr ""

#: ../../pyvista/doc/source/examples/sg_execution_times.rst:35
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:36
#: ../../pyvista/doc/source/examples/sg_execution_times.rst:37
msgid "N/A"
msgstr ""
