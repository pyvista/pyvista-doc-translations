
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/boolean-operations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_boolean-operations.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_boolean-operations.py:


Boolean Operations
~~~~~~~~~~~~~~~~~~

Perform boolean operations with closed surfaces (intersect, cut, etc.).

Boolean/topological operations (intersect, cut, etc.) methods are implemented
for :class:`pyvista.PolyData` mesh types only and are accessible directly from
any :class:`pyvista.PolyData` mesh. Check out :class:`pyvista.PolyDataFilters`
and take a look at the following filters:

* :func:`pyvista.PolyDataFilters.boolean_add`
* :func:`pyvista.PolyDataFilters.boolean_cut`
* :func:`pyvista.PolyDataFilters.boolean_difference`
* :func:`pyvista.PolyDataFilters.boolean_union`

For merging, the ``+`` operator can be used between any two meshes in PyVista
which simply calls the ``.merge()`` filter to combine any two meshes.
Similarly, the ``-`` operator can be used between any two :class:`pyvista.PolyData`
meshes in PyVista to cut the first mesh by the second.

.. GENERATED FROM PYTHON SOURCE LINES 22-41

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 6
    import pyvista as pv
    import numpy as np

    def make_cube():
        x = np.linspace(-0.5, 0.5, 25)
        grid = pv.StructuredGrid(*np.meshgrid(x, x, x))
        return grid.extract_surface().triangulate()

    # Create to example PolyData meshes for boolean operations
    sphere = pv.Sphere(radius=0.65, center=(0, 0, 0))
    cube = make_cube()

    p = pv.Plotter()
    p.add_mesh(sphere, color="yellow", opacity=0.5, show_edges=True)
    p.add_mesh(cube, color="royalblue", opacity=0.5, show_edges=True)
    p.show()




.. image:: /examples/01-filter/images/sphx_glr_boolean-operations_001.png
    :alt: boolean operations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(2.5043836950059895, 2.5043836950059895, 2.5043836950059895),
     (0.0, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 42-50

Boolean Add
+++++++++++

Add all of the two meshes together using the
:func:`pyvista.PolyDataFilters.boolean_add` filter or the ``+`` operator.

Order of operations does not matter for boolean add as the entirety of both
meshes are appended together.

.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: default


    add = sphere + cube
    add.plot(opacity=0.5, color=True, show_edges=True)





.. image:: /examples/01-filter/images/sphx_glr_boolean-operations_002.png
    :alt: boolean operations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(2.5043836950059895, 2.5043836950059895, 2.5043836950059895),
     (0.0, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 56-64

Boolean Cut
+++++++++++

Perform a boolean cut of ``a`` using ``b`` with the
:func:`pyvista.PolyDataFilters.boolean_cut` filter or the ``-`` operator
since both meshes are :class:`pyvista.PolyData`.

Order of operations does not matter for boolean cut.

.. GENERATED FROM PYTHON SOURCE LINES 64-72

.. code-block:: default


    cut = cube - sphere

    p = pv.Plotter()
    p.add_mesh(cut, opacity=0.5, show_edges=True, color=True)
    p.show()





.. image:: /examples/01-filter/images/sphx_glr_boolean-operations_003.png
    :alt: boolean operations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(2.5043836950059895, 2.5043836950059895, 2.5043836950059895),
     (0.0, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 73-81

Boolean Difference
++++++++++++++++++

Combine two meshes and retains only the volume in common between the meshes
using the :func:`pyvista.PolyDataFilters.boolean_difference` method.

Note that the order of operations for a boolean difference will affect the
results.

.. GENERATED FROM PYTHON SOURCE LINES 81-89

.. code-block:: default


    diff = sphere.boolean_difference(cube)

    p = pv.Plotter()
    p.add_mesh(diff, opacity=0.5, show_edges=True, color=True)
    p.show()





.. image:: /examples/01-filter/images/sphx_glr_boolean-operations_004.png
    :alt: boolean operations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(1.9318516525781368, 1.9318516525781368, 1.9318516525781368),
     (0.0, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    diff = cube.boolean_difference(sphere)

    p = pv.Plotter()
    p.add_mesh(diff, opacity=0.5, show_edges=True, color=True)
    p.show()




.. image:: /examples/01-filter/images/sphx_glr_boolean-operations_005.png
    :alt: boolean operations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(2.5043836950059895, 2.5043836950059895, 2.5043836950059895),
     (0.0, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 98-105

Boolean Union
+++++++++++++

Combine two meshes and attempts to create a manifold mesh using the
:func:`pyvista.PolyDataFilters.boolean_union` method.

Order of operations does not matter for boolean union.

.. GENERATED FROM PYTHON SOURCE LINES 105-111

.. code-block:: default


    union = sphere.boolean_union(cube)

    p = pv.Plotter()
    p.add_mesh(union,  opacity=0.5, show_edges=True, color=True)
    p.show()



.. image:: /examples/01-filter/images/sphx_glr_boolean-operations_006.png
    :alt: boolean operations
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(1.9318516525781368, 1.9318516525781368, 1.9318516525781368),
     (0.0, 0.0, 0.0),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.444 seconds)


.. _sphx_glr_download_examples_01-filter_boolean-operations.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: boolean-operations.py <boolean-operations.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: boolean-operations.ipynb <boolean-operations.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
