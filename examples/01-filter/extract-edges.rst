
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-filter/extract-edges.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-filter_extract-edges.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-filter_extract-edges.py:


Extract Edges
~~~~~~~~~~~~~

Extracts edges from a surface.

.. GENERATED FROM PYTHON SOURCE LINES 7-12

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 13-23

From vtk documentation, the edges of a mesh are one of the following:

1. boundary (used by one polygon) or a line cell
2. non-manifold (used by three or more polygons)
3. feature edges (edges used by two triangles and whose dihedral angle > feature_angle)
4. manifold edges (edges used by exactly two polygons).

This filter will extract those edges given a feature angle and return a dataset
with lines that represent the edges of the original mesh.
To demonstrate, we will first extract the edges around Queen Nefertiti's eyes:

.. GENERATED FROM PYTHON SOURCE LINES 23-38

.. code-block:: default


    # Load Queen Nefertiti mesh
    mesh = examples.download_nefertiti()

    # Extract the edges above a 12 degree feature angle
    edges = mesh.extract_feature_edges(12)

    # Render the edge lines on top of the original mesh
    p = pv.Plotter()
    p.add_mesh(mesh, color=True)
    p.add_mesh(edges, color="red", line_width=5)
    # Define a camera position that will zoom to her eye
    p.camera_position = [(96.0, -197.0, 45.0), (7.0, -109.0, 22.0), (0, 0, 1)]
    p.show()




.. image:: /examples/01-filter/images/sphx_glr_extract-edges_001.png
    :alt: extract edges
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(96.0, -197.0, 45.0),
     (7.0, -109.0, 22.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 39-41

We can do this analysis for any :class:`pyvista.PolyData` object. Let's try
the cow mesh example:

.. GENERATED FROM PYTHON SOURCE LINES 41-53

.. code-block:: default


    mesh = examples.download_cow()

    edges = mesh.extract_feature_edges(20)

    p = pv.Plotter()
    p.add_mesh(mesh, color=True)
    p.add_mesh(edges, color="red", line_width=5)
    p.camera_position = [(9.5, 3.0, 5.5), (2.5, 1, 0), (0, 1, 0)]
    p.show()





.. image:: /examples/01-filter/images/sphx_glr_extract-edges_002.png
    :alt: extract edges
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(9.5, 3.0, 5.5),
     (2.5, 1.0, 0.0),
     (0.0, 1.0, 0.0)]



.. GENERATED FROM PYTHON SOURCE LINES 54-57

We can leverage the :any:`pyvista.PolyData.n_open_edges` property and
:func:`pyvista.PolyDataFilters.extract_feature_edges` filter to count and extract the
open edges on a :class:`pyvista.PolyData` mesh.

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default


    # Download a sample surface mesh with visible open edges
    mesh = examples.download_bunny()








.. GENERATED FROM PYTHON SOURCE LINES 62-63

We can get a count of the open edges with:

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default

    mesh.n_open_edges






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    223



.. GENERATED FROM PYTHON SOURCE LINES 67-69

And we can extract those edges with the ``boundary_edges`` option of
:func:`pyvista.PolyDataFilters.extract_feature_edges`:

.. GENERATED FROM PYTHON SOURCE LINES 69-78

.. code-block:: default

    edges = mesh.extract_feature_edges(boundary_edges=True,
                               feature_edges=False,
                               manifold_edges=False)

    p = pv.Plotter()
    p.add_mesh(mesh, color=True)
    p.add_mesh(edges, color="red", line_width=5)
    p.camera_position = [(-0.2, -0.13, 0.12), (-0.015, 0.10, -0.0), (0.28, 0.26, 0.9)]
    p.show()



.. image:: /examples/01-filter/images/sphx_glr_extract-edges_003.png
    :alt: extract edges
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(-0.2, -0.13, 0.12),
     (-0.015, 0.1, 0.0),
     (0.2863710324052292, 0.2659159586619985, 0.9204783184453794)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.795 seconds)


.. _sphx_glr_download_examples_01-filter_extract-edges.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: extract-edges.py <extract-edges.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: extract-edges.ipynb <extract-edges.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
